
Cullinan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e6  00800200  0000bf1e  0000bfd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000bf1e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000591  008004e6  008004e6  0000c2b8  2**0
                  ALLOC
  3 .eeprom       0000003a  00810000  00810000  0000c2b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000002c0  00000000  00000000  0000c2f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000daa  00000000  00000000  0000c5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bd51  00000000  00000000  0000d35c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028fd  00000000  00000000  000190ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006436  00000000  00000000  0001b9aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a50  00000000  00000000  00021de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cac  00000000  00000000  00022830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000244dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macinfo 00062013  00000000  00000000  00024caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00086cbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__ctors_end>
       4:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
       8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
       c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      10:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      14:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      18:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      1c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      20:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      24:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      28:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      2c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      30:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      34:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      38:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      3c:	0c 94 5a 49 	jmp	0x92b4	; 0x92b4 <__vector_15>
      40:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      44:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      48:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      4c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      50:	0c 94 16 49 	jmp	0x922c	; 0x922c <__vector_20>
      54:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      58:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      5c:	0c 94 d2 48 	jmp	0x91a4	; 0x91a4 <__vector_23>
      60:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      64:	0c 94 50 4c 	jmp	0x98a0	; 0x98a0 <__vector_25>
      68:	0c 94 c3 4e 	jmp	0x9d86	; 0x9d86 <__vector_26>
      6c:	0c 94 d5 4a 	jmp	0x95aa	; 0x95aa <__vector_27>
      70:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      74:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      78:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      7c:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      80:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      84:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      88:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      8c:	0c 94 9e 49 	jmp	0x933c	; 0x933c <__vector_35>
      90:	0c 94 0f 4c 	jmp	0x981e	; 0x981e <__vector_36>
      94:	0c 94 67 4e 	jmp	0x9cce	; 0x9cce <__vector_37>
      98:	0c 94 03 4b 	jmp	0x9606	; 0x9606 <__vector_38>
      9c:	0c 94 2f 47 	jmp	0x8e5e	; 0x8e5e <__vector_39>
      a0:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      a4:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      a8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      ac:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      b0:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      b4:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      b8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      bc:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      c0:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      c4:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      c8:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__bad_interrupt>
      cc:	0c 94 ce 4b 	jmp	0x979c	; 0x979c <__vector_51>
      d0:	0c 94 0b 4e 	jmp	0x9c16	; 0x9c16 <__vector_52>
      d4:	0c 94 31 4b 	jmp	0x9662	; 0x9662 <__vector_53>
      d8:	0c 94 8d 4b 	jmp	0x971a	; 0x971a <__vector_54>
      dc:	0c 94 af 4d 	jmp	0x9b5e	; 0x9b5e <__vector_55>
      e0:	0c 94 5f 4b 	jmp	0x96be	; 0x96be <__vector_56>

000000e4 <AT_OK>:
      e4:	0d 0a 4f 4b 0d 0a 00                                ..OK...

000000eb <AT_RDY>:
      eb:	3e 00                                               >.

000000ed <AT_NONE>:
	...

000000ee <AT_SEND_OK>:
      ee:	53 45 4e 44 20 4f 4b 00                             SEND OK.

000000f6 <AT_CONNECT>:
      f6:	43 4f 4e 4e 45 43 54 20 4f 4b 00                    CONNECT OK.

00000101 <AT_ERROR>:
     101:	45 52 52 4f 52 00                                   ERROR.

00000107 <AT_DATA>:
     107:	0d 0a 00                                            ...

0000010a <SIM_RDY>:
     10a:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

00000117 <_ZZN6CModem14GetUnSolicitedEvE3__c_4>:
     117:	0a 0d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ..==============
     127:	3d 20 45 4e 44 20 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     = END ==========
     137:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 0d 00     =============...

00000147 <_ZZN6CModem14GetUnSolicitedEvE3__c_3>:
     147:	0a 0d 20 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     .. =============
     157:	3d 52 45 43 45 49 56 45 44 20 53 54 52 49 4e 47     =RECEIVED STRING
     167:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 0d 00     =============...

00000177 <_ZZN6CModem14GetUnSolicitedEvE3__c_2>:
     177:	2b 49 50 44 00                                      +IPD.

0000017c <_ZZN6CModem14GetUnSolicitedEvE3__c_1>:
     17c:	2b 43 4d 45 00                                      +CME.

00000181 <_ZZN6CModem14GetUnSolicitedEvE3__c_0>:
     181:	2b 43 4d 54 49 3a 20 22 53 4d 22 2c 00              +CMTI: "SM",.

0000018e <_ZZN6CModem14GetUnSolicitedEvE3__c>:
     18e:	43 4f 4e 4e 45 43 54 20 46 41 49 4c 00              CONNECT FAIL.

0000019b <_ZZN6CModem7ServiceEvE3__c_39>:
     19b:	41 54 44 2a 31 30 30 23 0d 00                       ATD*100#..

000001a5 <_ZZN6CModem7ServiceEvE3__c_38>:
     1a5:	41 54 2b 43 49 50 53 48 55 54 0d 00                 AT+CIPSHUT..

000001b1 <_ZZN6CModem7ServiceEvE3__c_37>:
     1b1:	1a 0d 00                                            ...

000001b4 <_ZZN6CModem7ServiceEvE3__c_36>:
     1b4:	41 54 2b 43 49 46 53 52 0d 00                       AT+CIFSR..

000001be <_ZZN6CModem7ServiceEvE3__c_35>:
     1be:	41 54 2b 43 49 49 43 52 0d 00                       AT+CIICR..

000001c8 <_ZZN6CModem7ServiceEvE3__c_34>:
     1c8:	41 54 2b 43 53 54 54 3d 22 69 6e 74 65 72 6e 65     AT+CSTT="interne
     1d8:	74 22 2c 22 22 2c 22 22 0d 00                       t","",""..

000001e2 <_ZZN6CModem7ServiceEvE3__c_33>:
     1e2:	41 54 2b 43 4c 50 4f 52 54 3d 22 54 43 50 22 2c     AT+CLPORT="TCP",
     1f2:	22 00                                               ".

000001f4 <_ZZN6CModem7ServiceEvE3__c_32>:
     1f4:	22 0d 00                                            "..

000001f7 <_ZZN6CModem7ServiceEvE3__c_31>:
     1f7:	41 54 2b 43 44 4e 53 43 46 47 3d 22 00              AT+CDNSCFG=".

00000204 <_ZZN6CModem7ServiceEvE3__c_30>:
     204:	41 54 2b 43 44 4e 53 4f 52 49 50 3d 30 0d 00        AT+CDNSORIP=0..

00000213 <_ZZN6CModem7ServiceEvE3__c_29>:
     213:	41 54 2b 43 44 4e 53 4f 52 49 50 3d 31 0d 00        AT+CDNSORIP=1..

00000222 <_ZZN6CModem7ServiceEvE3__c_28>:
     222:	41 54 2b 43 49 50 53 52 49 50 3d 30 0d 00           AT+CIPSRIP=0..

00000230 <_ZZN6CModem7ServiceEvE3__c_27>:
     230:	41 54 2b 43 47 44 43 4f 4e 54 3d 31 2c 22 49 50     AT+CGDCONT=1,"IP
     240:	22 2c 22 69 6e 74 65 72 6e 65 74 22 0d 00           ","internet"..

0000024e <_ZZN6CModem7ServiceEvE3__c_26>:
     24e:	1b 00                                               ..

00000250 <_ZZN6CModem7ServiceEvE3__c_25>:
     250:	1a 00                                               ..

00000252 <_ZZN6CModem7ServiceEvE3__c_24>:
     252:	22 0d 00                                            "..

00000255 <_ZZN6CModem7ServiceEvE3__c_23>:
     255:	41 54 2b 43 4d 47 53 3d 22 00                       AT+CMGS=".

0000025f <_ZZN6CModem7ServiceEvE3__c_22>:
     25f:	0d 00                                               ..

00000261 <_ZZN6CModem7ServiceEvE3__c_21>:
     261:	41 54 2b 43 4d 47 52 3d 00                          AT+CMGR=.

0000026a <_ZZN6CModem7ServiceEvE3__c_20>:
     26a:	53 54 41 54 45 3a 20 50 44 50 20 44 45 41 43 54     STATE: PDP DEACT
	...

0000027b <_ZZN6CModem7ServiceEvE3__c_19>:
     27b:	49 50 20 43 4c 4f 53 45 00                          IP CLOSE.

00000284 <_ZZN6CModem7ServiceEvE3__c_18>:
     284:	49 4e 49 54 49 41 4c 00                             INITIAL.

0000028c <_ZZN6CModem7ServiceEvE3__c_17>:
     28c:	41 54 2b 43 49 50 53 54 41 54 55 53 0d 00           AT+CIPSTATUS..

0000029a <_ZZN6CModem7ServiceEvE3__c_16>:
     29a:	0a 0d 53 49 4d 43 41 52 44 20 52 45 47 49 53 54     ..SIMCARD REGIST
     2aa:	52 41 54 49 4f 4e 20 46 41 49 4c 45 44 21 21 00     RATION FAILED!!.

000002ba <_ZZN6CModem7ServiceEvE3__c_15>:
     2ba:	2b 43 52 45 47 3a 20 30 2c 31 00                    +CREG: 0,1.

000002c5 <_ZZN6CModem7ServiceEvE3__c_14>:
     2c5:	41 54 2b 43 52 45 47 3f 0d 00                       AT+CREG?..

000002cf <_ZZN6CModem7ServiceEvE3__c_13>:
     2cf:	0d 00                                               ..

000002d1 <_ZZN6CModem7ServiceEvE3__c_12>:
     2d1:	41 54 2b 43 50 49 4e 3d 00                          AT+CPIN=.

000002da <_ZZN6CModem7ServiceEvE3__c_11>:
     2da:	0a 0d 4e 4f 20 53 49 4d 43 41 52 44 21 21 00        ..NO SIMCARD!!.

000002e9 <_ZZN6CModem7ServiceEvE3__c_10>:
     2e9:	2b 43 4d 45 20 45 52 52 4f 52 00                    +CME ERROR.

000002f4 <_ZZN6CModem7ServiceEvE3__c_9>:
     2f4:	2b 43 50 49 4e 3a 20 53 49 4d 20 50 49 4e 00        +CPIN: SIM PIN.

00000303 <_ZZN6CModem7ServiceEvE3__c_8>:
     303:	2b 43 50 49 4e 3a 20 52 45 41 44 59 00              +CPIN: READY.

00000310 <_ZZN6CModem7ServiceEvE3__c_7>:
     310:	41 54 2b 43 50 49 4e 3f 0d 00                       AT+CPIN?..

0000031a <_ZZN6CModem7ServiceEvE3__c_6>:
     31a:	0a 0d 53 49 47 4e 41 4c 20 53 54 52 45 4e 47 48     ..SIGNAL STRENGH
     32a:	54 20 54 4f 4f 20 4c 4f 57 21 21 00                 T TOO LOW!!.

00000336 <_ZZN6CModem7ServiceEvE3__c_5>:
     336:	41 54 2b 43 53 51 0d 00                             AT+CSQ..

0000033e <_ZZN6CModem7ServiceEvE3__c_4>:
     33e:	41 54 2b 43 4d 47 46 3d 31 0d 00                    AT+CMGF=1..

00000349 <_ZZN6CModem7ServiceEvE3__c_3>:
     349:	41 54 2b 43 49 50 48 45 41 44 3d 31 0d 00           AT+CIPHEAD=1..

00000357 <_ZZN6CModem7ServiceEvE3__c_2>:
     357:	41 54 2b 43 43 4c 4b 0d 00                          AT+CCLK..

00000360 <_ZZN6CModem7ServiceEvE3__c_1>:
     360:	41 54 0d 00                                         AT..

00000364 <_ZZN6CModem7ServiceEvE3__c_0>:
     364:	41 54 45 30 0d 00                                   ATE0..

0000036a <_ZZN6CModem7ServiceEvE3__c>:
     36a:	0a 0d 4d 44 4d 5f 53 54 41 52 54 55 50 00           ..MDM_STARTUP.

00000378 <_ZZN11CCONTROLLER11CController15TagTableServiceEvE3__c_1>:
     378:	0a 0d 4c 6f 73 74 20 54 61 67 20 55 70 6c 6f 61     ..Lost Tag Uploa
     388:	64 20 49 73 73 75 65 64 00                          d Issued.

00000391 <_ZZN11CCONTROLLER11CController15TagTableServiceEvE3__c_0>:
     391:	0a 0d 20 44 75 72 65 73 73 20 55 70 6c 6f 61 64     .. Duress Upload
     3a1:	20 49 73 73 75 65 64 00                              Issued.

000003a9 <_ZZN11CCONTROLLER11CController15TagTableServiceEvE3__c>:
     3a9:	0a 0d 20 21 21 20 4e 65 77 20 54 61 67 20 55 70     .. !! New Tag Up
     3b9:	6c 6f 61 64 20 49 73 73 75 65 64 20 21 21 00        load Issued !!.

000003c8 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_10>:
     3c8:	0d 0a 20 3d 3d 3d 3d 3e 50 52 4f 47 52 41 4d 20     .. ====>PROGRAM 
     3d8:	50 48 4f 4e 45 20 4e 55 4d 42 45 52 20 32 20 4f     PHONE NUMBER 2 O
     3e8:	4b 0a 0d 00                                         K...

000003ec <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_9>:
     3ec:	4e 55 4d 32 28 00                                   NUM2(.

000003f2 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_8>:
     3f2:	0d 0a 20 3d 3d 3d 3d 3e 50 52 4f 47 52 41 4d 20     .. ====>PROGRAM 
     402:	50 48 4f 4e 45 20 4e 55 4d 42 45 52 31 20 4f 4b     PHONE NUMBER1 OK
     412:	20 0a 0d 00                                          ...

00000416 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_7>:
     416:	4e 55 4d 31 28 00                                   NUM1(.

0000041c <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_6>:
     41c:	0d 0a 20 3d 3d 3d 3d 3e 44 49 53 41 42 4c 45 20     .. ====>DISABLE 
     42c:	53 4d 53 0a 0d 00                                   SMS...

00000432 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_5>:
     432:	53 4d 53 28 44 29 53 4d 53 00                       SMS(D)SMS.

0000043c <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_4>:
     43c:	0d 0a 20 3d 3d 3d 3e 20 45 4e 41 42 4c 45 20 53     .. ===> ENABLE S
     44c:	4d 53 0a 0d 00                                      MS...

00000451 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_3>:
     451:	53 4d 53 28 45 29 53 4d 53 00                       SMS(E)SMS.

0000045b <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_2>:
     45b:	0d 0a 20 44 49 53 41 42 4c 45 20 53 4d 53 0a 0d     .. DISABLE SMS..
	...

0000046c <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_1>:
     46c:	53 4d 53 28 44 29 53 4d 53 00                       SMS(D)SMS.

00000476 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c_0>:
     476:	0d 0a 20 45 4e 41 42 4c 45 20 53 4d 53 0a 0d 00     .. ENABLE SMS...

00000486 <_ZZN11CCONTROLLER11CController12HandleRxDataEvE3__c>:
     486:	53 4d 53 28 45 29 53 4d 53 00                       SMS(E)SMS.

00000490 <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_6>:
     490:	0a 0d 3d 3d 3d 3d 3d 54 41 47 53 20 53 65 65 6e     ..=====TAGS Seen
     4a0:	20 3a 3d 3d 3d 3d 3d 0a 0d 00                        :=====...

000004aa <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_5>:
     4aa:	0a 0d 4f 4b 00                                      ..OK.

000004af <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_4>:
     4af:	0a 0d 53 65 74 20 53 49 4d 31 20 50 49 4e 0a 0d     ..Set SIM1 PIN..
	...

000004c0 <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_3>:
     4c0:	0a 0d 45 58 49 54 0a 0d 00                          ..EXIT...

000004c9 <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_2>:
     4c9:	0a 0d 43 4f 4d 4d 41 4e 44 20 00                    ..COMMAND .

000004d4 <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_1>:
     4d4:	0a 0d 53 65 74 20 53 65 72 76 65 72 20 49 50 20     ..Set Server IP 
     4e4:	41 64 64 72 65 73 73 20 3a 20 78 78 78 2e 79 79     Address : xxx.yy
     4f4:	79 2e 7a 7a 7a 3a 70 6f 72 74 3a 64 6e 73 0a 0d     y.zzz:port:dns..
	...

00000505 <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c_0>:
     505:	0a 0d 53 65 72 76 65 72 20 49 50 20 41 64 64 72     ..Server IP Addr
     515:	65 73 73 20 3a 20 00                                ess : .

0000051c <_ZZN11CCONTROLLER11CController14consoleServiceEvE3__c>:
     51c:	0a 0d 00                                            ...

0000051f <_ZZN11CCONTROLLER11CController5SetupEvE3__c_27>:
     51f:	0a 0d 53 65 74 20 53 65 72 76 65 72 20 49 50 20     ..Set Server IP 
     52f:	41 64 64 72 65 73 73 20 3a 20 78 78 78 2e 79 79     Address : xxx.yy
     53f:	79 2e 7a 7a 7a 3a 70 6f 72 74 3a 64 6e 73 0a 0d     y.zzz:port:dns..
	...

00000550 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_26>:
     550:	0a 0d 53 65 72 76 65 72 20 49 50 20 41 64 64 72     ..Server IP Addr
     560:	65 73 73 20 3a 20 00                                ess : .

00000567 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_25>:
     567:	0a 0d 46 69 6e 69 73 68 65 64 00                    ..Finished.

00000572 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_24>:
     572:	0a 0d 53 65 74 20 4d 69 6e 75 74 65 73 00           ..Set Minutes.

00000580 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_23>:
     580:	0a 0d 53 65 74 20 48 6f 75 72 00                    ..Set Hour.

0000058b <_ZZN11CCONTROLLER11CController5SetupEvE3__c_22>:
     58b:	0a 0d 53 65 74 20 44 61 79 20 5b 31 2d 37 5d 00     ..Set Day [1-7].

0000059b <_ZZN11CCONTROLLER11CController5SetupEvE3__c_21>:
     59b:	0a 0d 53 65 74 20 44 61 74 65 00                    ..Set Date.

000005a6 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_20>:
     5a6:	0a 0d 53 65 74 20 4d 6f 6e 74 68 00                 ..Set Month.

000005b2 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_19>:
     5b2:	0a 0d 53 65 74 20 59 65 61 72 00                    ..Set Year.

000005bd <_ZZN11CCONTROLLER11CController5SetupEvE3__c_18>:
     5bd:	0a 0d 53 65 74 20 54 69 6d 65 20 26 20 44 61 74     ..Set Time & Dat
     5cd:	65 00                                               e.

000005cf <_ZZN11CCONTROLLER11CController5SetupEvE3__c_17>:
     5cf:	0a 0d 00                                            ...

000005d2 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_16>:
     5d2:	0a 0d 54 09 3a 20 53 65 74 20 54 69 6d 65 20 26     ..T.: Set Time &
     5e2:	20 44 61 74 65 00                                    Date.

000005e8 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_15>:
     5e8:	0a 0d 74 09 3a 20 47 65 74 20 54 69 6d 65 00        ..t.: Get Time.

000005f7 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_14>:
     5f7:	0a 0d 41 09 3a 20 53 65 74 20 53 65 72 76 65 72     ..A.: Set Server
     607:	20 49 50 20 41 64 64 72 65 73 73 00                  IP Address.

00000613 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_13>:
     613:	0a 0d 61 09 3a 20 47 65 74 20 53 65 72 76 65 72     ..a.: Get Server
     623:	20 49 50 20 41 64 64 72 65 73 73 00                  IP Address.

0000062f <_ZZN11CCONTROLLER11CController5SetupEvE3__c_12>:
     62f:	0a 0d 57 09 3a 20 53 65 74 20 53 69 74 65 20 49     ..W.: Set Site I
     63f:	44 00                                               D.

00000641 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_11>:
     641:	0a 0d 77 09 3a 20 47 65 74 20 53 69 74 65 20 49     ..w.: Get Site I
     651:	44 00                                               D.

00000653 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_10>:
     653:	0a 0d 6e 09 3a 20 53 65 74 20 53 4d 53 20 50 68     ..n.: Set SMS Ph
     663:	6f 6e 65 4e 75 6d 62 65 72 00                       oneNumber.

0000066d <_ZZN11CCONTROLLER11CController5SetupEvE3__c_9>:
     66d:	0a 0d 67 09 3a 20 47 65 74 20 53 4d 53 20 50 68     ..g.: Get SMS Ph
     67d:	6f 6e 65 4e 75 6d 62 65 72 73 00                    oneNumbers.

00000688 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_8>:
     688:	0a 0d 09 20 50 72 65 73 73 20 6b 65 79 20 74 6f     ... Press key to
     698:	20 73 65 74 75 70 20 44 65 76 69 63 65 20 2d 20      setup Device - 
     6a8:	78 20 74 6f 20 65 78 69 74 00                       x to exit.

000006b2 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_7>:
     6b2:	0a 0d 54 09 3a 20 53 65 74 20 54 69 6d 65 20 26     ..T.: Set Time &
     6c2:	20 44 61 74 65 00                                    Date.

000006c8 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_6>:
     6c8:	0a 0d 74 09 3a 20 47 65 74 20 54 69 6d 65 00        ..t.: Get Time.

000006d7 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_5>:
     6d7:	0a 0d 41 09 3a 20 53 65 74 20 53 65 72 76 65 72     ..A.: Set Server
     6e7:	20 49 50 20 41 64 64 72 65 73 73 00                  IP Address.

000006f3 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_4>:
     6f3:	0a 0d 61 09 3a 20 47 65 74 20 53 65 72 76 65 72     ..a.: Get Server
     703:	20 49 50 20 41 64 64 72 65 73 73 00                  IP Address.

0000070f <_ZZN11CCONTROLLER11CController5SetupEvE3__c_3>:
     70f:	0a 0d 57 09 3a 20 53 65 74 20 53 69 74 65 20 49     ..W.: Set Site I
     71f:	44 00                                               D.

00000721 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_2>:
     721:	0a 0d 77 09 3a 20 47 65 74 20 53 69 74 65 20 49     ..w.: Get Site I
     731:	44 00                                               D.

00000733 <_ZZN11CCONTROLLER11CController5SetupEvE3__c_1>:
     733:	0a 0d 6e 09 3a 20 53 65 74 20 53 4d 53 20 50 68     ..n.: Set SMS Ph
     743:	6f 6e 65 4e 75 6d 62 65 72 00                       oneNumber.

0000074d <_ZZN11CCONTROLLER11CController5SetupEvE3__c_0>:
     74d:	0a 0d 67 09 3a 20 47 65 74 20 53 4d 53 20 50 68     ..g.: Get SMS Ph
     75d:	6f 6e 65 4e 75 6d 62 65 72 73 00                    oneNumbers.

00000768 <_ZZN11CCONTROLLER11CController5SetupEvE3__c>:
     768:	0a 0d 20 3d 3d 3d 20 46 69 72 73 74 20 53 65 74     .. === First Set
     778:	20 50 68 6f 6e 65 20 4e 75 6d 62 65 72 20 61 6e      Phone Number an
     788:	64 20 53 69 74 65 20 49 44 20 3d 3d 3d 20 0a 0d     d Site ID === ..
	...

00000799 <_ZZ4menuvE3__c_17>:
     799:	0a 0d 76 09 3a 20 47 65 74 20 4d 6f 64 65 6d 20     ..v.: Get Modem 
     7a9:	54 69 6d 65 00                                      Time.

000007ae <_ZZ4menuvE3__c_16>:
     7ae:	0a 0d 54 09 3a 20 47 65 74 20 54 69 6d 65 00        ..T.: Get Time.

000007bd <_ZZ4menuvE3__c_15>:
     7bd:	0a 0d 41 09 3a 20 53 65 74 20 53 65 72 76 65 72     ..A.: Set Server
     7cd:	20 49 50 20 41 64 64 72 65 73 73 00                  IP Address.

000007d9 <_ZZ4menuvE3__c_14>:
     7d9:	0a 0d 61 09 3a 20 47 65 74 20 53 65 72 76 65 72     ..a.: Get Server
     7e9:	20 49 50 20 41 64 64 72 65 73 73 00                  IP Address.

000007f5 <_ZZ4menuvE3__c_13>:
     7f5:	0a 0d 57 09 3a 20 53 65 74 20 53 69 74 65 20 49     ..W.: Set Site I
     805:	44 00                                               D.

00000807 <_ZZ4menuvE3__c_12>:
     807:	0a 0d 77 09 3a 20 47 65 74 20 53 69 74 65 20 49     ..w.: Get Site I
     817:	44 00                                               D.

00000819 <_ZZ4menuvE3__c_11>:
     819:	0a 0d 7a 09 3a 20 52 65 73 74 61 72 74 20 4d 6f     ..z.: Restart Mo
     829:	64 65 6d 20 54 43 50 20 49 50 20 53 74 61 63 6b     dem TCP IP Stack
	...

0000083a <_ZZ4menuvE3__c_10>:
     83a:	0a 0d 78 09 3a 20 52 65 73 74 61 72 74 20 4d 6f     ..x.: Restart Mo
     84a:	64 65 6d 00                                         dem.

0000084e <_ZZ4menuvE3__c_9>:
     84e:	0a 0d 70 09 3a 20 53 65 74 20 50 49 4e 20 66 6f     ..p.: Set PIN fo
     85e:	72 20 53 49 4d 20 31 00                             r SIM 1.

00000866 <_ZZ4menuvE3__c_8>:
     866:	0a 0d 6e 09 3a 20 53 65 74 20 53 4d 53 20 50 68     ..n.: Set SMS Ph
     876:	6f 6e 65 4e 75 6d 62 65 72 00                       oneNumber.

00000880 <_ZZ4menuvE3__c_7>:
     880:	0a 0d 67 09 3a 20 47 65 74 20 53 4d 53 20 50 68     ..g.: Get SMS Ph
     890:	6f 6e 65 4e 75 6d 62 65 72 73 00                    oneNumbers.

0000089b <_ZZ4menuvE3__c_6>:
     89b:	0a 0d 64 09 3a 20 53 65 6e 64 20 54 65 73 74 20     ..d.: Send Test 
     8ab:	44 61 74 61 20 74 6f 20 53 65 72 76 65 72 20 74     Data to Server t
     8bb:	61 67 3d 31 32 33 00                                ag=123.

000008c2 <_ZZ4menuvE3__c_5>:
     8c2:	0a 0d 24 09 3a 20 43 68 65 63 6b 20 53 69 6d 63     ..$.: Check Simc
     8d2:	61 72 64 20 42 61 6c 61 6e 63 65 00                 ard Balance.

000008de <_ZZ4menuvE3__c_4>:
     8de:	0a 0d 63 09 3a 20 43 68 65 63 6b 20 53 69 6d 63     ..c.: Check Simc
     8ee:	61 72 64 00                                         ard.

000008f2 <_ZZ4menuvE3__c_3>:
     8f2:	0a 0d 73 09 3a 20 53 65 6e 64 20 54 65 73 74 20     ..s.: Send Test 
     902:	53 4d 53 00                                         SMS.

00000906 <_ZZ4menuvE3__c_2>:
     906:	0a 0d 69 09 3a 20 47 65 74 20 74 68 65 20 49 50     ..i.: Get the IP
     916:	20 73 74 61 74 75 73 00                              status.

0000091e <_ZZ4menuvE3__c_1>:
     91e:	0a 0d 71 09 3a 20 47 65 74 53 69 67 6e 61 6c 51     ..q.: GetSignalQ
     92e:	75 61 6c 69 74 79 00                                uality.

00000935 <_ZZ4menuvE3__c_0>:
     935:	0a 0d 74 09 3a 20 44 69 73 70 6c 61 79 20 54 61     ..t.: Display Ta
     945:	67 73 20 46 6f 75 6e 64 00                          gs Found.

0000094e <_ZZ4menuvE3__c>:
     94e:	0a 0a 0d 09 09 4d 45 4e 55 00                       .....MENU.

00000958 <_ZZ4mainE3__c_1>:
     958:	0a 0d 20 20 3d 3d 3d 3d 3d 20 43 55 4c 4c 49 4e     ..  ===== CULLIN
     968:	41 4e 20 52 46 49 44 20 4d 41 4e 41 47 45 52 20     AN RFID MANAGER 
     978:	56 31 2e 35 20 44 45 4d 4f 20 3d 3d 3d 3d 3d 20     V1.5 DEMO ===== 
     988:	0a 0d 00                                            ...

0000098b <_ZZ4mainE3__c_0>:
     98b:	1b 5b 30 3b 30 48 00                                .[0;0H.

00000992 <_ZZ4mainE3__c>:
     992:	1b 5b 32 4a 00 00                                   .[2J..

00000998 <__ctors_start>:
     998:	42 3e       	cpi	r20, 0xE2	; 226

0000099a <__ctors_end>:
     99a:	11 24       	eor	r1, r1
     99c:	1f be       	out	0x3f, r1	; 63
     99e:	cf ef       	ldi	r28, 0xFF	; 255
     9a0:	d1 e2       	ldi	r29, 0x21	; 33
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	cd bf       	out	0x3d, r28	; 61

000009a6 <__do_copy_data>:
     9a6:	14 e0       	ldi	r17, 0x04	; 4
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b2 e0       	ldi	r27, 0x02	; 2
     9ac:	ee e1       	ldi	r30, 0x1E	; 30
     9ae:	ff eb       	ldi	r31, 0xBF	; 191
     9b0:	00 e0       	ldi	r16, 0x00	; 0
     9b2:	0b bf       	out	0x3b, r16	; 59
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__do_copy_data+0x14>
     9b6:	07 90       	elpm	r0, Z+
     9b8:	0d 92       	st	X+, r0
     9ba:	a6 3e       	cpi	r26, 0xE6	; 230
     9bc:	b1 07       	cpc	r27, r17
     9be:	d9 f7       	brne	.-10     	; 0x9b6 <__do_copy_data+0x10>

000009c0 <__do_clear_bss>:
     9c0:	1a e0       	ldi	r17, 0x0A	; 10
     9c2:	a6 ee       	ldi	r26, 0xE6	; 230
     9c4:	b4 e0       	ldi	r27, 0x04	; 4
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <.do_clear_bss_start>

000009c8 <.do_clear_bss_loop>:
     9c8:	1d 92       	st	X+, r1

000009ca <.do_clear_bss_start>:
     9ca:	a7 37       	cpi	r26, 0x77	; 119
     9cc:	b1 07       	cpc	r27, r17
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <.do_clear_bss_loop>

000009d0 <__do_global_ctors>:
     9d0:	19 e0       	ldi	r17, 0x09	; 9
     9d2:	ca e9       	ldi	r28, 0x9A	; 154
     9d4:	d9 e0       	ldi	r29, 0x09	; 9
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <.do_global_ctors_start>

000009d8 <.do_global_ctors_loop>:
     9d8:	22 97       	sbiw	r28, 0x02	; 2
     9da:	fe 01       	movw	r30, r28
     9dc:	0e 94 3b 5a 	call	0xb476	; 0xb476 <__tablejump__>

000009e0 <.do_global_ctors_start>:
     9e0:	c8 39       	cpi	r28, 0x98	; 152
     9e2:	d1 07       	cpc	r29, r17
     9e4:	c9 f7       	brne	.-14     	; 0x9d8 <.do_global_ctors_loop>
     9e6:	0e 94 4f 3e 	call	0x7c9e	; 0x7c9e <main>
     9ea:	0c 94 8d 5f 	jmp	0xbf1a	; 0xbf1a <_exit>

000009ee <__bad_interrupt>:
     9ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009f2 <_ZL12__iCliRetValv>:
{
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
{
    cli();
     9fa:	f8 94       	cli
    return 1;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
}
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	08 95       	ret

00000a04 <_ZL10__iRestorePKh>:
    cli();
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	00 d0       	rcall	.+0      	; 0xa0a <_ZL10__iRestorePKh+0x6>
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	89 83       	std	Y+1, r24	; 0x01
{
    SREG = *__s;
     a12:	ef e5       	ldi	r30, 0x5F	; 95
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	a9 81       	ldd	r26, Y+1	; 0x01
     a18:	ba 81       	ldd	r27, Y+2	; 0x02
     a1a:	8c 91       	ld	r24, X
     a1c:	80 83       	st	Z, r24
    __asm__ volatile ("" ::: "memory");
}
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	08 95       	ret

00000a28 <_ZN6CModem16GetSignalQualityEv>:
  } else {
    return false;
  }
}
/*******************************************************************************/
bool CModem::GetSignalQuality(void) {
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <_ZN6CModem16GetSignalQualityEv+0x6>
     a2e:	0f 92       	push	r0
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	9a 83       	std	Y+2, r25	; 0x02
     a36:	89 83       	std	Y+1, r24	; 0x01
  if (mdmState == MDM_READY) {
     a38:	e9 81       	ldd	r30, Y+1	; 0x01
     a3a:	fa 81       	ldd	r31, Y+2	; 0x02
     a3c:	80 81       	ld	r24, Z
     a3e:	8a 30       	cpi	r24, 0x0A	; 10
     a40:	39 f4       	brne	.+14     	; 0xa50 <_ZN6CModem16GetSignalQualityEv+0x28>
    mdmState = MDM_GET_SIGNAL_STRENGHT;
     a42:	e9 81       	ldd	r30, Y+1	; 0x01
     a44:	fa 81       	ldd	r31, Y+2	; 0x02
     a46:	82 e1       	ldi	r24, 0x12	; 18
     a48:	80 83       	st	Z, r24
    return true;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	8b 83       	std	Y+3, r24	; 0x03
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <_ZN6CModem16GetSignalQualityEv+0x2a>
  } else {
    return false;
     a50:	1b 82       	std	Y+3, r1	; 0x03
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
  }
}
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <_ZN6CModem13SIMCheckReadyEv>:
/*******************************************************************************/
bool CModem::SIMCheckReady(void) {
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	00 d0       	rcall	.+0      	; 0xa66 <_ZN6CModem13SIMCheckReadyEv+0x6>
     a66:	0f 92       	push	r0
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	9a 83       	std	Y+2, r25	; 0x02
     a6e:	89 83       	std	Y+1, r24	; 0x01
  if (mdmState == MDM_READY) {
     a70:	e9 81       	ldd	r30, Y+1	; 0x01
     a72:	fa 81       	ldd	r31, Y+2	; 0x02
     a74:	80 81       	ld	r24, Z
     a76:	8a 30       	cpi	r24, 0x0A	; 10
     a78:	39 f4       	brne	.+14     	; 0xa88 <_ZN6CModem13SIMCheckReadyEv+0x28>
    mdmState = MDM_GET_SIMCARD_STATUS;
     a7a:	e9 81       	ldd	r30, Y+1	; 0x01
     a7c:	fa 81       	ldd	r31, Y+2	; 0x02
     a7e:	8c e0       	ldi	r24, 0x0C	; 12
     a80:	80 83       	st	Z, r24
    return true;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	8b 83       	std	Y+3, r24	; 0x03
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <_ZN6CModem13SIMCheckReadyEv+0x2a>
  } else {
    return false;
     a88:	1b 82       	std	Y+3, r1	; 0x03
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
  }
}
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	cf 91       	pop	r28
     a94:	df 91       	pop	r29
     a96:	08 95       	ret

00000a98 <_ZN6CModem15UpdateMdmStatusEv>:

void CModem::UpdateMdmStatus(void) {
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <_ZN6CModem15UpdateMdmStatusEv+0x6>
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	9a 83       	std	Y+2, r25	; 0x02
     aa4:	89 83       	std	Y+1, r24	; 0x01
  if (mdmState == MDM_READY) {
     aa6:	e9 81       	ldd	r30, Y+1	; 0x01
     aa8:	fa 81       	ldd	r31, Y+2	; 0x02
     aaa:	80 81       	ld	r24, Z
     aac:	8a 30       	cpi	r24, 0x0A	; 10
     aae:	21 f4       	brne	.+8      	; 0xab8 <_ZN6CModem15UpdateMdmStatusEv+0x20>
    mdmState = MDM_GET_SIMCARD_STATUS;
     ab0:	e9 81       	ldd	r30, Y+1	; 0x01
     ab2:	fa 81       	ldd	r31, Y+2	; 0x02
     ab4:	8c e0       	ldi	r24, 0x0C	; 12
     ab6:	80 83       	st	Z, r24
  }
}
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <_ZN6CModem13GetStateModemEv>:
 }
 }
 */

/*******************************************************************************/
eMdmState CModem::GetStateModem(void) {
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	00 d0       	rcall	.+0      	; 0xac8 <_ZN6CModem13GetStateModemEv+0x6>
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	89 83       	std	Y+1, r24	; 0x01
  return mdmState;
     ad0:	e9 81       	ldd	r30, Y+1	; 0x01
     ad2:	fa 81       	ldd	r31, Y+2	; 0x02
     ad4:	80 81       	ld	r24, Z
}
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	08 95       	ret

00000ae0 <_ZN6CModem12setNextStateE9eMdmState>:
/******************************************************************************/
void CModem::setNextState(eMdmState nextState) {
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <_ZN6CModem12setNextStateE9eMdmState+0x6>
     ae6:	0f 92       	push	r0
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	6b 83       	std	Y+3, r22	; 0x03
  //if (mdmState == MDM_READY) { // HACK
  mdmState = nextState;
     af2:	e9 81       	ldd	r30, Y+1	; 0x01
     af4:	fa 81       	ldd	r31, Y+2	; 0x02
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	80 83       	st	Z, r24
  //}
}
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <_ZN6CModem10clearTimerEv>:
      break;
  }
  return ret;
}

void CModem::clearTimer(void) {
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <_ZN6CModem10clearTimerEv+0x6>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <_ZN6CModem10clearTimerEv+0x8>
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	8b 83       	std	Y+3, r24	; 0x03
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b16:	ef e5       	ldi	r30, 0x5F	; 95
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	8a 83       	std	Y+2, r24	; 0x02
     b1e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZL12__iCliRetValv>
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	10 c0       	rjmp	.+32     	; 0xb46 <_ZN6CModem10clearTimerEv+0x40>
    isr_timer = 0;
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	9c 81       	ldd	r25, Y+4	; 0x04
     b2a:	fc 01       	movw	r30, r24
     b2c:	e8 5a       	subi	r30, 0xA8	; 168
     b2e:	fd 4f       	sbci	r31, 0xFD	; 253
     b30:	10 82       	st	Z, r1
     b32:	11 82       	std	Z+1, r1	; 0x01
     b34:	12 82       	std	Z+2, r1	; 0x02
     b36:	13 82       	std	Z+3, r1	; 0x03
    atomicTime = 0;
     b38:	eb 81       	ldd	r30, Y+3	; 0x03
     b3a:	fc 81       	ldd	r31, Y+4	; 0x04
     b3c:	13 82       	std	Z+3, r1	; 0x03
     b3e:	14 82       	std	Z+4, r1	; 0x04
     b40:	15 82       	std	Z+5, r1	; 0x05
     b42:	16 82       	std	Z+6, r1	; 0x06
  }
  return ret;
}

void CModem::clearTimer(void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b44:	19 82       	std	Y+1, r1	; 0x01
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	88 23       	and	r24, r24
     b4a:	69 f7       	brne	.-38     	; 0xb26 <_ZN6CModem10clearTimerEv+0x20>
    isr_timer = 0;
    atomicTime = 0;
  }
     b4c:	ce 01       	movw	r24, r28
     b4e:	02 96       	adiw	r24, 0x02	; 2
     b50:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZL10__iRestorePKh>
}
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <_ZN6CModem8PowerOffEv>:
    }
    //SET_RTS();
  }
}
/*******************************************************************************/
bool CModem::PowerOff(void) {
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	28 97       	sbiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	9a 83       	std	Y+2, r25	; 0x02
     b78:	89 83       	std	Y+1, r24	; 0x01
  switch (pwrState) {
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	fc 01       	movw	r30, r24
     b80:	ee 5d       	subi	r30, 0xDE	; 222
     b82:	fd 4f       	sbci	r31, 0xFD	; 253
     b84:	80 81       	ld	r24, Z
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	38 87       	std	Y+8, r19	; 0x08
     b8c:	2f 83       	std	Y+7, r18	; 0x07
     b8e:	8f 81       	ldd	r24, Y+7	; 0x07
     b90:	98 85       	ldd	r25, Y+8	; 0x08
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	91 05       	cpc	r25, r1
     b96:	a1 f1       	breq	.+104    	; 0xc00 <_ZN6CModem8PowerOffEv+0x9e>
     b98:	2f 81       	ldd	r18, Y+7	; 0x07
     b9a:	38 85       	ldd	r19, Y+8	; 0x08
     b9c:	23 30       	cpi	r18, 0x03	; 3
     b9e:	31 05       	cpc	r19, r1
     ba0:	09 f4       	brne	.+2      	; 0xba4 <_ZN6CModem8PowerOffEv+0x42>
     ba2:	55 c0       	rjmp	.+170    	; 0xc4e <_ZN6CModem8PowerOffEv+0xec>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	81 30       	cpi	r24, 0x01	; 1
     baa:	91 05       	cpc	r25, r1
     bac:	09 f0       	breq	.+2      	; 0xbb0 <_ZN6CModem8PowerOffEv+0x4e>
     bae:	78 c0       	rjmp	.+240    	; 0xca0 <_ZN6CModem8PowerOffEv+0x13e>
    case 1:
      MDM_PWR_KEY_ON();
     bb0:	ab e0       	ldi	r26, 0x0B	; 11
     bb2:	b1 e0       	ldi	r27, 0x01	; 1
     bb4:	eb e0       	ldi	r30, 0x0B	; 11
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
     bb8:	80 81       	ld	r24, Z
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	8c 93       	st	X, r24
      if (atomicTime > 2000000) {
     bbe:	e9 81       	ldd	r30, Y+1	; 0x01
     bc0:	fa 81       	ldd	r31, Y+2	; 0x02
     bc2:	83 81       	ldd	r24, Z+3	; 0x03
     bc4:	94 81       	ldd	r25, Z+4	; 0x04
     bc6:	a5 81       	ldd	r26, Z+5	; 0x05
     bc8:	b6 81       	ldd	r27, Z+6	; 0x06
     bca:	1e 82       	std	Y+6, r1	; 0x06
     bcc:	81 38       	cpi	r24, 0x81	; 129
     bce:	24 e8       	ldi	r18, 0x84	; 132
     bd0:	92 07       	cpc	r25, r18
     bd2:	2e e1       	ldi	r18, 0x1E	; 30
     bd4:	a2 07       	cpc	r26, r18
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	b2 07       	cpc	r27, r18
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <_ZN6CModem8PowerOffEv+0x7e>
     bdc:	31 e0       	ldi	r19, 0x01	; 1
     bde:	3e 83       	std	Y+6, r19	; 0x06
     be0:	8e 81       	ldd	r24, Y+6	; 0x06
     be2:	88 23       	and	r24, r24
     be4:	09 f4       	brne	.+2      	; 0xbe8 <_ZN6CModem8PowerOffEv+0x86>
     be6:	5c c0       	rjmp	.+184    	; 0xca0 <_ZN6CModem8PowerOffEv+0x13e>
        clearTimer();
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        pwrState = 2;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	9a 81       	ldd	r25, Y+2	; 0x02
     bf4:	fc 01       	movw	r30, r24
     bf6:	ee 5d       	subi	r30, 0xDE	; 222
     bf8:	fd 4f       	sbci	r31, 0xFD	; 253
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	80 83       	st	Z, r24
     bfe:	50 c0       	rjmp	.+160    	; 0xca0 <_ZN6CModem8PowerOffEv+0x13e>
      }
      break;
    case 2:
      MDM_PWR_KEY_OFF();
     c00:	ab e0       	ldi	r26, 0x0B	; 11
     c02:	b1 e0       	ldi	r27, 0x01	; 1
     c04:	eb e0       	ldi	r30, 0x0B	; 11
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	80 81       	ld	r24, Z
     c0a:	8b 7f       	andi	r24, 0xFB	; 251
     c0c:	8c 93       	st	X, r24
      if (atomicTime > 2000000) {
     c0e:	e9 81       	ldd	r30, Y+1	; 0x01
     c10:	fa 81       	ldd	r31, Y+2	; 0x02
     c12:	83 81       	ldd	r24, Z+3	; 0x03
     c14:	94 81       	ldd	r25, Z+4	; 0x04
     c16:	a5 81       	ldd	r26, Z+5	; 0x05
     c18:	b6 81       	ldd	r27, Z+6	; 0x06
     c1a:	1d 82       	std	Y+5, r1	; 0x05
     c1c:	81 38       	cpi	r24, 0x81	; 129
     c1e:	24 e8       	ldi	r18, 0x84	; 132
     c20:	92 07       	cpc	r25, r18
     c22:	2e e1       	ldi	r18, 0x1E	; 30
     c24:	a2 07       	cpc	r26, r18
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	b2 07       	cpc	r27, r18
     c2a:	10 f0       	brcs	.+4      	; 0xc30 <_ZN6CModem8PowerOffEv+0xce>
     c2c:	31 e0       	ldi	r19, 0x01	; 1
     c2e:	3d 83       	std	Y+5, r19	; 0x05
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	88 23       	and	r24, r24
     c34:	a9 f1       	breq	.+106    	; 0xca0 <_ZN6CModem8PowerOffEv+0x13e>
        clearTimer();
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        pwrState = 3;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	fc 01       	movw	r30, r24
     c44:	ee 5d       	subi	r30, 0xDE	; 222
     c46:	fd 4f       	sbci	r31, 0xFD	; 253
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	80 83       	st	Z, r24
     c4c:	29 c0       	rjmp	.+82     	; 0xca0 <_ZN6CModem8PowerOffEv+0x13e>
      }
      break;
    case 3:
      MDM_PWR_FET_OFF();
     c4e:	a2 e0       	ldi	r26, 0x02	; 2
     c50:	b1 e0       	ldi	r27, 0x01	; 1
     c52:	e2 e0       	ldi	r30, 0x02	; 2
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	80 81       	ld	r24, Z
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	8c 93       	st	X, r24
      if (atomicTime > 500000) {
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	83 81       	ldd	r24, Z+3	; 0x03
     c62:	94 81       	ldd	r25, Z+4	; 0x04
     c64:	a5 81       	ldd	r26, Z+5	; 0x05
     c66:	b6 81       	ldd	r27, Z+6	; 0x06
     c68:	1c 82       	std	Y+4, r1	; 0x04
     c6a:	81 32       	cpi	r24, 0x21	; 33
     c6c:	21 ea       	ldi	r18, 0xA1	; 161
     c6e:	92 07       	cpc	r25, r18
     c70:	27 e0       	ldi	r18, 0x07	; 7
     c72:	a2 07       	cpc	r26, r18
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	b2 07       	cpc	r27, r18
     c78:	10 f0       	brcs	.+4      	; 0xc7e <_ZN6CModem8PowerOffEv+0x11c>
     c7a:	31 e0       	ldi	r19, 0x01	; 1
     c7c:	3c 83       	std	Y+4, r19	; 0x04
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	88 23       	and	r24, r24
     c82:	71 f0       	breq	.+28     	; 0xca0 <_ZN6CModem8PowerOffEv+0x13e>
        clearTimer();
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        pwrState = 1;
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	fc 01       	movw	r30, r24
     c92:	ee 5d       	subi	r30, 0xDE	; 222
     c94:	fd 4f       	sbci	r31, 0xFD	; 253
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
        return true;
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <_ZN6CModem8PowerOffEv+0x140>

      }
      break;
  }
  return false;
     ca0:	1b 82       	std	Y+3, r1	; 0x03
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ca4:	28 96       	adiw	r28, 0x08	; 8
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <_ZN6CModem7PowerOnEv>:

/*******************************************************************************/
bool CModem::PowerOn(void) {
     cb6:	df 93       	push	r29
     cb8:	cf 93       	push	r28
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	28 97       	sbiw	r28, 0x08	; 8
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
  switch (pwrState) {
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	fc 01       	movw	r30, r24
     cd4:	ee 5d       	subi	r30, 0xDE	; 222
     cd6:	fd 4f       	sbci	r31, 0xFD	; 253
     cd8:	80 81       	ld	r24, Z
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	38 87       	std	Y+8, r19	; 0x08
     ce0:	2f 83       	std	Y+7, r18	; 0x07
     ce2:	8f 81       	ldd	r24, Y+7	; 0x07
     ce4:	98 85       	ldd	r25, Y+8	; 0x08
     ce6:	82 30       	cpi	r24, 0x02	; 2
     ce8:	91 05       	cpc	r25, r1
     cea:	a1 f1       	breq	.+104    	; 0xd54 <_ZN6CModem7PowerOnEv+0x9e>
     cec:	2f 81       	ldd	r18, Y+7	; 0x07
     cee:	38 85       	ldd	r19, Y+8	; 0x08
     cf0:	23 30       	cpi	r18, 0x03	; 3
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <_ZN6CModem7PowerOnEv+0x42>
     cf6:	55 c0       	rjmp	.+170    	; 0xda2 <_ZN6CModem7PowerOnEv+0xec>
     cf8:	8f 81       	ldd	r24, Y+7	; 0x07
     cfa:	98 85       	ldd	r25, Y+8	; 0x08
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f0       	breq	.+2      	; 0xd04 <_ZN6CModem7PowerOnEv+0x4e>
     d02:	78 c0       	rjmp	.+240    	; 0xdf4 <_ZN6CModem7PowerOnEv+0x13e>
    case 1:
      MDM_PWR_FET_ON();
     d04:	a2 e0       	ldi	r26, 0x02	; 2
     d06:	b1 e0       	ldi	r27, 0x01	; 1
     d08:	e2 e0       	ldi	r30, 0x02	; 2
     d0a:	f1 e0       	ldi	r31, 0x01	; 1
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 77       	andi	r24, 0x7F	; 127
     d10:	8c 93       	st	X, r24
      if (atomicTime > 200000) {
     d12:	e9 81       	ldd	r30, Y+1	; 0x01
     d14:	fa 81       	ldd	r31, Y+2	; 0x02
     d16:	83 81       	ldd	r24, Z+3	; 0x03
     d18:	94 81       	ldd	r25, Z+4	; 0x04
     d1a:	a5 81       	ldd	r26, Z+5	; 0x05
     d1c:	b6 81       	ldd	r27, Z+6	; 0x06
     d1e:	1e 82       	std	Y+6, r1	; 0x06
     d20:	81 34       	cpi	r24, 0x41	; 65
     d22:	2d e0       	ldi	r18, 0x0D	; 13
     d24:	92 07       	cpc	r25, r18
     d26:	23 e0       	ldi	r18, 0x03	; 3
     d28:	a2 07       	cpc	r26, r18
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	b2 07       	cpc	r27, r18
     d2e:	10 f0       	brcs	.+4      	; 0xd34 <_ZN6CModem7PowerOnEv+0x7e>
     d30:	31 e0       	ldi	r19, 0x01	; 1
     d32:	3e 83       	std	Y+6, r19	; 0x06
     d34:	8e 81       	ldd	r24, Y+6	; 0x06
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <_ZN6CModem7PowerOnEv+0x86>
     d3a:	5c c0       	rjmp	.+184    	; 0xdf4 <_ZN6CModem7PowerOnEv+0x13e>
        pwrState = 2;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	fc 01       	movw	r30, r24
     d42:	ee 5d       	subi	r30, 0xDE	; 222
     d44:	fd 4f       	sbci	r31, 0xFD	; 253
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	80 83       	st	Z, r24
        clearTimer();
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
     d52:	50 c0       	rjmp	.+160    	; 0xdf4 <_ZN6CModem7PowerOnEv+0x13e>
      }
      break;
    case 2:
      MDM_PWR_KEY_ON();
     d54:	ab e0       	ldi	r26, 0x0B	; 11
     d56:	b1 e0       	ldi	r27, 0x01	; 1
     d58:	eb e0       	ldi	r30, 0x0B	; 11
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	80 81       	ld	r24, Z
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	8c 93       	st	X, r24
      if (atomicTime > 2000000) {
     d62:	e9 81       	ldd	r30, Y+1	; 0x01
     d64:	fa 81       	ldd	r31, Y+2	; 0x02
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	94 81       	ldd	r25, Z+4	; 0x04
     d6a:	a5 81       	ldd	r26, Z+5	; 0x05
     d6c:	b6 81       	ldd	r27, Z+6	; 0x06
     d6e:	1d 82       	std	Y+5, r1	; 0x05
     d70:	81 38       	cpi	r24, 0x81	; 129
     d72:	24 e8       	ldi	r18, 0x84	; 132
     d74:	92 07       	cpc	r25, r18
     d76:	2e e1       	ldi	r18, 0x1E	; 30
     d78:	a2 07       	cpc	r26, r18
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	b2 07       	cpc	r27, r18
     d7e:	10 f0       	brcs	.+4      	; 0xd84 <_ZN6CModem7PowerOnEv+0xce>
     d80:	31 e0       	ldi	r19, 0x01	; 1
     d82:	3d 83       	std	Y+5, r19	; 0x05
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	88 23       	and	r24, r24
     d88:	a9 f1       	breq	.+106    	; 0xdf4 <_ZN6CModem7PowerOnEv+0x13e>
        pwrState = 3;
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	fc 01       	movw	r30, r24
     d90:	ee 5d       	subi	r30, 0xDE	; 222
     d92:	fd 4f       	sbci	r31, 0xFD	; 253
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	80 83       	st	Z, r24
        clearTimer();
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
     da0:	29 c0       	rjmp	.+82     	; 0xdf4 <_ZN6CModem7PowerOnEv+0x13e>
      }
      break;
    case 3:
      MDM_PWR_KEY_OFF();
     da2:	ab e0       	ldi	r26, 0x0B	; 11
     da4:	b1 e0       	ldi	r27, 0x01	; 1
     da6:	eb e0       	ldi	r30, 0x0B	; 11
     da8:	f1 e0       	ldi	r31, 0x01	; 1
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	8c 93       	st	X, r24
      if (atomicTime > 2000000) {
     db0:	e9 81       	ldd	r30, Y+1	; 0x01
     db2:	fa 81       	ldd	r31, Y+2	; 0x02
     db4:	83 81       	ldd	r24, Z+3	; 0x03
     db6:	94 81       	ldd	r25, Z+4	; 0x04
     db8:	a5 81       	ldd	r26, Z+5	; 0x05
     dba:	b6 81       	ldd	r27, Z+6	; 0x06
     dbc:	1c 82       	std	Y+4, r1	; 0x04
     dbe:	81 38       	cpi	r24, 0x81	; 129
     dc0:	24 e8       	ldi	r18, 0x84	; 132
     dc2:	92 07       	cpc	r25, r18
     dc4:	2e e1       	ldi	r18, 0x1E	; 30
     dc6:	a2 07       	cpc	r26, r18
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	b2 07       	cpc	r27, r18
     dcc:	10 f0       	brcs	.+4      	; 0xdd2 <_ZN6CModem7PowerOnEv+0x11c>
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	3c 83       	std	Y+4, r19	; 0x04
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	88 23       	and	r24, r24
     dd6:	71 f0       	breq	.+28     	; 0xdf4 <_ZN6CModem7PowerOnEv+0x13e>
        pwrState = 1;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	fc 01       	movw	r30, r24
     dde:	ee 5d       	subi	r30, 0xDE	; 222
     de0:	fd 4f       	sbci	r31, 0xFD	; 253
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	80 83       	st	Z, r24
        clearTimer();
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        return true;
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	9b 83       	std	Y+3, r25	; 0x03
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <_ZN6CModem7PowerOnEv+0x140>
      }
      break;
  }
  return false;
     df4:	1b 82       	std	Y+3, r1	; 0x03
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     df8:	28 96       	adiw	r28, 0x08	; 8
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <_ZN6CModem4InitEv>:
  //if (mdmState == MDM_READY) { // HACK
  mdmState = nextState;
  //}
}
/*******************************************************************************/
bool CModem::Init(void) {
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	2b 97       	sbiw	r28, 0x0b	; 11
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	9b 83       	std	Y+3, r25	; 0x03
     e20:	8a 83       	std	Y+2, r24	; 0x02
  u08 ret;
  ret = false;
     e22:	19 82       	std	Y+1, r1	; 0x01
  switch (initState) {
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	fc 01       	movw	r30, r24
     e2a:	ed 5d       	subi	r30, 0xDD	; 221
     e2c:	fd 4f       	sbci	r31, 0xFD	; 253
     e2e:	80 81       	ld	r24, Z
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3a 87       	std	Y+10, r19	; 0x0a
     e36:	29 87       	std	Y+9, r18	; 0x09
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <_ZN6CModem4InitEv+0x3a>
     e42:	53 c0       	rjmp	.+166    	; 0xeea <_ZN6CModem4InitEv+0xe0>
     e44:	29 85       	ldd	r18, Y+9	; 0x09
     e46:	3a 85       	ldd	r19, Y+10	; 0x0a
     e48:	24 30       	cpi	r18, 0x04	; 4
     e4a:	31 05       	cpc	r19, r1
     e4c:	5c f4       	brge	.+22     	; 0xe64 <_ZN6CModem4InitEv+0x5a>
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	91 05       	cpc	r25, r1
     e56:	c9 f0       	breq	.+50     	; 0xe8a <_ZN6CModem4InitEv+0x80>
     e58:	29 85       	ldd	r18, Y+9	; 0x09
     e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	19 f1       	breq	.+70     	; 0xea8 <_ZN6CModem4InitEv+0x9e>
     e62:	0b c1       	rjmp	.+534    	; 0x107a <_ZN6CModem4InitEv+0x270>
     e64:	89 85       	ldd	r24, Y+9	; 0x09
     e66:	9a 85       	ldd	r25, Y+10	; 0x0a
     e68:	85 30       	cpi	r24, 0x05	; 5
     e6a:	91 05       	cpc	r25, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <_ZN6CModem4InitEv+0x66>
     e6e:	8d c0       	rjmp	.+282    	; 0xf8a <_ZN6CModem4InitEv+0x180>
     e70:	29 85       	ldd	r18, Y+9	; 0x09
     e72:	3a 85       	ldd	r19, Y+10	; 0x0a
     e74:	25 30       	cpi	r18, 0x05	; 5
     e76:	31 05       	cpc	r19, r1
     e78:	0c f4       	brge	.+2      	; 0xe7c <_ZN6CModem4InitEv+0x72>
     e7a:	5f c0       	rjmp	.+190    	; 0xf3a <_ZN6CModem4InitEv+0x130>
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	86 30       	cpi	r24, 0x06	; 6
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <_ZN6CModem4InitEv+0x7e>
     e86:	d4 c0       	rjmp	.+424    	; 0x1030 <_ZN6CModem4InitEv+0x226>
     e88:	f8 c0       	rjmp	.+496    	; 0x107a <_ZN6CModem4InitEv+0x270>
    case 1:
      if (PowerOff())
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	9b 81       	ldd	r25, Y+3	; 0x03
     e8e:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN6CModem8PowerOffEv>
     e92:	88 23       	and	r24, r24
     e94:	09 f4       	brne	.+2      	; 0xe98 <_ZN6CModem4InitEv+0x8e>
     e96:	f1 c0       	rjmp	.+482    	; 0x107a <_ZN6CModem4InitEv+0x270>
        initState = 2;
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	9b 81       	ldd	r25, Y+3	; 0x03
     e9c:	fc 01       	movw	r30, r24
     e9e:	ed 5d       	subi	r30, 0xDD	; 221
     ea0:	fd 4f       	sbci	r31, 0xFD	; 253
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	80 83       	st	Z, r24
     ea6:	e9 c0       	rjmp	.+466    	; 0x107a <_ZN6CModem4InitEv+0x270>
      break;
    case 2:
      if (PowerOn()) {
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	9b 81       	ldd	r25, Y+3	; 0x03
     eac:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6CModem7PowerOnEv>
     eb0:	88 23       	and	r24, r24
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <_ZN6CModem4InitEv+0xac>
     eb4:	e2 c0       	rjmp	.+452    	; 0x107a <_ZN6CModem4InitEv+0x270>
        CLR_DTR();
     eb6:	a2 e0       	ldi	r26, 0x02	; 2
     eb8:	b1 e0       	ldi	r27, 0x01	; 1
     eba:	e2 e0       	ldi	r30, 0x02	; 2
     ebc:	f1 e0       	ldi	r31, 0x01	; 1
     ebe:	80 81       	ld	r24, Z
     ec0:	80 61       	ori	r24, 0x10	; 16
     ec2:	8c 93       	st	X, r24
        CLR_RTS();
     ec4:	a2 e0       	ldi	r26, 0x02	; 2
     ec6:	b1 e0       	ldi	r27, 0x01	; 1
     ec8:	e2 e0       	ldi	r30, 0x02	; 2
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	80 81       	ld	r24, Z
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	8c 93       	st	X, r24
        initState = 3;
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	fc 01       	movw	r30, r24
     ed8:	ed 5d       	subi	r30, 0xDD	; 221
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	80 83       	st	Z, r24
        clearTimer();
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	9b 81       	ldd	r25, Y+3	; 0x03
     ee4:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
     ee8:	c8 c0       	rjmp	.+400    	; 0x107a <_ZN6CModem4InitEv+0x270>
      }
      break;
    case 3:
      if (atomicTime > 200000) {
     eea:	ea 81       	ldd	r30, Y+2	; 0x02
     eec:	fb 81       	ldd	r31, Y+3	; 0x03
     eee:	83 81       	ldd	r24, Z+3	; 0x03
     ef0:	94 81       	ldd	r25, Z+4	; 0x04
     ef2:	a5 81       	ldd	r26, Z+5	; 0x05
     ef4:	b6 81       	ldd	r27, Z+6	; 0x06
     ef6:	18 86       	std	Y+8, r1	; 0x08
     ef8:	81 34       	cpi	r24, 0x41	; 65
     efa:	2d e0       	ldi	r18, 0x0D	; 13
     efc:	92 07       	cpc	r25, r18
     efe:	23 e0       	ldi	r18, 0x03	; 3
     f00:	a2 07       	cpc	r26, r18
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	b2 07       	cpc	r27, r18
     f06:	10 f0       	brcs	.+4      	; 0xf0c <_ZN6CModem4InitEv+0x102>
     f08:	31 e0       	ldi	r19, 0x01	; 1
     f0a:	38 87       	std	Y+8, r19	; 0x08
     f0c:	88 85       	ldd	r24, Y+8	; 0x08
     f0e:	88 23       	and	r24, r24
     f10:	09 f4       	brne	.+2      	; 0xf14 <_ZN6CModem4InitEv+0x10a>
     f12:	b3 c0       	rjmp	.+358    	; 0x107a <_ZN6CModem4InitEv+0x270>
        clearTimer();
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        // uP tell modem its ready to Communicate
        SET_DTR();
     f1c:	a2 e0       	ldi	r26, 0x02	; 2
     f1e:	b1 e0       	ldi	r27, 0x01	; 1
     f20:	e2 e0       	ldi	r30, 0x02	; 2
     f22:	f1 e0       	ldi	r31, 0x01	; 1
     f24:	80 81       	ld	r24, Z
     f26:	8f 7e       	andi	r24, 0xEF	; 239
     f28:	8c 93       	st	X, r24
        initState = 4;
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	fc 01       	movw	r30, r24
     f30:	ed 5d       	subi	r30, 0xDD	; 221
     f32:	fd 4f       	sbci	r31, 0xFD	; 253
     f34:	84 e0       	ldi	r24, 0x04	; 4
     f36:	80 83       	st	Z, r24
     f38:	a0 c0       	rjmp	.+320    	; 0x107a <_ZN6CModem4InitEv+0x270>
      }
      break;
    case 4:
      if (atomicTime > 200000) {
     f3a:	ea 81       	ldd	r30, Y+2	; 0x02
     f3c:	fb 81       	ldd	r31, Y+3	; 0x03
     f3e:	83 81       	ldd	r24, Z+3	; 0x03
     f40:	94 81       	ldd	r25, Z+4	; 0x04
     f42:	a5 81       	ldd	r26, Z+5	; 0x05
     f44:	b6 81       	ldd	r27, Z+6	; 0x06
     f46:	1f 82       	std	Y+7, r1	; 0x07
     f48:	81 34       	cpi	r24, 0x41	; 65
     f4a:	2d e0       	ldi	r18, 0x0D	; 13
     f4c:	92 07       	cpc	r25, r18
     f4e:	23 e0       	ldi	r18, 0x03	; 3
     f50:	a2 07       	cpc	r26, r18
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	b2 07       	cpc	r27, r18
     f56:	10 f0       	brcs	.+4      	; 0xf5c <_ZN6CModem4InitEv+0x152>
     f58:	31 e0       	ldi	r19, 0x01	; 1
     f5a:	3f 83       	std	Y+7, r19	; 0x07
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <_ZN6CModem4InitEv+0x15a>
     f62:	8b c0       	rjmp	.+278    	; 0x107a <_ZN6CModem4InitEv+0x270>
        clearTimer();
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	9b 81       	ldd	r25, Y+3	; 0x03
     f68:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        //Put RTS_logic 0 --> ready uP ready to TX
        SET_RTS();
     f6c:	a2 e0       	ldi	r26, 0x02	; 2
     f6e:	b1 e0       	ldi	r27, 0x01	; 1
     f70:	e2 e0       	ldi	r30, 0x02	; 2
     f72:	f1 e0       	ldi	r31, 0x01	; 1
     f74:	80 81       	ld	r24, Z
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	8c 93       	st	X, r24
        initState = 5;
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	9b 81       	ldd	r25, Y+3	; 0x03
     f7e:	fc 01       	movw	r30, r24
     f80:	ed 5d       	subi	r30, 0xDD	; 221
     f82:	fd 4f       	sbci	r31, 0xFD	; 253
     f84:	85 e0       	ldi	r24, 0x05	; 5
     f86:	80 83       	st	Z, r24
     f88:	78 c0       	rjmp	.+240    	; 0x107a <_ZN6CModem4InitEv+0x270>
      }
      break;
    case 5:
      // Wait for Modem (DCE) to respond with a cts logic 0 - clear to send
      if (!GET_CTS_STATUS()) {
     f8a:	e0 e0       	ldi	r30, 0x00	; 0
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	80 81       	ld	r24, Z
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	84 70       	andi	r24, 0x04	; 4
     f96:	90 70       	andi	r25, 0x00	; 0
     f98:	1e 82       	std	Y+6, r1	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <_ZN6CModem4InitEv+0x198>
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	2e 81       	ldd	r18, Y+6	; 0x06
     fa4:	22 23       	and	r18, r18
     fa6:	59 f0       	breq	.+22     	; 0xfbe <_ZN6CModem4InitEv+0x1b4>
        clearTimer();
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        initState = 6;
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	9b 81       	ldd	r25, Y+3	; 0x03
     fb4:	fc 01       	movw	r30, r24
     fb6:	ed 5d       	subi	r30, 0xDD	; 221
     fb8:	fd 4f       	sbci	r31, 0xFD	; 253
     fba:	86 e0       	ldi	r24, 0x06	; 6
     fbc:	80 83       	st	Z, r24
      }
      if (atomicTime > 1000000) {
     fbe:	ea 81       	ldd	r30, Y+2	; 0x02
     fc0:	fb 81       	ldd	r31, Y+3	; 0x03
     fc2:	83 81       	ldd	r24, Z+3	; 0x03
     fc4:	94 81       	ldd	r25, Z+4	; 0x04
     fc6:	a5 81       	ldd	r26, Z+5	; 0x05
     fc8:	b6 81       	ldd	r27, Z+6	; 0x06
     fca:	1d 82       	std	Y+5, r1	; 0x05
     fcc:	81 34       	cpi	r24, 0x41	; 65
     fce:	32 e4       	ldi	r19, 0x42	; 66
     fd0:	93 07       	cpc	r25, r19
     fd2:	3f e0       	ldi	r19, 0x0F	; 15
     fd4:	a3 07       	cpc	r26, r19
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	b3 07       	cpc	r27, r19
     fda:	10 f0       	brcs	.+4      	; 0xfe0 <_ZN6CModem4InitEv+0x1d6>
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	99 23       	and	r25, r25
     fe4:	59 f0       	breq	.+22     	; 0xffc <_ZN6CModem4InitEv+0x1f2>
        clearTimer();
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        initState = 1;
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	fc 01       	movw	r30, r24
     ff4:	ed 5d       	subi	r30, 0xDD	; 221
     ff6:	fd 4f       	sbci	r31, 0xFD	; 253
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 83       	st	Z, r24
      }
      if (retry > 10) {
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    1000:	fc 01       	movw	r30, r24
    1002:	e0 5f       	subi	r30, 0xF0	; 240
    1004:	fd 4f       	sbci	r31, 0xFD	; 253
    1006:	80 81       	ld	r24, Z
    1008:	8b 30       	cpi	r24, 0x0B	; 11
    100a:	b8 f1       	brcs	.+110    	; 0x107a <_ZN6CModem4InitEv+0x270>
        mdmState = failState;
    100c:	ea 81       	ldd	r30, Y+2	; 0x02
    100e:	fb 81       	ldd	r31, Y+3	; 0x03
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	ea 81       	ldd	r30, Y+2	; 0x02
    1014:	fb 81       	ldd	r31, Y+3	; 0x03
    1016:	80 83       	st	Z, r24
        initState = 1;
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	fc 01       	movw	r30, r24
    101e:	ed 5d       	subi	r30, 0xDD	; 221
    1020:	fd 4f       	sbci	r31, 0xFD	; 253
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 83       	st	Z, r24
        cmdState = START;
    1026:	ea 81       	ldd	r30, Y+2	; 0x02
    1028:	fb 81       	ldd	r31, Y+3	; 0x03
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	81 83       	std	Z+1, r24	; 0x01
    102e:	25 c0       	rjmp	.+74     	; 0x107a <_ZN6CModem4InitEv+0x270>
      }
      break;

    case 6:
      if (atomicTime > 5000000) { // wait 5 seconds form modem to register
    1030:	ea 81       	ldd	r30, Y+2	; 0x02
    1032:	fb 81       	ldd	r31, Y+3	; 0x03
    1034:	83 81       	ldd	r24, Z+3	; 0x03
    1036:	94 81       	ldd	r25, Z+4	; 0x04
    1038:	a5 81       	ldd	r26, Z+5	; 0x05
    103a:	b6 81       	ldd	r27, Z+6	; 0x06
    103c:	1c 82       	std	Y+4, r1	; 0x04
    103e:	81 34       	cpi	r24, 0x41	; 65
    1040:	2b e4       	ldi	r18, 0x4B	; 75
    1042:	92 07       	cpc	r25, r18
    1044:	2c e4       	ldi	r18, 0x4C	; 76
    1046:	a2 07       	cpc	r26, r18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	b2 07       	cpc	r27, r18
    104c:	10 f0       	brcs	.+4      	; 0x1052 <_ZN6CModem4InitEv+0x248>
    104e:	31 e0       	ldi	r19, 0x01	; 1
    1050:	3c 83       	std	Y+4, r19	; 0x04
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	88 23       	and	r24, r24
    1056:	89 f0       	breq	.+34     	; 0x107a <_ZN6CModem4InitEv+0x270>
        clearTimer();
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	9b 81       	ldd	r25, Y+3	; 0x03
    105c:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
        cmdState = START;
    1060:	ea 81       	ldd	r30, Y+2	; 0x02
    1062:	fb 81       	ldd	r31, Y+3	; 0x03
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	81 83       	std	Z+1, r24	; 0x01
        initState = 1;
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	fc 01       	movw	r30, r24
    106e:	ed 5d       	subi	r30, 0xDD	; 221
    1070:	fd 4f       	sbci	r31, 0xFD	; 253
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	80 83       	st	Z, r24
        ret = true;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
      }
      break;
  }
  return ret;
    107a:	99 81       	ldd	r25, Y+1	; 0x01
    107c:	9b 87       	std	Y+11, r25	; 0x0b
    107e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1080:	22 23       	and	r18, r18
    1082:	11 f0       	breq	.+4      	; 0x1088 <_ZN6CModem4InitEv+0x27e>
    1084:	31 e0       	ldi	r19, 0x01	; 1
    1086:	3b 87       	std	Y+11, r19	; 0x0b
    1088:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    108a:	2b 96       	adiw	r28, 0x0b	; 11
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <_ZN6CModem7SendSMSEPcS0_>:
  } else {
    return false;
  }
}
/*******************************************************************************/
bool CModem::SendSMS(char *PhoneNumber, char *Message) {
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	27 97       	sbiw	r28, 0x07	; 7
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	7c 83       	std	Y+4, r23	; 0x04
    10b6:	6b 83       	std	Y+3, r22	; 0x03
    10b8:	5e 83       	std	Y+6, r21	; 0x06
    10ba:	4d 83       	std	Y+5, r20	; 0x05
  if (mdmState == MDM_READY && simcard_ok == true && smstx_en == true) {
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	80 81       	ld	r24, Z
    10c2:	8a 30       	cpi	r24, 0x0A	; 10
    10c4:	49 f5       	brne	.+82     	; 0x1118 <_ZN6CModem7SendSMSEPcS0_+0x7c>
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	fc 01       	movw	r30, r24
    10cc:	e5 5d       	subi	r30, 0xD5	; 213
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	80 81       	ld	r24, Z
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	09 f5       	brne	.+66     	; 0x1118 <_ZN6CModem7SendSMSEPcS0_+0x7c>
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	9a 81       	ldd	r25, Y+2	; 0x02
    10da:	fc 01       	movw	r30, r24
    10dc:	ed 5c       	subi	r30, 0xCD	; 205
    10de:	fc 4f       	sbci	r31, 0xFC	; 252
    10e0:	80 81       	ld	r24, Z
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	c9 f4       	brne	.+50     	; 0x1118 <_ZN6CModem7SendSMSEPcS0_+0x7c>
    mdmState = MDM_SEND_SMS;
    10e6:	e9 81       	ldd	r30, Y+1	; 0x01
    10e8:	fa 81       	ldd	r31, Y+2	; 0x02
    10ea:	80 e1       	ldi	r24, 0x10	; 16
    10ec:	80 83       	st	Z, r24
    strcpy(sms.phonenum, PhoneNumber);
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	8a 59       	subi	r24, 0x9A	; 154
    10f4:	9d 4f       	sbci	r25, 0xFD	; 253
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	b9 01       	movw	r22, r18
    10fc:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
    strcpy(sms.message, Message);
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	8a 55       	subi	r24, 0x5A	; 90
    1106:	9d 4f       	sbci	r25, 0xFD	; 253
    1108:	2d 81       	ldd	r18, Y+5	; 0x05
    110a:	3e 81       	ldd	r19, Y+6	; 0x06
    110c:	b9 01       	movw	r22, r18
    110e:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
    return true;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	8f 83       	std	Y+7, r24	; 0x07
    1116:	01 c0       	rjmp	.+2      	; 0x111a <_ZN6CModem7SendSMSEPcS0_+0x7e>
  } else {
    return false;
    1118:	1f 82       	std	Y+7, r1	; 0x07
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
  }
}
    111c:	27 96       	adiw	r28, 0x07	; 7
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <_ZN6CModem12DataToServerEPc>:
  strcpy(serverIP, _IP);
  strcpy(port, _port);
}

/*******************************************************************************/
bool CModem::DataToServer(c08* dat) {
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <_ZN6CModem12DataToServerEPc+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <_ZN6CModem12DataToServerEPc+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	7c 83       	std	Y+4, r23	; 0x04
    1142:	6b 83       	std	Y+3, r22	; 0x03
  if (mdmState == MDM_READY && connect_ok == true && registered_ok == true && simcard_ok
    1144:	e9 81       	ldd	r30, Y+1	; 0x01
    1146:	fa 81       	ldd	r31, Y+2	; 0x02
    1148:	80 81       	ld	r24, Z
    114a:	8a 30       	cpi	r24, 0x0A	; 10
    114c:	79 f5       	brne	.+94     	; 0x11ac <_ZN6CModem12DataToServerEPc+0x7e>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	fc 01       	movw	r30, r24
    1154:	e3 5d       	subi	r30, 0xD3	; 211
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	80 81       	ld	r24, Z
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	39 f5       	brne	.+78     	; 0x11ac <_ZN6CModem12DataToServerEPc+0x7e>
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	fc 01       	movw	r30, r24
    1164:	e2 5d       	subi	r30, 0xD2	; 210
    1166:	fd 4f       	sbci	r31, 0xFD	; 253
    1168:	80 81       	ld	r24, Z
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	f9 f4       	brne	.+62     	; 0x11ac <_ZN6CModem12DataToServerEPc+0x7e>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	fc 01       	movw	r30, r24
    1174:	e5 5d       	subi	r30, 0xD5	; 213
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
    1178:	80 81       	ld	r24, Z
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	b9 f4       	brne	.+46     	; 0x11ac <_ZN6CModem12DataToServerEPc+0x7e>
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	fc 01       	movw	r30, r24
    1184:	e4 5d       	subi	r30, 0xD4	; 212
    1186:	fd 4f       	sbci	r31, 0xFD	; 253
    1188:	80 81       	ld	r24, Z
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	79 f4       	brne	.+30     	; 0x11ac <_ZN6CModem12DataToServerEPc+0x7e>
      == true && signal_ok == true) {
    strcpy(txcmd, dat);
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	0f 96       	adiw	r24, 0x0f	; 15
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	b9 01       	movw	r22, r18
    119a:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
    mdmState = MDM_IP_SEND;
    119e:	e9 81       	ldd	r30, Y+1	; 0x01
    11a0:	fa 81       	ldd	r31, Y+2	; 0x02
    11a2:	88 e2       	ldi	r24, 0x28	; 40
    11a4:	80 83       	st	Z, r24
    return true;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <_ZN6CModem12DataToServerEPc+0x80>
  } else {
    return false;
    11ac:	1d 82       	std	Y+5, r1	; 0x05
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
  }
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <_ZN6CModem11ServerSetIPEPcS0_b>:
  smstx_en = true;
  gprsrx = false;
}

/*******************************************************************************/
void CModem::ServerSetIP(c08* _IP, c08 *_port, bool _usedns) {
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	27 97       	sbiw	r28, 0x07	; 7
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	7c 83       	std	Y+4, r23	; 0x04
    11da:	6b 83       	std	Y+3, r22	; 0x03
    11dc:	5e 83       	std	Y+6, r21	; 0x06
    11de:	4d 83       	std	Y+5, r20	; 0x05
    11e0:	2f 83       	std	Y+7, r18	; 0x07
  usedns = _usedns;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	fc 01       	movw	r30, r24
    11e8:	e1 5b       	subi	r30, 0xB1	; 177
    11ea:	fd 4f       	sbci	r31, 0xFD	; 253
    11ec:	8f 81       	ldd	r24, Y+7	; 0x07
    11ee:	80 83       	st	Z, r24
  strcpy(serverIP, _IP);
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	81 5d       	subi	r24, 0xD1	; 209
    11f6:	9d 4f       	sbci	r25, 0xFD	; 253
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	b9 01       	movw	r22, r18
    11fe:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
  strcpy(port, _port);
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	80 5b       	subi	r24, 0xB0	; 176
    1208:	9d 4f       	sbci	r25, 0xFD	; 253
    120a:	2d 81       	ldd	r18, Y+5	; 0x05
    120c:	3e 81       	ldd	r19, Y+6	; 0x06
    120e:	b9 01       	movw	r22, r18
    1210:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
}
    1214:	27 96       	adiw	r28, 0x07	; 7
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <_ZN6CModemC1EP5CUART>:
PROGMEM char AT_DATA[] = "\r\n";
PROGMEM char SIM_RDY[] = "+CPIN: READY";

extern CUART DbgUart;
/*******************************************************************************/
CModem::CModem(CUART * _pUart) {
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <_ZN6CModemC1EP5CUART+0x6>
    122c:	00 d0       	rcall	.+0      	; 0x122e <_ZN6CModemC1EP5CUART+0x8>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	7c 83       	std	Y+4, r23	; 0x04
    1238:	6b 83       	std	Y+3, r22	; 0x03
  usedns = false;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	9a 81       	ldd	r25, Y+2	; 0x02
    123e:	fc 01       	movw	r30, r24
    1240:	e1 5b       	subi	r30, 0xB1	; 177
    1242:	fd 4f       	sbci	r31, 0xFD	; 253
    1244:	10 82       	st	Z, r1
  pUart = _pUart;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	e7 5d       	subi	r30, 0xD7	; 215
    124e:	fd 4f       	sbci	r31, 0xFD	; 253
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24
  retry = MDM_RETRIES_VAL;
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	fc 01       	movw	r30, r24
    125e:	e0 5f       	subi	r30, 0xF0	; 240
    1260:	fd 4f       	sbci	r31, 0xFD	; 253
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	80 83       	st	Z, r24
  taskRetry = MDM_RETRIES_VAL;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	fc 01       	movw	r30, r24
    126c:	ef 5e       	subi	r30, 0xEF	; 239
    126e:	fd 4f       	sbci	r31, 0xFD	; 253
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	80 83       	st	Z, r24
  timeout = MDM_TIMEOUT_VAL;
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 e4       	ldi	r24, 0x40	; 64
    127a:	92 e4       	ldi	r25, 0x42	; 66
    127c:	af e0       	ldi	r26, 0x0F	; 15
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	83 87       	std	Z+11, r24	; 0x0b
    1282:	94 87       	std	Z+12, r25	; 0x0c
    1284:	a5 87       	std	Z+13, r26	; 0x0d
    1286:	b6 87       	std	Z+14, r27	; 0x0e
  mdmState = MDM_STARTUP;
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	80 83       	st	Z, r24
  cmdState = START;
    1290:	e9 81       	ldd	r30, Y+1	; 0x01
    1292:	fa 81       	ldd	r31, Y+2	; 0x02
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	81 83       	std	Z+1, r24	; 0x01
  signal_ok = false;
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	fc 01       	movw	r30, r24
    129e:	e4 5d       	subi	r30, 0xD4	; 212
    12a0:	fd 4f       	sbci	r31, 0xFD	; 253
    12a2:	10 82       	st	Z, r1
  simcard_ok = false;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	fc 01       	movw	r30, r24
    12aa:	e5 5d       	subi	r30, 0xD5	; 213
    12ac:	fd 4f       	sbci	r31, 0xFD	; 253
    12ae:	10 82       	st	Z, r1
  connect_ok = false;
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	fc 01       	movw	r30, r24
    12b6:	e3 5d       	subi	r30, 0xD3	; 211
    12b8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ba:	10 82       	st	Z, r1
  registered_ok = false;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	fc 01       	movw	r30, r24
    12c2:	e2 5d       	subi	r30, 0xD2	; 210
    12c4:	fd 4f       	sbci	r31, 0xFD	; 253
    12c6:	10 82       	st	Z, r1
  pwrState = 1;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	fc 01       	movw	r30, r24
    12ce:	ee 5d       	subi	r30, 0xDE	; 222
    12d0:	fd 4f       	sbci	r31, 0xFD	; 253
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
  initState = 1;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	fc 01       	movw	r30, r24
    12dc:	ed 5d       	subi	r30, 0xDD	; 221
    12de:	fd 4f       	sbci	r31, 0xFD	; 253
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 83       	st	Z, r24
  strcpy(serverIP, "");
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	81 5d       	subi	r24, 0xD1	; 209
    12ea:	9d 4f       	sbci	r25, 0xFD	; 253
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	32 e0       	ldi	r19, 0x02	; 2
    12f0:	b9 01       	movw	r22, r18
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
  strcpy(port, "");
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	80 5b       	subi	r24, 0xB0	; 176
    1300:	9d 4f       	sbci	r25, 0xFD	; 253
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	32 e0       	ldi	r19, 0x02	; 2
    1306:	b9 01       	movw	r22, r18
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
  serviceTime = 0;
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	17 82       	std	Z+7, r1	; 0x07
    1316:	10 86       	std	Z+8, r1	; 0x08
    1318:	11 86       	std	Z+9, r1	; 0x09
    131a:	12 86       	std	Z+10, r1	; 0x0a
  atomicTime = 0;
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	13 82       	std	Z+3, r1	; 0x03
    1322:	14 82       	std	Z+4, r1	; 0x04
    1324:	15 82       	std	Z+5, r1	; 0x05
    1326:	16 82       	std	Z+6, r1	; 0x06
  failState = MDM_STARTUP;
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	82 83       	std	Z+2, r24	; 0x02
  error_cnt = 0;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	fc 01       	movw	r30, r24
    1336:	e8 5d       	subi	r30, 0xD8	; 216
    1338:	fd 4f       	sbci	r31, 0xFD	; 253
    133a:	10 82       	st	Z, r1
  smsrx = false;
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	fc 01       	movw	r30, r24
    1342:	ee 5c       	subi	r30, 0xCE	; 206
    1344:	fc 4f       	sbci	r31, 0xFC	; 252
    1346:	10 82       	st	Z, r1
  smstx_en = true;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	fc 01       	movw	r30, r24
    134e:	ed 5c       	subi	r30, 0xCD	; 205
    1350:	fc 4f       	sbci	r31, 0xFC	; 252
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 83       	st	Z, r24
  gprsrx = false;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	fc 01       	movw	r30, r24
    135c:	ee 5c       	subi	r30, 0xCE	; 206
    135e:	fb 4f       	sbci	r31, 0xFB	; 251
    1360:	10 82       	st	Z, r1
}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <_ZN6CModemC2EP5CUART>:
PROGMEM char AT_DATA[] = "\r\n";
PROGMEM char SIM_RDY[] = "+CPIN: READY";

extern CUART DbgUart;
/*******************************************************************************/
CModem::CModem(CUART * _pUart) {
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <_ZN6CModemC2EP5CUART+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <_ZN6CModemC2EP5CUART+0x8>
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	7c 83       	std	Y+4, r23	; 0x04
    1382:	6b 83       	std	Y+3, r22	; 0x03
  usedns = false;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	fc 01       	movw	r30, r24
    138a:	e1 5b       	subi	r30, 0xB1	; 177
    138c:	fd 4f       	sbci	r31, 0xFD	; 253
    138e:	10 82       	st	Z, r1
  pUart = _pUart;
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	9a 81       	ldd	r25, Y+2	; 0x02
    1394:	fc 01       	movw	r30, r24
    1396:	e7 5d       	subi	r30, 0xD7	; 215
    1398:	fd 4f       	sbci	r31, 0xFD	; 253
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
  retry = MDM_RETRIES_VAL;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	e0 5f       	subi	r30, 0xF0	; 240
    13aa:	fd 4f       	sbci	r31, 0xFD	; 253
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	80 83       	st	Z, r24
  taskRetry = MDM_RETRIES_VAL;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	fc 01       	movw	r30, r24
    13b6:	ef 5e       	subi	r30, 0xEF	; 239
    13b8:	fd 4f       	sbci	r31, 0xFD	; 253
    13ba:	83 e0       	ldi	r24, 0x03	; 3
    13bc:	80 83       	st	Z, r24
  timeout = MDM_TIMEOUT_VAL;
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	80 e4       	ldi	r24, 0x40	; 64
    13c4:	92 e4       	ldi	r25, 0x42	; 66
    13c6:	af e0       	ldi	r26, 0x0F	; 15
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	83 87       	std	Z+11, r24	; 0x0b
    13cc:	94 87       	std	Z+12, r25	; 0x0c
    13ce:	a5 87       	std	Z+13, r26	; 0x0d
    13d0:	b6 87       	std	Z+14, r27	; 0x0e
  mdmState = MDM_STARTUP;
    13d2:	e9 81       	ldd	r30, Y+1	; 0x01
    13d4:	fa 81       	ldd	r31, Y+2	; 0x02
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	80 83       	st	Z, r24
  cmdState = START;
    13da:	e9 81       	ldd	r30, Y+1	; 0x01
    13dc:	fa 81       	ldd	r31, Y+2	; 0x02
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	81 83       	std	Z+1, r24	; 0x01
  signal_ok = false;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	fc 01       	movw	r30, r24
    13e8:	e4 5d       	subi	r30, 0xD4	; 212
    13ea:	fd 4f       	sbci	r31, 0xFD	; 253
    13ec:	10 82       	st	Z, r1
  simcard_ok = false;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	fc 01       	movw	r30, r24
    13f4:	e5 5d       	subi	r30, 0xD5	; 213
    13f6:	fd 4f       	sbci	r31, 0xFD	; 253
    13f8:	10 82       	st	Z, r1
  connect_ok = false;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	fc 01       	movw	r30, r24
    1400:	e3 5d       	subi	r30, 0xD3	; 211
    1402:	fd 4f       	sbci	r31, 0xFD	; 253
    1404:	10 82       	st	Z, r1
  registered_ok = false;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	fc 01       	movw	r30, r24
    140c:	e2 5d       	subi	r30, 0xD2	; 210
    140e:	fd 4f       	sbci	r31, 0xFD	; 253
    1410:	10 82       	st	Z, r1
  pwrState = 1;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	fc 01       	movw	r30, r24
    1418:	ee 5d       	subi	r30, 0xDE	; 222
    141a:	fd 4f       	sbci	r31, 0xFD	; 253
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 83       	st	Z, r24
  initState = 1;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	fc 01       	movw	r30, r24
    1426:	ed 5d       	subi	r30, 0xDD	; 221
    1428:	fd 4f       	sbci	r31, 0xFD	; 253
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 83       	st	Z, r24
  strcpy(serverIP, "");
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	81 5d       	subi	r24, 0xD1	; 209
    1434:	9d 4f       	sbci	r25, 0xFD	; 253
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	32 e0       	ldi	r19, 0x02	; 2
    143a:	b9 01       	movw	r22, r18
    143c:	41 e0       	ldi	r20, 0x01	; 1
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
  strcpy(port, "");
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	80 5b       	subi	r24, 0xB0	; 176
    144a:	9d 4f       	sbci	r25, 0xFD	; 253
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	32 e0       	ldi	r19, 0x02	; 2
    1450:	b9 01       	movw	r22, r18
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
  serviceTime = 0;
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	17 82       	std	Z+7, r1	; 0x07
    1460:	10 86       	std	Z+8, r1	; 0x08
    1462:	11 86       	std	Z+9, r1	; 0x09
    1464:	12 86       	std	Z+10, r1	; 0x0a
  atomicTime = 0;
    1466:	e9 81       	ldd	r30, Y+1	; 0x01
    1468:	fa 81       	ldd	r31, Y+2	; 0x02
    146a:	13 82       	std	Z+3, r1	; 0x03
    146c:	14 82       	std	Z+4, r1	; 0x04
    146e:	15 82       	std	Z+5, r1	; 0x05
    1470:	16 82       	std	Z+6, r1	; 0x06
  failState = MDM_STARTUP;
    1472:	e9 81       	ldd	r30, Y+1	; 0x01
    1474:	fa 81       	ldd	r31, Y+2	; 0x02
    1476:	84 e0       	ldi	r24, 0x04	; 4
    1478:	82 83       	std	Z+2, r24	; 0x02
  error_cnt = 0;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	fc 01       	movw	r30, r24
    1480:	e8 5d       	subi	r30, 0xD8	; 216
    1482:	fd 4f       	sbci	r31, 0xFD	; 253
    1484:	10 82       	st	Z, r1
  smsrx = false;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	9a 81       	ldd	r25, Y+2	; 0x02
    148a:	fc 01       	movw	r30, r24
    148c:	ee 5c       	subi	r30, 0xCE	; 206
    148e:	fc 4f       	sbci	r31, 0xFC	; 252
    1490:	10 82       	st	Z, r1
  smstx_en = true;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	fc 01       	movw	r30, r24
    1498:	ed 5c       	subi	r30, 0xCD	; 205
    149a:	fc 4f       	sbci	r31, 0xFC	; 252
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 83       	st	Z, r24
  gprsrx = false;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	fc 01       	movw	r30, r24
    14a6:	ee 5c       	subi	r30, 0xCE	; 206
    14a8:	fb 4f       	sbci	r31, 0xFB	; 251
    14aa:	10 82       	st	Z, r1
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <_ZN6CModem14GetUnSolicitedEv>:
    pUart->clearRx();
  }
  return false;
}
/*******************************************************************************/
void CModem::GetUnSolicited(void) {
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	2d 97       	sbiw	r28, 0x0d	; 13
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	99 87       	std	Y+9, r25	; 0x09
    14d0:	88 87       	std	Y+8, r24	; 0x08
  char *pstr = 0;
    14d2:	1f 82       	std	Y+7, r1	; 0x07
    14d4:	1e 82       	std	Y+6, r1	; 0x06
  char *start = 0;
    14d6:	1d 82       	std	Y+5, r1	; 0x05
    14d8:	1c 82       	std	Y+4, r1	; 0x04
  char *end = 0;
    14da:	1b 82       	std	Y+3, r1	; 0x03
    14dc:	1a 82       	std	Y+2, r1	; 0x02
  u08 len;
  if (pUart->peek(rxmsg)) {
    14de:	88 85       	ldd	r24, Y+8	; 0x08
    14e0:	99 85       	ldd	r25, Y+9	; 0x09
    14e2:	fc 01       	movw	r30, r24
    14e4:	e7 5d       	subi	r30, 0xD7	; 215
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	40 81       	ld	r20, Z
    14ea:	51 81       	ldd	r21, Z+1	; 0x01
    14ec:	88 85       	ldd	r24, Y+8	; 0x08
    14ee:	99 85       	ldd	r25, Y+9	; 0x09
    14f0:	9c 01       	movw	r18, r24
    14f2:	21 5f       	subi	r18, 0xF1	; 241
    14f4:	3e 4f       	sbci	r19, 0xFE	; 254
    14f6:	ca 01       	movw	r24, r20
    14f8:	b9 01       	movw	r22, r18
    14fa:	0e 94 68 50 	call	0xa0d0	; 0xa0d0 <_ZN5CUART4peekEPc>
    14fe:	1d 86       	std	Y+13, r1	; 0x0d
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	11 f0       	breq	.+4      	; 0x1508 <_ZN6CModem14GetUnSolicitedEv+0x4e>
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	8d 87       	std	Y+13, r24	; 0x0d
    1508:	9d 85       	ldd	r25, Y+13	; 0x0d
    150a:	99 23       	and	r25, r25
    150c:	09 f4       	brne	.+2      	; 0x1510 <_ZN6CModem14GetUnSolicitedEv+0x56>
    150e:	0d c1       	rjmp	.+538    	; 0x172a <_ZN6CModem14GetUnSolicitedEv+0x270>

    if (strstr_P(rxmsg, PSTR("CONNECT FAIL"))) {
    1510:	88 85       	ldd	r24, Y+8	; 0x08
    1512:	99 85       	ldd	r25, Y+9	; 0x09
    1514:	81 5f       	subi	r24, 0xF1	; 241
    1516:	9e 4f       	sbci	r25, 0xFE	; 254
    1518:	2e e8       	ldi	r18, 0x8E	; 142
    151a:	31 e0       	ldi	r19, 0x01	; 1
    151c:	b9 01       	movw	r22, r18
    151e:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    1522:	1c 86       	std	Y+12, r1	; 0x0c
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	11 f0       	breq	.+4      	; 0x152c <_ZN6CModem14GetUnSolicitedEv+0x72>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	8c 87       	std	Y+12, r24	; 0x0c
    152c:	9c 85       	ldd	r25, Y+12	; 0x0c
    152e:	99 23       	and	r25, r25
    1530:	21 f0       	breq	.+8      	; 0x153a <_ZN6CModem14GetUnSolicitedEv+0x80>
      mdmState = MDM_IPSHUTDOWN;
    1532:	e8 85       	ldd	r30, Y+8	; 0x08
    1534:	f9 85       	ldd	r31, Y+9	; 0x09
    1536:	8a e2       	ldi	r24, 0x2A	; 42
    1538:	80 83       	st	Z, r24
    }
    if (strstr_P(rxmsg, PSTR("+CMTI: \"SM\","))) {
    153a:	88 85       	ldd	r24, Y+8	; 0x08
    153c:	99 85       	ldd	r25, Y+9	; 0x09
    153e:	81 5f       	subi	r24, 0xF1	; 241
    1540:	9e 4f       	sbci	r25, 0xFE	; 254
    1542:	21 e8       	ldi	r18, 0x81	; 129
    1544:	31 e0       	ldi	r19, 0x01	; 1
    1546:	b9 01       	movw	r22, r18
    1548:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    154c:	1b 86       	std	Y+11, r1	; 0x0b
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	11 f0       	breq	.+4      	; 0x1556 <_ZN6CModem14GetUnSolicitedEv+0x9c>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	8b 87       	std	Y+11, r24	; 0x0b
    1556:	9b 85       	ldd	r25, Y+11	; 0x0b
    1558:	99 23       	and	r25, r25
    155a:	09 f4       	brne	.+2      	; 0x155e <_ZN6CModem14GetUnSolicitedEv+0xa4>
    155c:	4d c0       	rjmp	.+154    	; 0x15f8 <_ZN6CModem14GetUnSolicitedEv+0x13e>
      mdmState = MDM_READ_SMS;
    155e:	e8 85       	ldd	r30, Y+8	; 0x08
    1560:	f9 85       	ldd	r31, Y+9	; 0x09
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	80 83       	st	Z, r24
      pstr = strchr(rxmsg, ',');
    1566:	88 85       	ldd	r24, Y+8	; 0x08
    1568:	99 85       	ldd	r25, Y+9	; 0x09
    156a:	81 5f       	subi	r24, 0xF1	; 241
    156c:	9e 4f       	sbci	r25, 0xFE	; 254
    156e:	6c e2       	ldi	r22, 0x2C	; 44
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <strchr>
    1576:	9f 83       	std	Y+7, r25	; 0x07
    1578:	8e 83       	std	Y+6, r24	; 0x06
      if (pstr) {
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	39 f1       	breq	.+78     	; 0x15d0 <_ZN6CModem14GetUnSolicitedEv+0x116>
        pstr++;
    1582:	8e 81       	ldd	r24, Y+6	; 0x06
    1584:	9f 81       	ldd	r25, Y+7	; 0x07
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	9f 83       	std	Y+7, r25	; 0x07
    158a:	8e 83       	std	Y+6, r24	; 0x06
        if (strlen(pstr) > 10) {
    158c:	8e 81       	ldd	r24, Y+6	; 0x06
    158e:	9f 81       	ldd	r25, Y+7	; 0x07
    1590:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    1594:	8b 30       	cpi	r24, 0x0B	; 11
    1596:	91 05       	cpc	r25, r1
    1598:	88 f0       	brcs	.+34     	; 0x15bc <_ZN6CModem14GetUnSolicitedEv+0x102>
          pstr[9] = 0;
    159a:	8e 81       	ldd	r24, Y+6	; 0x06
    159c:	9f 81       	ldd	r25, Y+7	; 0x07
    159e:	fc 01       	movw	r30, r24
    15a0:	39 96       	adiw	r30, 0x09	; 9
    15a2:	10 82       	st	Z, r1
          strncpy(sms.nr, pstr, 10);
    15a4:	88 85       	ldd	r24, Y+8	; 0x08
    15a6:	99 85       	ldd	r25, Y+9	; 0x09
    15a8:	84 5a       	subi	r24, 0xA4	; 164
    15aa:	9d 4f       	sbci	r25, 0xFD	; 253
    15ac:	2e 81       	ldd	r18, Y+6	; 0x06
    15ae:	3f 81       	ldd	r19, Y+7	; 0x07
    15b0:	b9 01       	movw	r22, r18
    15b2:	4a e0       	ldi	r20, 0x0A	; 10
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <strncpy>
    15ba:	15 c0       	rjmp	.+42     	; 0x15e6 <_ZN6CModem14GetUnSolicitedEv+0x12c>
        } else {
          strcpy(sms.nr, pstr);
    15bc:	88 85       	ldd	r24, Y+8	; 0x08
    15be:	99 85       	ldd	r25, Y+9	; 0x09
    15c0:	84 5a       	subi	r24, 0xA4	; 164
    15c2:	9d 4f       	sbci	r25, 0xFD	; 253
    15c4:	2e 81       	ldd	r18, Y+6	; 0x06
    15c6:	3f 81       	ldd	r19, Y+7	; 0x07
    15c8:	b9 01       	movw	r22, r18
    15ca:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
    15ce:	0b c0       	rjmp	.+22     	; 0x15e6 <_ZN6CModem14GetUnSolicitedEv+0x12c>
        }
      } else {
        strcpy(sms.nr, "0");
    15d0:	88 85       	ldd	r24, Y+8	; 0x08
    15d2:	99 85       	ldd	r25, Y+9	; 0x09
    15d4:	84 5a       	subi	r24, 0xA4	; 164
    15d6:	9d 4f       	sbci	r25, 0xFD	; 253
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	32 e0       	ldi	r19, 0x02	; 2
    15dc:	b9 01       	movw	r22, r18
    15de:	42 e0       	ldi	r20, 0x02	; 2
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
      }
      pUart->clearRx();
    15e6:	88 85       	ldd	r24, Y+8	; 0x08
    15e8:	99 85       	ldd	r25, Y+9	; 0x09
    15ea:	fc 01       	movw	r30, r24
    15ec:	e7 5d       	subi	r30, 0xD7	; 215
    15ee:	fd 4f       	sbci	r31, 0xFD	; 253
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_ZN5CUART7clearRxEv>
    }
    if (strstr_P(rxmsg, PSTR("+CME"))) {
    15f8:	88 85       	ldd	r24, Y+8	; 0x08
    15fa:	99 85       	ldd	r25, Y+9	; 0x09
    15fc:	81 5f       	subi	r24, 0xF1	; 241
    15fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1600:	2c e7       	ldi	r18, 0x7C	; 124
    1602:	31 e0       	ldi	r19, 0x01	; 1
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    160a:	1a 86       	std	Y+10, r1	; 0x0a
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	11 f0       	breq	.+4      	; 0x1614 <_ZN6CModem14GetUnSolicitedEv+0x15a>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	8a 87       	std	Y+10, r24	; 0x0a
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	99 23       	and	r25, r25
    1618:	69 f0       	breq	.+26     	; 0x1634 <_ZN6CModem14GetUnSolicitedEv+0x17a>
      mdmState = MDM_READY;
    161a:	e8 85       	ldd	r30, Y+8	; 0x08
    161c:	f9 85       	ldd	r31, Y+9	; 0x09
    161e:	8a e0       	ldi	r24, 0x0A	; 10
    1620:	80 83       	st	Z, r24
      pUart->clearRx();
    1622:	88 85       	ldd	r24, Y+8	; 0x08
    1624:	99 85       	ldd	r25, Y+9	; 0x09
    1626:	fc 01       	movw	r30, r24
    1628:	e7 5d       	subi	r30, 0xD7	; 215
    162a:	fd 4f       	sbci	r31, 0xFD	; 253
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_ZN5CUART7clearRxEv>
    }
    pstr =strstr_P(rxmsg, PSTR("+IPD"));
    1634:	88 85       	ldd	r24, Y+8	; 0x08
    1636:	99 85       	ldd	r25, Y+9	; 0x09
    1638:	81 5f       	subi	r24, 0xF1	; 241
    163a:	9e 4f       	sbci	r25, 0xFE	; 254
    163c:	27 e7       	ldi	r18, 0x77	; 119
    163e:	31 e0       	ldi	r19, 0x01	; 1
    1640:	b9 01       	movw	r22, r18
    1642:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    1646:	9f 83       	std	Y+7, r25	; 0x07
    1648:	8e 83       	std	Y+6, r24	; 0x06
    if (pstr!=0 && gprsrx == false) {
    164a:	8e 81       	ldd	r24, Y+6	; 0x06
    164c:	9f 81       	ldd	r25, Y+7	; 0x07
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	09 f4       	brne	.+2      	; 0x1654 <_ZN6CModem14GetUnSolicitedEv+0x19a>
    1652:	6b c0       	rjmp	.+214    	; 0x172a <_ZN6CModem14GetUnSolicitedEv+0x270>
    1654:	88 85       	ldd	r24, Y+8	; 0x08
    1656:	99 85       	ldd	r25, Y+9	; 0x09
    1658:	fc 01       	movw	r30, r24
    165a:	ee 5c       	subi	r30, 0xCE	; 206
    165c:	fb 4f       	sbci	r31, 0xFB	; 251
    165e:	80 81       	ld	r24, Z
    1660:	88 23       	and	r24, r24
    1662:	09 f0       	breq	.+2      	; 0x1666 <_ZN6CModem14GetUnSolicitedEv+0x1ac>
    1664:	62 c0       	rjmp	.+196    	; 0x172a <_ZN6CModem14GetUnSolicitedEv+0x270>
      //DbgUart.sendStr(rxmsg);
      start = strchr(rxmsg,'*');
    1666:	88 85       	ldd	r24, Y+8	; 0x08
    1668:	99 85       	ldd	r25, Y+9	; 0x09
    166a:	81 5f       	subi	r24, 0xF1	; 241
    166c:	9e 4f       	sbci	r25, 0xFE	; 254
    166e:	6a e2       	ldi	r22, 0x2A	; 42
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <strchr>
    1676:	9d 83       	std	Y+5, r25	; 0x05
    1678:	8c 83       	std	Y+4, r24	; 0x04
      if(start) {
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	09 f4       	brne	.+2      	; 0x1684 <_ZN6CModem14GetUnSolicitedEv+0x1ca>
    1682:	53 c0       	rjmp	.+166    	; 0x172a <_ZN6CModem14GetUnSolicitedEv+0x270>
        end = strchr(rxmsg,'#');
    1684:	88 85       	ldd	r24, Y+8	; 0x08
    1686:	99 85       	ldd	r25, Y+9	; 0x09
    1688:	81 5f       	subi	r24, 0xF1	; 241
    168a:	9e 4f       	sbci	r25, 0xFE	; 254
    168c:	63 e2       	ldi	r22, 0x23	; 35
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	0e 94 ae 5b 	call	0xb75c	; 0xb75c <strchr>
    1694:	9b 83       	std	Y+3, r25	; 0x03
    1696:	8a 83       	std	Y+2, r24	; 0x02
        if(end){
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	9b 81       	ldd	r25, Y+3	; 0x03
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	09 f4       	brne	.+2      	; 0x16a2 <_ZN6CModem14GetUnSolicitedEv+0x1e8>
    16a0:	44 c0       	rjmp	.+136    	; 0x172a <_ZN6CModem14GetUnSolicitedEv+0x270>
          //CLR_RTS();
          len = end - start;
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	9b 81       	ldd	r25, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	92 2f       	mov	r25, r18
    16ae:	98 1b       	sub	r25, r24
    16b0:	89 2f       	mov	r24, r25
    16b2:	89 83       	std	Y+1, r24	; 0x01
          memcpy(gprsraw,start,len);
    16b4:	88 85       	ldd	r24, Y+8	; 0x08
    16b6:	99 85       	ldd	r25, Y+9	; 0x09
    16b8:	ac 01       	movw	r20, r24
    16ba:	4c 5c       	subi	r20, 0xCC	; 204
    16bc:	5c 4f       	sbci	r21, 0xFC	; 252
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	e8 2f       	mov	r30, r24
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	2c 81       	ldd	r18, Y+4	; 0x04
    16c6:	3d 81       	ldd	r19, Y+5	; 0x05
    16c8:	ca 01       	movw	r24, r20
    16ca:	b9 01       	movw	r22, r18
    16cc:	af 01       	movw	r20, r30
    16ce:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
          DbgUart.sendStr_P(PSTR("\n\r ==============RECEIVED STRING=============\n\r"));
    16d2:	27 e4       	ldi	r18, 0x47	; 71
    16d4:	31 e0       	ldi	r19, 0x01	; 1
    16d6:	89 ee       	ldi	r24, 0xE9	; 233
    16d8:	94 e0       	ldi	r25, 0x04	; 4
    16da:	b9 01       	movw	r22, r18
    16dc:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
          DbgUart.sendStr(gprsraw);
    16e0:	88 85       	ldd	r24, Y+8	; 0x08
    16e2:	99 85       	ldd	r25, Y+9	; 0x09
    16e4:	9c 01       	movw	r18, r24
    16e6:	2c 5c       	subi	r18, 0xCC	; 204
    16e8:	3c 4f       	sbci	r19, 0xFC	; 252
    16ea:	89 ee       	ldi	r24, 0xE9	; 233
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	b9 01       	movw	r22, r18
    16f0:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
          //pUart->receive((u08*)NULL,(end-pstr));
          DbgUart.sendStr_P(PSTR("\n\r=============== END =======================\n\r"));
    16f4:	27 e1       	ldi	r18, 0x17	; 23
    16f6:	31 e0       	ldi	r19, 0x01	; 1
    16f8:	89 ee       	ldi	r24, 0xE9	; 233
    16fa:	94 e0       	ldi	r25, 0x04	; 4
    16fc:	b9 01       	movw	r22, r18
    16fe:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>

          gprsrx = true;
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	99 85       	ldd	r25, Y+9	; 0x09
    1706:	fc 01       	movw	r30, r24
    1708:	ee 5c       	subi	r30, 0xCE	; 206
    170a:	fb 4f       	sbci	r31, 0xFB	; 251
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 83       	st	Z, r24
          mdmState = MDM_READY;
    1710:	e8 85       	ldd	r30, Y+8	; 0x08
    1712:	f9 85       	ldd	r31, Y+9	; 0x09
    1714:	8a e0       	ldi	r24, 0x0A	; 10
    1716:	80 83       	st	Z, r24
          pUart->clearRx();
    1718:	88 85       	ldd	r24, Y+8	; 0x08
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	fc 01       	movw	r30, r24
    171e:	e7 5d       	subi	r30, 0xD7	; 215
    1720:	fd 4f       	sbci	r31, 0xFD	; 253
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_ZN5CUART7clearRxEv>
        }
      }
    }
    //SET_RTS();
  }
}
    172a:	2d 96       	adiw	r28, 0x0d	; 13
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <_ZN6CModem9GetAtRespEPKc>:
      break;
  }
  return ret;
}
/*******************************************************************************/
bool CModem::GetAtResp(PGM_P rspStr) {
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	27 97       	sbiw	r28, 0x07	; 7
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	7c 83       	std	Y+4, r23	; 0x04
    175e:	6b 83       	std	Y+3, r22	; 0x03
  if (pUart->peek(rxmsg)) {
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	fc 01       	movw	r30, r24
    1766:	e7 5d       	subi	r30, 0xD7	; 215
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	40 81       	ld	r20, Z
    176c:	51 81       	ldd	r21, Z+1	; 0x01
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	9a 81       	ldd	r25, Y+2	; 0x02
    1772:	9c 01       	movw	r18, r24
    1774:	21 5f       	subi	r18, 0xF1	; 241
    1776:	3e 4f       	sbci	r19, 0xFE	; 254
    1778:	ca 01       	movw	r24, r20
    177a:	b9 01       	movw	r22, r18
    177c:	0e 94 68 50 	call	0xa0d0	; 0xa0d0 <_ZN5CUART4peekEPc>
    1780:	1f 82       	std	Y+7, r1	; 0x07
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	11 f0       	breq	.+4      	; 0x178a <_ZN6CModem9GetAtRespEPKc+0x4e>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	8f 83       	std	Y+7, r24	; 0x07
    178a:	8f 81       	ldd	r24, Y+7	; 0x07
    178c:	88 23       	and	r24, r24
    178e:	e1 f1       	breq	.+120    	; 0x1808 <_ZN6CModem9GetAtRespEPKc+0xcc>
    //strcpy_P(&rxmsg[10],rspStr);
    if (strstr_P(rxmsg, (rspStr))) {
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	81 5f       	subi	r24, 0xF1	; 241
    1796:	9e 4f       	sbci	r25, 0xFE	; 254
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	b9 01       	movw	r22, r18
    179e:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	89 f1       	breq	.+98     	; 0x1808 <_ZN6CModem9GetAtRespEPKc+0xcc>
      cmdState = START;
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	81 83       	std	Z+1, r24	; 0x01
      pUart->receive((u08 *) rxmsg, pUart->rxnum());
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	fc 01       	movw	r30, r24
    17b4:	e7 5d       	subi	r30, 0xD7	; 215
    17b6:	fd 4f       	sbci	r31, 0xFD	; 253
    17b8:	00 81       	ld	r16, Z
    17ba:	11 81       	ldd	r17, Z+1	; 0x01
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	0f 2e       	mov	r0, r31
    17c2:	ff e0       	ldi	r31, 0x0F	; 15
    17c4:	ef 2e       	mov	r14, r31
    17c6:	f1 e0       	ldi	r31, 0x01	; 1
    17c8:	ff 2e       	mov	r15, r31
    17ca:	f0 2d       	mov	r31, r0
    17cc:	e8 0e       	add	r14, r24
    17ce:	f9 1e       	adc	r15, r25
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	fc 01       	movw	r30, r24
    17d6:	e7 5d       	subi	r30, 0xD7	; 215
    17d8:	fd 4f       	sbci	r31, 0xFD	; 253
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	0e 94 46 50 	call	0xa08c	; 0xa08c <_ZN5CUART5rxnumEv>
    17e2:	9c 01       	movw	r18, r24
    17e4:	c8 01       	movw	r24, r16
    17e6:	b7 01       	movw	r22, r14
    17e8:	a9 01       	movw	r20, r18
    17ea:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
      DbgUart.sendStr(rxmsg);
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	9c 01       	movw	r18, r24
    17f4:	21 5f       	subi	r18, 0xF1	; 241
    17f6:	3e 4f       	sbci	r19, 0xFE	; 254
    17f8:	89 ee       	ldi	r24, 0xE9	; 233
    17fa:	94 e0       	ldi	r25, 0x04	; 4
    17fc:	b9 01       	movw	r22, r18
    17fe:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      return true;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	8e 83       	std	Y+6, r24	; 0x06
    1806:	71 c0       	rjmp	.+226    	; 0x18ea <_ZN6CModem9GetAtRespEPKc+0x1ae>
     else if (strchr(rxmsg, '\r')) {
     DbgUart.sendStr(rxmsg);
     }
     */
  }
  if (rspStr == 0) {
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	39 f4       	brne	.+14     	; 0x181e <_ZN6CModem9GetAtRespEPKc+0xe2>
    cmdState = START;
    1810:	e9 81       	ldd	r30, Y+1	; 0x01
    1812:	fa 81       	ldd	r31, Y+2	; 0x02
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	81 83       	std	Z+1, r24	; 0x01
    return true;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	8e 83       	std	Y+6, r24	; 0x06
    181c:	66 c0       	rjmp	.+204    	; 0x18ea <_ZN6CModem9GetAtRespEPKc+0x1ae>
  }

  if (atomicTime > timeout) {
    181e:	e9 81       	ldd	r30, Y+1	; 0x01
    1820:	fa 81       	ldd	r31, Y+2	; 0x02
    1822:	23 81       	ldd	r18, Z+3	; 0x03
    1824:	34 81       	ldd	r19, Z+4	; 0x04
    1826:	45 81       	ldd	r20, Z+5	; 0x05
    1828:	56 81       	ldd	r21, Z+6	; 0x06
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	83 85       	ldd	r24, Z+11	; 0x0b
    1830:	94 85       	ldd	r25, Z+12	; 0x0c
    1832:	a5 85       	ldd	r26, Z+13	; 0x0d
    1834:	b6 85       	ldd	r27, Z+14	; 0x0e
    1836:	1d 82       	std	Y+5, r1	; 0x05
    1838:	82 17       	cp	r24, r18
    183a:	93 07       	cpc	r25, r19
    183c:	a4 07       	cpc	r26, r20
    183e:	b5 07       	cpc	r27, r21
    1840:	10 f4       	brcc	.+4      	; 0x1846 <_ZN6CModem9GetAtRespEPKc+0x10a>
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	88 23       	and	r24, r24
    184a:	01 f1       	breq	.+64     	; 0x188c <_ZN6CModem9GetAtRespEPKc+0x150>
    cmdState = SEND;
    184c:	e9 81       	ldd	r30, Y+1	; 0x01
    184e:	fa 81       	ldd	r31, Y+2	; 0x02
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	81 83       	std	Z+1, r24	; 0x01
    DbgUart.uprintf("\r\nTimeout");
    1854:	00 d0       	rcall	.+0      	; 0x1856 <_ZN6CModem9GetAtRespEPKc+0x11a>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <_ZN6CModem9GetAtRespEPKc+0x11c>
    1858:	ed b7       	in	r30, 0x3d	; 61
    185a:	fe b7       	in	r31, 0x3e	; 62
    185c:	31 96       	adiw	r30, 0x01	; 1
    185e:	89 ee       	ldi	r24, 0xE9	; 233
    1860:	94 e0       	ldi	r25, 0x04	; 4
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	93 83       	std	Z+3, r25	; 0x03
    186c:	82 83       	std	Z+2, r24	; 0x02
    186e:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    pUart->clearRx();
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	9a 81       	ldd	r25, Y+2	; 0x02
    187e:	fc 01       	movw	r30, r24
    1880:	e7 5d       	subi	r30, 0xD7	; 215
    1882:	fd 4f       	sbci	r31, 0xFD	; 253
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_ZN5CUART7clearRxEv>
  }
  if (retry > MDM_RETRIES_VAL) {
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	fc 01       	movw	r30, r24
    1892:	e0 5f       	subi	r30, 0xF0	; 240
    1894:	fd 4f       	sbci	r31, 0xFD	; 253
    1896:	80 81       	ld	r24, Z
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	30 f1       	brcs	.+76     	; 0x18e8 <_ZN6CModem9GetAtRespEPKc+0x1ac>
    cmdState = START;
    189c:	e9 81       	ldd	r30, Y+1	; 0x01
    189e:	fa 81       	ldd	r31, Y+2	; 0x02
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	81 83       	std	Z+1, r24	; 0x01
    mdmState = failState;
    18a4:	e9 81       	ldd	r30, Y+1	; 0x01
    18a6:	fa 81       	ldd	r31, Y+2	; 0x02
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	e9 81       	ldd	r30, Y+1	; 0x01
    18ac:	fa 81       	ldd	r31, Y+2	; 0x02
    18ae:	80 83       	st	Z, r24
    DbgUart.uprintf("\r\nfailsState");
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <_ZN6CModem9GetAtRespEPKc+0x176>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <_ZN6CModem9GetAtRespEPKc+0x178>
    18b4:	ed b7       	in	r30, 0x3d	; 61
    18b6:	fe b7       	in	r31, 0x3e	; 62
    18b8:	31 96       	adiw	r30, 0x01	; 1
    18ba:	89 ee       	ldi	r24, 0xE9	; 233
    18bc:	94 e0       	ldi	r25, 0x04	; 4
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	80 83       	st	Z, r24
    18c2:	8d e0       	ldi	r24, 0x0D	; 13
    18c4:	92 e0       	ldi	r25, 0x02	; 2
    18c6:	93 83       	std	Z+3, r25	; 0x03
    18c8:	82 83       	std	Z+2, r24	; 0x02
    18ca:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    pUart->clearRx();
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	fc 01       	movw	r30, r24
    18dc:	e7 5d       	subi	r30, 0xD7	; 215
    18de:	fd 4f       	sbci	r31, 0xFD	; 253
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	0e 94 d6 50 	call	0xa1ac	; 0xa1ac <_ZN5CUART7clearRxEv>
  }
  return false;
    18e8:	1e 82       	std	Y+6, r1	; 0x06
    18ea:	8e 81       	ldd	r24, Y+6	; 0x06
}
    18ec:	27 96       	adiw	r28, 0x07	; 7
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	08 95       	ret

00001906 <_ZN6CModem11HandleAtCmdEPcPKc>:
    default:
      break;
  }
}
/*******************************************************************************/
bool CModem::HandleAtCmd(c08 *str, PGM_P rspStr) {
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	29 97       	sbiw	r28, 0x09	; 9
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	9b 83       	std	Y+3, r25	; 0x03
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	7d 83       	std	Y+5, r23	; 0x05
    1920:	6c 83       	std	Y+4, r22	; 0x04
    1922:	5f 83       	std	Y+7, r21	; 0x07
    1924:	4e 83       	std	Y+6, r20	; 0x06
  bool ret;
  ret = false;
    1926:	19 82       	std	Y+1, r1	; 0x01
  switch (cmdState) {
    1928:	ea 81       	ldd	r30, Y+2	; 0x02
    192a:	fb 81       	ldd	r31, Y+3	; 0x03
    192c:	81 81       	ldd	r24, Z+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	39 87       	std	Y+9, r19	; 0x09
    1934:	28 87       	std	Y+8, r18	; 0x08
    1936:	88 85       	ldd	r24, Y+8	; 0x08
    1938:	99 85       	ldd	r25, Y+9	; 0x09
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	91 05       	cpc	r25, r1
    193e:	b1 f0       	breq	.+44     	; 0x196c <_ZN6CModem11HandleAtCmdEPcPKc+0x66>
    1940:	28 85       	ldd	r18, Y+8	; 0x08
    1942:	39 85       	ldd	r19, Y+9	; 0x09
    1944:	23 30       	cpi	r18, 0x03	; 3
    1946:	31 05       	cpc	r19, r1
    1948:	09 f4       	brne	.+2      	; 0x194c <_ZN6CModem11HandleAtCmdEPcPKc+0x46>
    194a:	44 c0       	rjmp	.+136    	; 0x19d4 <_ZN6CModem11HandleAtCmdEPcPKc+0xce>
    194c:	88 85       	ldd	r24, Y+8	; 0x08
    194e:	99 85       	ldd	r25, Y+9	; 0x09
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	91 05       	cpc	r25, r1
    1954:	09 f0       	breq	.+2      	; 0x1958 <_ZN6CModem11HandleAtCmdEPcPKc+0x52>
    1956:	46 c0       	rjmp	.+140    	; 0x19e4 <_ZN6CModem11HandleAtCmdEPcPKc+0xde>
    case START:
      retry = 0;
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	fc 01       	movw	r30, r24
    195e:	e0 5f       	subi	r30, 0xF0	; 240
    1960:	fd 4f       	sbci	r31, 0xFD	; 253
    1962:	10 82       	st	Z, r1
      clearTimer();
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
    case SEND:
      memset(rxmsg, 0, sizeof(rxmsg));
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	81 5f       	subi	r24, 0xF1	; 241
    1972:	9e 4f       	sbci	r25, 0xFE	; 254
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	4e ef       	ldi	r20, 0xFE	; 254
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
      DbgUart.sendStr(str);
    1980:	89 ee       	ldi	r24, 0xE9	; 233
    1982:	94 e0       	ldi	r25, 0x04	; 4
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	b9 01       	movw	r22, r18
    198a:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      pUart->sendStr(str);
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	fc 01       	movw	r30, r24
    1994:	e7 5d       	subi	r30, 0xD7	; 215
    1996:	fd 4f       	sbci	r31, 0xFD	; 253
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	b9 01       	movw	r22, r18
    19a2:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      cmdState = RETRY;
    19a6:	ea 81       	ldd	r30, Y+2	; 0x02
    19a8:	fb 81       	ldd	r31, Y+3	; 0x03
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	81 83       	std	Z+1, r24	; 0x01
      clearTimer();
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZN6CModem10clearTimerEv>
      retry++;
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	fc 01       	movw	r30, r24
    19bc:	e0 5f       	subi	r30, 0xF0	; 240
    19be:	fd 4f       	sbci	r31, 0xFD	; 253
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	2f 5f       	subi	r18, 0xFF	; 255
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ca:	fc 01       	movw	r30, r24
    19cc:	e0 5f       	subi	r30, 0xF0	; 240
    19ce:	fd 4f       	sbci	r31, 0xFD	; 253
    19d0:	20 83       	st	Z, r18
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <_ZN6CModem11HandleAtCmdEPcPKc+0xde>
      break;
    case RETRY:
      ret = GetAtResp(rspStr);
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	2e 81       	ldd	r18, Y+6	; 0x06
    19da:	3f 81       	ldd	r19, Y+7	; 0x07
    19dc:	b9 01       	movw	r22, r18
    19de:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN6CModem9GetAtRespEPKc>
    19e2:	89 83       	std	Y+1, r24	; 0x01
      break;
  }
  return ret;
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e6:	29 96       	adiw	r28, 0x09	; 9
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <_ZN6CModem7ServiceEv>:
    atomicTime = 0;
  }
}

/*******************************************************************************/
void CModem::Service(void) {
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	60 97       	sbiw	r28, 0x10	; 16
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	8b 83       	std	Y+3, r24	; 0x03
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a10:	ef e5       	ldi	r30, 0x5F	; 95
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8a 83       	std	Y+2, r24	; 0x02
    1a18:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZL12__iCliRetValv>
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	1f c0       	rjmp	.+62     	; 0x1a5e <_ZN6CModem7ServiceEv+0x66>
    atomicTime = isr_timer;
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	9c 81       	ldd	r25, Y+4	; 0x04
    1a24:	fc 01       	movw	r30, r24
    1a26:	e8 5a       	subi	r30, 0xA8	; 168
    1a28:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a30:	b3 81       	ldd	r27, Z+3	; 0x03
    1a32:	eb 81       	ldd	r30, Y+3	; 0x03
    1a34:	fc 81       	ldd	r31, Y+4	; 0x04
    1a36:	83 83       	std	Z+3, r24	; 0x03
    1a38:	94 83       	std	Z+4, r25	; 0x04
    1a3a:	a5 83       	std	Z+5, r26	; 0x05
    1a3c:	b6 83       	std	Z+6, r27	; 0x06
    serviceTime = isr_timer;
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	fc 01       	movw	r30, r24
    1a44:	e8 5a       	subi	r30, 0xA8	; 168
    1a46:	fd 4f       	sbci	r31, 0xFD	; 253
    1a48:	80 81       	ld	r24, Z
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a4e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a50:	eb 81       	ldd	r30, Y+3	; 0x03
    1a52:	fc 81       	ldd	r31, Y+4	; 0x04
    1a54:	87 83       	std	Z+7, r24	; 0x07
    1a56:	90 87       	std	Z+8, r25	; 0x08
    1a58:	a1 87       	std	Z+9, r26	; 0x09
    1a5a:	b2 87       	std	Z+10, r27	; 0x0a
  }
}

/*******************************************************************************/
void CModem::Service(void) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a5c:	19 82       	std	Y+1, r1	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 23       	and	r24, r24
    1a62:	f1 f6       	brne	.-68     	; 0x1a20 <_ZN6CModem7ServiceEv+0x28>
    atomicTime = isr_timer;
    serviceTime = isr_timer;
  }
    1a64:	ce 01       	movw	r24, r28
    1a66:	02 96       	adiw	r24, 0x02	; 2
    1a68:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZL10__iRestorePKh>

  if (serviceTime < SERVICE_INTERVAL) {
    1a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a70:	87 81       	ldd	r24, Z+7	; 0x07
    1a72:	90 85       	ldd	r25, Z+8	; 0x08
    1a74:	a1 85       	ldd	r26, Z+9	; 0x09
    1a76:	b2 85       	ldd	r27, Z+10	; 0x0a
    1a78:	18 8a       	std	Y+16, r1	; 0x10
    1a7a:	80 34       	cpi	r24, 0x40	; 64
    1a7c:	2d e0       	ldi	r18, 0x0D	; 13
    1a7e:	92 07       	cpc	r25, r18
    1a80:	23 e0       	ldi	r18, 0x03	; 3
    1a82:	a2 07       	cpc	r26, r18
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	b2 07       	cpc	r27, r18
    1a88:	10 f4       	brcc	.+4      	; 0x1a8e <_ZN6CModem7ServiceEv+0x96>
    1a8a:	31 e0       	ldi	r19, 0x01	; 1
    1a8c:	38 8b       	std	Y+16, r19	; 0x10
    1a8e:	88 89       	ldd	r24, Y+16	; 0x10
    1a90:	88 23       	and	r24, r24
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <_ZN6CModem7ServiceEv+0xa0>
    1a94:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__stack+0x895>
    return;
  }
  serviceTime = 0;
    1a98:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a9c:	17 82       	std	Z+7, r1	; 0x07
    1a9e:	10 86       	std	Z+8, r1	; 0x08
    1aa0:	11 86       	std	Z+9, r1	; 0x09
    1aa2:	12 86       	std	Z+10, r1	; 0x0a

  timeout = MDM_TIMEOUT_VAL;
    1aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa8:	80 e4       	ldi	r24, 0x40	; 64
    1aaa:	92 e4       	ldi	r25, 0x42	; 66
    1aac:	af e0       	ldi	r26, 0x0F	; 15
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	83 87       	std	Z+11, r24	; 0x0b
    1ab2:	94 87       	std	Z+12, r25	; 0x0c
    1ab4:	a5 87       	std	Z+13, r26	; 0x0d
    1ab6:	b6 87       	std	Z+14, r27	; 0x0e
  GetUnSolicited();
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <_ZN6CModem14GetUnSolicitedEv>

  if (taskRetry > MDM_RETRIES_VAL) {
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	ef 5e       	subi	r30, 0xEF	; 239
    1ac8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aca:	80 81       	ld	r24, Z
    1acc:	84 30       	cpi	r24, 0x04	; 4
    1ace:	50 f0       	brcs	.+20     	; 0x1ae4 <_ZN6CModem7ServiceEv+0xec>
    taskRetry = 0;
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	ef 5e       	subi	r30, 0xEF	; 239
    1ad8:	fd 4f       	sbci	r31, 0xFD	; 253
    1ada:	10 82       	st	Z, r1
    mdmState = MDM_READY;
    1adc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ade:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae0:	8a e0       	ldi	r24, 0x0A	; 10
    1ae2:	80 83       	st	Z, r24
  }
  failState = MDM_STARTUP;
    1ae4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	82 83       	std	Z+2, r24	; 0x02

  switch (mdmState) {
    1aec:	eb 81       	ldd	r30, Y+3	; 0x03
    1aee:	fc 81       	ldd	r31, Y+4	; 0x04
    1af0:	80 81       	ld	r24, Z
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	3f 87       	std	Y+15, r19	; 0x0f
    1af8:	2e 87       	std	Y+14, r18	; 0x0e
    1afa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1afc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1afe:	84 32       	cpi	r24, 0x24	; 36
    1b00:	91 05       	cpc	r25, r1
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <_ZN6CModem7ServiceEv+0x10e>
    1b04:	00 c5       	rjmp	.+2560   	; 0x2506 <__stack+0x307>
    1b06:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b08:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b0a:	25 32       	cpi	r18, 0x25	; 37
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <_ZN6CModem7ServiceEv+0x11a>
    1b10:	64 c0       	rjmp	.+200    	; 0x1bda <_ZN6CModem7ServiceEv+0x1e2>
    1b12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b16:	85 31       	cpi	r24, 0x15	; 21
    1b18:	91 05       	cpc	r25, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <_ZN6CModem7ServiceEv+0x126>
    1b1c:	83 c1       	rjmp	.+774    	; 0x1e24 <_ZN6CModem7ServiceEv+0x42c>
    1b1e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b20:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b22:	26 31       	cpi	r18, 0x16	; 22
    1b24:	31 05       	cpc	r19, r1
    1b26:	6c f5       	brge	.+90     	; 0x1b82 <_ZN6CModem7ServiceEv+0x18a>
    1b28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b2c:	8c 30       	cpi	r24, 0x0C	; 12
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <_ZN6CModem7ServiceEv+0x13c>
    1b32:	4e c2       	rjmp	.+1180   	; 0x1fd0 <_ZN6CModem7ServiceEv+0x5d8>
    1b34:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b36:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b38:	2d 30       	cpi	r18, 0x0D	; 13
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	74 f4       	brge	.+28     	; 0x1b5a <_ZN6CModem7ServiceEv+0x162>
    1b3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b40:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	91 05       	cpc	r25, r1
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <_ZN6CModem7ServiceEv+0x152>
    1b48:	a3 c0       	rjmp	.+326    	; 0x1c90 <_ZN6CModem7ServiceEv+0x298>
    1b4a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b4c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b4e:	25 30       	cpi	r18, 0x05	; 5
    1b50:	31 05       	cpc	r19, r1
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <_ZN6CModem7ServiceEv+0x15e>
    1b54:	f3 c0       	rjmp	.+486    	; 0x1d3c <_ZN6CModem7ServiceEv+0x344>
    1b56:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__stack+0x895>
    1b5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b5e:	80 31       	cpi	r24, 0x10	; 16
    1b60:	91 05       	cpc	r25, r1
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <_ZN6CModem7ServiceEv+0x16e>
    1b64:	34 c4       	rjmp	.+2152   	; 0x23ce <__stack+0x1cf>
    1b66:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b68:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b6a:	22 31       	cpi	r18, 0x12	; 18
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <_ZN6CModem7ServiceEv+0x17a>
    1b70:	7c c1       	rjmp	.+760    	; 0x1e6a <_ZN6CModem7ServiceEv+0x472>
    1b72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b76:	8d 30       	cpi	r24, 0x0D	; 13
    1b78:	91 05       	cpc	r25, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <_ZN6CModem7ServiceEv+0x186>
    1b7c:	a3 c2       	rjmp	.+1350   	; 0x20c4 <_ZN6CModem7ServiceEv+0x6cc>
    1b7e:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__stack+0x895>
    1b82:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b84:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b86:	29 31       	cpi	r18, 0x19	; 25
    1b88:	31 05       	cpc	r19, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <_ZN6CModem7ServiceEv+0x196>
    1b8c:	11 c1       	rjmp	.+546    	; 0x1db0 <_ZN6CModem7ServiceEv+0x3b8>
    1b8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b90:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b92:	8a 31       	cpi	r24, 0x1A	; 26
    1b94:	91 05       	cpc	r25, r1
    1b96:	74 f4       	brge	.+28     	; 0x1bb4 <_ZN6CModem7ServiceEv+0x1bc>
    1b98:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b9a:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b9c:	27 31       	cpi	r18, 0x17	; 23
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <_ZN6CModem7ServiceEv+0x1ac>
    1ba2:	ed c2       	rjmp	.+1498   	; 0x217e <_ZN6CModem7ServiceEv+0x786>
    1ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ba6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ba8:	88 31       	cpi	r24, 0x18	; 24
    1baa:	91 05       	cpc	r25, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <_ZN6CModem7ServiceEv+0x1b8>
    1bae:	e3 c0       	rjmp	.+454    	; 0x1d76 <_ZN6CModem7ServiceEv+0x37e>
    1bb0:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <__stack+0x895>
    1bb4:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bb6:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bb8:	20 32       	cpi	r18, 0x20	; 32
    1bba:	31 05       	cpc	r19, r1
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <_ZN6CModem7ServiceEv+0x1c8>
    1bbe:	bf c3       	rjmp	.+1918   	; 0x233e <__stack+0x13f>
    1bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc4:	81 32       	cpi	r24, 0x21	; 33
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <_ZN6CModem7ServiceEv+0x1d4>
    1bca:	6c c4       	rjmp	.+2264   	; 0x24a4 <__stack+0x2a5>
    1bcc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bce:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bd0:	2a 31       	cpi	r18, 0x1A	; 26
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <_ZN6CModem7ServiceEv+0x1e0>
    1bd6:	09 c1       	rjmp	.+530    	; 0x1dea <_ZN6CModem7ServiceEv+0x3f2>
    1bd8:	5d c7       	rjmp	.+3770   	; 0x2a94 <__stack+0x895>
    1bda:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bdc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bde:	8c 32       	cpi	r24, 0x2C	; 44
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <_ZN6CModem7ServiceEv+0x1ee>
    1be4:	28 c7       	rjmp	.+3664   	; 0x2a36 <__stack+0x837>
    1be6:	2e 85       	ldd	r18, Y+14	; 0x0e
    1be8:	3f 85       	ldd	r19, Y+15	; 0x0f
    1bea:	2d 32       	cpi	r18, 0x2D	; 45
    1bec:	31 05       	cpc	r19, r1
    1bee:	2c f5       	brge	.+74     	; 0x1c3a <_ZN6CModem7ServiceEv+0x242>
    1bf0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf4:	88 32       	cpi	r24, 0x28	; 40
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <_ZN6CModem7ServiceEv+0x204>
    1bfa:	7f c6       	rjmp	.+3326   	; 0x28fa <__stack+0x6fb>
    1bfc:	2e 85       	ldd	r18, Y+14	; 0x0e
    1bfe:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c00:	29 32       	cpi	r18, 0x29	; 41
    1c02:	31 05       	cpc	r19, r1
    1c04:	6c f4       	brge	.+26     	; 0x1c20 <_ZN6CModem7ServiceEv+0x228>
    1c06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c0a:	85 32       	cpi	r24, 0x25	; 37
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <_ZN6CModem7ServiceEv+0x21a>
    1c10:	b4 c4       	rjmp	.+2408   	; 0x257a <__stack+0x37b>
    1c12:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c14:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c16:	26 32       	cpi	r18, 0x26	; 38
    1c18:	31 05       	cpc	r19, r1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_ZN6CModem7ServiceEv+0x226>
    1c1c:	f4 c4       	rjmp	.+2536   	; 0x2606 <__stack+0x407>
    1c1e:	3a c7       	rjmp	.+3700   	; 0x2a94 <__stack+0x895>
    1c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c24:	8a 32       	cpi	r24, 0x2A	; 42
    1c26:	91 05       	cpc	r25, r1
    1c28:	09 f4       	brne	.+2      	; 0x1c2c <_ZN6CModem7ServiceEv+0x234>
    1c2a:	e3 c6       	rjmp	.+3526   	; 0x29f2 <__stack+0x7f3>
    1c2c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c2e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c30:	2b 32       	cpi	r18, 0x2B	; 43
    1c32:	31 05       	cpc	r19, r1
    1c34:	0c f0       	brlt	.+2      	; 0x1c38 <_ZN6CModem7ServiceEv+0x240>
    1c36:	01 c3       	rjmp	.+1538   	; 0x223a <__stack+0x3b>
    1c38:	a0 c6       	rjmp	.+3392   	; 0x297a <__stack+0x77b>
    1c3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c3e:	80 33       	cpi	r24, 0x30	; 48
    1c40:	91 05       	cpc	r25, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <_ZN6CModem7ServiceEv+0x24e>
    1c44:	11 c5       	rjmp	.+2594   	; 0x2668 <__stack+0x469>
    1c46:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c48:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c4a:	21 33       	cpi	r18, 0x31	; 49
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	6c f4       	brge	.+26     	; 0x1c6a <_ZN6CModem7ServiceEv+0x272>
    1c50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c54:	8e 32       	cpi	r24, 0x2E	; 46
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <_ZN6CModem7ServiceEv+0x264>
    1c5a:	72 c4       	rjmp	.+2276   	; 0x2540 <__stack+0x341>
    1c5c:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c5e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c60:	2f 32       	cpi	r18, 0x2F	; 47
    1c62:	31 05       	cpc	r19, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <_ZN6CModem7ServiceEv+0x270>
    1c66:	62 c5       	rjmp	.+2756   	; 0x272c <__stack+0x52d>
    1c68:	15 c7       	rjmp	.+3626   	; 0x2a94 <__stack+0x895>
    1c6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c6e:	83 33       	cpi	r24, 0x33	; 51
    1c70:	91 05       	cpc	r25, r1
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <_ZN6CModem7ServiceEv+0x27e>
    1c74:	30 c5       	rjmp	.+2656   	; 0x26d6 <__stack+0x4d7>
    1c76:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c78:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c7a:	24 33       	cpi	r18, 0x34	; 52
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <_ZN6CModem7ServiceEv+0x28a>
    1c80:	80 c5       	rjmp	.+2816   	; 0x2782 <__stack+0x583>
    1c82:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c84:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c86:	81 33       	cpi	r24, 0x31	; 49
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <_ZN6CModem7ServiceEv+0x296>
    1c8c:	bc c5       	rjmp	.+2936   	; 0x2806 <__stack+0x607>
    1c8e:	02 c7       	rjmp	.+3588   	; 0x2a94 <__stack+0x895>
    /*******************************************************************************/
    case MDM_STARTUP:
      switch (cmdState) {
    1c90:	eb 81       	ldd	r30, Y+3	; 0x03
    1c92:	fc 81       	ldd	r31, Y+4	; 0x04
    1c94:	81 81       	ldd	r24, Z+1	; 0x01
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	3d 87       	std	Y+13, r19	; 0x0d
    1c9c:	2c 87       	std	Y+12, r18	; 0x0c
    1c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	69 f0       	breq	.+26     	; 0x1cc2 <_ZN6CModem7ServiceEv+0x2ca>
    1ca8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1caa:	3d 85       	ldd	r19, Y+13	; 0x0d
    1cac:	21 30       	cpi	r18, 0x01	; 1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	0c f4       	brge	.+2      	; 0x1cb4 <_ZN6CModem7ServiceEv+0x2bc>
    1cb2:	f0 c6       	rjmp	.+3552   	; 0x2a94 <__stack+0x895>
    1cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	91 05       	cpc	r25, r1
    1cbc:	0c f0       	brlt	.+2      	; 0x1cc0 <_ZN6CModem7ServiceEv+0x2c8>
    1cbe:	ea c6       	rjmp	.+3540   	; 0x2a94 <__stack+0x895>
    1cc0:	31 c0       	rjmp	.+98     	; 0x1d24 <_ZN6CModem7ServiceEv+0x32c>
        case START:
          retry = 0;
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	e0 5f       	subi	r30, 0xF0	; 240
    1cca:	fd 4f       	sbci	r31, 0xFD	; 253
    1ccc:	10 82       	st	Z, r1
          DbgUart.sendStr_P(PSTR("\n\rMDM_STARTUP"));
    1cce:	2a e6       	ldi	r18, 0x6A	; 106
    1cd0:	33 e0       	ldi	r19, 0x03	; 3
    1cd2:	89 ee       	ldi	r24, 0xE9	; 233
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	b9 01       	movw	r22, r18
    1cd8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
          cmdState = RETRY;
    1cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cde:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	81 83       	std	Z+1, r24	; 0x01
          initState = 1;
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	fc 01       	movw	r30, r24
    1cea:	ed 5d       	subi	r30, 0xDD	; 221
    1cec:	fd 4f       	sbci	r31, 0xFD	; 253
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 83       	st	Z, r24
          signal_ok = false;
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e4 5d       	subi	r30, 0xD4	; 212
    1cfa:	fd 4f       	sbci	r31, 0xFD	; 253
    1cfc:	10 82       	st	Z, r1
          simcard_ok = false;
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	e5 5d       	subi	r30, 0xD5	; 213
    1d06:	fd 4f       	sbci	r31, 0xFD	; 253
    1d08:	10 82       	st	Z, r1
          connect_ok = false;
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e3 5d       	subi	r30, 0xD3	; 211
    1d12:	fd 4f       	sbci	r31, 0xFD	; 253
    1d14:	10 82       	st	Z, r1
          registered_ok = false;
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	e2 5d       	subi	r30, 0xD2	; 210
    1d1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d20:	10 82       	st	Z, r1
    1d22:	b8 c6       	rjmp	.+3440   	; 0x2a94 <__stack+0x895>
          break;
        case RETRY:
        case SEND:
          if (Init()) {
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6CModem4InitEv>
    1d2c:	88 23       	and	r24, r24
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <_ZN6CModem7ServiceEv+0x33a>
    1d30:	b1 c6       	rjmp	.+3426   	; 0x2a94 <__stack+0x895>
            mdmState = MDM_CONFIGURE;
    1d32:	eb 81       	ldd	r30, Y+3	; 0x03
    1d34:	fc 81       	ldd	r31, Y+4	; 0x04
    1d36:	85 e0       	ldi	r24, 0x05	; 5
    1d38:	80 83       	st	Z, r24
    1d3a:	ac c6       	rjmp	.+3416   	; 0x2a94 <__stack+0x895>
          }
          break;
      }
      break;
    case MDM_CONFIGURE:
      strcpy_P(txcmd, PSTR("ATE0\r"));
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	0f 96       	adiw	r24, 0x0f	; 15
    1d42:	24 e6       	ldi	r18, 0x64	; 100
    1d44:	33 e0       	ldi	r19, 0x03	; 3
    1d46:	b9 01       	movw	r22, r18
    1d48:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_NONE)) {
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	ac 01       	movw	r20, r24
    1d52:	41 5f       	subi	r20, 0xF1	; 241
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	2d ee       	ldi	r18, 0xED	; 237
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	ba 01       	movw	r22, r20
    1d60:	a9 01       	movw	r20, r18
    1d62:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1d66:	88 23       	and	r24, r24
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <_ZN6CModem7ServiceEv+0x374>
    1d6a:	94 c6       	rjmp	.+3368   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_TEST_AT;
    1d6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d70:	88 e1       	ldi	r24, 0x18	; 24
    1d72:	80 83       	st	Z, r24
    1d74:	8f c6       	rjmp	.+3358   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_TEST_AT:
      strcpy_P(txcmd, PSTR("AT\r"));
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	0f 96       	adiw	r24, 0x0f	; 15
    1d7c:	20 e6       	ldi	r18, 0x60	; 96
    1d7e:	33 e0       	ldi	r19, 0x03	; 3
    1d80:	b9 01       	movw	r22, r18
    1d82:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	ac 01       	movw	r20, r24
    1d8c:	41 5f       	subi	r20, 0xF1	; 241
    1d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	24 ee       	ldi	r18, 0xE4	; 228
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	ba 01       	movw	r22, r20
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1da0:	88 23       	and	r24, r24
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <_ZN6CModem7ServiceEv+0x3ae>
    1da4:	77 c6       	rjmp	.+3310   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_ADD_IPHEAD;
    1da6:	eb 81       	ldd	r30, Y+3	; 0x03
    1da8:	fc 81       	ldd	r31, Y+4	; 0x04
    1daa:	8a e1       	ldi	r24, 0x1A	; 26
    1dac:	80 83       	st	Z, r24
    1dae:	72 c6       	rjmp	.+3300   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_GET_TIME:
      strcpy_P(txcmd, PSTR("AT+CCLK\r"));
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	0f 96       	adiw	r24, 0x0f	; 15
    1db6:	27 e5       	ldi	r18, 0x57	; 87
    1db8:	33 e0       	ldi	r19, 0x03	; 3
    1dba:	b9 01       	movw	r22, r18
    1dbc:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	ac 01       	movw	r20, r24
    1dc6:	41 5f       	subi	r20, 0xF1	; 241
    1dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	24 ee       	ldi	r18, 0xE4	; 228
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	ba 01       	movw	r22, r20
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1dda:	88 23       	and	r24, r24
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <_ZN6CModem7ServiceEv+0x3e8>
    1dde:	5a c6       	rjmp	.+3252   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_READY;
    1de0:	eb 81       	ldd	r30, Y+3	; 0x03
    1de2:	fc 81       	ldd	r31, Y+4	; 0x04
    1de4:	8a e0       	ldi	r24, 0x0A	; 10
    1de6:	80 83       	st	Z, r24
    1de8:	55 c6       	rjmp	.+3242   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_ADD_IPHEAD:
      strcpy_P(txcmd, PSTR("AT+CIPHEAD=1\r"));
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	0f 96       	adiw	r24, 0x0f	; 15
    1df0:	29 e4       	ldi	r18, 0x49	; 73
    1df2:	33 e0       	ldi	r19, 0x03	; 3
    1df4:	b9 01       	movw	r22, r18
    1df6:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	ac 01       	movw	r20, r24
    1e00:	41 5f       	subi	r20, 0xF1	; 241
    1e02:	5f 4f       	sbci	r21, 0xFF	; 255
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	24 ee       	ldi	r18, 0xE4	; 228
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	ba 01       	movw	r22, r20
    1e0e:	a9 01       	movw	r20, r18
    1e10:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1e14:	88 23       	and	r24, r24
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <_ZN6CModem7ServiceEv+0x422>
    1e18:	3d c6       	rjmp	.+3194   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_SET_SMS_TEXT_MODE;
    1e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e1e:	85 e1       	ldi	r24, 0x15	; 21
    1e20:	80 83       	st	Z, r24
    1e22:	38 c6       	rjmp	.+3184   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_SET_SMS_TEXT_MODE:
      strcpy_P(txcmd, PSTR("AT+CMGF=1\r"));
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	0f 96       	adiw	r24, 0x0f	; 15
    1e2a:	2e e3       	ldi	r18, 0x3E	; 62
    1e2c:	33 e0       	ldi	r19, 0x03	; 3
    1e2e:	b9 01       	movw	r22, r18
    1e30:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	ac 01       	movw	r20, r24
    1e3a:	41 5f       	subi	r20, 0xF1	; 241
    1e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	24 ee       	ldi	r18, 0xE4	; 228
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	ba 01       	movw	r22, r20
    1e48:	a9 01       	movw	r20, r18
    1e4a:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <_ZN6CModem7ServiceEv+0x45c>
    1e52:	20 c6       	rjmp	.+3136   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_GET_SIGNAL_STRENGHT;
    1e54:	eb 81       	ldd	r30, Y+3	; 0x03
    1e56:	fc 81       	ldd	r31, Y+4	; 0x04
    1e58:	82 e1       	ldi	r24, 0x12	; 18
    1e5a:	80 83       	st	Z, r24
        error_cnt = 0;
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	fc 01       	movw	r30, r24
    1e62:	e8 5d       	subi	r30, 0xD8	; 216
    1e64:	fd 4f       	sbci	r31, 0xFD	; 253
    1e66:	10 82       	st	Z, r1
    1e68:	15 c6       	rjmp	.+3114   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_GET_SIGNAL_STRENGHT:
      strcpy_P(txcmd, PSTR("AT+CSQ\r"));
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	0f 96       	adiw	r24, 0x0f	; 15
    1e70:	26 e3       	ldi	r18, 0x36	; 54
    1e72:	33 e0       	ldi	r19, 0x03	; 3
    1e74:	b9 01       	movw	r22, r18
    1e76:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	ac 01       	movw	r20, r24
    1e80:	41 5f       	subi	r20, 0xF1	; 241
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	24 ee       	ldi	r18, 0xE4	; 228
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	ba 01       	movw	r22, r20
    1e8e:	a9 01       	movw	r20, r18
    1e90:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1e94:	88 23       	and	r24, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <_ZN6CModem7ServiceEv+0x4a2>
    1e98:	fd c5       	rjmp	.+3066   	; 0x2a94 <__stack+0x895>
        pRx = rxmsg;
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	21 5f       	subi	r18, 0xF1	; 241
    1ea2:	3e 4f       	sbci	r19, 0xFE	; 254
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	ea 5d       	subi	r30, 0xDA	; 218
    1eac:	fd 4f       	sbci	r31, 0xFD	; 253
    1eae:	31 83       	std	Z+1, r19	; 0x01
    1eb0:	20 83       	st	Z, r18
        str = strsep(&pRx, ":");
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	8a 5d       	subi	r24, 0xDA	; 218
    1eb8:	9d 4f       	sbci	r25, 0xFD	; 253
    1eba:	2a e1       	ldi	r18, 0x1A	; 26
    1ebc:	32 e0       	ldi	r19, 0x02	; 2
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <strsep>
    1ec4:	9c 01       	movw	r18, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	fc 01       	movw	r30, r24
    1ecc:	ec 5d       	subi	r30, 0xDC	; 220
    1ece:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed0:	31 83       	std	Z+1, r19	; 0x01
    1ed2:	20 83       	st	Z, r18
        DbgUart.sendStr(str);
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	fc 01       	movw	r30, r24
    1eda:	ec 5d       	subi	r30, 0xDC	; 220
    1edc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ede:	20 81       	ld	r18, Z
    1ee0:	31 81       	ldd	r19, Z+1	; 0x01
    1ee2:	89 ee       	ldi	r24, 0xE9	; 233
    1ee4:	94 e0       	ldi	r25, 0x04	; 4
    1ee6:	b9 01       	movw	r22, r18
    1ee8:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        str = strsep(&pRx, ",");
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	8a 5d       	subi	r24, 0xDA	; 218
    1ef2:	9d 4f       	sbci	r25, 0xFD	; 253
    1ef4:	2c e1       	ldi	r18, 0x1C	; 28
    1ef6:	32 e0       	ldi	r19, 0x02	; 2
    1ef8:	b9 01       	movw	r22, r18
    1efa:	0e 94 e1 5b 	call	0xb7c2	; 0xb7c2 <strsep>
    1efe:	9c 01       	movw	r18, r24
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	fc 01       	movw	r30, r24
    1f06:	ec 5d       	subi	r30, 0xDC	; 220
    1f08:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0a:	31 83       	std	Z+1, r19	; 0x01
    1f0c:	20 83       	st	Z, r18
        DbgUart.sendStr(str);
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	fc 01       	movw	r30, r24
    1f14:	ec 5d       	subi	r30, 0xDC	; 220
    1f16:	fd 4f       	sbci	r31, 0xFD	; 253
    1f18:	20 81       	ld	r18, Z
    1f1a:	31 81       	ldd	r19, Z+1	; 0x01
    1f1c:	89 ee       	ldi	r24, 0xE9	; 233
    1f1e:	94 e0       	ldi	r25, 0x04	; 4
    1f20:	b9 01       	movw	r22, r18
    1f22:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        signalStrenght = atoi(str);
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	ec 5d       	subi	r30, 0xDC	; 220
    1f2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    1f38:	28 2f       	mov	r18, r24
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	fc 01       	movw	r30, r24
    1f40:	ee 5e       	subi	r30, 0xEE	; 238
    1f42:	fd 4f       	sbci	r31, 0xFD	; 253
    1f44:	20 83       	st	Z, r18
        signal_ok = false;
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e4 5d       	subi	r30, 0xD4	; 212
    1f4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f50:	10 82       	st	Z, r1
        if (signalStrenght < 30 && signalStrenght > 5) {
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	fc 01       	movw	r30, r24
    1f58:	ee 5e       	subi	r30, 0xEE	; 238
    1f5a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5c:	80 81       	ld	r24, Z
    1f5e:	8e 31       	cpi	r24, 0x1E	; 30
    1f60:	a0 f4       	brcc	.+40     	; 0x1f8a <_ZN6CModem7ServiceEv+0x592>
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	fc 01       	movw	r30, r24
    1f68:	ee 5e       	subi	r30, 0xEE	; 238
    1f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f6c:	80 81       	ld	r24, Z
    1f6e:	86 30       	cpi	r24, 0x06	; 6
    1f70:	60 f0       	brcs	.+24     	; 0x1f8a <_ZN6CModem7ServiceEv+0x592>
          signal_ok = true;
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	9c 81       	ldd	r25, Y+4	; 0x04
    1f76:	fc 01       	movw	r30, r24
    1f78:	e4 5d       	subi	r30, 0xD4	; 212
    1f7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	80 83       	st	Z, r24
          mdmState = MDM_GET_SIMCARD_STATUS;
    1f80:	eb 81       	ldd	r30, Y+3	; 0x03
    1f82:	fc 81       	ldd	r31, Y+4	; 0x04
    1f84:	8c e0       	ldi	r24, 0x0C	; 12
    1f86:	80 83       	st	Z, r24
    1f88:	85 c5       	rjmp	.+2826   	; 0x2a94 <__stack+0x895>
        } else {
          error_cnt++;
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e8 5d       	subi	r30, 0xD8	; 216
    1f92:	fd 4f       	sbci	r31, 0xFD	; 253
    1f94:	80 81       	ld	r24, Z
    1f96:	28 2f       	mov	r18, r24
    1f98:	2f 5f       	subi	r18, 0xFF	; 255
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	e8 5d       	subi	r30, 0xD8	; 216
    1fa2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa4:	20 83       	st	Z, r18
          if (error_cnt > 200) {
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	fc 01       	movw	r30, r24
    1fac:	e8 5d       	subi	r30, 0xD8	; 216
    1fae:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb0:	80 81       	ld	r24, Z
    1fb2:	89 3c       	cpi	r24, 0xC9	; 201
    1fb4:	08 f4       	brcc	.+2      	; 0x1fb8 <_ZN6CModem7ServiceEv+0x5c0>
    1fb6:	6e c5       	rjmp	.+2780   	; 0x2a94 <__stack+0x895>
            mdmState = MDM_FAILED;
    1fb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1fba:	fc 81       	ldd	r31, Y+4	; 0x04
    1fbc:	85 e3       	ldi	r24, 0x35	; 53
    1fbe:	80 83       	st	Z, r24
            DbgUart.sendStr_P(PSTR("\n\rSIGNAL STRENGHT TOO LOW!!"));
    1fc0:	2a e1       	ldi	r18, 0x1A	; 26
    1fc2:	33 e0       	ldi	r19, 0x03	; 3
    1fc4:	89 ee       	ldi	r24, 0xE9	; 233
    1fc6:	94 e0       	ldi	r25, 0x04	; 4
    1fc8:	b9 01       	movw	r22, r18
    1fca:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    1fce:	62 c5       	rjmp	.+2756   	; 0x2a94 <__stack+0x895>
          }
        }
      }
      break;
    case MDM_GET_SIMCARD_STATUS:
      strcpy_P(txcmd, PSTR("AT+CPIN?\r"));
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	0f 96       	adiw	r24, 0x0f	; 15
    1fd6:	20 e1       	ldi	r18, 0x10	; 16
    1fd8:	33 e0       	ldi	r19, 0x03	; 3
    1fda:	b9 01       	movw	r22, r18
    1fdc:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	ac 01       	movw	r20, r24
    1fe6:	41 5f       	subi	r20, 0xF1	; 241
    1fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	24 ee       	ldi	r18, 0xE4	; 228
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	ba 01       	movw	r22, r20
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <_ZN6CModem7ServiceEv+0x608>
    1ffe:	44 c0       	rjmp	.+136    	; 0x2088 <_ZN6CModem7ServiceEv+0x690>
        simcard_ok = false;
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	fc 01       	movw	r30, r24
    2006:	e5 5d       	subi	r30, 0xD5	; 213
    2008:	fd 4f       	sbci	r31, 0xFD	; 253
    200a:	10 82       	st	Z, r1
        if (strstr_P(rxmsg, PSTR("+CPIN: READY"))) {
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	81 5f       	subi	r24, 0xF1	; 241
    2012:	9e 4f       	sbci	r25, 0xFE	; 254
    2014:	23 e0       	ldi	r18, 0x03	; 3
    2016:	33 e0       	ldi	r19, 0x03	; 3
    2018:	b9 01       	movw	r22, r18
    201a:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    201e:	1b 86       	std	Y+11, r1	; 0x0b
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	11 f0       	breq	.+4      	; 0x2028 <_ZN6CModem7ServiceEv+0x630>
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	9b 87       	std	Y+11, r25	; 0x0b
    2028:	2b 85       	ldd	r18, Y+11	; 0x0b
    202a:	22 23       	and	r18, r18
    202c:	91 f0       	breq	.+36     	; 0x2052 <_ZN6CModem7ServiceEv+0x65a>
          simcard_ok = true;
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	fc 01       	movw	r30, r24
    2034:	e5 5d       	subi	r30, 0xD5	; 213
    2036:	fd 4f       	sbci	r31, 0xFD	; 253
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	80 83       	st	Z, r24
          mdmState = MDM_IS_REGISTERED;
    203c:	eb 81       	ldd	r30, Y+3	; 0x03
    203e:	fc 81       	ldd	r31, Y+4	; 0x04
    2040:	87 e1       	ldi	r24, 0x17	; 23
    2042:	80 83       	st	Z, r24
          error_cnt = 0;
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	fc 01       	movw	r30, r24
    204a:	e8 5d       	subi	r30, 0xD8	; 216
    204c:	fd 4f       	sbci	r31, 0xFD	; 253
    204e:	10 82       	st	Z, r1
    2050:	1b c0       	rjmp	.+54     	; 0x2088 <_ZN6CModem7ServiceEv+0x690>
        } else if (strstr_P(rxmsg, PSTR("+CPIN: SIM PIN"))) {
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	81 5f       	subi	r24, 0xF1	; 241
    2058:	9e 4f       	sbci	r25, 0xFE	; 254
    205a:	24 ef       	ldi	r18, 0xF4	; 244
    205c:	32 e0       	ldi	r19, 0x02	; 2
    205e:	b9 01       	movw	r22, r18
    2060:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    2064:	1a 86       	std	Y+10, r1	; 0x0a
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	11 f0       	breq	.+4      	; 0x206e <_ZN6CModem7ServiceEv+0x676>
    206a:	31 e0       	ldi	r19, 0x01	; 1
    206c:	3a 87       	std	Y+10, r19	; 0x0a
    206e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2070:	88 23       	and	r24, r24
    2072:	51 f0       	breq	.+20     	; 0x2088 <_ZN6CModem7ServiceEv+0x690>
          mdmState = MDM_SET_SIMCARD_PIN;
    2074:	eb 81       	ldd	r30, Y+3	; 0x03
    2076:	fc 81       	ldd	r31, Y+4	; 0x04
    2078:	8d e0       	ldi	r24, 0x0D	; 13
    207a:	80 83       	st	Z, r24
          error_cnt = 0;
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	fc 01       	movw	r30, r24
    2082:	e8 5d       	subi	r30, 0xD8	; 216
    2084:	fd 4f       	sbci	r31, 0xFD	; 253
    2086:	10 82       	st	Z, r1
        }
      }
      if (strstr_P(rxmsg, PSTR("+CME ERROR"))) {
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	81 5f       	subi	r24, 0xF1	; 241
    208e:	9e 4f       	sbci	r25, 0xFE	; 254
    2090:	29 ee       	ldi	r18, 0xE9	; 233
    2092:	32 e0       	ldi	r19, 0x02	; 2
    2094:	b9 01       	movw	r22, r18
    2096:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    209a:	19 86       	std	Y+9, r1	; 0x09
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	11 f0       	breq	.+4      	; 0x20a4 <_ZN6CModem7ServiceEv+0x6ac>
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	99 87       	std	Y+9, r25	; 0x09
    20a4:	29 85       	ldd	r18, Y+9	; 0x09
    20a6:	22 23       	and	r18, r18
    20a8:	09 f4       	brne	.+2      	; 0x20ac <_ZN6CModem7ServiceEv+0x6b4>
    20aa:	f4 c4       	rjmp	.+2536   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_FAILED;
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	85 e3       	ldi	r24, 0x35	; 53
    20b2:	80 83       	st	Z, r24
        DbgUart.sendStr_P(PSTR("\n\rNO SIMCARD!!"));
    20b4:	2a ed       	ldi	r18, 0xDA	; 218
    20b6:	32 e0       	ldi	r19, 0x02	; 2
    20b8:	89 ee       	ldi	r24, 0xE9	; 233
    20ba:	94 e0       	ldi	r25, 0x04	; 4
    20bc:	b9 01       	movw	r22, r18
    20be:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    20c2:	e8 c4       	rjmp	.+2512   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_SET_SIMCARD_PIN:
      timeout = MDM_TIMEOUT_VAL * 5; //5seconds
    20c4:	eb 81       	ldd	r30, Y+3	; 0x03
    20c6:	fc 81       	ldd	r31, Y+4	; 0x04
    20c8:	80 e4       	ldi	r24, 0x40	; 64
    20ca:	9b e4       	ldi	r25, 0x4B	; 75
    20cc:	ac e4       	ldi	r26, 0x4C	; 76
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	83 87       	std	Z+11, r24	; 0x0b
    20d2:	94 87       	std	Z+12, r25	; 0x0c
    20d4:	a5 87       	std	Z+13, r26	; 0x0d
    20d6:	b6 87       	std	Z+14, r27	; 0x0e
      strcpy_P(txcmd, PSTR("AT+CPIN="));
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	0f 96       	adiw	r24, 0x0f	; 15
    20de:	21 ed       	ldi	r18, 0xD1	; 209
    20e0:	32 e0       	ldi	r19, 0x02	; 2
    20e2:	b9 01       	movw	r22, r18
    20e4:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      strcpy(pincode, "3470");
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	85 5e       	subi	r24, 0xE5	; 229
    20ee:	9d 4f       	sbci	r25, 0xFD	; 253
    20f0:	2e e1       	ldi	r18, 0x1E	; 30
    20f2:	32 e0       	ldi	r19, 0x02	; 2
    20f4:	b9 01       	movw	r22, r18
    20f6:	45 e0       	ldi	r20, 0x05	; 5
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
      if (strlen(pincode) < 4) {
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	9c 81       	ldd	r25, Y+4	; 0x04
    2102:	85 5e       	subi	r24, 0xE5	; 229
    2104:	9d 4f       	sbci	r25, 0xFD	; 253
    2106:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    210a:	84 30       	cpi	r24, 0x04	; 4
    210c:	91 05       	cpc	r25, r1
    210e:	28 f4       	brcc	.+10     	; 0x211a <_ZN6CModem7ServiceEv+0x722>
        mdmState = MDM_FAILED;// TODO maybe goto a restart state?
    2110:	eb 81       	ldd	r30, Y+3	; 0x03
    2112:	fc 81       	ldd	r31, Y+4	; 0x04
    2114:	85 e3       	ldi	r24, 0x35	; 53
    2116:	80 83       	st	Z, r24
    2118:	bd c4       	rjmp	.+2426   	; 0x2a94 <__stack+0x895>
#if MDM_DEBUG_LEVEL > 2
        DbgUart.sendStr_P(PSTR("\n\rNO VALID PIN SET"));
#endif
        break;
      }
      strcat(txcmd, pincode);
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	ac 01       	movw	r20, r24
    2120:	41 5f       	subi	r20, 0xF1	; 241
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	9c 01       	movw	r18, r24
    212a:	25 5e       	subi	r18, 0xE5	; 229
    212c:	3d 4f       	sbci	r19, 0xFD	; 253
    212e:	ca 01       	movw	r24, r20
    2130:	b9 01       	movw	r22, r18
    2132:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat_P(txcmd, PSTR("\r"));
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	0f 96       	adiw	r24, 0x0f	; 15
    213c:	2f ec       	ldi	r18, 0xCF	; 207
    213e:	32 e0       	ldi	r19, 0x02	; 2
    2140:	b9 01       	movw	r22, r18
    2142:	0e 94 62 5b 	call	0xb6c4	; 0xb6c4 <strcat_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	ac 01       	movw	r20, r24
    214c:	41 5f       	subi	r20, 0xF1	; 241
    214e:	5f 4f       	sbci	r21, 0xFF	; 255
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	24 ee       	ldi	r18, 0xE4	; 228
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	ba 01       	movw	r22, r20
    215a:	a9 01       	movw	r20, r18
    215c:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2160:	88 23       	and	r24, r24
    2162:	09 f4       	brne	.+2      	; 0x2166 <_ZN6CModem7ServiceEv+0x76e>
    2164:	97 c4       	rjmp	.+2350   	; 0x2a94 <__stack+0x895>
        simcard_ok = true;
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	fc 01       	movw	r30, r24
    216c:	e5 5d       	subi	r30, 0xD5	; 213
    216e:	fd 4f       	sbci	r31, 0xFD	; 253
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 83       	st	Z, r24
        mdmState = MDM_GET_SIMCARD_STATUS;
    2174:	eb 81       	ldd	r30, Y+3	; 0x03
    2176:	fc 81       	ldd	r31, Y+4	; 0x04
    2178:	8c e0       	ldi	r24, 0x0C	; 12
    217a:	80 83       	st	Z, r24
    217c:	8b c4       	rjmp	.+2326   	; 0x2a94 <__stack+0x895>
      }
      break;

    case MDM_IS_REGISTERED:
      strcpy_P(txcmd, PSTR("AT+CREG?\r"));
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	0f 96       	adiw	r24, 0x0f	; 15
    2184:	25 ec       	ldi	r18, 0xC5	; 197
    2186:	32 e0       	ldi	r19, 0x02	; 2
    2188:	b9 01       	movw	r22, r18
    218a:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	ac 01       	movw	r20, r24
    2194:	41 5f       	subi	r20, 0xF1	; 241
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	24 ee       	ldi	r18, 0xE4	; 228
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	ba 01       	movw	r22, r20
    21a2:	a9 01       	movw	r20, r18
    21a4:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    21a8:	88 23       	and	r24, r24
    21aa:	09 f4       	brne	.+2      	; 0x21ae <_ZN6CModem7ServiceEv+0x7b6>
    21ac:	73 c4       	rjmp	.+2278   	; 0x2a94 <__stack+0x895>
        registered_ok = false;
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	fc 01       	movw	r30, r24
    21b4:	e2 5d       	subi	r30, 0xD2	; 210
    21b6:	fd 4f       	sbci	r31, 0xFD	; 253
    21b8:	10 82       	st	Z, r1
        if (strstr_P(rxmsg, PSTR("+CREG: 0,1"))) {
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	81 5f       	subi	r24, 0xF1	; 241
    21c0:	9e 4f       	sbci	r25, 0xFE	; 254
    21c2:	2a eb       	ldi	r18, 0xBA	; 186
    21c4:	32 e0       	ldi	r19, 0x02	; 2
    21c6:	b9 01       	movw	r22, r18
    21c8:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    21cc:	18 86       	std	Y+8, r1	; 0x08
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	11 f0       	breq	.+4      	; 0x21d6 <_ZN6CModem7ServiceEv+0x7de>
    21d2:	31 e0       	ldi	r19, 0x01	; 1
    21d4:	38 87       	std	Y+8, r19	; 0x08
    21d6:	88 85       	ldd	r24, Y+8	; 0x08
    21d8:	88 23       	and	r24, r24
    21da:	61 f0       	breq	.+24     	; 0x21f4 <_ZN6CModem7ServiceEv+0x7fc>
          registered_ok = true;
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	fc 01       	movw	r30, r24
    21e2:	e2 5d       	subi	r30, 0xD2	; 210
    21e4:	fd 4f       	sbci	r31, 0xFD	; 253
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 83       	st	Z, r24
          mdmState = MDM_IP_STATUS;
    21ea:	eb 81       	ldd	r30, Y+3	; 0x03
    21ec:	fc 81       	ldd	r31, Y+4	; 0x04
    21ee:	8b e2       	ldi	r24, 0x2B	; 43
    21f0:	80 83       	st	Z, r24
    21f2:	50 c4       	rjmp	.+2208   	; 0x2a94 <__stack+0x895>
        } else {
          error_cnt++;
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	fc 01       	movw	r30, r24
    21fa:	e8 5d       	subi	r30, 0xD8	; 216
    21fc:	fd 4f       	sbci	r31, 0xFD	; 253
    21fe:	80 81       	ld	r24, Z
    2200:	28 2f       	mov	r18, r24
    2202:	2f 5f       	subi	r18, 0xFF	; 255
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	fc 01       	movw	r30, r24
    220a:	e8 5d       	subi	r30, 0xD8	; 216
    220c:	fd 4f       	sbci	r31, 0xFD	; 253
    220e:	20 83       	st	Z, r18
          if (error_cnt > 200) {
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	fc 01       	movw	r30, r24
    2216:	e8 5d       	subi	r30, 0xD8	; 216
    2218:	fd 4f       	sbci	r31, 0xFD	; 253
    221a:	80 81       	ld	r24, Z
    221c:	89 3c       	cpi	r24, 0xC9	; 201
    221e:	08 f4       	brcc	.+2      	; 0x2222 <__stack+0x23>
    2220:	39 c4       	rjmp	.+2162   	; 0x2a94 <__stack+0x895>
            mdmState = MDM_FAILED;
    2222:	eb 81       	ldd	r30, Y+3	; 0x03
    2224:	fc 81       	ldd	r31, Y+4	; 0x04
    2226:	85 e3       	ldi	r24, 0x35	; 53
    2228:	80 83       	st	Z, r24
            DbgUart.sendStr_P(PSTR("\n\rSIMCARD REGISTRATION FAILED!!"));
    222a:	2a e9       	ldi	r18, 0x9A	; 154
    222c:	32 e0       	ldi	r19, 0x02	; 2
    222e:	89 ee       	ldi	r24, 0xE9	; 233
    2230:	94 e0       	ldi	r25, 0x04	; 4
    2232:	b9 01       	movw	r22, r18
    2234:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    2238:	2d c4       	rjmp	.+2138   	; 0x2a94 <__stack+0x895>
        }
      }
      break;

    case MDM_IP_STATUS:
      strcpy_P(txcmd, PSTR("AT+CIPSTATUS\r"));
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	0f 96       	adiw	r24, 0x0f	; 15
    2240:	2c e8       	ldi	r18, 0x8C	; 140
    2242:	32 e0       	ldi	r19, 0x02	; 2
    2244:	b9 01       	movw	r22, r18
    2246:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      connect_ok = false;
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	fc 01       	movw	r30, r24
    2250:	e3 5d       	subi	r30, 0xD3	; 211
    2252:	fd 4f       	sbci	r31, 0xFD	; 253
    2254:	10 82       	st	Z, r1
      if (HandleAtCmd(txcmd, AT_DATA)) {
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	ac 01       	movw	r20, r24
    225c:	41 5f       	subi	r20, 0xF1	; 241
    225e:	5f 4f       	sbci	r21, 0xFF	; 255
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	27 e0       	ldi	r18, 0x07	; 7
    2266:	31 e0       	ldi	r19, 0x01	; 1
    2268:	ba 01       	movw	r22, r20
    226a:	a9 01       	movw	r20, r18
    226c:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2270:	88 23       	and	r24, r24
    2272:	09 f4       	brne	.+2      	; 0x2276 <__stack+0x77>
    2274:	0f c4       	rjmp	.+2078   	; 0x2a94 <__stack+0x895>
        if (strstr_P(rxmsg, AT_CONNECT)) {
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	81 5f       	subi	r24, 0xF1	; 241
    227c:	9e 4f       	sbci	r25, 0xFE	; 254
    227e:	26 ef       	ldi	r18, 0xF6	; 246
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	b9 01       	movw	r22, r18
    2284:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	91 f0       	breq	.+36     	; 0x22b0 <__stack+0xb1>
          mdmState = MDM_READY;
    228c:	eb 81       	ldd	r30, Y+3	; 0x03
    228e:	fc 81       	ldd	r31, Y+4	; 0x04
    2290:	8a e0       	ldi	r24, 0x0A	; 10
    2292:	80 83       	st	Z, r24
          connect_ok = true;
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	fc 01       	movw	r30, r24
    229a:	e3 5d       	subi	r30, 0xD3	; 211
    229c:	fd 4f       	sbci	r31, 0xFD	; 253
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	80 83       	st	Z, r24
          DbgUart.sendStr("MODEM CONNECTED!!");
    22a2:	23 e2       	ldi	r18, 0x23	; 35
    22a4:	32 e0       	ldi	r19, 0x02	; 2
    22a6:	89 ee       	ldi	r24, 0xE9	; 233
    22a8:	94 e0       	ldi	r25, 0x04	; 4
    22aa:	b9 01       	movw	r22, r18
    22ac:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        }
        if (strstr_P(rxmsg, PSTR("INITIAL"))) {
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	81 5f       	subi	r24, 0xF1	; 241
    22b6:	9e 4f       	sbci	r25, 0xFE	; 254
    22b8:	24 e8       	ldi	r18, 0x84	; 132
    22ba:	32 e0       	ldi	r19, 0x02	; 2
    22bc:	b9 01       	movw	r22, r18
    22be:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    22c2:	1f 82       	std	Y+7, r1	; 0x07
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	11 f0       	breq	.+4      	; 0x22cc <__stack+0xcd>
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	9f 83       	std	Y+7, r25	; 0x07
    22cc:	2f 81       	ldd	r18, Y+7	; 0x07
    22ce:	22 23       	and	r18, r18
    22d0:	29 f0       	breq	.+10     	; 0x22dc <__stack+0xdd>
          mdmState = MDM_CONNECT_TO_SERVER;
    22d2:	eb 81       	ldd	r30, Y+3	; 0x03
    22d4:	fc 81       	ldd	r31, Y+4	; 0x04
    22d6:	84 e2       	ldi	r24, 0x24	; 36
    22d8:	80 83       	st	Z, r24
    22da:	dc c3       	rjmp	.+1976   	; 0x2a94 <__stack+0x895>
        } else if (strstr_P(rxmsg, PSTR("IP CLOSE"))) {
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	81 5f       	subi	r24, 0xF1	; 241
    22e2:	9e 4f       	sbci	r25, 0xFE	; 254
    22e4:	2b e7       	ldi	r18, 0x7B	; 123
    22e6:	32 e0       	ldi	r19, 0x02	; 2
    22e8:	b9 01       	movw	r22, r18
    22ea:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    22ee:	1e 82       	std	Y+6, r1	; 0x06
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	11 f0       	breq	.+4      	; 0x22f8 <__stack+0xf9>
    22f4:	31 e0       	ldi	r19, 0x01	; 1
    22f6:	3e 83       	std	Y+6, r19	; 0x06
    22f8:	8e 81       	ldd	r24, Y+6	; 0x06
    22fa:	88 23       	and	r24, r24
    22fc:	29 f0       	breq	.+10     	; 0x2308 <__stack+0x109>
          mdmState = MDM_START_IP;
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	81 e3       	ldi	r24, 0x31	; 49
    2304:	80 83       	st	Z, r24
    2306:	c6 c3       	rjmp	.+1932   	; 0x2a94 <__stack+0x895>
        } else if (strstr_P(rxmsg, PSTR("STATE: PDP DEACT"))) {
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	81 5f       	subi	r24, 0xF1	; 241
    230e:	9e 4f       	sbci	r25, 0xFE	; 254
    2310:	2a e6       	ldi	r18, 0x6A	; 106
    2312:	32 e0       	ldi	r19, 0x02	; 2
    2314:	b9 01       	movw	r22, r18
    2316:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    231a:	1d 82       	std	Y+5, r1	; 0x05
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	11 f0       	breq	.+4      	; 0x2324 <__stack+0x125>
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	9d 83       	std	Y+5, r25	; 0x05
    2324:	2d 81       	ldd	r18, Y+5	; 0x05
    2326:	22 23       	and	r18, r18
    2328:	29 f0       	breq	.+10     	; 0x2334 <__stack+0x135>
          mdmState = MDM_IPSHUTDOWN;
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	8a e2       	ldi	r24, 0x2A	; 42
    2330:	80 83       	st	Z, r24
    2332:	b0 c3       	rjmp	.+1888   	; 0x2a94 <__stack+0x895>
        } else {
          mdmState = MDM_READY;
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	8a e0       	ldi	r24, 0x0A	; 10
    233a:	80 83       	st	Z, r24
    233c:	ab c3       	rjmp	.+1878   	; 0x2a94 <__stack+0x895>
      }
      break;

      /*******************************************************************************/
    case MDM_READ_SMS:
      strcpy_P(txcmd, PSTR("AT+CMGR="));
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	0f 96       	adiw	r24, 0x0f	; 15
    2344:	21 e6       	ldi	r18, 0x61	; 97
    2346:	32 e0       	ldi	r19, 0x02	; 2
    2348:	b9 01       	movw	r22, r18
    234a:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      strcat(txcmd, sms.nr);
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	ac 01       	movw	r20, r24
    2354:	41 5f       	subi	r20, 0xF1	; 241
    2356:	5f 4f       	sbci	r21, 0xFF	; 255
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	9c 01       	movw	r18, r24
    235e:	24 5a       	subi	r18, 0xA4	; 164
    2360:	3d 4f       	sbci	r19, 0xFD	; 253
    2362:	ca 01       	movw	r24, r20
    2364:	b9 01       	movw	r22, r18
    2366:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat_P(txcmd, PSTR("\r"));
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	0f 96       	adiw	r24, 0x0f	; 15
    2370:	2f e5       	ldi	r18, 0x5F	; 95
    2372:	32 e0       	ldi	r19, 0x02	; 2
    2374:	b9 01       	movw	r22, r18
    2376:	0e 94 62 5b 	call	0xb6c4	; 0xb6c4 <strcat_P>
      if (HandleAtCmd(txcmd, AT_DATA)) {
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	ac 01       	movw	r20, r24
    2380:	41 5f       	subi	r20, 0xF1	; 241
    2382:	5f 4f       	sbci	r21, 0xFF	; 255
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	27 e0       	ldi	r18, 0x07	; 7
    238a:	31 e0       	ldi	r19, 0x01	; 1
    238c:	ba 01       	movw	r22, r20
    238e:	a9 01       	movw	r20, r18
    2390:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2394:	88 23       	and	r24, r24
    2396:	09 f4       	brne	.+2      	; 0x239a <__stack+0x19b>
    2398:	7d c3       	rjmp	.+1786   	; 0x2a94 <__stack+0x895>
        strcpy(sms.message, rxmsg);
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	ac 01       	movw	r20, r24
    23a0:	4a 55       	subi	r20, 0x5A	; 90
    23a2:	5d 4f       	sbci	r21, 0xFD	; 253
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	9c 01       	movw	r18, r24
    23aa:	21 5f       	subi	r18, 0xF1	; 241
    23ac:	3e 4f       	sbci	r19, 0xFE	; 254
    23ae:	ca 01       	movw	r24, r20
    23b0:	b9 01       	movw	r22, r18
    23b2:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
        mdmState = MDM_READY;
    23b6:	eb 81       	ldd	r30, Y+3	; 0x03
    23b8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ba:	8a e0       	ldi	r24, 0x0A	; 10
    23bc:	80 83       	st	Z, r24
        smsrx = true;
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	fc 01       	movw	r30, r24
    23c4:	ee 5c       	subi	r30, 0xCE	; 206
    23c6:	fc 4f       	sbci	r31, 0xFC	; 252
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	80 83       	st	Z, r24
    23cc:	63 c3       	rjmp	.+1734   	; 0x2a94 <__stack+0x895>
      }
      break;

    case MDM_SEND_SMS:
      timeout = MDM_TIMEOUT_VAL * 5; //5seconds
    23ce:	eb 81       	ldd	r30, Y+3	; 0x03
    23d0:	fc 81       	ldd	r31, Y+4	; 0x04
    23d2:	80 e4       	ldi	r24, 0x40	; 64
    23d4:	9b e4       	ldi	r25, 0x4B	; 75
    23d6:	ac e4       	ldi	r26, 0x4C	; 76
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	83 87       	std	Z+11, r24	; 0x0b
    23dc:	94 87       	std	Z+12, r25	; 0x0c
    23de:	a5 87       	std	Z+13, r26	; 0x0d
    23e0:	b6 87       	std	Z+14, r27	; 0x0e
        mdmState = MDM_READY;
        DbgUart.sendStr_P(PSTR("\n\r ## SMS SEND OK ##"));
      }
#else

      strcpy_P(txcmd, PSTR("AT+CMGS=\""));
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	0f 96       	adiw	r24, 0x0f	; 15
    23e8:	25 e5       	ldi	r18, 0x55	; 85
    23ea:	32 e0       	ldi	r19, 0x02	; 2
    23ec:	b9 01       	movw	r22, r18
    23ee:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      strcat(txcmd, sms.phonenum);
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	9c 81       	ldd	r25, Y+4	; 0x04
    23f6:	ac 01       	movw	r20, r24
    23f8:	41 5f       	subi	r20, 0xF1	; 241
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	9c 01       	movw	r18, r24
    2402:	2a 59       	subi	r18, 0x9A	; 154
    2404:	3d 4f       	sbci	r19, 0xFD	; 253
    2406:	ca 01       	movw	r24, r20
    2408:	b9 01       	movw	r22, r18
    240a:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat_P(txcmd, PSTR("\"\r"));
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	0f 96       	adiw	r24, 0x0f	; 15
    2414:	22 e5       	ldi	r18, 0x52	; 82
    2416:	32 e0       	ldi	r19, 0x02	; 2
    2418:	b9 01       	movw	r22, r18
    241a:	0e 94 62 5b 	call	0xb6c4	; 0xb6c4 <strcat_P>
      if (HandleAtCmd(txcmd, AT_RDY)) {
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	ac 01       	movw	r20, r24
    2424:	41 5f       	subi	r20, 0xF1	; 241
    2426:	5f 4f       	sbci	r21, 0xFF	; 255
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	2b ee       	ldi	r18, 0xEB	; 235
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	ba 01       	movw	r22, r20
    2432:	a9 01       	movw	r20, r18
    2434:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2438:	88 23       	and	r24, r24
    243a:	09 f1       	breq	.+66     	; 0x247e <__stack+0x27f>
        pUart->sendStr(sms.message);
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	fc 01       	movw	r30, r24
    2442:	e7 5d       	subi	r30, 0xD7	; 215
    2444:	fd 4f       	sbci	r31, 0xFD	; 253
    2446:	40 81       	ld	r20, Z
    2448:	51 81       	ldd	r21, Z+1	; 0x01
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	9c 01       	movw	r18, r24
    2450:	2a 55       	subi	r18, 0x5A	; 90
    2452:	3d 4f       	sbci	r19, 0xFD	; 253
    2454:	ca 01       	movw	r24, r20
    2456:	b9 01       	movw	r22, r18
    2458:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        pUart->sendStr_P(PSTR("\x1A"));
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	fc 01       	movw	r30, r24
    2462:	e7 5d       	subi	r30, 0xD7	; 215
    2464:	fd 4f       	sbci	r31, 0xFD	; 253
    2466:	80 81       	ld	r24, Z
    2468:	91 81       	ldd	r25, Z+1	; 0x01
    246a:	20 e5       	ldi	r18, 0x50	; 80
    246c:	32 e0       	ldi	r19, 0x02	; 2
    246e:	b9 01       	movw	r22, r18
    2470:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        mdmState = MDM_SMS_WAIT_SEND_OK;
    2474:	eb 81       	ldd	r30, Y+3	; 0x03
    2476:	fc 81       	ldd	r31, Y+4	; 0x04
    2478:	81 e2       	ldi	r24, 0x21	; 33
    247a:	80 83       	st	Z, r24
    247c:	0b c3       	rjmp	.+1558   	; 0x2a94 <__stack+0x895>
      } else if (cmdState == SEND) { //a timeout occured
    247e:	eb 81       	ldd	r30, Y+3	; 0x03
    2480:	fc 81       	ldd	r31, Y+4	; 0x04
    2482:	81 81       	ldd	r24, Z+1	; 0x01
    2484:	82 30       	cpi	r24, 0x02	; 2
    2486:	09 f0       	breq	.+2      	; 0x248a <__stack+0x28b>
    2488:	05 c3       	rjmp	.+1546   	; 0x2a94 <__stack+0x895>
        pUart->sendStr_P(PSTR("\x1B"));// send an escape
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	fc 01       	movw	r30, r24
    2490:	e7 5d       	subi	r30, 0xD7	; 215
    2492:	fd 4f       	sbci	r31, 0xFD	; 253
    2494:	80 81       	ld	r24, Z
    2496:	91 81       	ldd	r25, Z+1	; 0x01
    2498:	2e e4       	ldi	r18, 0x4E	; 78
    249a:	32 e0       	ldi	r19, 0x02	; 2
    249c:	b9 01       	movw	r22, r18
    249e:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    24a2:	f8 c2       	rjmp	.+1520   	; 0x2a94 <__stack+0x895>
      }
      break;

    case MDM_SMS_WAIT_SEND_OK:
      timeout = MDM_TIMEOUT_VAL * 5; //5seconds
    24a4:	eb 81       	ldd	r30, Y+3	; 0x03
    24a6:	fc 81       	ldd	r31, Y+4	; 0x04
    24a8:	80 e4       	ldi	r24, 0x40	; 64
    24aa:	9b e4       	ldi	r25, 0x4B	; 75
    24ac:	ac e4       	ldi	r26, 0x4C	; 76
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	83 87       	std	Z+11, r24	; 0x0b
    24b2:	94 87       	std	Z+12, r25	; 0x0c
    24b4:	a5 87       	std	Z+13, r26	; 0x0d
    24b6:	b6 87       	std	Z+14, r27	; 0x0e
      if (GetAtResp(AT_OK)) {
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	24 ee       	ldi	r18, 0xE4	; 228
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	b9 01       	movw	r22, r18
    24c2:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN6CModem9GetAtRespEPKc>
    24c6:	88 23       	and	r24, r24
    24c8:	29 f0       	breq	.+10     	; 0x24d4 <__stack+0x2d5>
#if MDM_DEBUG_LEVEL > 2
        DbgUart.sendStr_P(PSTR("\n\rSMS SEND OK"));
#endif
        mdmState = MDM_READY;
    24ca:	eb 81       	ldd	r30, Y+3	; 0x03
    24cc:	fc 81       	ldd	r31, Y+4	; 0x04
    24ce:	8a e0       	ldi	r24, 0x0A	; 10
    24d0:	80 83       	st	Z, r24
    24d2:	e0 c2       	rjmp	.+1472   	; 0x2a94 <__stack+0x895>
      } else if (cmdState == SEND) { //a timeout occured
    24d4:	eb 81       	ldd	r30, Y+3	; 0x03
    24d6:	fc 81       	ldd	r31, Y+4	; 0x04
    24d8:	81 81       	ldd	r24, Z+1	; 0x01
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <__stack+0x2e1>
    24de:	da c2       	rjmp	.+1460   	; 0x2a94 <__stack+0x895>
#if MDM_DEBUG_LEVEL > 2
        DbgUart.sendStr_P(PSTR("\n\rSMS SEND ERROR"));
#endif
        mdmState = MDM_SEND_SMS;
    24e0:	eb 81       	ldd	r30, Y+3	; 0x03
    24e2:	fc 81       	ldd	r31, Y+4	; 0x04
    24e4:	80 e1       	ldi	r24, 0x10	; 16
    24e6:	80 83       	st	Z, r24
        taskRetry++;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	fc 01       	movw	r30, r24
    24ee:	ef 5e       	subi	r30, 0xEF	; 239
    24f0:	fd 4f       	sbci	r31, 0xFD	; 253
    24f2:	80 81       	ld	r24, Z
    24f4:	28 2f       	mov	r18, r24
    24f6:	2f 5f       	subi	r18, 0xFF	; 255
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	fc 01       	movw	r30, r24
    24fe:	ef 5e       	subi	r30, 0xEF	; 239
    2500:	fd 4f       	sbci	r31, 0xFD	; 253
    2502:	20 83       	st	Z, r18
    2504:	c7 c2       	rjmp	.+1422   	; 0x2a94 <__stack+0x895>
      }
#endif
      break;

    case MDM_CONNECT_TO_SERVER:
      strcpy_P(txcmd, PSTR("AT+CGDCONT=1,\"IP\",\"internet\"\r"));
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	0f 96       	adiw	r24, 0x0f	; 15
    250c:	20 e3       	ldi	r18, 0x30	; 48
    250e:	32 e0       	ldi	r19, 0x02	; 2
    2510:	b9 01       	movw	r22, r18
    2512:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	ac 01       	movw	r20, r24
    251c:	41 5f       	subi	r20, 0xF1	; 241
    251e:	5f 4f       	sbci	r21, 0xFF	; 255
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	24 ee       	ldi	r18, 0xE4	; 228
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	ba 01       	movw	r22, r20
    252a:	a9 01       	movw	r20, r18
    252c:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2530:	88 23       	and	r24, r24
    2532:	09 f4       	brne	.+2      	; 0x2536 <__stack+0x337>
    2534:	af c2       	rjmp	.+1374   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_SET_SHOW_REMOTE_IP;
    2536:	eb 81       	ldd	r30, Y+3	; 0x03
    2538:	fc 81       	ldd	r31, Y+4	; 0x04
    253a:	8e e2       	ldi	r24, 0x2E	; 46
    253c:	80 83       	st	Z, r24
    253e:	aa c2       	rjmp	.+1364   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_SET_SHOW_REMOTE_IP:
      strcpy_P(txcmd, PSTR("AT+CIPSRIP=0\r"));
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	0f 96       	adiw	r24, 0x0f	; 15
    2546:	22 e2       	ldi	r18, 0x22	; 34
    2548:	32 e0       	ldi	r19, 0x02	; 2
    254a:	b9 01       	movw	r22, r18
    254c:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	ac 01       	movw	r20, r24
    2556:	41 5f       	subi	r20, 0xF1	; 241
    2558:	5f 4f       	sbci	r21, 0xFF	; 255
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	24 ee       	ldi	r18, 0xE4	; 228
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	ba 01       	movw	r22, r20
    2564:	a9 01       	movw	r20, r18
    2566:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    256a:	88 23       	and	r24, r24
    256c:	09 f4       	brne	.+2      	; 0x2570 <__stack+0x371>
    256e:	92 c2       	rjmp	.+1316   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_SET_DNS_CONNECT;
    2570:	eb 81       	ldd	r30, Y+3	; 0x03
    2572:	fc 81       	ldd	r31, Y+4	; 0x04
    2574:	85 e2       	ldi	r24, 0x25	; 37
    2576:	80 83       	st	Z, r24
    2578:	8d c2       	rjmp	.+1306   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_SET_DNS_CONNECT:
      failState = MDM_IPSHUTDOWN;
    257a:	eb 81       	ldd	r30, Y+3	; 0x03
    257c:	fc 81       	ldd	r31, Y+4	; 0x04
    257e:	8a e2       	ldi	r24, 0x2A	; 42
    2580:	82 83       	std	Z+2, r24	; 0x02
      if (usedns) {
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	fc 01       	movw	r30, r24
    2588:	e1 5b       	subi	r30, 0xB1	; 177
    258a:	fd 4f       	sbci	r31, 0xFD	; 253
    258c:	80 81       	ld	r24, Z
    258e:	88 23       	and	r24, r24
    2590:	e9 f0       	breq	.+58     	; 0x25cc <__stack+0x3cd>
        strcpy_P(txcmd, PSTR("AT+CDNSORIP=1\r"));
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	0f 96       	adiw	r24, 0x0f	; 15
    2598:	23 e1       	ldi	r18, 0x13	; 19
    259a:	32 e0       	ldi	r19, 0x02	; 2
    259c:	b9 01       	movw	r22, r18
    259e:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
        if (HandleAtCmd(txcmd, AT_OK)) {
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	ac 01       	movw	r20, r24
    25a8:	41 5f       	subi	r20, 0xF1	; 241
    25aa:	5f 4f       	sbci	r21, 0xFF	; 255
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	24 ee       	ldi	r18, 0xE4	; 228
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	ba 01       	movw	r22, r20
    25b6:	a9 01       	movw	r20, r18
    25b8:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    25bc:	88 23       	and	r24, r24
    25be:	09 f4       	brne	.+2      	; 0x25c2 <__stack+0x3c3>
    25c0:	69 c2       	rjmp	.+1234   	; 0x2a94 <__stack+0x895>
          mdmState = MDM_SET_DNS_CONFIG;
    25c2:	eb 81       	ldd	r30, Y+3	; 0x03
    25c4:	fc 81       	ldd	r31, Y+4	; 0x04
    25c6:	86 e2       	ldi	r24, 0x26	; 38
    25c8:	80 83       	st	Z, r24
    25ca:	64 c2       	rjmp	.+1224   	; 0x2a94 <__stack+0x895>
        }
      } else {
        strcpy_P(txcmd, PSTR("AT+CDNSORIP=0\r"));
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	0f 96       	adiw	r24, 0x0f	; 15
    25d2:	24 e0       	ldi	r18, 0x04	; 4
    25d4:	32 e0       	ldi	r19, 0x02	; 2
    25d6:	b9 01       	movw	r22, r18
    25d8:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
        if (HandleAtCmd(txcmd, AT_OK)) {
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	ac 01       	movw	r20, r24
    25e2:	41 5f       	subi	r20, 0xF1	; 241
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ea:	24 ee       	ldi	r18, 0xE4	; 228
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	ba 01       	movw	r22, r20
    25f0:	a9 01       	movw	r20, r18
    25f2:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    25f6:	88 23       	and	r24, r24
    25f8:	09 f4       	brne	.+2      	; 0x25fc <__stack+0x3fd>
    25fa:	4c c2       	rjmp	.+1176   	; 0x2a94 <__stack+0x895>
          mdmState = MDM_SET_TCP_PORT;
    25fc:	eb 81       	ldd	r30, Y+3	; 0x03
    25fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2600:	80 e3       	ldi	r24, 0x30	; 48
    2602:	80 83       	st	Z, r24
    2604:	47 c2       	rjmp	.+1166   	; 0x2a94 <__stack+0x895>
        }
      }
      break;
    case MDM_SET_DNS_CONFIG:
      failState = MDM_IPSHUTDOWN;
    2606:	eb 81       	ldd	r30, Y+3	; 0x03
    2608:	fc 81       	ldd	r31, Y+4	; 0x04
    260a:	8a e2       	ldi	r24, 0x2A	; 42
    260c:	82 83       	std	Z+2, r24	; 0x02
      strcpy_P(txcmd, PSTR("AT+CDNSCFG=\""));
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	0f 96       	adiw	r24, 0x0f	; 15
    2614:	27 ef       	ldi	r18, 0xF7	; 247
    2616:	31 e0       	ldi	r19, 0x01	; 1
    2618:	b9 01       	movw	r22, r18
    261a:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      strcat(txcmd, DYNDNS_IP);
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	0f 96       	adiw	r24, 0x0f	; 15
    2624:	25 e3       	ldi	r18, 0x35	; 53
    2626:	32 e0       	ldi	r19, 0x02	; 2
    2628:	b9 01       	movw	r22, r18
    262a:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat_P(txcmd, PSTR("\"\r"));
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	9c 81       	ldd	r25, Y+4	; 0x04
    2632:	0f 96       	adiw	r24, 0x0f	; 15
    2634:	24 ef       	ldi	r18, 0xF4	; 244
    2636:	31 e0       	ldi	r19, 0x01	; 1
    2638:	b9 01       	movw	r22, r18
    263a:	0e 94 62 5b 	call	0xb6c4	; 0xb6c4 <strcat_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	ac 01       	movw	r20, r24
    2644:	41 5f       	subi	r20, 0xF1	; 241
    2646:	5f 4f       	sbci	r21, 0xFF	; 255
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	24 ee       	ldi	r18, 0xE4	; 228
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	ba 01       	movw	r22, r20
    2652:	a9 01       	movw	r20, r18
    2654:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2658:	88 23       	and	r24, r24
    265a:	09 f4       	brne	.+2      	; 0x265e <__stack+0x45f>
    265c:	1b c2       	rjmp	.+1078   	; 0x2a94 <__stack+0x895>
        mdmState = MDM_SET_TCP_PORT;
    265e:	eb 81       	ldd	r30, Y+3	; 0x03
    2660:	fc 81       	ldd	r31, Y+4	; 0x04
    2662:	80 e3       	ldi	r24, 0x30	; 48
    2664:	80 83       	st	Z, r24
    2666:	16 c2       	rjmp	.+1068   	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_SET_TCP_PORT:
      failState = MDM_IPSHUTDOWN;
    2668:	eb 81       	ldd	r30, Y+3	; 0x03
    266a:	fc 81       	ldd	r31, Y+4	; 0x04
    266c:	8a e2       	ldi	r24, 0x2A	; 42
    266e:	82 83       	std	Z+2, r24	; 0x02

      strcpy_P(txcmd, PSTR("AT+CLPORT=\"TCP\",\""));
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	0f 96       	adiw	r24, 0x0f	; 15
    2676:	22 ee       	ldi	r18, 0xE2	; 226
    2678:	31 e0       	ldi	r19, 0x01	; 1
    267a:	b9 01       	movw	r22, r18
    267c:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      strcat(txcmd, port);
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	9c 81       	ldd	r25, Y+4	; 0x04
    2684:	ac 01       	movw	r20, r24
    2686:	41 5f       	subi	r20, 0xF1	; 241
    2688:	5f 4f       	sbci	r21, 0xFF	; 255
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	9c 01       	movw	r18, r24
    2690:	20 5b       	subi	r18, 0xB0	; 176
    2692:	3d 4f       	sbci	r19, 0xFD	; 253
    2694:	ca 01       	movw	r24, r20
    2696:	b9 01       	movw	r22, r18
    2698:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat(txcmd, "\"\r");
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	0f 96       	adiw	r24, 0x0f	; 15
    26a2:	23 e4       	ldi	r18, 0x43	; 67
    26a4:	32 e0       	ldi	r19, 0x02	; 2
    26a6:	b9 01       	movw	r22, r18
    26a8:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      if (HandleAtCmd(txcmd, AT_OK)) {
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	ac 01       	movw	r20, r24
    26b2:	41 5f       	subi	r20, 0xF1	; 241
    26b4:	5f 4f       	sbci	r21, 0xFF	; 255
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ba:	24 ee       	ldi	r18, 0xE4	; 228
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	ba 01       	movw	r22, r20
    26c0:	a9 01       	movw	r20, r18
    26c2:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    26c6:	88 23       	and	r24, r24
    26c8:	09 f4       	brne	.+2      	; 0x26cc <__stack+0x4cd>
    26ca:	e4 c1       	rjmp	.+968    	; 0x2a94 <__stack+0x895>
        mdmState = MDM_START_TCP_TASK;
    26cc:	eb 81       	ldd	r30, Y+3	; 0x03
    26ce:	fc 81       	ldd	r31, Y+4	; 0x04
    26d0:	83 e3       	ldi	r24, 0x33	; 51
    26d2:	80 83       	st	Z, r24
    26d4:	df c1       	rjmp	.+958    	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_START_TCP_TASK:
      failState = MDM_IPSHUTDOWN;
    26d6:	eb 81       	ldd	r30, Y+3	; 0x03
    26d8:	fc 81       	ldd	r31, Y+4	; 0x04
    26da:	8a e2       	ldi	r24, 0x2A	; 42
    26dc:	82 83       	std	Z+2, r24	; 0x02
      timeout = MDM_TIMEOUT_VAL * 30;//30 sekondes
    26de:	eb 81       	ldd	r30, Y+3	; 0x03
    26e0:	fc 81       	ldd	r31, Y+4	; 0x04
    26e2:	80 e8       	ldi	r24, 0x80	; 128
    26e4:	93 ec       	ldi	r25, 0xC3	; 195
    26e6:	a9 ec       	ldi	r26, 0xC9	; 201
    26e8:	b1 e0       	ldi	r27, 0x01	; 1
    26ea:	83 87       	std	Z+11, r24	; 0x0b
    26ec:	94 87       	std	Z+12, r25	; 0x0c
    26ee:	a5 87       	std	Z+13, r26	; 0x0d
    26f0:	b6 87       	std	Z+14, r27	; 0x0e
      strcpy_P(txcmd, PSTR("AT+CSTT=\"internet\",\"\",\"\"\r"));
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	0f 96       	adiw	r24, 0x0f	; 15
    26f8:	28 ec       	ldi	r18, 0xC8	; 200
    26fa:	31 e0       	ldi	r19, 0x01	; 1
    26fc:	b9 01       	movw	r22, r18
    26fe:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	ac 01       	movw	r20, r24
    2708:	41 5f       	subi	r20, 0xF1	; 241
    270a:	5f 4f       	sbci	r21, 0xFF	; 255
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	24 ee       	ldi	r18, 0xE4	; 228
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	ba 01       	movw	r22, r20
    2716:	a9 01       	movw	r20, r18
    2718:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    271c:	88 23       	and	r24, r24
    271e:	09 f4       	brne	.+2      	; 0x2722 <__stack+0x523>
    2720:	b9 c1       	rjmp	.+882    	; 0x2a94 <__stack+0x895>
        mdmState = MDM_ACTIVATE_PDP;
    2722:	eb 81       	ldd	r30, Y+3	; 0x03
    2724:	fc 81       	ldd	r31, Y+4	; 0x04
    2726:	8f e2       	ldi	r24, 0x2F	; 47
    2728:	80 83       	st	Z, r24
    272a:	b4 c1       	rjmp	.+872    	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_ACTIVATE_PDP:
      failState = MDM_IPSHUTDOWN;
    272c:	eb 81       	ldd	r30, Y+3	; 0x03
    272e:	fc 81       	ldd	r31, Y+4	; 0x04
    2730:	8a e2       	ldi	r24, 0x2A	; 42
    2732:	82 83       	std	Z+2, r24	; 0x02
      timeout = MDM_TIMEOUT_VAL * 30;//30 sekondes
    2734:	eb 81       	ldd	r30, Y+3	; 0x03
    2736:	fc 81       	ldd	r31, Y+4	; 0x04
    2738:	80 e8       	ldi	r24, 0x80	; 128
    273a:	93 ec       	ldi	r25, 0xC3	; 195
    273c:	a9 ec       	ldi	r26, 0xC9	; 201
    273e:	b1 e0       	ldi	r27, 0x01	; 1
    2740:	83 87       	std	Z+11, r24	; 0x0b
    2742:	94 87       	std	Z+12, r25	; 0x0c
    2744:	a5 87       	std	Z+13, r26	; 0x0d
    2746:	b6 87       	std	Z+14, r27	; 0x0e
      strcpy_P(txcmd, PSTR("AT+CIICR\r"));
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	0f 96       	adiw	r24, 0x0f	; 15
    274e:	2e eb       	ldi	r18, 0xBE	; 190
    2750:	31 e0       	ldi	r19, 0x01	; 1
    2752:	b9 01       	movw	r22, r18
    2754:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	ac 01       	movw	r20, r24
    275e:	41 5f       	subi	r20, 0xF1	; 241
    2760:	5f 4f       	sbci	r21, 0xFF	; 255
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	24 ee       	ldi	r18, 0xE4	; 228
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	ba 01       	movw	r22, r20
    276c:	a9 01       	movw	r20, r18
    276e:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2772:	88 23       	and	r24, r24
    2774:	09 f4       	brne	.+2      	; 0x2778 <__stack+0x579>
    2776:	8e c1       	rjmp	.+796    	; 0x2a94 <__stack+0x895>
        mdmState = MDM_GET_IP;
    2778:	eb 81       	ldd	r30, Y+3	; 0x03
    277a:	fc 81       	ldd	r31, Y+4	; 0x04
    277c:	84 e3       	ldi	r24, 0x34	; 52
    277e:	80 83       	st	Z, r24
    2780:	89 c1       	rjmp	.+786    	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_GET_IP:
      failState = MDM_IPSHUTDOWN;
    2782:	eb 81       	ldd	r30, Y+3	; 0x03
    2784:	fc 81       	ldd	r31, Y+4	; 0x04
    2786:	8a e2       	ldi	r24, 0x2A	; 42
    2788:	82 83       	std	Z+2, r24	; 0x02
      timeout = MDM_TIMEOUT_VAL * 10;//10 sekondes
    278a:	eb 81       	ldd	r30, Y+3	; 0x03
    278c:	fc 81       	ldd	r31, Y+4	; 0x04
    278e:	80 e8       	ldi	r24, 0x80	; 128
    2790:	96 e9       	ldi	r25, 0x96	; 150
    2792:	a8 e9       	ldi	r26, 0x98	; 152
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	83 87       	std	Z+11, r24	; 0x0b
    2798:	94 87       	std	Z+12, r25	; 0x0c
    279a:	a5 87       	std	Z+13, r26	; 0x0d
    279c:	b6 87       	std	Z+14, r27	; 0x0e
      strcpy_P(txcmd, PSTR("AT+CIFSR\r"));
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	0f 96       	adiw	r24, 0x0f	; 15
    27a4:	24 eb       	ldi	r18, 0xB4	; 180
    27a6:	31 e0       	ldi	r19, 0x01	; 1
    27a8:	b9 01       	movw	r22, r18
    27aa:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	ac 01       	movw	r20, r24
    27b4:	41 5f       	subi	r20, 0xF1	; 241
    27b6:	5f 4f       	sbci	r21, 0xFF	; 255
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	24 ee       	ldi	r18, 0xE4	; 228
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	ba 01       	movw	r22, r20
    27c2:	a9 01       	movw	r20, r18
    27c4:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    27c8:	88 23       	and	r24, r24
    27ca:	21 f0       	breq	.+8      	; 0x27d4 <__stack+0x5d5>
        mdmState = MDM_START_IP;
    27cc:	eb 81       	ldd	r30, Y+3	; 0x03
    27ce:	fc 81       	ldd	r31, Y+4	; 0x04
    27d0:	81 e3       	ldi	r24, 0x31	; 49
    27d2:	80 83       	st	Z, r24
      }
      if (cmdState == SEND) {
    27d4:	eb 81       	ldd	r30, Y+3	; 0x03
    27d6:	fc 81       	ldd	r31, Y+4	; 0x04
    27d8:	81 81       	ldd	r24, Z+1	; 0x01
    27da:	82 30       	cpi	r24, 0x02	; 2
    27dc:	09 f0       	breq	.+2      	; 0x27e0 <__stack+0x5e1>
    27de:	5a c1       	rjmp	.+692    	; 0x2a94 <__stack+0x895>
        DbgUart.sendStr(rxmsg);
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	9c 01       	movw	r18, r24
    27e6:	21 5f       	subi	r18, 0xF1	; 241
    27e8:	3e 4f       	sbci	r19, 0xFE	; 254
    27ea:	89 ee       	ldi	r24, 0xE9	; 233
    27ec:	94 e0       	ldi	r25, 0x04	; 4
    27ee:	b9 01       	movw	r22, r18
    27f0:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        cmdState = START;
    27f4:	eb 81       	ldd	r30, Y+3	; 0x03
    27f6:	fc 81       	ldd	r31, Y+4	; 0x04
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	81 83       	std	Z+1, r24	; 0x01
        mdmState = MDM_START_IP;
    27fc:	eb 81       	ldd	r30, Y+3	; 0x03
    27fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2800:	81 e3       	ldi	r24, 0x31	; 49
    2802:	80 83       	st	Z, r24
    2804:	47 c1       	rjmp	.+654    	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_START_IP:
      timeout = MDM_TIMEOUT_VAL * 30;//20 sekondes
    2806:	eb 81       	ldd	r30, Y+3	; 0x03
    2808:	fc 81       	ldd	r31, Y+4	; 0x04
    280a:	80 e8       	ldi	r24, 0x80	; 128
    280c:	93 ec       	ldi	r25, 0xC3	; 195
    280e:	a9 ec       	ldi	r26, 0xC9	; 201
    2810:	b1 e0       	ldi	r27, 0x01	; 1
    2812:	83 87       	std	Z+11, r24	; 0x0b
    2814:	94 87       	std	Z+12, r25	; 0x0c
    2816:	a5 87       	std	Z+13, r26	; 0x0d
    2818:	b6 87       	std	Z+14, r27	; 0x0e
      failState = MDM_IPSHUTDOWN;
    281a:	eb 81       	ldd	r30, Y+3	; 0x03
    281c:	fc 81       	ldd	r31, Y+4	; 0x04
    281e:	8a e2       	ldi	r24, 0x2A	; 42
    2820:	82 83       	std	Z+2, r24	; 0x02
      strcpy(txcmd, "AT+CIPSTART=\"TCP\",\"");
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	0f 96       	adiw	r24, 0x0f	; 15
    2828:	26 e4       	ldi	r18, 0x46	; 70
    282a:	32 e0       	ldi	r19, 0x02	; 2
    282c:	b9 01       	movw	r22, r18
    282e:	44 e1       	ldi	r20, 0x14	; 20
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
      strcat(txcmd, serverIP);
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	ac 01       	movw	r20, r24
    283c:	41 5f       	subi	r20, 0xF1	; 241
    283e:	5f 4f       	sbci	r21, 0xFF	; 255
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	9c 01       	movw	r18, r24
    2846:	21 5d       	subi	r18, 0xD1	; 209
    2848:	3d 4f       	sbci	r19, 0xFD	; 253
    284a:	ca 01       	movw	r24, r20
    284c:	b9 01       	movw	r22, r18
    284e:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat(txcmd, "\",\"");
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	0f 96       	adiw	r24, 0x0f	; 15
    2858:	2a e5       	ldi	r18, 0x5A	; 90
    285a:	32 e0       	ldi	r19, 0x02	; 2
    285c:	b9 01       	movw	r22, r18
    285e:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat(txcmd, port);
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	ac 01       	movw	r20, r24
    2868:	41 5f       	subi	r20, 0xF1	; 241
    286a:	5f 4f       	sbci	r21, 0xFF	; 255
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	9c 01       	movw	r18, r24
    2872:	20 5b       	subi	r18, 0xB0	; 176
    2874:	3d 4f       	sbci	r19, 0xFD	; 253
    2876:	ca 01       	movw	r24, r20
    2878:	b9 01       	movw	r22, r18
    287a:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      strcat(txcmd, "\"\r");
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	0f 96       	adiw	r24, 0x0f	; 15
    2884:	23 e4       	ldi	r18, 0x43	; 67
    2886:	32 e0       	ldi	r19, 0x02	; 2
    2888:	b9 01       	movw	r22, r18
    288a:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      connect_ok = false;
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	fc 01       	movw	r30, r24
    2894:	e3 5d       	subi	r30, 0xD3	; 211
    2896:	fd 4f       	sbci	r31, 0xFD	; 253
    2898:	10 82       	st	Z, r1
      if (HandleAtCmd(txcmd, AT_CONNECT)) {
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	ac 01       	movw	r20, r24
    28a0:	41 5f       	subi	r20, 0xF1	; 241
    28a2:	5f 4f       	sbci	r21, 0xFF	; 255
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	26 ef       	ldi	r18, 0xF6	; 246
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	ba 01       	movw	r22, r20
    28ae:	a9 01       	movw	r20, r18
    28b0:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    28b4:	88 23       	and	r24, r24
    28b6:	91 f0       	breq	.+36     	; 0x28dc <__stack+0x6dd>
        connect_ok = true;
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	fc 01       	movw	r30, r24
    28be:	e3 5d       	subi	r30, 0xD3	; 211
    28c0:	fd 4f       	sbci	r31, 0xFD	; 253
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	80 83       	st	Z, r24
        DbgUart.sendStr("MODEM CONNECTED!!");
    28c6:	23 e2       	ldi	r18, 0x23	; 35
    28c8:	32 e0       	ldi	r19, 0x02	; 2
    28ca:	89 ee       	ldi	r24, 0xE9	; 233
    28cc:	94 e0       	ldi	r25, 0x04	; 4
    28ce:	b9 01       	movw	r22, r18
    28d0:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        mdmState = MDM_IP_STATUS;
    28d4:	eb 81       	ldd	r30, Y+3	; 0x03
    28d6:	fc 81       	ldd	r31, Y+4	; 0x04
    28d8:	8b e2       	ldi	r24, 0x2B	; 43
    28da:	80 83       	st	Z, r24
      }
      if (cmdState == SEND) {
    28dc:	eb 81       	ldd	r30, Y+3	; 0x03
    28de:	fc 81       	ldd	r31, Y+4	; 0x04
    28e0:	81 81       	ldd	r24, Z+1	; 0x01
    28e2:	82 30       	cpi	r24, 0x02	; 2
    28e4:	09 f0       	breq	.+2      	; 0x28e8 <__stack+0x6e9>
    28e6:	d6 c0       	rjmp	.+428    	; 0x2a94 <__stack+0x895>
        cmdState = START;
    28e8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ea:	fc 81       	ldd	r31, Y+4	; 0x04
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	81 83       	std	Z+1, r24	; 0x01
        mdmState = MDM_IP_STATUS;
    28f0:	eb 81       	ldd	r30, Y+3	; 0x03
    28f2:	fc 81       	ldd	r31, Y+4	; 0x04
    28f4:	8b e2       	ldi	r24, 0x2B	; 43
    28f6:	80 83       	st	Z, r24
    28f8:	cd c0       	rjmp	.+410    	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_IP_SEND:
      failState = MDM_START_IP;
    28fa:	eb 81       	ldd	r30, Y+3	; 0x03
    28fc:	fc 81       	ldd	r31, Y+4	; 0x04
    28fe:	81 e3       	ldi	r24, 0x31	; 49
    2900:	82 83       	std	Z+2, r24	; 0x02
      if (HandleAtCmd("AT+CIPSEND\r", AT_RDY)) {
    2902:	4e e5       	ldi	r20, 0x5E	; 94
    2904:	52 e0       	ldi	r21, 0x02	; 2
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	9c 81       	ldd	r25, Y+4	; 0x04
    290a:	2b ee       	ldi	r18, 0xEB	; 235
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	ba 01       	movw	r22, r20
    2910:	a9 01       	movw	r20, r18
    2912:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2916:	88 23       	and	r24, r24
    2918:	09 f4       	brne	.+2      	; 0x291c <__stack+0x71d>
    291a:	bc c0       	rjmp	.+376    	; 0x2a94 <__stack+0x895>
        mdmState = MDM_IPSEND_VERIFY;
    291c:	eb 81       	ldd	r30, Y+3	; 0x03
    291e:	fc 81       	ldd	r31, Y+4	; 0x04
    2920:	89 e2       	ldi	r24, 0x29	; 41
    2922:	80 83       	st	Z, r24
        cmdState = START;
    2924:	eb 81       	ldd	r30, Y+3	; 0x03
    2926:	fc 81       	ldd	r31, Y+4	; 0x04
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	81 83       	std	Z+1, r24	; 0x01
        DbgUart.sendStr(txcmd);
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	9c 01       	movw	r18, r24
    2932:	21 5f       	subi	r18, 0xF1	; 241
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	89 ee       	ldi	r24, 0xE9	; 233
    2938:	94 e0       	ldi	r25, 0x04	; 4
    293a:	b9 01       	movw	r22, r18
    293c:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        pUart->sendStr(txcmd);
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	fc 01       	movw	r30, r24
    2946:	e7 5d       	subi	r30, 0xD7	; 215
    2948:	fd 4f       	sbci	r31, 0xFD	; 253
    294a:	40 81       	ld	r20, Z
    294c:	51 81       	ldd	r21, Z+1	; 0x01
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	9c 01       	movw	r18, r24
    2954:	21 5f       	subi	r18, 0xF1	; 241
    2956:	3f 4f       	sbci	r19, 0xFF	; 255
    2958:	ca 01       	movw	r24, r20
    295a:	b9 01       	movw	r22, r18
    295c:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        pUart->sendStr_P(PSTR("\x1A\r"));
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	9c 81       	ldd	r25, Y+4	; 0x04
    2964:	fc 01       	movw	r30, r24
    2966:	e7 5d       	subi	r30, 0xD7	; 215
    2968:	fd 4f       	sbci	r31, 0xFD	; 253
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	21 eb       	ldi	r18, 0xB1	; 177
    2970:	31 e0       	ldi	r19, 0x01	; 1
    2972:	b9 01       	movw	r22, r18
    2974:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    2978:	8d c0       	rjmp	.+282    	; 0x2a94 <__stack+0x895>
      }
      break;
    case MDM_IPSEND_VERIFY:
      timeout = MDM_TIMEOUT_VAL * 30;
    297a:	eb 81       	ldd	r30, Y+3	; 0x03
    297c:	fc 81       	ldd	r31, Y+4	; 0x04
    297e:	80 e8       	ldi	r24, 0x80	; 128
    2980:	93 ec       	ldi	r25, 0xC3	; 195
    2982:	a9 ec       	ldi	r26, 0xC9	; 201
    2984:	b1 e0       	ldi	r27, 0x01	; 1
    2986:	83 87       	std	Z+11, r24	; 0x0b
    2988:	94 87       	std	Z+12, r25	; 0x0c
    298a:	a5 87       	std	Z+13, r26	; 0x0d
    298c:	b6 87       	std	Z+14, r27	; 0x0e
      failState = MDM_IPSHUTDOWN;
    298e:	eb 81       	ldd	r30, Y+3	; 0x03
    2990:	fc 81       	ldd	r31, Y+4	; 0x04
    2992:	8a e2       	ldi	r24, 0x2A	; 42
    2994:	82 83       	std	Z+2, r24	; 0x02
      if (GetAtResp(AT_SEND_OK)) {
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	2e ee       	ldi	r18, 0xEE	; 238
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	b9 01       	movw	r22, r18
    29a0:	0e 94 9e 0b 	call	0x173c	; 0x173c <_ZN6CModem9GetAtRespEPKc>
    29a4:	88 23       	and	r24, r24
    29a6:	61 f0       	breq	.+24     	; 0x29c0 <__stack+0x7c1>
        DbgUart.sendStr("\n\rSUKSES");
    29a8:	2a e6       	ldi	r18, 0x6A	; 106
    29aa:	32 e0       	ldi	r19, 0x02	; 2
    29ac:	89 ee       	ldi	r24, 0xE9	; 233
    29ae:	94 e0       	ldi	r25, 0x04	; 4
    29b0:	b9 01       	movw	r22, r18
    29b2:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        mdmState = MDM_READY;
    29b6:	eb 81       	ldd	r30, Y+3	; 0x03
    29b8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ba:	8a e0       	ldi	r24, 0x0A	; 10
    29bc:	80 83       	st	Z, r24
    29be:	6a c0       	rjmp	.+212    	; 0x2a94 <__stack+0x895>
      } else if (cmdState == SEND) { //a timeout occured
    29c0:	eb 81       	ldd	r30, Y+3	; 0x03
    29c2:	fc 81       	ldd	r31, Y+4	; 0x04
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
    29c6:	82 30       	cpi	r24, 0x02	; 2
    29c8:	09 f0       	breq	.+2      	; 0x29cc <__stack+0x7cd>
    29ca:	64 c0       	rjmp	.+200    	; 0x2a94 <__stack+0x895>
#if MDM_DEBUG_LEVEL > 2
        DbgUart.sendStr_P(PSTR("\n\rDATA SEND ERROR"));
#endif
        mdmState = MDM_IP_SEND;
    29cc:	eb 81       	ldd	r30, Y+3	; 0x03
    29ce:	fc 81       	ldd	r31, Y+4	; 0x04
    29d0:	88 e2       	ldi	r24, 0x28	; 40
    29d2:	80 83       	st	Z, r24
        taskRetry++;
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	9c 81       	ldd	r25, Y+4	; 0x04
    29d8:	fc 01       	movw	r30, r24
    29da:	ef 5e       	subi	r30, 0xEF	; 239
    29dc:	fd 4f       	sbci	r31, 0xFD	; 253
    29de:	80 81       	ld	r24, Z
    29e0:	28 2f       	mov	r18, r24
    29e2:	2f 5f       	subi	r18, 0xFF	; 255
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	9c 81       	ldd	r25, Y+4	; 0x04
    29e8:	fc 01       	movw	r30, r24
    29ea:	ef 5e       	subi	r30, 0xEF	; 239
    29ec:	fd 4f       	sbci	r31, 0xFD	; 253
    29ee:	20 83       	st	Z, r18
    29f0:	51 c0       	rjmp	.+162    	; 0x2a94 <__stack+0x895>
      }
      break;

    case MDM_IPSHUTDOWN:
      strcpy_P(txcmd, PSTR("AT+CIPSHUT\r"));
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	9c 81       	ldd	r25, Y+4	; 0x04
    29f6:	0f 96       	adiw	r24, 0x0f	; 15
    29f8:	25 ea       	ldi	r18, 0xA5	; 165
    29fa:	31 e0       	ldi	r19, 0x01	; 1
    29fc:	b9 01       	movw	r22, r18
    29fe:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_OK)) {
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	ac 01       	movw	r20, r24
    2a08:	41 5f       	subi	r20, 0xF1	; 241
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	24 ee       	ldi	r18, 0xE4	; 228
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	ba 01       	movw	r22, r20
    2a16:	a9 01       	movw	r20, r18
    2a18:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2a1c:	88 23       	and	r24, r24
    2a1e:	21 f0       	breq	.+8      	; 0x2a28 <__stack+0x829>
        mdmState = MDM_CONNECT_TO_SERVER;
    2a20:	eb 81       	ldd	r30, Y+3	; 0x03
    2a22:	fc 81       	ldd	r31, Y+4	; 0x04
    2a24:	84 e2       	ldi	r24, 0x24	; 36
    2a26:	80 83       	st	Z, r24
      }
      connect_ok = false;
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e3 5d       	subi	r30, 0xD3	; 211
    2a30:	fd 4f       	sbci	r31, 0xFD	; 253
    2a32:	10 82       	st	Z, r1
    2a34:	2f c0       	rjmp	.+94     	; 0x2a94 <__stack+0x895>
      break;

    case MDM_GET_BALANCE:
      timeout = MDM_TIMEOUT_VAL * 10;//10 sekondes
    2a36:	eb 81       	ldd	r30, Y+3	; 0x03
    2a38:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3a:	80 e8       	ldi	r24, 0x80	; 128
    2a3c:	96 e9       	ldi	r25, 0x96	; 150
    2a3e:	a8 e9       	ldi	r26, 0x98	; 152
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	83 87       	std	Z+11, r24	; 0x0b
    2a44:	94 87       	std	Z+12, r25	; 0x0c
    2a46:	a5 87       	std	Z+13, r26	; 0x0d
    2a48:	b6 87       	std	Z+14, r27	; 0x0e
      strcpy_P(txcmd, PSTR("ATD*100#\r"));
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	0f 96       	adiw	r24, 0x0f	; 15
    2a50:	2b e9       	ldi	r18, 0x9B	; 155
    2a52:	31 e0       	ldi	r19, 0x01	; 1
    2a54:	b9 01       	movw	r22, r18
    2a56:	0e 94 6d 5b 	call	0xb6da	; 0xb6da <strcpy_P>
      if (HandleAtCmd(txcmd, AT_DATA)) {
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5e:	ac 01       	movw	r20, r24
    2a60:	41 5f       	subi	r20, 0xF1	; 241
    2a62:	5f 4f       	sbci	r21, 0xFF	; 255
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	9c 81       	ldd	r25, Y+4	; 0x04
    2a68:	27 e0       	ldi	r18, 0x07	; 7
    2a6a:	31 e0       	ldi	r19, 0x01	; 1
    2a6c:	ba 01       	movw	r22, r20
    2a6e:	a9 01       	movw	r20, r18
    2a70:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN6CModem11HandleAtCmdEPcPKc>
    2a74:	88 23       	and	r24, r24
    2a76:	71 f0       	breq	.+28     	; 0x2a94 <__stack+0x895>
        mdmState = MDM_READY;
    2a78:	eb 81       	ldd	r30, Y+3	; 0x03
    2a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a7c:	8a e0       	ldi	r24, 0x0A	; 10
    2a7e:	80 83       	st	Z, r24
        DbgUart.sendStr(rxmsg);
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	9c 81       	ldd	r25, Y+4	; 0x04
    2a84:	9c 01       	movw	r18, r24
    2a86:	21 5f       	subi	r18, 0xF1	; 241
    2a88:	3e 4f       	sbci	r19, 0xFE	; 254
    2a8a:	89 ee       	ldi	r24, 0xE9	; 233
    2a8c:	94 e0       	ldi	r25, 0x04	; 4
    2a8e:	b9 01       	movw	r22, r18
    2a90:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      break;

    default:
      break;
  }
}
    2a94:	60 96       	adiw	r28, 0x10	; 16
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <_ZL12__iCliRetValv>:
{
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
{
    cli();
    2aae:	f8 94       	cli
    return 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
}
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <_ZL10__iRestorePKh>:
    cli();
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <_ZL10__iRestorePKh+0x6>
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	9a 83       	std	Y+2, r25	; 0x02
    2ac4:	89 83       	std	Y+1, r24	; 0x01
{
    SREG = *__s;
    2ac6:	ef e5       	ldi	r30, 0x5F	; 95
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	a9 81       	ldd	r26, Y+1	; 0x01
    2acc:	ba 81       	ldd	r27, Y+2	; 0x02
    2ace:	8c 91       	ld	r24, X
    2ad0:	80 83       	st	Z, r24
    __asm__ volatile ("" ::: "memory");
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <_ZN5CRFID11SearchTagIDEmPh>:
}

/****************************************************************************
 Search in the table for the RfidTag that was just received from the pUart
 ****************************************************************************/
u08 CRFID::SearchTagID(u32 tagID, u08 *tableIndex) {
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	2a 97       	sbiw	r28, 0x0a	; 10
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	9b 83       	std	Y+3, r25	; 0x03
    2af2:	8a 83       	std	Y+2, r24	; 0x02
    2af4:	4c 83       	std	Y+4, r20	; 0x04
    2af6:	5d 83       	std	Y+5, r21	; 0x05
    2af8:	6e 83       	std	Y+6, r22	; 0x06
    2afa:	7f 83       	std	Y+7, r23	; 0x07
    2afc:	39 87       	std	Y+9, r19	; 0x09
    2afe:	28 87       	std	Y+8, r18	; 0x08
  u08 i;
  for (i = 0; i < tableLen; i++) {
    2b00:	19 82       	std	Y+1, r1	; 0x01
    2b02:	30 c0       	rjmp	.+96     	; 0x2b64 <_ZN5CRFID11SearchTagIDEmPh+0x88>
    if ((pTable[i].tagID == tagID)) {// &&( pRfidTag->custCode == pTable[i].custCode))  {
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	fc 01       	movw	r30, r24
    2b0a:	e5 5b       	subi	r30, 0xB5	; 181
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	40 81       	ld	r20, Z
    2b10:	51 81       	ldd	r21, Z+1	; 0x01
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9c 01       	movw	r18, r24
    2b1a:	22 0f       	add	r18, r18
    2b1c:	33 1f       	adc	r19, r19
    2b1e:	c9 01       	movw	r24, r18
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	82 1b       	sub	r24, r18
    2b2e:	93 0b       	sbc	r25, r19
    2b30:	fa 01       	movw	r30, r20
    2b32:	e8 0f       	add	r30, r24
    2b34:	f9 1f       	adc	r31, r25
    2b36:	23 81       	ldd	r18, Z+3	; 0x03
    2b38:	34 81       	ldd	r19, Z+4	; 0x04
    2b3a:	45 81       	ldd	r20, Z+5	; 0x05
    2b3c:	56 81       	ldd	r21, Z+6	; 0x06
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	9d 81       	ldd	r25, Y+5	; 0x05
    2b42:	ae 81       	ldd	r26, Y+6	; 0x06
    2b44:	bf 81       	ldd	r27, Y+7	; 0x07
    2b46:	28 17       	cp	r18, r24
    2b48:	39 07       	cpc	r19, r25
    2b4a:	4a 07       	cpc	r20, r26
    2b4c:	5b 07       	cpc	r21, r27
    2b4e:	39 f4       	brne	.+14     	; 0x2b5e <_ZN5CRFID11SearchTagIDEmPh+0x82>
      *tableIndex = i;
    2b50:	e8 85       	ldd	r30, Y+8	; 0x08
    2b52:	f9 85       	ldd	r31, Y+9	; 0x09
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	80 83       	st	Z, r24
      return true;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	8a 87       	std	Y+10, r24	; 0x0a
    2b5c:	10 c0       	rjmp	.+32     	; 0x2b7e <_ZN5CRFID11SearchTagIDEmPh+0xa2>
/****************************************************************************
 Search in the table for the RfidTag that was just received from the pUart
 ****************************************************************************/
u08 CRFID::SearchTagID(u32 tagID, u08 *tableIndex) {
  u08 i;
  for (i = 0; i < tableLen; i++) {
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	8f 5f       	subi	r24, 0xFF	; 255
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	8a 81       	ldd	r24, Y+2	; 0x02
    2b66:	9b 81       	ldd	r25, Y+3	; 0x03
    2b68:	fc 01       	movw	r30, r24
    2b6a:	e6 5b       	subi	r30, 0xB6	; 182
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	90 81       	ld	r25, Z
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	89 17       	cp	r24, r25
    2b74:	38 f2       	brcs	.-114    	; 0x2b04 <_ZN5CRFID11SearchTagIDEmPh+0x28>
    if ((pTable[i].tagID == tagID)) {// &&( pRfidTag->custCode == pTable[i].custCode))  {
      *tableIndex = i;
      return true;
    }
  }
  *tableIndex = 0;
    2b76:	e8 85       	ldd	r30, Y+8	; 0x08
    2b78:	f9 85       	ldd	r31, Y+9	; 0x09
    2b7a:	10 82       	st	Z, r1
  return false;
    2b7c:	1a 86       	std	Y+10, r1	; 0x0a
    2b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2b80:	2a 96       	adiw	r28, 0x0a	; 10
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <_ZN5CRFID14ServiceSignalsEv>:

  }
  return false;
}

void CRFID::ServiceSignals(void) {
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	27 97       	sbiw	r28, 0x07	; 7
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	9d 83       	std	Y+5, r25	; 0x05
    2bb0:	8c 83       	std	Y+4, r24	; 0x04
  u08 i;
  for (i = 0; i < NUM_RFID_SIGNALS; i++) {
    2bb2:	1a 82       	std	Y+2, r1	; 0x02
    2bb4:	2a c1       	rjmp	.+596    	; 0x2e0a <_ZN5CRFID14ServiceSignalsEv+0x278>
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2bb6:	ef e5       	ldi	r30, 0x5F	; 95
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	8b 83       	std	Y+3, r24	; 0x03
    2bbe:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <_ZL12__iCliRetValv>
    2bc2:	89 83       	std	Y+1, r24	; 0x01
    2bc4:	8c c0       	rjmp	.+280    	; 0x2cde <_ZN5CRFID14ServiceSignalsEv+0x14c>
      if (timer) {
    2bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bca:	fc 01       	movw	r30, r24
    2bcc:	e3 5b       	subi	r30, 0xB3	; 179
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	a2 81       	ldd	r26, Z+2	; 0x02
    2bd6:	b3 81       	ldd	r27, Z+3	; 0x03
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	a1 05       	cpc	r26, r1
    2bdc:	b1 05       	cpc	r27, r1
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <_ZN5CRFID14ServiceSignalsEv+0x50>
    2be0:	7d c0       	rjmp	.+250    	; 0x2cdc <_ZN5CRFID14ServiceSignalsEv+0x14a>
        if (signal[i].timer < 0xFFFFFFFF && signal[i].state != SIG_TRIGGERED) {
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4c 81       	ldd	r20, Y+4	; 0x04
    2bea:	5d 81       	ldd	r21, Y+5	; 0x05
    2bec:	c9 01       	movw	r24, r18
    2bee:	88 0f       	add	r24, r24
    2bf0:	99 1f       	adc	r25, r25
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	82 0f       	add	r24, r18
    2bfc:	93 1f       	adc	r25, r19
    2bfe:	84 0f       	add	r24, r20
    2c00:	95 1f       	adc	r25, r21
    2c02:	fc 01       	movw	r30, r24
    2c04:	bf 96       	adiw	r30, 0x2f	; 47
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
    2c0a:	a2 81       	ldd	r26, Z+2	; 0x02
    2c0c:	b3 81       	ldd	r27, Z+3	; 0x03
    2c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c10:	2f ef       	ldi	r18, 0xFF	; 255
    2c12:	92 07       	cpc	r25, r18
    2c14:	2f ef       	ldi	r18, 0xFF	; 255
    2c16:	a2 07       	cpc	r26, r18
    2c18:	2f ef       	ldi	r18, 0xFF	; 255
    2c1a:	b2 07       	cpc	r27, r18
    2c1c:	c1 f0       	breq	.+48     	; 0x2c4e <_ZN5CRFID14ServiceSignalsEv+0xbc>
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	28 2f       	mov	r18, r24
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4c 81       	ldd	r20, Y+4	; 0x04
    2c26:	5d 81       	ldd	r21, Y+5	; 0x05
    2c28:	c9 01       	movw	r24, r18
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	82 0f       	add	r24, r18
    2c38:	93 1f       	adc	r25, r19
    2c3a:	84 0f       	add	r24, r20
    2c3c:	95 1f       	adc	r25, r21
    2c3e:	fc 01       	movw	r30, r24
    2c40:	f3 96       	adiw	r30, 0x33	; 51
    2c42:	80 81       	ld	r24, Z
    2c44:	82 30       	cpi	r24, 0x02	; 2
    2c46:	19 f0       	breq	.+6      	; 0x2c4e <_ZN5CRFID14ServiceSignalsEv+0xbc>
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	8f 83       	std	Y+7, r24	; 0x07
    2c4c:	01 c0       	rjmp	.+2      	; 0x2c50 <_ZN5CRFID14ServiceSignalsEv+0xbe>
    2c4e:	1f 82       	std	Y+7, r1	; 0x07
    2c50:	8f 81       	ldd	r24, Y+7	; 0x07
    2c52:	88 23       	and	r24, r24
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <_ZN5CRFID14ServiceSignalsEv+0xc6>
    2c56:	42 c0       	rjmp	.+132    	; 0x2cdc <_ZN5CRFID14ServiceSignalsEv+0x14a>
          signal[i].timer += timer;
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	08 2f       	mov	r16, r24
    2c5c:	10 e0       	ldi	r17, 0x00	; 0
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	4c 81       	ldd	r20, Y+4	; 0x04
    2c66:	5d 81       	ldd	r21, Y+5	; 0x05
    2c68:	c9 01       	movw	r24, r18
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	82 0f       	add	r24, r18
    2c78:	93 1f       	adc	r25, r19
    2c7a:	84 0f       	add	r24, r20
    2c7c:	95 1f       	adc	r25, r21
    2c7e:	fc 01       	movw	r30, r24
    2c80:	bf 96       	adiw	r30, 0x2f	; 47
    2c82:	20 81       	ld	r18, Z
    2c84:	31 81       	ldd	r19, Z+1	; 0x01
    2c86:	42 81       	ldd	r20, Z+2	; 0x02
    2c88:	53 81       	ldd	r21, Z+3	; 0x03
    2c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8e:	fc 01       	movw	r30, r24
    2c90:	e3 5b       	subi	r30, 0xB3	; 179
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	a2 81       	ldd	r26, Z+2	; 0x02
    2c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c9c:	28 0f       	add	r18, r24
    2c9e:	39 1f       	adc	r19, r25
    2ca0:	4a 1f       	adc	r20, r26
    2ca2:	5b 1f       	adc	r21, r27
    2ca4:	6c 81       	ldd	r22, Y+4	; 0x04
    2ca6:	7d 81       	ldd	r23, Y+5	; 0x05
    2ca8:	c8 01       	movw	r24, r16
    2caa:	88 0f       	add	r24, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	80 0f       	add	r24, r16
    2cb8:	91 1f       	adc	r25, r17
    2cba:	86 0f       	add	r24, r22
    2cbc:	97 1f       	adc	r25, r23
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	bf 96       	adiw	r30, 0x2f	; 47
    2cc2:	20 83       	st	Z, r18
    2cc4:	31 83       	std	Z+1, r19	; 0x01
    2cc6:	42 83       	std	Z+2, r20	; 0x02
    2cc8:	53 83       	std	Z+3, r21	; 0x03
          timer = 0;
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	fc 01       	movw	r30, r24
    2cd0:	e3 5b       	subi	r30, 0xB3	; 179
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	10 82       	st	Z, r1
    2cd6:	11 82       	std	Z+1, r1	; 0x01
    2cd8:	12 82       	std	Z+2, r1	; 0x02
    2cda:	13 82       	std	Z+3, r1	; 0x03
}

void CRFID::ServiceSignals(void) {
  u08 i;
  for (i = 0; i < NUM_RFID_SIGNALS; i++) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2cdc:	19 82       	std	Y+1, r1	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <_ZN5CRFID14ServiceSignalsEv+0x154>
    2ce4:	70 cf       	rjmp	.-288    	; 0x2bc6 <_ZN5CRFID14ServiceSignalsEv+0x34>
        if (signal[i].timer < 0xFFFFFFFF && signal[i].state != SIG_TRIGGERED) {
          signal[i].timer += timer;
          timer = 0;
        }
      }
    }
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	03 96       	adiw	r24, 0x03	; 3
    2cea:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZL10__iRestorePKh>
    if (signal[i].state == SIG_RESET) {
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	4c 81       	ldd	r20, Y+4	; 0x04
    2cf6:	5d 81       	ldd	r21, Y+5	; 0x05
    2cf8:	c9 01       	movw	r24, r18
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	88 0f       	add	r24, r24
    2d00:	99 1f       	adc	r25, r25
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	82 0f       	add	r24, r18
    2d08:	93 1f       	adc	r25, r19
    2d0a:	84 0f       	add	r24, r20
    2d0c:	95 1f       	adc	r25, r21
    2d0e:	fc 01       	movw	r30, r24
    2d10:	f3 96       	adiw	r30, 0x33	; 51
    2d12:	80 81       	ld	r24, Z
    2d14:	83 30       	cpi	r24, 0x03	; 3
    2d16:	59 f5       	brne	.+86     	; 0x2d6e <_ZN5CRFID14ServiceSignalsEv+0x1dc>
      signal[i].timer = 0;
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4c 81       	ldd	r20, Y+4	; 0x04
    2d20:	5d 81       	ldd	r21, Y+5	; 0x05
    2d22:	c9 01       	movw	r24, r18
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	82 0f       	add	r24, r18
    2d32:	93 1f       	adc	r25, r19
    2d34:	84 0f       	add	r24, r20
    2d36:	95 1f       	adc	r25, r21
    2d38:	fc 01       	movw	r30, r24
    2d3a:	bf 96       	adiw	r30, 0x2f	; 47
    2d3c:	10 82       	st	Z, r1
    2d3e:	11 82       	std	Z+1, r1	; 0x01
    2d40:	12 82       	std	Z+2, r1	; 0x02
    2d42:	13 82       	std	Z+3, r1	; 0x03
      signal[i].state = SIG_PENDING;
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4c 81       	ldd	r20, Y+4	; 0x04
    2d4c:	5d 81       	ldd	r21, Y+5	; 0x05
    2d4e:	c9 01       	movw	r24, r18
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	82 0f       	add	r24, r18
    2d5e:	93 1f       	adc	r25, r19
    2d60:	84 0f       	add	r24, r20
    2d62:	95 1f       	adc	r25, r21
    2d64:	fc 01       	movw	r30, r24
    2d66:	f3 96       	adiw	r30, 0x33	; 51
    2d68:	84 e0       	ldi	r24, 0x04	; 4
    2d6a:	80 83       	st	Z, r24
    2d6c:	4b c0       	rjmp	.+150    	; 0x2e04 <_ZN5CRFID14ServiceSignalsEv+0x272>
    } else if (signal[i].timer > signal[i].period) {
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4c 81       	ldd	r20, Y+4	; 0x04
    2d76:	5d 81       	ldd	r21, Y+5	; 0x05
    2d78:	c9 01       	movw	r24, r18
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	84 0f       	add	r24, r20
    2d8c:	95 1f       	adc	r25, r21
    2d8e:	fc 01       	movw	r30, r24
    2d90:	bf 96       	adiw	r30, 0x2f	; 47
    2d92:	e0 80       	ld	r14, Z
    2d94:	f1 80       	ldd	r15, Z+1	; 0x01
    2d96:	02 81       	ldd	r16, Z+2	; 0x02
    2d98:	13 81       	ldd	r17, Z+3	; 0x03
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	28 2f       	mov	r18, r24
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	4c 81       	ldd	r20, Y+4	; 0x04
    2da2:	5d 81       	ldd	r21, Y+5	; 0x05
    2da4:	c9 01       	movw	r24, r18
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	88 0f       	add	r24, r24
    2dac:	99 1f       	adc	r25, r25
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	82 0f       	add	r24, r18
    2db4:	93 1f       	adc	r25, r19
    2db6:	84 0f       	add	r24, r20
    2db8:	95 1f       	adc	r25, r21
    2dba:	fc 01       	movw	r30, r24
    2dbc:	bb 96       	adiw	r30, 0x2b	; 43
    2dbe:	80 81       	ld	r24, Z
    2dc0:	91 81       	ldd	r25, Z+1	; 0x01
    2dc2:	a2 81       	ldd	r26, Z+2	; 0x02
    2dc4:	b3 81       	ldd	r27, Z+3	; 0x03
    2dc6:	1e 82       	std	Y+6, r1	; 0x06
    2dc8:	8e 15       	cp	r24, r14
    2dca:	9f 05       	cpc	r25, r15
    2dcc:	a0 07       	cpc	r26, r16
    2dce:	b1 07       	cpc	r27, r17
    2dd0:	10 f4       	brcc	.+4      	; 0x2dd6 <_ZN5CRFID14ServiceSignalsEv+0x244>
    2dd2:	21 e0       	ldi	r18, 0x01	; 1
    2dd4:	2e 83       	std	Y+6, r18	; 0x06
    2dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd8:	88 23       	and	r24, r24
    2dda:	a1 f0       	breq	.+40     	; 0x2e04 <_ZN5CRFID14ServiceSignalsEv+0x272>
      signal[i].state = SIG_TRIGGERED;
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	4c 81       	ldd	r20, Y+4	; 0x04
    2de4:	5d 81       	ldd	r21, Y+5	; 0x05
    2de6:	c9 01       	movw	r24, r18
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	82 0f       	add	r24, r18
    2df6:	93 1f       	adc	r25, r19
    2df8:	84 0f       	add	r24, r20
    2dfa:	95 1f       	adc	r25, r21
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	f3 96       	adiw	r30, 0x33	; 51
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	80 83       	st	Z, r24
  return false;
}

void CRFID::ServiceSignals(void) {
  u08 i;
  for (i = 0; i < NUM_RFID_SIGNALS; i++) {
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	8f 5f       	subi	r24, 0xFF	; 255
    2e08:	8a 83       	std	Y+2, r24	; 0x02
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	83 30       	cpi	r24, 0x03	; 3
    2e0e:	08 f4       	brcc	.+2      	; 0x2e12 <_ZN5CRFID14ServiceSignalsEv+0x280>
    2e10:	d2 ce       	rjmp	.-604    	; 0x2bb6 <_ZN5CRFID14ServiceSignalsEv+0x24>
      signal[i].state = SIG_PENDING;
    } else if (signal[i].timer > signal[i].period) {
      signal[i].state = SIG_TRIGGERED;
    }
  }
}
    2e12:	27 96       	adiw	r28, 0x07	; 7
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	ff 90       	pop	r15
    2e28:	ef 90       	pop	r14
    2e2a:	08 95       	ret

00002e2c <_ZN5CRFID10ReceiveTagEP8sRfidTag>:

u08 CRFID::ReceiveTag(sRfidTag *pRfidTag) {
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	2c 97       	sbiw	r28, 0x0c	; 12
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	9c 83       	std	Y+4, r25	; 0x04
    2e42:	8b 83       	std	Y+3, r24	; 0x03
    2e44:	7e 83       	std	Y+6, r23	; 0x06
    2e46:	6d 83       	std	Y+5, r22	; 0x05
  u08 crc;
  u08 ret;

  ret = false;
    2e48:	19 82       	std	Y+1, r1	; 0x01
  if (signal[RFID_TAG_SIGNAL].state == SIG_TRIGGERED) {
    2e4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4e:	84 ad       	ldd	r24, Z+60	; 0x3c
    2e50:	82 30       	cpi	r24, 0x02	; 2
    2e52:	31 f4       	brne	.+12     	; 0x2e60 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x34>
    rxState = STATE_RFID_HEADER1;
    2e54:	eb 81       	ldd	r30, Y+3	; 0x03
    2e56:	fc 81       	ldd	r31, Y+4	; 0x04
    2e58:	14 82       	std	Z+4, r1	; 0x04
    cntByte = 0;
    2e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5e:	15 82       	std	Z+5, r1	; 0x05
  }

  switch (rxState) {
    2e60:	eb 81       	ldd	r30, Y+3	; 0x03
    2e62:	fc 81       	ldd	r31, Y+4	; 0x04
    2e64:	84 81       	ldd	r24, Z+4	; 0x04
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	3c 87       	std	Y+12, r19	; 0x0c
    2e6c:	2b 87       	std	Y+11, r18	; 0x0b
    2e6e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e70:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e72:	81 30       	cpi	r24, 0x01	; 1
    2e74:	91 05       	cpc	r25, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x4e>
    2e78:	48 c0       	rjmp	.+144    	; 0x2f0a <_ZN5CRFID10ReceiveTagEP8sRfidTag+0xde>
    2e7a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e7e:	22 30       	cpi	r18, 0x02	; 2
    2e80:	31 05       	cpc	r19, r1
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x62>
    2e84:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	71 f0       	breq	.+28     	; 0x2ea8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x7c>
    2e8c:	97 c1       	rjmp	.+814    	; 0x31bc <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x390>
    2e8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e90:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e92:	22 30       	cpi	r18, 0x02	; 2
    2e94:	31 05       	cpc	r19, r1
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x6e>
    2e98:	70 c0       	rjmp	.+224    	; 0x2f7a <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x14e>
    2e9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e9e:	86 30       	cpi	r24, 0x06	; 6
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	09 f4       	brne	.+2      	; 0x2ea6 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x7a>
    2ea4:	a5 c0       	rjmp	.+330    	; 0x2ff0 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x1c4>
    2ea6:	8a c1       	rjmp	.+788    	; 0x31bc <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x390>
    case STATE_RFID_HEADER1:
      if (pUart->receive(&payload[0], 1) == 1) {
    2ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    2eac:	40 81       	ld	r20, Z
    2eae:	51 81       	ldd	r21, Z+1	; 0x01
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	9c 01       	movw	r18, r24
    2eb6:	2a 5f       	subi	r18, 0xFA	; 250
    2eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eba:	ca 01       	movw	r24, r20
    2ebc:	b9 01       	movw	r22, r18
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    2ec6:	1a 86       	std	Y+10, r1	; 0x0a
    2ec8:	81 30       	cpi	r24, 0x01	; 1
    2eca:	91 05       	cpc	r25, r1
    2ecc:	11 f4       	brne	.+4      	; 0x2ed2 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0xa6>
    2ece:	91 e0       	ldi	r25, 0x01	; 1
    2ed0:	9a 87       	std	Y+10, r25	; 0x0a
    2ed2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ed4:	22 23       	and	r18, r18
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <_ZN5CRFID10ReceiveTagEP8sRfidTag+0xae>
    2ed8:	77 c1       	rjmp	.+750    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        if (payload[cntByte] == RFID_HEADER1) {
    2eda:	eb 81       	ldd	r30, Y+3	; 0x03
    2edc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ede:	85 81       	ldd	r24, Z+5	; 0x05
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	82 0f       	add	r24, r18
    2eea:	93 1f       	adc	r25, r19
    2eec:	fc 01       	movw	r30, r24
    2eee:	36 96       	adiw	r30, 0x06	; 6
    2ef0:	80 81       	ld	r24, Z
    2ef2:	81 32       	cpi	r24, 0x21	; 33
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0xcc>
    2ef6:	68 c1       	rjmp	.+720    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
          rxState = STATE_RFID_HEADER2;
    2ef8:	eb 81       	ldd	r30, Y+3	; 0x03
    2efa:	fc 81       	ldd	r31, Y+4	; 0x04
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	84 83       	std	Z+4, r24	; 0x04
          signal[RFID_TAG_SIGNAL].state = SIG_RESET;
    2f00:	eb 81       	ldd	r30, Y+3	; 0x03
    2f02:	fc 81       	ldd	r31, Y+4	; 0x04
    2f04:	83 e0       	ldi	r24, 0x03	; 3
    2f06:	84 af       	std	Z+60, r24	; 0x3c
    2f08:	5f c1       	rjmp	.+702    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        }
      }
      break;
    case STATE_RFID_HEADER2:
      if (pUart->receive(&payload[cntByte], 1) == 1) {
    2f0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f0e:	40 81       	ld	r20, Z
    2f10:	51 81       	ldd	r21, Z+1	; 0x01
    2f12:	eb 81       	ldd	r30, Y+3	; 0x03
    2f14:	fc 81       	ldd	r31, Y+4	; 0x04
    2f16:	85 81       	ldd	r24, Z+5	; 0x05
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	2a 5f       	subi	r18, 0xFA	; 250
    2f20:	3f 4f       	sbci	r19, 0xFF	; 255
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	28 0f       	add	r18, r24
    2f28:	39 1f       	adc	r19, r25
    2f2a:	ca 01       	movw	r24, r20
    2f2c:	b9 01       	movw	r22, r18
    2f2e:	41 e0       	ldi	r20, 0x01	; 1
    2f30:	50 e0       	ldi	r21, 0x00	; 0
    2f32:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    2f36:	19 86       	std	Y+9, r1	; 0x09
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	91 05       	cpc	r25, r1
    2f3c:	11 f4       	brne	.+4      	; 0x2f42 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x116>
    2f3e:	31 e0       	ldi	r19, 0x01	; 1
    2f40:	39 87       	std	Y+9, r19	; 0x09
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	88 23       	and	r24, r24
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x11e>
    2f48:	3f c1       	rjmp	.+638    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        if (payload[cntByte] == RFID_HEADER2) {
    2f4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f4e:	85 81       	ldd	r24, Z+5	; 0x05
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	82 0f       	add	r24, r18
    2f5a:	93 1f       	adc	r25, r19
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	36 96       	adiw	r30, 0x06	; 6
    2f60:	80 81       	ld	r24, Z
    2f62:	8a 32       	cpi	r24, 0x2A	; 42
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x13c>
    2f66:	30 c1       	rjmp	.+608    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
          rxState = STATE_RFID_HEADER3;
    2f68:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	84 83       	std	Z+4, r24	; 0x04
          signal[RFID_TAG_SIGNAL].state = SIG_RESET;
    2f70:	eb 81       	ldd	r30, Y+3	; 0x03
    2f72:	fc 81       	ldd	r31, Y+4	; 0x04
    2f74:	83 e0       	ldi	r24, 0x03	; 3
    2f76:	84 af       	std	Z+60, r24	; 0x3c
    2f78:	27 c1       	rjmp	.+590    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        }
      }
      break;
    case STATE_RFID_HEADER3:
      if (pUart->receive(&payload[cntByte], 1) == 1) {
    2f7a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7e:	40 81       	ld	r20, Z
    2f80:	51 81       	ldd	r21, Z+1	; 0x01
    2f82:	eb 81       	ldd	r30, Y+3	; 0x03
    2f84:	fc 81       	ldd	r31, Y+4	; 0x04
    2f86:	85 81       	ldd	r24, Z+5	; 0x05
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9c 01       	movw	r18, r24
    2f8e:	2a 5f       	subi	r18, 0xFA	; 250
    2f90:	3f 4f       	sbci	r19, 0xFF	; 255
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	28 0f       	add	r18, r24
    2f98:	39 1f       	adc	r19, r25
    2f9a:	ca 01       	movw	r24, r20
    2f9c:	b9 01       	movw	r22, r18
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	50 e0       	ldi	r21, 0x00	; 0
    2fa2:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    2fa6:	18 86       	std	Y+8, r1	; 0x08
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	91 05       	cpc	r25, r1
    2fac:	11 f4       	brne	.+4      	; 0x2fb2 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x186>
    2fae:	91 e0       	ldi	r25, 0x01	; 1
    2fb0:	98 87       	std	Y+8, r25	; 0x08
    2fb2:	28 85       	ldd	r18, Y+8	; 0x08
    2fb4:	22 23       	and	r18, r18
    2fb6:	09 f4       	brne	.+2      	; 0x2fba <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x18e>
    2fb8:	07 c1       	rjmp	.+526    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        if (payload[cntByte] == RFID_HEADER3) {
    2fba:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbc:	fc 81       	ldd	r31, Y+4	; 0x04
    2fbe:	85 81       	ldd	r24, Z+5	; 0x05
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc8:	82 0f       	add	r24, r18
    2fca:	93 1f       	adc	r25, r19
    2fcc:	fc 01       	movw	r30, r24
    2fce:	36 96       	adiw	r30, 0x06	; 6
    2fd0:	80 81       	ld	r24, Z
    2fd2:	8a 32       	cpi	r24, 0x2A	; 42
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x1ac>
    2fd6:	f8 c0       	rjmp	.+496    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
          cntByte = 0;
    2fd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fda:	fc 81       	ldd	r31, Y+4	; 0x04
    2fdc:	15 82       	std	Z+5, r1	; 0x05
          rxState = STATE_RFID_PAYLOAD;
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	86 e0       	ldi	r24, 0x06	; 6
    2fe4:	84 83       	std	Z+4, r24	; 0x04
          signal[RFID_TAG_SIGNAL].state = SIG_RESET;
    2fe6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fea:	83 e0       	ldi	r24, 0x03	; 3
    2fec:	84 af       	std	Z+60, r24	; 0x3c
    2fee:	ec c0       	rjmp	.+472    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        }
      }
      break;
    case STATE_RFID_PAYLOAD:
      if (pUart->receive(&payload[cntByte], 1) == 1) {
    2ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff4:	40 81       	ld	r20, Z
    2ff6:	51 81       	ldd	r21, Z+1	; 0x01
    2ff8:	eb 81       	ldd	r30, Y+3	; 0x03
    2ffa:	fc 81       	ldd	r31, Y+4	; 0x04
    2ffc:	85 81       	ldd	r24, Z+5	; 0x05
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	9c 01       	movw	r18, r24
    3004:	2a 5f       	subi	r18, 0xFA	; 250
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	28 0f       	add	r18, r24
    300e:	39 1f       	adc	r19, r25
    3010:	ca 01       	movw	r24, r20
    3012:	b9 01       	movw	r22, r18
    3014:	41 e0       	ldi	r20, 0x01	; 1
    3016:	50 e0       	ldi	r21, 0x00	; 0
    3018:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    301c:	1f 82       	std	Y+7, r1	; 0x07
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	91 05       	cpc	r25, r1
    3022:	11 f4       	brne	.+4      	; 0x3028 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x1fc>
    3024:	31 e0       	ldi	r19, 0x01	; 1
    3026:	3f 83       	std	Y+7, r19	; 0x07
    3028:	8f 81       	ldd	r24, Y+7	; 0x07
    302a:	88 23       	and	r24, r24
    302c:	09 f4       	brne	.+2      	; 0x3030 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x204>
    302e:	cc c0       	rjmp	.+408    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        cntByte++;
    3030:	eb 81       	ldd	r30, Y+3	; 0x03
    3032:	fc 81       	ldd	r31, Y+4	; 0x04
    3034:	85 81       	ldd	r24, Z+5	; 0x05
    3036:	8f 5f       	subi	r24, 0xFF	; 255
    3038:	eb 81       	ldd	r30, Y+3	; 0x03
    303a:	fc 81       	ldd	r31, Y+4	; 0x04
    303c:	85 83       	std	Z+5, r24	; 0x05
        signal[RFID_TAG_SIGNAL].state = SIG_RESET;
    303e:	eb 81       	ldd	r30, Y+3	; 0x03
    3040:	fc 81       	ldd	r31, Y+4	; 0x04
    3042:	83 e0       	ldi	r24, 0x03	; 3
    3044:	84 af       	std	Z+60, r24	; 0x3c
        if (cntByte == RFID_PACKET_LEN) {
    3046:	eb 81       	ldd	r30, Y+3	; 0x03
    3048:	fc 81       	ldd	r31, Y+4	; 0x04
    304a:	85 81       	ldd	r24, Z+5	; 0x05
    304c:	85 31       	cpi	r24, 0x15	; 21
    304e:	09 f0       	breq	.+2      	; 0x3052 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x226>
    3050:	bb c0       	rjmp	.+374    	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
          crc = 0;
    3052:	1a 82       	std	Y+2, r1	; 0x02
          for (cntByte = 0; cntByte < 18; cntByte++) {
    3054:	eb 81       	ldd	r30, Y+3	; 0x03
    3056:	fc 81       	ldd	r31, Y+4	; 0x04
    3058:	15 82       	std	Z+5, r1	; 0x05
    305a:	16 c0       	rjmp	.+44     	; 0x3088 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x25c>
            crc += payload[cntByte];
    305c:	eb 81       	ldd	r30, Y+3	; 0x03
    305e:	fc 81       	ldd	r31, Y+4	; 0x04
    3060:	85 81       	ldd	r24, Z+5	; 0x05
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	9c 81       	ldd	r25, Y+4	; 0x04
    306a:	82 0f       	add	r24, r18
    306c:	93 1f       	adc	r25, r19
    306e:	fc 01       	movw	r30, r24
    3070:	36 96       	adiw	r30, 0x06	; 6
    3072:	90 81       	ld	r25, Z
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	89 0f       	add	r24, r25
    3078:	8a 83       	std	Y+2, r24	; 0x02
      if (pUart->receive(&payload[cntByte], 1) == 1) {
        cntByte++;
        signal[RFID_TAG_SIGNAL].state = SIG_RESET;
        if (cntByte == RFID_PACKET_LEN) {
          crc = 0;
          for (cntByte = 0; cntByte < 18; cntByte++) {
    307a:	eb 81       	ldd	r30, Y+3	; 0x03
    307c:	fc 81       	ldd	r31, Y+4	; 0x04
    307e:	85 81       	ldd	r24, Z+5	; 0x05
    3080:	8f 5f       	subi	r24, 0xFF	; 255
    3082:	eb 81       	ldd	r30, Y+3	; 0x03
    3084:	fc 81       	ldd	r31, Y+4	; 0x04
    3086:	85 83       	std	Z+5, r24	; 0x05
    3088:	eb 81       	ldd	r30, Y+3	; 0x03
    308a:	fc 81       	ldd	r31, Y+4	; 0x04
    308c:	85 81       	ldd	r24, Z+5	; 0x05
    308e:	82 31       	cpi	r24, 0x12	; 18
    3090:	28 f3       	brcs	.-54     	; 0x305c <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x230>
            crc += payload[cntByte];
          }
          if (crc == payload[18] && payload[19] == RFID_ETX1 && payload[20] == RFID_ETX2) {
    3092:	eb 81       	ldd	r30, Y+3	; 0x03
    3094:	fc 81       	ldd	r31, Y+4	; 0x04
    3096:	90 8d       	ldd	r25, Z+24	; 0x18
    3098:	8a 81       	ldd	r24, Y+2	; 0x02
    309a:	98 17       	cp	r25, r24
    309c:	09 f0       	breq	.+2      	; 0x30a0 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x274>
    309e:	86 c0       	rjmp	.+268    	; 0x31ac <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x380>
    30a0:	eb 81       	ldd	r30, Y+3	; 0x03
    30a2:	fc 81       	ldd	r31, Y+4	; 0x04
    30a4:	81 8d       	ldd	r24, Z+25	; 0x19
    30a6:	8a 30       	cpi	r24, 0x0A	; 10
    30a8:	09 f0       	breq	.+2      	; 0x30ac <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x280>
    30aa:	80 c0       	rjmp	.+256    	; 0x31ac <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x380>
    30ac:	eb 81       	ldd	r30, Y+3	; 0x03
    30ae:	fc 81       	ldd	r31, Y+4	; 0x04
    30b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    30b2:	8d 30       	cpi	r24, 0x0D	; 13
    30b4:	09 f0       	breq	.+2      	; 0x30b8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x28c>
    30b6:	7a c0       	rjmp	.+244    	; 0x31ac <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x380>
            /* CUST CODE */
            pRfidTag->custCode = payload[2] + payload[3];
    30b8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ba:	fc 81       	ldd	r31, Y+4	; 0x04
    30bc:	80 85       	ldd	r24, Z+8	; 0x08
    30be:	28 2f       	mov	r18, r24
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	eb 81       	ldd	r30, Y+3	; 0x03
    30c4:	fc 81       	ldd	r31, Y+4	; 0x04
    30c6:	81 85       	ldd	r24, Z+9	; 0x09
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	82 0f       	add	r24, r18
    30ce:	93 1f       	adc	r25, r19
    30d0:	ed 81       	ldd	r30, Y+5	; 0x05
    30d2:	fe 81       	ldd	r31, Y+6	; 0x06
    30d4:	90 87       	std	Z+8, r25	; 0x08
    30d6:	87 83       	std	Z+7, r24	; 0x07
            /* TAG NUMBER */
            pRfidTag->tagID = payload[4];
    30d8:	eb 81       	ldd	r30, Y+3	; 0x03
    30da:	fc 81       	ldd	r31, Y+4	; 0x04
    30dc:	82 85       	ldd	r24, Z+10	; 0x0a
    30de:	88 2f       	mov	r24, r24
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	a0 e0       	ldi	r26, 0x00	; 0
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	ed 81       	ldd	r30, Y+5	; 0x05
    30e8:	fe 81       	ldd	r31, Y+6	; 0x06
    30ea:	83 83       	std	Z+3, r24	; 0x03
    30ec:	94 83       	std	Z+4, r25	; 0x04
    30ee:	a5 83       	std	Z+5, r26	; 0x05
    30f0:	b6 83       	std	Z+6, r27	; 0x06
            pRfidTag->tagID = (pRfidTag->tagID << 8) + payload[5];
    30f2:	ed 81       	ldd	r30, Y+5	; 0x05
    30f4:	fe 81       	ldd	r31, Y+6	; 0x06
    30f6:	83 81       	ldd	r24, Z+3	; 0x03
    30f8:	94 81       	ldd	r25, Z+4	; 0x04
    30fa:	a5 81       	ldd	r26, Z+5	; 0x05
    30fc:	b6 81       	ldd	r27, Z+6	; 0x06
    30fe:	22 27       	eor	r18, r18
    3100:	38 2f       	mov	r19, r24
    3102:	49 2f       	mov	r20, r25
    3104:	5a 2f       	mov	r21, r26
    3106:	eb 81       	ldd	r30, Y+3	; 0x03
    3108:	fc 81       	ldd	r31, Y+4	; 0x04
    310a:	83 85       	ldd	r24, Z+11	; 0x0b
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e0       	ldi	r26, 0x00	; 0
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	82 0f       	add	r24, r18
    3116:	93 1f       	adc	r25, r19
    3118:	a4 1f       	adc	r26, r20
    311a:	b5 1f       	adc	r27, r21
    311c:	ed 81       	ldd	r30, Y+5	; 0x05
    311e:	fe 81       	ldd	r31, Y+6	; 0x06
    3120:	83 83       	std	Z+3, r24	; 0x03
    3122:	94 83       	std	Z+4, r25	; 0x04
    3124:	a5 83       	std	Z+5, r26	; 0x05
    3126:	b6 83       	std	Z+6, r27	; 0x06
            pRfidTag->tagID = (pRfidTag->tagID << 8) + payload[6];
    3128:	ed 81       	ldd	r30, Y+5	; 0x05
    312a:	fe 81       	ldd	r31, Y+6	; 0x06
    312c:	83 81       	ldd	r24, Z+3	; 0x03
    312e:	94 81       	ldd	r25, Z+4	; 0x04
    3130:	a5 81       	ldd	r26, Z+5	; 0x05
    3132:	b6 81       	ldd	r27, Z+6	; 0x06
    3134:	22 27       	eor	r18, r18
    3136:	38 2f       	mov	r19, r24
    3138:	49 2f       	mov	r20, r25
    313a:	5a 2f       	mov	r21, r26
    313c:	eb 81       	ldd	r30, Y+3	; 0x03
    313e:	fc 81       	ldd	r31, Y+4	; 0x04
    3140:	84 85       	ldd	r24, Z+12	; 0x0c
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	a0 e0       	ldi	r26, 0x00	; 0
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	82 0f       	add	r24, r18
    314c:	93 1f       	adc	r25, r19
    314e:	a4 1f       	adc	r26, r20
    3150:	b5 1f       	adc	r27, r21
    3152:	ed 81       	ldd	r30, Y+5	; 0x05
    3154:	fe 81       	ldd	r31, Y+6	; 0x06
    3156:	83 83       	std	Z+3, r24	; 0x03
    3158:	94 83       	std	Z+4, r25	; 0x04
    315a:	a5 83       	std	Z+5, r26	; 0x05
    315c:	b6 83       	std	Z+6, r27	; 0x06
            /* SIGNAL STENGTH*/
            pRfidTag->rssi = u16((((u16) payload[9]) << 8) + (u16) payload[10]);
    315e:	eb 81       	ldd	r30, Y+3	; 0x03
    3160:	fc 81       	ldd	r31, Y+4	; 0x04
    3162:	87 85       	ldd	r24, Z+15	; 0x0f
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	38 2f       	mov	r19, r24
    316a:	22 27       	eor	r18, r18
    316c:	eb 81       	ldd	r30, Y+3	; 0x03
    316e:	fc 81       	ldd	r31, Y+4	; 0x04
    3170:	80 89       	ldd	r24, Z+16	; 0x10
    3172:	88 2f       	mov	r24, r24
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	82 0f       	add	r24, r18
    3178:	93 1f       	adc	r25, r19
    317a:	ed 81       	ldd	r30, Y+5	; 0x05
    317c:	fe 81       	ldd	r31, Y+6	; 0x06
    317e:	92 87       	std	Z+10, r25	; 0x0a
    3180:	81 87       	std	Z+9, r24	; 0x09
            /* DURESS FLAGS */
            pRfidTag->duress = payload[11];
    3182:	eb 81       	ldd	r30, Y+3	; 0x03
    3184:	fc 81       	ldd	r31, Y+4	; 0x04
    3186:	81 89       	ldd	r24, Z+17	; 0x11
    3188:	ed 81       	ldd	r30, Y+5	; 0x05
    318a:	fe 81       	ldd	r31, Y+6	; 0x06
    318c:	83 87       	std	Z+11, r24	; 0x0b
            if (pRfidTag->tagID == 0)
    318e:	ed 81       	ldd	r30, Y+5	; 0x05
    3190:	fe 81       	ldd	r31, Y+6	; 0x06
    3192:	83 81       	ldd	r24, Z+3	; 0x03
    3194:	94 81       	ldd	r25, Z+4	; 0x04
    3196:	a5 81       	ldd	r26, Z+5	; 0x05
    3198:	b6 81       	ldd	r27, Z+6	; 0x06
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	a1 05       	cpc	r26, r1
    319e:	b1 05       	cpc	r27, r1
    31a0:	11 f4       	brne	.+4      	; 0x31a6 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x37a>
              ret = false;
    31a2:	19 82       	std	Y+1, r1	; 0x01
    31a4:	04 c0       	rjmp	.+8      	; 0x31ae <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x382>
            else
              ret = true;
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	89 83       	std	Y+1, r24	; 0x01
    31aa:	01 c0       	rjmp	.+2      	; 0x31ae <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x382>
          } else {
            ret = false;
    31ac:	19 82       	std	Y+1, r1	; 0x01
          }
          rxState = STATE_RFID_HEADER1;
    31ae:	eb 81       	ldd	r30, Y+3	; 0x03
    31b0:	fc 81       	ldd	r31, Y+4	; 0x04
    31b2:	14 82       	std	Z+4, r1	; 0x04
          cntByte = 0;
    31b4:	eb 81       	ldd	r30, Y+3	; 0x03
    31b6:	fc 81       	ldd	r31, Y+4	; 0x04
    31b8:	15 82       	std	Z+5, r1	; 0x05
    31ba:	06 c0       	rjmp	.+12     	; 0x31c8 <_ZN5CRFID10ReceiveTagEP8sRfidTag+0x39c>
        }
      }
      break;
    default:
      rxState = STATE_RFID_HEADER1;
    31bc:	eb 81       	ldd	r30, Y+3	; 0x03
    31be:	fc 81       	ldd	r31, Y+4	; 0x04
    31c0:	14 82       	std	Z+4, r1	; 0x04
      cntByte = 0;
    31c2:	eb 81       	ldd	r30, Y+3	; 0x03
    31c4:	fc 81       	ldd	r31, Y+4	; 0x04
    31c6:	15 82       	std	Z+5, r1	; 0x05
      break;
  }
  return ret;
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    31ca:	2c 96       	adiw	r28, 0x0c	; 12
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <_ZN5CRFID9AddNewTagEP8sRfidTag>:
  return false;
}
/****************************************************************************

 ****************************************************************************/
u08 CRFID::AddNewTag(sRfidTag *pRfidTag) {
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	2b 97       	sbiw	r28, 0x0b	; 11
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	9b 83       	std	Y+3, r25	; 0x03
    31f2:	8a 83       	std	Y+2, r24	; 0x02
    31f4:	7d 83       	std	Y+5, r23	; 0x05
    31f6:	6c 83       	std	Y+4, r22	; 0x04
  u08 i;
  if (newTag.tagID == 0) {
    31f8:	ea 81       	ldd	r30, Y+2	; 0x02
    31fa:	fb 81       	ldd	r31, Y+3	; 0x03
    31fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    31fe:	97 8d       	ldd	r25, Z+31	; 0x1f
    3200:	a0 a1       	ldd	r26, Z+32	; 0x20
    3202:	b1 a1       	ldd	r27, Z+33	; 0x21
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	a1 05       	cpc	r26, r1
    3208:	b1 05       	cpc	r27, r1
    320a:	c9 f5       	brne	.+114    	; 0x327e <_ZN5CRFID9AddNewTagEP8sRfidTag+0xa2>
    newTag.tagID = pRfidTag->tagID;
    320c:	ec 81       	ldd	r30, Y+4	; 0x04
    320e:	fd 81       	ldd	r31, Y+5	; 0x05
    3210:	83 81       	ldd	r24, Z+3	; 0x03
    3212:	94 81       	ldd	r25, Z+4	; 0x04
    3214:	a5 81       	ldd	r26, Z+5	; 0x05
    3216:	b6 81       	ldd	r27, Z+6	; 0x06
    3218:	ea 81       	ldd	r30, Y+2	; 0x02
    321a:	fb 81       	ldd	r31, Y+3	; 0x03
    321c:	86 8f       	std	Z+30, r24	; 0x1e
    321e:	97 8f       	std	Z+31, r25	; 0x1f
    3220:	a0 a3       	std	Z+32, r26	; 0x20
    3222:	b1 a3       	std	Z+33, r27	; 0x21
    DbgUart.uprintf("\n\rPickup a Tag:\t%d ", (u16) newTag.tagID);
    3224:	ea 81       	ldd	r30, Y+2	; 0x02
    3226:	fb 81       	ldd	r31, Y+3	; 0x03
    3228:	86 8d       	ldd	r24, Z+30	; 0x1e
    322a:	97 8d       	ldd	r25, Z+31	; 0x1f
    322c:	a0 a1       	ldd	r26, Z+32	; 0x20
    322e:	b1 a1       	ldd	r27, Z+33	; 0x21
    3230:	9c 01       	movw	r18, r24
    3232:	00 d0       	rcall	.+0      	; 0x3234 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x58>
    3234:	00 d0       	rcall	.+0      	; 0x3236 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x5a>
    3236:	00 d0       	rcall	.+0      	; 0x3238 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x5c>
    3238:	ed b7       	in	r30, 0x3d	; 61
    323a:	fe b7       	in	r31, 0x3e	; 62
    323c:	31 96       	adiw	r30, 0x01	; 1
    323e:	89 ee       	ldi	r24, 0xE9	; 233
    3240:	94 e0       	ldi	r25, 0x04	; 4
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
    3246:	83 e7       	ldi	r24, 0x73	; 115
    3248:	92 e0       	ldi	r25, 0x02	; 2
    324a:	93 83       	std	Z+3, r25	; 0x03
    324c:	82 83       	std	Z+2, r24	; 0x02
    324e:	35 83       	std	Z+5, r19	; 0x05
    3250:	24 83       	std	Z+4, r18	; 0x04
    3252:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    3256:	8d b7       	in	r24, 0x3d	; 61
    3258:	9e b7       	in	r25, 0x3e	; 62
    325a:	06 96       	adiw	r24, 0x06	; 6
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	9e bf       	out	0x3e, r25	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	8d bf       	out	0x3d, r24	; 61
    newTag.persistCnt = 0;
    3266:	ea 81       	ldd	r30, Y+2	; 0x02
    3268:	fb 81       	ldd	r31, Y+3	; 0x03
    326a:	14 8e       	std	Z+28, r1	; 0x1c
    326c:	13 8e       	std	Z+27, r1	; 0x1b
    signal[RFID_NEWTAG_TIMEOUT_SIGNAL].state = SIG_RESET;
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	9b 81       	ldd	r25, Y+3	; 0x03
    3272:	fc 01       	movw	r30, r24
    3274:	eb 5b       	subi	r30, 0xBB	; 187
    3276:	ff 4f       	sbci	r31, 0xFF	; 255
    3278:	83 e0       	ldi	r24, 0x03	; 3
    327a:	80 83       	st	Z, r24
    327c:	39 c1       	rjmp	.+626    	; 0x34f0 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x314>
  } else if (newTag.tagID == pRfidTag->tagID) {
    327e:	ea 81       	ldd	r30, Y+2	; 0x02
    3280:	fb 81       	ldd	r31, Y+3	; 0x03
    3282:	26 8d       	ldd	r18, Z+30	; 0x1e
    3284:	37 8d       	ldd	r19, Z+31	; 0x1f
    3286:	40 a1       	ldd	r20, Z+32	; 0x20
    3288:	51 a1       	ldd	r21, Z+33	; 0x21
    328a:	ec 81       	ldd	r30, Y+4	; 0x04
    328c:	fd 81       	ldd	r31, Y+5	; 0x05
    328e:	83 81       	ldd	r24, Z+3	; 0x03
    3290:	94 81       	ldd	r25, Z+4	; 0x04
    3292:	a5 81       	ldd	r26, Z+5	; 0x05
    3294:	b6 81       	ldd	r27, Z+6	; 0x06
    3296:	28 17       	cp	r18, r24
    3298:	39 07       	cpc	r19, r25
    329a:	4a 07       	cpc	r20, r26
    329c:	5b 07       	cpc	r21, r27
    329e:	09 f0       	breq	.+2      	; 0x32a2 <_ZN5CRFID9AddNewTagEP8sRfidTag+0xc6>
    32a0:	19 c1       	rjmp	.+562    	; 0x34d4 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x2f8>
    newTag.persistCnt++;
    32a2:	ea 81       	ldd	r30, Y+2	; 0x02
    32a4:	fb 81       	ldd	r31, Y+3	; 0x03
    32a6:	83 8d       	ldd	r24, Z+27	; 0x1b
    32a8:	94 8d       	ldd	r25, Z+28	; 0x1c
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	ea 81       	ldd	r30, Y+2	; 0x02
    32ae:	fb 81       	ldd	r31, Y+3	; 0x03
    32b0:	94 8f       	std	Z+28, r25	; 0x1c
    32b2:	83 8f       	std	Z+27, r24	; 0x1b
    //store the tag
    if (newTag.persistCnt > 2) {
    32b4:	ea 81       	ldd	r30, Y+2	; 0x02
    32b6:	fb 81       	ldd	r31, Y+3	; 0x03
    32b8:	83 8d       	ldd	r24, Z+27	; 0x1b
    32ba:	94 8d       	ldd	r25, Z+28	; 0x1c
    32bc:	83 30       	cpi	r24, 0x03	; 3
    32be:	91 05       	cpc	r25, r1
    32c0:	08 f4       	brcc	.+2      	; 0x32c4 <_ZN5CRFID9AddNewTagEP8sRfidTag+0xe8>
    32c2:	16 c1       	rjmp	.+556    	; 0x34f0 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x314>
      DbgUart.uprintf("\n\rAdd New TAG:\t%d cnt=%d", (u16) newTag.tagID,
                      (u16) newTag.persistCnt);
    32c4:	ea 81       	ldd	r30, Y+2	; 0x02
    32c6:	fb 81       	ldd	r31, Y+3	; 0x03
    32c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    32ca:	97 8d       	ldd	r25, Z+31	; 0x1f
    32cc:	a0 a1       	ldd	r26, Z+32	; 0x20
    32ce:	b1 a1       	ldd	r27, Z+33	; 0x21
    32d0:	9c 01       	movw	r18, r24
    32d2:	ea 81       	ldd	r30, Y+2	; 0x02
    32d4:	fb 81       	ldd	r31, Y+3	; 0x03
    32d6:	43 8d       	ldd	r20, Z+27	; 0x1b
    32d8:	54 8d       	ldd	r21, Z+28	; 0x1c
    32da:	ed b7       	in	r30, 0x3d	; 61
    32dc:	fe b7       	in	r31, 0x3e	; 62
    32de:	38 97       	sbiw	r30, 0x08	; 8
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	fe bf       	out	0x3e, r31	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	ed bf       	out	0x3d, r30	; 61
    32ea:	ed b7       	in	r30, 0x3d	; 61
    32ec:	fe b7       	in	r31, 0x3e	; 62
    32ee:	31 96       	adiw	r30, 0x01	; 1
    32f0:	89 ee       	ldi	r24, 0xE9	; 233
    32f2:	94 e0       	ldi	r25, 0x04	; 4
    32f4:	91 83       	std	Z+1, r25	; 0x01
    32f6:	80 83       	st	Z, r24
    32f8:	87 e8       	ldi	r24, 0x87	; 135
    32fa:	92 e0       	ldi	r25, 0x02	; 2
    32fc:	93 83       	std	Z+3, r25	; 0x03
    32fe:	82 83       	std	Z+2, r24	; 0x02
    3300:	35 83       	std	Z+5, r19	; 0x05
    3302:	24 83       	std	Z+4, r18	; 0x04
    3304:	57 83       	std	Z+7, r21	; 0x07
    3306:	46 83       	std	Z+6, r20	; 0x06
    3308:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    330c:	8d b7       	in	r24, 0x3d	; 61
    330e:	9e b7       	in	r25, 0x3e	; 62
    3310:	08 96       	adiw	r24, 0x08	; 8
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	9e bf       	out	0x3e, r25	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	8d bf       	out	0x3d, r24	; 61
      for (i = 0; i < tableLen; i++) {
    331c:	19 82       	std	Y+1, r1	; 0x01
    331e:	cf c0       	rjmp	.+414    	; 0x34be <_ZN5CRFID9AddNewTagEP8sRfidTag+0x2e2>
        //Get Empty slot
        if (pTable[i].persistCnt == 0) {
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	fc 01       	movw	r30, r24
    3326:	e5 5b       	subi	r30, 0xB5	; 181
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	40 81       	ld	r20, Z
    332c:	51 81       	ldd	r21, Z+1	; 0x01
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	88 2f       	mov	r24, r24
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9c 01       	movw	r18, r24
    3336:	22 0f       	add	r18, r18
    3338:	33 1f       	adc	r19, r19
    333a:	c9 01       	movw	r24, r18
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	82 1b       	sub	r24, r18
    334a:	93 0b       	sbc	r25, r19
    334c:	fa 01       	movw	r30, r20
    334e:	e8 0f       	add	r30, r24
    3350:	f9 1f       	adc	r31, r25
    3352:	80 81       	ld	r24, Z
    3354:	91 81       	ldd	r25, Z+1	; 0x01
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	09 f0       	breq	.+2      	; 0x335c <_ZN5CRFID9AddNewTagEP8sRfidTag+0x180>
    335a:	ae c0       	rjmp	.+348    	; 0x34b8 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x2dc>
          pTable[i] = *pRfidTag;
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	fc 01       	movw	r30, r24
    3362:	e5 5b       	subi	r30, 0xB5	; 181
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	40 81       	ld	r20, Z
    3368:	51 81       	ldd	r21, Z+1	; 0x01
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	88 2f       	mov	r24, r24
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	9c 01       	movw	r18, r24
    3372:	22 0f       	add	r18, r18
    3374:	33 1f       	adc	r19, r19
    3376:	c9 01       	movw	r24, r18
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	82 1b       	sub	r24, r18
    3386:	93 0b       	sbc	r25, r19
    3388:	84 0f       	add	r24, r20
    338a:	95 1f       	adc	r25, r21
    338c:	2c 81       	ldd	r18, Y+4	; 0x04
    338e:	3d 81       	ldd	r19, Y+5	; 0x05
    3390:	98 87       	std	Y+8, r25	; 0x08
    3392:	8f 83       	std	Y+7, r24	; 0x07
    3394:	3a 87       	std	Y+10, r19	; 0x0a
    3396:	29 87       	std	Y+9, r18	; 0x09
    3398:	9e e0       	ldi	r25, 0x0E	; 14
    339a:	9b 87       	std	Y+11, r25	; 0x0b
    339c:	e9 85       	ldd	r30, Y+9	; 0x09
    339e:	fa 85       	ldd	r31, Y+10	; 0x0a
    33a0:	00 80       	ld	r0, Z
    33a2:	89 85       	ldd	r24, Y+9	; 0x09
    33a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a6:	01 96       	adiw	r24, 0x01	; 1
    33a8:	9a 87       	std	Y+10, r25	; 0x0a
    33aa:	89 87       	std	Y+9, r24	; 0x09
    33ac:	ef 81       	ldd	r30, Y+7	; 0x07
    33ae:	f8 85       	ldd	r31, Y+8	; 0x08
    33b0:	00 82       	st	Z, r0
    33b2:	8f 81       	ldd	r24, Y+7	; 0x07
    33b4:	98 85       	ldd	r25, Y+8	; 0x08
    33b6:	01 96       	adiw	r24, 0x01	; 1
    33b8:	98 87       	std	Y+8, r25	; 0x08
    33ba:	8f 83       	std	Y+7, r24	; 0x07
    33bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33be:	91 50       	subi	r25, 0x01	; 1
    33c0:	9b 87       	std	Y+11, r25	; 0x0b
    33c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    33c4:	ee 23       	and	r30, r30
    33c6:	51 f7       	brne	.-44     	; 0x339c <_ZN5CRFID9AddNewTagEP8sRfidTag+0x1c0>
          pTable[i].status = TAG_PRESENT;
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	9b 81       	ldd	r25, Y+3	; 0x03
    33cc:	fc 01       	movw	r30, r24
    33ce:	e5 5b       	subi	r30, 0xB5	; 181
    33d0:	ff 4f       	sbci	r31, 0xFF	; 255
    33d2:	40 81       	ld	r20, Z
    33d4:	51 81       	ldd	r21, Z+1	; 0x01
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	88 2f       	mov	r24, r24
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9c 01       	movw	r18, r24
    33de:	22 0f       	add	r18, r18
    33e0:	33 1f       	adc	r19, r19
    33e2:	c9 01       	movw	r24, r18
    33e4:	88 0f       	add	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	82 1b       	sub	r24, r18
    33f2:	93 0b       	sbc	r25, r19
    33f4:	fa 01       	movw	r30, r20
    33f6:	e8 0f       	add	r30, r24
    33f8:	f9 1f       	adc	r31, r25
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	82 83       	std	Z+2, r24	; 0x02
          pTable[i].persistCnt = maxPersistCnt;
    33fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3400:	9b 81       	ldd	r25, Y+3	; 0x03
    3402:	fc 01       	movw	r30, r24
    3404:	e5 5b       	subi	r30, 0xB5	; 181
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	40 81       	ld	r20, Z
    340a:	51 81       	ldd	r21, Z+1	; 0x01
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	88 2f       	mov	r24, r24
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9c 01       	movw	r18, r24
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	c9 01       	movw	r24, r18
    341a:	88 0f       	add	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	82 1b       	sub	r24, r18
    3428:	93 0b       	sbc	r25, r19
    342a:	da 01       	movw	r26, r20
    342c:	a8 0f       	add	r26, r24
    342e:	b9 1f       	adc	r27, r25
    3430:	ea 81       	ldd	r30, Y+2	; 0x02
    3432:	fb 81       	ldd	r31, Y+3	; 0x03
    3434:	81 a5       	ldd	r24, Z+41	; 0x29
    3436:	92 a5       	ldd	r25, Z+42	; 0x2a
    3438:	11 96       	adiw	r26, 0x01	; 1
    343a:	9c 93       	st	X, r25
    343c:	8e 93       	st	-X, r24
          pTable[i].srvlogged = false;
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	fc 01       	movw	r30, r24
    3444:	e5 5b       	subi	r30, 0xB5	; 181
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	40 81       	ld	r20, Z
    344a:	51 81       	ldd	r21, Z+1	; 0x01
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	88 2f       	mov	r24, r24
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9c 01       	movw	r18, r24
    3454:	22 0f       	add	r18, r18
    3456:	33 1f       	adc	r19, r19
    3458:	c9 01       	movw	r24, r18
    345a:	88 0f       	add	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	88 0f       	add	r24, r24
    3460:	99 1f       	adc	r25, r25
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	82 1b       	sub	r24, r18
    3468:	93 0b       	sbc	r25, r19
    346a:	fa 01       	movw	r30, r20
    346c:	e8 0f       	add	r30, r24
    346e:	f9 1f       	adc	r31, r25
    3470:	14 86       	std	Z+12, r1	; 0x0c
          pTable[i].smslogged = false;
    3472:	8a 81       	ldd	r24, Y+2	; 0x02
    3474:	9b 81       	ldd	r25, Y+3	; 0x03
    3476:	fc 01       	movw	r30, r24
    3478:	e5 5b       	subi	r30, 0xB5	; 181
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	40 81       	ld	r20, Z
    347e:	51 81       	ldd	r21, Z+1	; 0x01
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9c 01       	movw	r18, r24
    3488:	22 0f       	add	r18, r18
    348a:	33 1f       	adc	r19, r19
    348c:	c9 01       	movw	r24, r18
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	82 1b       	sub	r24, r18
    349c:	93 0b       	sbc	r25, r19
    349e:	fa 01       	movw	r30, r20
    34a0:	e8 0f       	add	r30, r24
    34a2:	f9 1f       	adc	r31, r25
    34a4:	15 86       	std	Z+13, r1	; 0x0d
          newTag.tagID = 0;
    34a6:	ea 81       	ldd	r30, Y+2	; 0x02
    34a8:	fb 81       	ldd	r31, Y+3	; 0x03
    34aa:	16 8e       	std	Z+30, r1	; 0x1e
    34ac:	17 8e       	std	Z+31, r1	; 0x1f
    34ae:	10 a2       	std	Z+32, r1	; 0x20
    34b0:	11 a2       	std	Z+33, r1	; 0x21
          return true;
    34b2:	f1 e0       	ldi	r31, 0x01	; 1
    34b4:	fe 83       	std	Y+6, r31	; 0x06
    34b6:	1d c0       	rjmp	.+58     	; 0x34f2 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x316>
    newTag.persistCnt++;
    //store the tag
    if (newTag.persistCnt > 2) {
      DbgUart.uprintf("\n\rAdd New TAG:\t%d cnt=%d", (u16) newTag.tagID,
                      (u16) newTag.persistCnt);
      for (i = 0; i < tableLen; i++) {
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	8f 5f       	subi	r24, 0xFF	; 255
    34bc:	89 83       	std	Y+1, r24	; 0x01
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	9b 81       	ldd	r25, Y+3	; 0x03
    34c2:	fc 01       	movw	r30, r24
    34c4:	e6 5b       	subi	r30, 0xB6	; 182
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	90 81       	ld	r25, Z
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	89 17       	cp	r24, r25
    34ce:	08 f4       	brcc	.+2      	; 0x34d2 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x2f6>
    34d0:	27 cf       	rjmp	.-434    	; 0x3320 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x144>
    34d2:	0e c0       	rjmp	.+28     	; 0x34f0 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x314>
          return true;
        }
      }
    }
  } else {
    if (signal[RFID_NEWTAG_TIMEOUT_SIGNAL].state == SIG_TRIGGERED) {
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	fc 01       	movw	r30, r24
    34da:	eb 5b       	subi	r30, 0xBB	; 187
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	80 81       	ld	r24, Z
    34e0:	82 30       	cpi	r24, 0x02	; 2
    34e2:	31 f4       	brne	.+12     	; 0x34f0 <_ZN5CRFID9AddNewTagEP8sRfidTag+0x314>
      newTag.tagID = 0;
    34e4:	ea 81       	ldd	r30, Y+2	; 0x02
    34e6:	fb 81       	ldd	r31, Y+3	; 0x03
    34e8:	16 8e       	std	Z+30, r1	; 0x1e
    34ea:	17 8e       	std	Z+31, r1	; 0x1f
    34ec:	10 a2       	std	Z+32, r1	; 0x20
    34ee:	11 a2       	std	Z+33, r1	; 0x21
    }

  }
  return false;
    34f0:	1e 82       	std	Y+6, r1	; 0x06
    34f2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    34f4:	2b 96       	adiw	r28, 0x0b	; 11
    34f6:	0f b6       	in	r0, 0x3f	; 63
    34f8:	f8 94       	cli
    34fa:	de bf       	out	0x3e, r29	; 62
    34fc:	0f be       	out	0x3f, r0	; 63
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <_ZN5CRFID9UpdateTagEP8sRfidTag>:
/****************************************************************************
 Update the persistance counter of pRfidTag in the table
 ****************************************************************************/
u08 CRFID::UpdateTag(sRfidTag *pRfidTag) {
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	28 97       	sbiw	r28, 0x08	; 8
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	9b 83       	std	Y+3, r25	; 0x03
    351c:	8a 83       	std	Y+2, r24	; 0x02
    351e:	7d 83       	std	Y+5, r23	; 0x05
    3520:	6c 83       	std	Y+4, r22	; 0x04
  u08 tableIndex;

  if (SearchTagID(pRfidTag->tagID, &tableIndex)) {
    3522:	ec 81       	ldd	r30, Y+4	; 0x04
    3524:	fd 81       	ldd	r31, Y+5	; 0x05
    3526:	23 81       	ldd	r18, Z+3	; 0x03
    3528:	34 81       	ldd	r19, Z+4	; 0x04
    352a:	45 81       	ldd	r20, Z+5	; 0x05
    352c:	56 81       	ldd	r21, Z+6	; 0x06
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	ba 01       	movw	r22, r20
    3534:	a9 01       	movw	r20, r18
    3536:	9e 01       	movw	r18, r28
    3538:	2f 5f       	subi	r18, 0xFF	; 255
    353a:	3f 4f       	sbci	r19, 0xFF	; 255
    353c:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN5CRFID11SearchTagIDEmPh>
    3540:	8f 83       	std	Y+7, r24	; 0x07
    3542:	8f 81       	ldd	r24, Y+7	; 0x07
    3544:	88 23       	and	r24, r24
    3546:	11 f0       	breq	.+4      	; 0x354c <_ZN5CRFID9UpdateTagEP8sRfidTag+0x46>
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	8f 83       	std	Y+7, r24	; 0x07
    354c:	8f 81       	ldd	r24, Y+7	; 0x07
    354e:	88 23       	and	r24, r24
    3550:	09 f4       	brne	.+2      	; 0x3554 <_ZN5CRFID9UpdateTagEP8sRfidTag+0x4e>
    3552:	62 c0       	rjmp	.+196    	; 0x3618 <_ZN5CRFID9UpdateTagEP8sRfidTag+0x112>
    pTable[tableIndex].persistCnt = maxPersistCnt;
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	fc 01       	movw	r30, r24
    355a:	e5 5b       	subi	r30, 0xB5	; 181
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	40 81       	ld	r20, Z
    3560:	51 81       	ldd	r21, Z+1	; 0x01
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	88 2f       	mov	r24, r24
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	9c 01       	movw	r18, r24
    356a:	22 0f       	add	r18, r18
    356c:	33 1f       	adc	r19, r19
    356e:	c9 01       	movw	r24, r18
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	88 0f       	add	r24, r24
    3576:	99 1f       	adc	r25, r25
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	82 1b       	sub	r24, r18
    357e:	93 0b       	sbc	r25, r19
    3580:	da 01       	movw	r26, r20
    3582:	a8 0f       	add	r26, r24
    3584:	b9 1f       	adc	r27, r25
    3586:	ea 81       	ldd	r30, Y+2	; 0x02
    3588:	fb 81       	ldd	r31, Y+3	; 0x03
    358a:	81 a5       	ldd	r24, Z+41	; 0x29
    358c:	92 a5       	ldd	r25, Z+42	; 0x2a
    358e:	8d 93       	st	X+, r24
    3590:	9c 93       	st	X, r25
    pTable[tableIndex].rssi = pRfidTag->rssi;
    3592:	8a 81       	ldd	r24, Y+2	; 0x02
    3594:	9b 81       	ldd	r25, Y+3	; 0x03
    3596:	fc 01       	movw	r30, r24
    3598:	e5 5b       	subi	r30, 0xB5	; 181
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	40 81       	ld	r20, Z
    359e:	51 81       	ldd	r21, Z+1	; 0x01
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	9c 01       	movw	r18, r24
    35a8:	22 0f       	add	r18, r18
    35aa:	33 1f       	adc	r19, r19
    35ac:	c9 01       	movw	r24, r18
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	82 1b       	sub	r24, r18
    35bc:	93 0b       	sbc	r25, r19
    35be:	da 01       	movw	r26, r20
    35c0:	a8 0f       	add	r26, r24
    35c2:	b9 1f       	adc	r27, r25
    35c4:	ec 81       	ldd	r30, Y+4	; 0x04
    35c6:	fd 81       	ldd	r31, Y+5	; 0x05
    35c8:	81 85       	ldd	r24, Z+9	; 0x09
    35ca:	92 85       	ldd	r25, Z+10	; 0x0a
    35cc:	1a 96       	adiw	r26, 0x0a	; 10
    35ce:	9c 93       	st	X, r25
    35d0:	8e 93       	st	-X, r24
    35d2:	19 97       	sbiw	r26, 0x09	; 9
    pTable[tableIndex].duress = pRfidTag->duress;
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	9b 81       	ldd	r25, Y+3	; 0x03
    35d8:	fc 01       	movw	r30, r24
    35da:	e5 5b       	subi	r30, 0xB5	; 181
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	40 81       	ld	r20, Z
    35e0:	51 81       	ldd	r21, Z+1	; 0x01
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	9c 01       	movw	r18, r24
    35ea:	22 0f       	add	r18, r18
    35ec:	33 1f       	adc	r19, r19
    35ee:	c9 01       	movw	r24, r18
    35f0:	88 0f       	add	r24, r24
    35f2:	99 1f       	adc	r25, r25
    35f4:	88 0f       	add	r24, r24
    35f6:	99 1f       	adc	r25, r25
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	82 1b       	sub	r24, r18
    35fe:	93 0b       	sbc	r25, r19
    3600:	da 01       	movw	r26, r20
    3602:	a8 0f       	add	r26, r24
    3604:	b9 1f       	adc	r27, r25
    3606:	ec 81       	ldd	r30, Y+4	; 0x04
    3608:	fd 81       	ldd	r31, Y+5	; 0x05
    360a:	83 85       	ldd	r24, Z+11	; 0x0b
    360c:	1b 96       	adiw	r26, 0x0b	; 11
    360e:	8c 93       	st	X, r24
    3610:	1b 97       	sbiw	r26, 0x0b	; 11
    return true;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	8e 83       	std	Y+6, r24	; 0x06
    3616:	1f c0       	rjmp	.+62     	; 0x3656 <_ZN5CRFID9UpdateTagEP8sRfidTag+0x150>
  } else {
    if (AddNewTag(pRfidTag)) {
    3618:	8a 81       	ldd	r24, Y+2	; 0x02
    361a:	9b 81       	ldd	r25, Y+3	; 0x03
    361c:	2c 81       	ldd	r18, Y+4	; 0x04
    361e:	3d 81       	ldd	r19, Y+5	; 0x05
    3620:	b9 01       	movw	r22, r18
    3622:	0e 94 ee 18 	call	0x31dc	; 0x31dc <_ZN5CRFID9AddNewTagEP8sRfidTag>
    3626:	88 87       	std	Y+8, r24	; 0x08
    3628:	88 85       	ldd	r24, Y+8	; 0x08
    362a:	88 23       	and	r24, r24
    362c:	11 f0       	breq	.+4      	; 0x3632 <_ZN5CRFID9UpdateTagEP8sRfidTag+0x12c>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	88 87       	std	Y+8, r24	; 0x08
    3632:	88 85       	ldd	r24, Y+8	; 0x08
    3634:	88 23       	and	r24, r24
    3636:	71 f0       	breq	.+28     	; 0x3654 <_ZN5CRFID9UpdateTagEP8sRfidTag+0x14e>
      server->SetTagInRange(pRfidTag->tagID);
    3638:	ea 81       	ldd	r30, Y+2	; 0x02
    363a:	fb 81       	ldd	r31, Y+3	; 0x03
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	ec 81       	ldd	r30, Y+4	; 0x04
    3642:	fd 81       	ldd	r31, Y+5	; 0x05
    3644:	23 81       	ldd	r18, Z+3	; 0x03
    3646:	34 81       	ldd	r19, Z+4	; 0x04
    3648:	45 81       	ldd	r20, Z+5	; 0x05
    364a:	56 81       	ldd	r21, Z+6	; 0x06
    364c:	ba 01       	movw	r22, r20
    364e:	a9 01       	movw	r20, r18
    3650:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN7CServer13SetTagInRangeEm>
    }

  }
  return false;
    3654:	1e 82       	std	Y+6, r1	; 0x06
    3656:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3658:	28 96       	adiw	r28, 0x08	; 8
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <_ZN5CRFID7ServiceEv>:
}

/****************************************************************************
 Update the tags persistence counters
 ****************************************************************************/
void CRFID::Service(void) {
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	62 97       	sbiw	r28, 0x12	; 18
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	99 8b       	std	Y+17, r25	; 0x11
    3680:	88 8b       	std	Y+16, r24	; 0x10
  u08 i;
  sRfidTag rfidTag;

  ServiceSignals();
    3682:	88 89       	ldd	r24, Y+16	; 0x10
    3684:	99 89       	ldd	r25, Y+17	; 0x11
    3686:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN5CRFID14ServiceSignalsEv>
  // read data off the uart and if a valid tag is received
  // compare it to what is already in the table
  if (ReceiveTag(&rfidTag)) {
    368a:	88 89       	ldd	r24, Y+16	; 0x10
    368c:	99 89       	ldd	r25, Y+17	; 0x11
    368e:	9e 01       	movw	r18, r28
    3690:	2e 5f       	subi	r18, 0xFE	; 254
    3692:	3f 4f       	sbci	r19, 0xFF	; 255
    3694:	b9 01       	movw	r22, r18
    3696:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <_ZN5CRFID10ReceiveTagEP8sRfidTag>
    369a:	8a 8b       	std	Y+18, r24	; 0x12
    369c:	8a 89       	ldd	r24, Y+18	; 0x12
    369e:	88 23       	and	r24, r24
    36a0:	11 f0       	breq	.+4      	; 0x36a6 <_ZN5CRFID7ServiceEv+0x3c>
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	9a 8b       	std	Y+18, r25	; 0x12
    36a6:	8a 89       	ldd	r24, Y+18	; 0x12
    36a8:	88 23       	and	r24, r24
    36aa:	41 f0       	breq	.+16     	; 0x36bc <_ZN5CRFID7ServiceEv+0x52>
    /* Update persist count - or add a new tag */
    UpdateTag(&rfidTag);
    36ac:	88 89       	ldd	r24, Y+16	; 0x10
    36ae:	99 89       	ldd	r25, Y+17	; 0x11
    36b0:	9e 01       	movw	r18, r28
    36b2:	2e 5f       	subi	r18, 0xFE	; 254
    36b4:	3f 4f       	sbci	r19, 0xFF	; 255
    36b6:	b9 01       	movw	r22, r18
    36b8:	0e 94 83 1a 	call	0x3506	; 0x3506 <_ZN5CRFID9UpdateTagEP8sRfidTag>
  }
  if (signal[RFID_TABLE_SIGNAL].state == SIG_TRIGGERED) {
    36bc:	e8 89       	ldd	r30, Y+16	; 0x10
    36be:	f9 89       	ldd	r31, Y+17	; 0x11
    36c0:	83 a9       	ldd	r24, Z+51	; 0x33
    36c2:	82 30       	cpi	r24, 0x02	; 2
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <_ZN5CRFID7ServiceEv+0x5e>
    36c6:	83 c1       	rjmp	.+774    	; 0x39ce <_ZN5CRFID7ServiceEv+0x364>
    signal[RFID_TABLE_SIGNAL].state = SIG_RESET;
    36c8:	e8 89       	ldd	r30, Y+16	; 0x10
    36ca:	f9 89       	ldd	r31, Y+17	; 0x11
    36cc:	83 e0       	ldi	r24, 0x03	; 3
    36ce:	83 ab       	std	Z+51, r24	; 0x33
#if (DEBUG_RFID >=3)
    DbgUart.uprintf("\n\rTAG TABLE : ");
#endif
    for (i = 0; i < tableLen; i++) {
    36d0:	19 82       	std	Y+1, r1	; 0x01
    36d2:	73 c1       	rjmp	.+742    	; 0x39ba <_ZN5CRFID7ServiceEv+0x350>
      // decrement persist counter - tag not seen but was in table
      if (pTable[i].persistCnt > 1) {
    36d4:	88 89       	ldd	r24, Y+16	; 0x10
    36d6:	99 89       	ldd	r25, Y+17	; 0x11
    36d8:	fc 01       	movw	r30, r24
    36da:	e5 5b       	subi	r30, 0xB5	; 181
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	40 81       	ld	r20, Z
    36e0:	51 81       	ldd	r21, Z+1	; 0x01
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9c 01       	movw	r18, r24
    36ea:	22 0f       	add	r18, r18
    36ec:	33 1f       	adc	r19, r19
    36ee:	c9 01       	movw	r24, r18
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	82 1b       	sub	r24, r18
    36fe:	93 0b       	sbc	r25, r19
    3700:	fa 01       	movw	r30, r20
    3702:	e8 0f       	add	r30, r24
    3704:	f9 1f       	adc	r31, r25
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	82 30       	cpi	r24, 0x02	; 2
    370c:	91 05       	cpc	r25, r1
    370e:	f8 f0       	brcs	.+62     	; 0x374e <_ZN5CRFID7ServiceEv+0xe4>
        pTable[i].persistCnt--;
    3710:	88 89       	ldd	r24, Y+16	; 0x10
    3712:	99 89       	ldd	r25, Y+17	; 0x11
    3714:	fc 01       	movw	r30, r24
    3716:	e5 5b       	subi	r30, 0xB5	; 181
    3718:	ff 4f       	sbci	r31, 0xFF	; 255
    371a:	40 81       	ld	r20, Z
    371c:	51 81       	ldd	r21, Z+1	; 0x01
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	88 2f       	mov	r24, r24
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	9c 01       	movw	r18, r24
    3726:	22 0f       	add	r18, r18
    3728:	33 1f       	adc	r19, r19
    372a:	c9 01       	movw	r24, r18
    372c:	88 0f       	add	r24, r24
    372e:	99 1f       	adc	r25, r25
    3730:	88 0f       	add	r24, r24
    3732:	99 1f       	adc	r25, r25
    3734:	88 0f       	add	r24, r24
    3736:	99 1f       	adc	r25, r25
    3738:	82 1b       	sub	r24, r18
    373a:	93 0b       	sbc	r25, r19
    373c:	fa 01       	movw	r30, r20
    373e:	e8 0f       	add	r30, r24
    3740:	f9 1f       	adc	r31, r25
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	91 83       	std	Z+1, r25	; 0x01
    374a:	80 83       	st	Z, r24
    374c:	33 c1       	rjmp	.+614    	; 0x39b4 <_ZN5CRFID7ServiceEv+0x34a>
#if (DEBUG_RFID >= 3)
        DbgUart.uprintf("\t[T:=%d-%d c:%d S:=%d]",(u16)pTable[i].custCode,(u16)pTable[i].tagID,(u16)pTable[i].persistCnt,(u16)pTable[i].rssi);
#endif
      } else if ((pTable[i].persistCnt == 1 || pTable[i].rssi < 100) && pTable[i].status == TAG_PRESENT) {
    374e:	88 89       	ldd	r24, Y+16	; 0x10
    3750:	99 89       	ldd	r25, Y+17	; 0x11
    3752:	fc 01       	movw	r30, r24
    3754:	e5 5b       	subi	r30, 0xB5	; 181
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	40 81       	ld	r20, Z
    375a:	51 81       	ldd	r21, Z+1	; 0x01
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	88 2f       	mov	r24, r24
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9c 01       	movw	r18, r24
    3764:	22 0f       	add	r18, r18
    3766:	33 1f       	adc	r19, r19
    3768:	c9 01       	movw	r24, r18
    376a:	88 0f       	add	r24, r24
    376c:	99 1f       	adc	r25, r25
    376e:	88 0f       	add	r24, r24
    3770:	99 1f       	adc	r25, r25
    3772:	88 0f       	add	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	82 1b       	sub	r24, r18
    3778:	93 0b       	sbc	r25, r19
    377a:	fa 01       	movw	r30, r20
    377c:	e8 0f       	add	r30, r24
    377e:	f9 1f       	adc	r31, r25
    3780:	80 81       	ld	r24, Z
    3782:	91 81       	ldd	r25, Z+1	; 0x01
    3784:	81 30       	cpi	r24, 0x01	; 1
    3786:	91 05       	cpc	r25, r1
    3788:	f9 f0       	breq	.+62     	; 0x37c8 <_ZN5CRFID7ServiceEv+0x15e>
    378a:	88 89       	ldd	r24, Y+16	; 0x10
    378c:	99 89       	ldd	r25, Y+17	; 0x11
    378e:	fc 01       	movw	r30, r24
    3790:	e5 5b       	subi	r30, 0xB5	; 181
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	40 81       	ld	r20, Z
    3796:	51 81       	ldd	r21, Z+1	; 0x01
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	88 2f       	mov	r24, r24
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	9c 01       	movw	r18, r24
    37a0:	22 0f       	add	r18, r18
    37a2:	33 1f       	adc	r19, r19
    37a4:	c9 01       	movw	r24, r18
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	82 1b       	sub	r24, r18
    37b4:	93 0b       	sbc	r25, r19
    37b6:	fa 01       	movw	r30, r20
    37b8:	e8 0f       	add	r30, r24
    37ba:	f9 1f       	adc	r31, r25
    37bc:	81 85       	ldd	r24, Z+9	; 0x09
    37be:	92 85       	ldd	r25, Z+10	; 0x0a
    37c0:	84 36       	cpi	r24, 0x64	; 100
    37c2:	91 05       	cpc	r25, r1
    37c4:	08 f0       	brcs	.+2      	; 0x37c8 <_ZN5CRFID7ServiceEv+0x15e>
    37c6:	f6 c0       	rjmp	.+492    	; 0x39b4 <_ZN5CRFID7ServiceEv+0x34a>
    37c8:	88 89       	ldd	r24, Y+16	; 0x10
    37ca:	99 89       	ldd	r25, Y+17	; 0x11
    37cc:	fc 01       	movw	r30, r24
    37ce:	e5 5b       	subi	r30, 0xB5	; 181
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	40 81       	ld	r20, Z
    37d4:	51 81       	ldd	r21, Z+1	; 0x01
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	88 2f       	mov	r24, r24
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9c 01       	movw	r18, r24
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	c9 01       	movw	r24, r18
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	88 0f       	add	r24, r24
    37ea:	99 1f       	adc	r25, r25
    37ec:	88 0f       	add	r24, r24
    37ee:	99 1f       	adc	r25, r25
    37f0:	82 1b       	sub	r24, r18
    37f2:	93 0b       	sbc	r25, r19
    37f4:	fa 01       	movw	r30, r20
    37f6:	e8 0f       	add	r30, r24
    37f8:	f9 1f       	adc	r31, r25
    37fa:	82 81       	ldd	r24, Z+2	; 0x02
    37fc:	82 30       	cpi	r24, 0x02	; 2
    37fe:	09 f0       	breq	.+2      	; 0x3802 <_ZN5CRFID7ServiceEv+0x198>
    3800:	d9 c0       	rjmp	.+434    	; 0x39b4 <_ZN5CRFID7ServiceEv+0x34a>
        pTable[i].status = TAG_LOST;
    3802:	88 89       	ldd	r24, Y+16	; 0x10
    3804:	99 89       	ldd	r25, Y+17	; 0x11
    3806:	fc 01       	movw	r30, r24
    3808:	e5 5b       	subi	r30, 0xB5	; 181
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	40 81       	ld	r20, Z
    380e:	51 81       	ldd	r21, Z+1	; 0x01
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	9c 01       	movw	r18, r24
    3818:	22 0f       	add	r18, r18
    381a:	33 1f       	adc	r19, r19
    381c:	c9 01       	movw	r24, r18
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	82 1b       	sub	r24, r18
    382c:	93 0b       	sbc	r25, r19
    382e:	fa 01       	movw	r30, r20
    3830:	e8 0f       	add	r30, r24
    3832:	f9 1f       	adc	r31, r25
    3834:	84 e0       	ldi	r24, 0x04	; 4
    3836:	82 83       	std	Z+2, r24	; 0x02
        pTable[i].srvlogged = false;
    3838:	88 89       	ldd	r24, Y+16	; 0x10
    383a:	99 89       	ldd	r25, Y+17	; 0x11
    383c:	fc 01       	movw	r30, r24
    383e:	e5 5b       	subi	r30, 0xB5	; 181
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	40 81       	ld	r20, Z
    3844:	51 81       	ldd	r21, Z+1	; 0x01
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	88 2f       	mov	r24, r24
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	9c 01       	movw	r18, r24
    384e:	22 0f       	add	r18, r18
    3850:	33 1f       	adc	r19, r19
    3852:	c9 01       	movw	r24, r18
    3854:	88 0f       	add	r24, r24
    3856:	99 1f       	adc	r25, r25
    3858:	88 0f       	add	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	82 1b       	sub	r24, r18
    3862:	93 0b       	sbc	r25, r19
    3864:	fa 01       	movw	r30, r20
    3866:	e8 0f       	add	r30, r24
    3868:	f9 1f       	adc	r31, r25
    386a:	14 86       	std	Z+12, r1	; 0x0c
        pTable[i].smslogged = false;
    386c:	88 89       	ldd	r24, Y+16	; 0x10
    386e:	99 89       	ldd	r25, Y+17	; 0x11
    3870:	fc 01       	movw	r30, r24
    3872:	e5 5b       	subi	r30, 0xB5	; 181
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	40 81       	ld	r20, Z
    3878:	51 81       	ldd	r21, Z+1	; 0x01
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	88 2f       	mov	r24, r24
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	9c 01       	movw	r18, r24
    3882:	22 0f       	add	r18, r18
    3884:	33 1f       	adc	r19, r19
    3886:	c9 01       	movw	r24, r18
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	82 1b       	sub	r24, r18
    3896:	93 0b       	sbc	r25, r19
    3898:	fa 01       	movw	r30, r20
    389a:	e8 0f       	add	r30, r24
    389c:	f9 1f       	adc	r31, r25
    389e:	15 86       	std	Z+13, r1	; 0x0d
        //pTable[i].persistCnt = 0;
#if (DEBUG_RFID >= 2)
        DbgUart.uprintf("\n\rTAG_LOST");
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <_ZN5CRFID7ServiceEv+0x238>
    38a2:	00 d0       	rcall	.+0      	; 0x38a4 <_ZN5CRFID7ServiceEv+0x23a>
    38a4:	ed b7       	in	r30, 0x3d	; 61
    38a6:	fe b7       	in	r31, 0x3e	; 62
    38a8:	31 96       	adiw	r30, 0x01	; 1
    38aa:	89 ee       	ldi	r24, 0xE9	; 233
    38ac:	94 e0       	ldi	r25, 0x04	; 4
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	80 83       	st	Z, r24
    38b2:	80 ea       	ldi	r24, 0xA0	; 160
    38b4:	92 e0       	ldi	r25, 0x02	; 2
    38b6:	93 83       	std	Z+3, r25	; 0x03
    38b8:	82 83       	std	Z+2, r24	; 0x02
    38ba:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
        DbgUart.uprintf("\t[T:=%d C:%d S:=%d]", (u16) pTable[i].tagID,
                        (u16) pTable[i].persistCnt, (u16) pTable[i].rssi);
    38c6:	88 89       	ldd	r24, Y+16	; 0x10
    38c8:	99 89       	ldd	r25, Y+17	; 0x11
    38ca:	fc 01       	movw	r30, r24
    38cc:	e5 5b       	subi	r30, 0xB5	; 181
    38ce:	ff 4f       	sbci	r31, 0xFF	; 255
    38d0:	40 81       	ld	r20, Z
    38d2:	51 81       	ldd	r21, Z+1	; 0x01
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	88 2f       	mov	r24, r24
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	9c 01       	movw	r18, r24
    38dc:	22 0f       	add	r18, r18
    38de:	33 1f       	adc	r19, r19
    38e0:	c9 01       	movw	r24, r18
    38e2:	88 0f       	add	r24, r24
    38e4:	99 1f       	adc	r25, r25
    38e6:	88 0f       	add	r24, r24
    38e8:	99 1f       	adc	r25, r25
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	82 1b       	sub	r24, r18
    38f0:	93 0b       	sbc	r25, r19
    38f2:	fa 01       	movw	r30, r20
    38f4:	e8 0f       	add	r30, r24
    38f6:	f9 1f       	adc	r31, r25
    38f8:	83 81       	ldd	r24, Z+3	; 0x03
    38fa:	94 81       	ldd	r25, Z+4	; 0x04
    38fc:	a5 81       	ldd	r26, Z+5	; 0x05
    38fe:	b6 81       	ldd	r27, Z+6	; 0x06
    3900:	dc 01       	movw	r26, r24
    3902:	88 89       	ldd	r24, Y+16	; 0x10
    3904:	99 89       	ldd	r25, Y+17	; 0x11
    3906:	fc 01       	movw	r30, r24
    3908:	e5 5b       	subi	r30, 0xB5	; 181
    390a:	ff 4f       	sbci	r31, 0xFF	; 255
    390c:	40 81       	ld	r20, Z
    390e:	51 81       	ldd	r21, Z+1	; 0x01
    3910:	89 81       	ldd	r24, Y+1	; 0x01
    3912:	88 2f       	mov	r24, r24
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c 01       	movw	r18, r24
    3918:	22 0f       	add	r18, r18
    391a:	33 1f       	adc	r19, r19
    391c:	c9 01       	movw	r24, r18
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	88 0f       	add	r24, r24
    3924:	99 1f       	adc	r25, r25
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	82 1b       	sub	r24, r18
    392c:	93 0b       	sbc	r25, r19
    392e:	fa 01       	movw	r30, r20
    3930:	e8 0f       	add	r30, r24
    3932:	f9 1f       	adc	r31, r25
    3934:	60 81       	ld	r22, Z
    3936:	71 81       	ldd	r23, Z+1	; 0x01
    3938:	88 89       	ldd	r24, Y+16	; 0x10
    393a:	99 89       	ldd	r25, Y+17	; 0x11
    393c:	fc 01       	movw	r30, r24
    393e:	e5 5b       	subi	r30, 0xB5	; 181
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	40 81       	ld	r20, Z
    3944:	51 81       	ldd	r21, Z+1	; 0x01
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	88 2f       	mov	r24, r24
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9c 01       	movw	r18, r24
    394e:	22 0f       	add	r18, r18
    3950:	33 1f       	adc	r19, r19
    3952:	c9 01       	movw	r24, r18
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	88 0f       	add	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	88 0f       	add	r24, r24
    395e:	99 1f       	adc	r25, r25
    3960:	82 1b       	sub	r24, r18
    3962:	93 0b       	sbc	r25, r19
    3964:	fa 01       	movw	r30, r20
    3966:	e8 0f       	add	r30, r24
    3968:	f9 1f       	adc	r31, r25
    396a:	21 85       	ldd	r18, Z+9	; 0x09
    396c:	32 85       	ldd	r19, Z+10	; 0x0a
    396e:	8d b7       	in	r24, 0x3d	; 61
    3970:	9e b7       	in	r25, 0x3e	; 62
    3972:	0a 97       	sbiw	r24, 0x0a	; 10
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	9e bf       	out	0x3e, r25	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	8d bf       	out	0x3d, r24	; 61
    397e:	ed b7       	in	r30, 0x3d	; 61
    3980:	fe b7       	in	r31, 0x3e	; 62
    3982:	31 96       	adiw	r30, 0x01	; 1
    3984:	89 ee       	ldi	r24, 0xE9	; 233
    3986:	94 e0       	ldi	r25, 0x04	; 4
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    398c:	8b ea       	ldi	r24, 0xAB	; 171
    398e:	92 e0       	ldi	r25, 0x02	; 2
    3990:	93 83       	std	Z+3, r25	; 0x03
    3992:	82 83       	std	Z+2, r24	; 0x02
    3994:	b5 83       	std	Z+5, r27	; 0x05
    3996:	a4 83       	std	Z+4, r26	; 0x04
    3998:	77 83       	std	Z+7, r23	; 0x07
    399a:	66 83       	std	Z+6, r22	; 0x06
    399c:	31 87       	std	Z+9, r19	; 0x09
    399e:	20 87       	std	Z+8, r18	; 0x08
    39a0:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    39a4:	8d b7       	in	r24, 0x3d	; 61
    39a6:	9e b7       	in	r25, 0x3e	; 62
    39a8:	0a 96       	adiw	r24, 0x0a	; 10
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	f8 94       	cli
    39ae:	9e bf       	out	0x3e, r25	; 62
    39b0:	0f be       	out	0x3f, r0	; 63
    39b2:	8d bf       	out	0x3d, r24	; 61
  if (signal[RFID_TABLE_SIGNAL].state == SIG_TRIGGERED) {
    signal[RFID_TABLE_SIGNAL].state = SIG_RESET;
#if (DEBUG_RFID >=3)
    DbgUart.uprintf("\n\rTAG TABLE : ");
#endif
    for (i = 0; i < tableLen; i++) {
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	8f 5f       	subi	r24, 0xFF	; 255
    39b8:	89 83       	std	Y+1, r24	; 0x01
    39ba:	88 89       	ldd	r24, Y+16	; 0x10
    39bc:	99 89       	ldd	r25, Y+17	; 0x11
    39be:	fc 01       	movw	r30, r24
    39c0:	e6 5b       	subi	r30, 0xB6	; 182
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	90 81       	ld	r25, Z
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	89 17       	cp	r24, r25
    39ca:	08 f4       	brcc	.+2      	; 0x39ce <_ZN5CRFID7ServiceEv+0x364>
    39cc:	83 ce       	rjmp	.-762    	; 0x36d4 <_ZN5CRFID7ServiceEv+0x6a>
                        (u16) pTable[i].persistCnt, (u16) pTable[i].rssi);
#endif
      }
    }
  }
}
    39ce:	62 96       	adiw	r28, 0x12	; 18
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <_ZN5CRFID10clearTableEv>:

  signal[RFID_NEWTAG_TIMEOUT_SIGNAL].period = 30 * T_1SEC;
  signal[RFID_NEWTAG_TIMEOUT_SIGNAL].timer = 0;
}

void CRFID::clearTable(void) {
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <_ZN5CRFID10clearTableEv+0x6>
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	9a 83       	std	Y+2, r25	; 0x02
    39ec:	89 83       	std	Y+1, r24	; 0x01
  memset((u08*) pTable, 0, (sizeof(sRfidTag) * tableLen));
    39ee:	89 81       	ldd	r24, Y+1	; 0x01
    39f0:	9a 81       	ldd	r25, Y+2	; 0x02
    39f2:	fc 01       	movw	r30, r24
    39f4:	e5 5b       	subi	r30, 0xB5	; 181
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	80 81       	ld	r24, Z
    39fa:	91 81       	ldd	r25, Z+1	; 0x01
    39fc:	ac 01       	movw	r20, r24
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	fc 01       	movw	r30, r24
    3a04:	e6 5b       	subi	r30, 0xB6	; 182
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	80 81       	ld	r24, Z
    3a0a:	88 2f       	mov	r24, r24
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	9c 01       	movw	r18, r24
    3a10:	22 0f       	add	r18, r18
    3a12:	33 1f       	adc	r19, r19
    3a14:	c9 01       	movw	r24, r18
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	88 0f       	add	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	bc 01       	movw	r22, r24
    3a24:	62 1b       	sub	r22, r18
    3a26:	73 0b       	sbc	r23, r19
    3a28:	9b 01       	movw	r18, r22
    3a2a:	ca 01       	movw	r24, r20
    3a2c:	60 e0       	ldi	r22, 0x00	; 0
    3a2e:	70 e0       	ldi	r23, 0x00	; 0
    3a30:	a9 01       	movw	r20, r18
    3a32:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
}
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	08 95       	ret

00003a40 <_ZN5CRFIDC1EP5CUARThP7CServer>:
extern CUART DbgUart;
#endif

//using namespace RFID;

CRFID::CRFID(CUART *_pUart, u08 _tableLen, CServer *_server) {
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	27 97       	sbiw	r28, 0x07	; 7
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	9a 83       	std	Y+2, r25	; 0x02
    3a56:	89 83       	std	Y+1, r24	; 0x01
    3a58:	7c 83       	std	Y+4, r23	; 0x04
    3a5a:	6b 83       	std	Y+3, r22	; 0x03
    3a5c:	4d 83       	std	Y+5, r20	; 0x05
    3a5e:	3f 83       	std	Y+7, r19	; 0x07
    3a60:	2e 83       	std	Y+6, r18	; 0x06
  pUart = _pUart;
    3a62:	e9 81       	ldd	r30, Y+1	; 0x01
    3a64:	fa 81       	ldd	r31, Y+2	; 0x02
    3a66:	8b 81       	ldd	r24, Y+3	; 0x03
    3a68:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
  server = _server;
    3a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a70:	fa 81       	ldd	r31, Y+2	; 0x02
    3a72:	8e 81       	ldd	r24, Y+6	; 0x06
    3a74:	9f 81       	ldd	r25, Y+7	; 0x07
    3a76:	93 83       	std	Z+3, r25	; 0x03
    3a78:	82 83       	std	Z+2, r24	; 0x02
  tableLen = _tableLen;
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	fc 01       	movw	r30, r24
    3a80:	e6 5b       	subi	r30, 0xB6	; 182
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	80 83       	st	Z, r24
  pTable = (sRfidTag*) malloc((sizeof(sRfidTag) * _tableLen));
    3a88:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8a:	88 2f       	mov	r24, r24
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9c 01       	movw	r18, r24
    3a90:	22 0f       	add	r18, r18
    3a92:	33 1f       	adc	r19, r19
    3a94:	c9 01       	movw	r24, r18
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	88 0f       	add	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	82 1b       	sub	r24, r18
    3aa4:	93 0b       	sbc	r25, r19
    3aa6:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <malloc>
    3aaa:	9c 01       	movw	r18, r24
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	fc 01       	movw	r30, r24
    3ab2:	e5 5b       	subi	r30, 0xB5	; 181
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	31 83       	std	Z+1, r19	; 0x01
    3ab8:	20 83       	st	Z, r18
  memset((u08*) pTable, 0, (sizeof(sRfidTag) * _tableLen));
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	9a 81       	ldd	r25, Y+2	; 0x02
    3abe:	fc 01       	movw	r30, r24
    3ac0:	e5 5b       	subi	r30, 0xB5	; 181
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 81       	ld	r24, Z
    3ac6:	91 81       	ldd	r25, Z+1	; 0x01
    3ac8:	ac 01       	movw	r20, r24
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	88 2f       	mov	r24, r24
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	9c 01       	movw	r18, r24
    3ad2:	22 0f       	add	r18, r18
    3ad4:	33 1f       	adc	r19, r19
    3ad6:	c9 01       	movw	r24, r18
    3ad8:	88 0f       	add	r24, r24
    3ada:	99 1f       	adc	r25, r25
    3adc:	88 0f       	add	r24, r24
    3ade:	99 1f       	adc	r25, r25
    3ae0:	88 0f       	add	r24, r24
    3ae2:	99 1f       	adc	r25, r25
    3ae4:	bc 01       	movw	r22, r24
    3ae6:	62 1b       	sub	r22, r18
    3ae8:	73 0b       	sbc	r23, r19
    3aea:	9b 01       	movw	r18, r22
    3aec:	ca 01       	movw	r24, r20
    3aee:	60 e0       	ldi	r22, 0x00	; 0
    3af0:	70 e0       	ldi	r23, 0x00	; 0
    3af2:	a9 01       	movw	r20, r18
    3af4:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
  cntByte = 0;
    3af8:	e9 81       	ldd	r30, Y+1	; 0x01
    3afa:	fa 81       	ldd	r31, Y+2	; 0x02
    3afc:	15 82       	std	Z+5, r1	; 0x05
  maxPersistCnt = 30;//in seconds
    3afe:	e9 81       	ldd	r30, Y+1	; 0x01
    3b00:	fa 81       	ldd	r31, Y+2	; 0x02
    3b02:	8e e1       	ldi	r24, 0x1E	; 30
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	92 a7       	std	Z+42, r25	; 0x2a
    3b08:	81 a7       	std	Z+41, r24	; 0x29
  prevtimer = 0;
    3b0a:	89 81       	ldd	r24, Y+1	; 0x01
    3b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b0e:	fc 01       	movw	r30, r24
    3b10:	ea 5b       	subi	r30, 0xBA	; 186
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	10 82       	st	Z, r1
    3b16:	11 82       	std	Z+1, r1	; 0x01
    3b18:	12 82       	std	Z+2, r1	; 0x02
    3b1a:	13 82       	std	Z+3, r1	; 0x03
  timer = 0;
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b20:	fc 01       	movw	r30, r24
    3b22:	e3 5b       	subi	r30, 0xB3	; 179
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	10 82       	st	Z, r1
    3b28:	11 82       	std	Z+1, r1	; 0x01
    3b2a:	12 82       	std	Z+2, r1	; 0x02
    3b2c:	13 82       	std	Z+3, r1	; 0x03
  newTag.tagID = 0;
    3b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b30:	fa 81       	ldd	r31, Y+2	; 0x02
    3b32:	16 8e       	std	Z+30, r1	; 0x1e
    3b34:	17 8e       	std	Z+31, r1	; 0x1f
    3b36:	10 a2       	std	Z+32, r1	; 0x20
    3b38:	11 a2       	std	Z+33, r1	; 0x21
  signal[RFID_TABLE_SIGNAL].period = T_1SEC;
    3b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b3e:	80 e4       	ldi	r24, 0x40	; 64
    3b40:	92 e4       	ldi	r25, 0x42	; 66
    3b42:	af e0       	ldi	r26, 0x0F	; 15
    3b44:	b0 e0       	ldi	r27, 0x00	; 0
    3b46:	83 a7       	std	Z+43, r24	; 0x2b
    3b48:	94 a7       	std	Z+44, r25	; 0x2c
    3b4a:	a5 a7       	std	Z+45, r26	; 0x2d
    3b4c:	b6 a7       	std	Z+46, r27	; 0x2e
  signal[RFID_TABLE_SIGNAL].timer = 0;
    3b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b50:	fa 81       	ldd	r31, Y+2	; 0x02
    3b52:	17 a6       	std	Z+47, r1	; 0x2f
    3b54:	10 aa       	std	Z+48, r1	; 0x30
    3b56:	11 aa       	std	Z+49, r1	; 0x31
    3b58:	12 aa       	std	Z+50, r1	; 0x32

  signal[RFID_TAG_SIGNAL].period = T_100MS;
    3b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5e:	80 ea       	ldi	r24, 0xA0	; 160
    3b60:	96 e8       	ldi	r25, 0x86	; 134
    3b62:	a1 e0       	ldi	r26, 0x01	; 1
    3b64:	b0 e0       	ldi	r27, 0x00	; 0
    3b66:	84 ab       	std	Z+52, r24	; 0x34
    3b68:	95 ab       	std	Z+53, r25	; 0x35
    3b6a:	a6 ab       	std	Z+54, r26	; 0x36
    3b6c:	b7 ab       	std	Z+55, r27	; 0x37
  signal[RFID_TAG_SIGNAL].timer = 0;
    3b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b70:	fa 81       	ldd	r31, Y+2	; 0x02
    3b72:	10 ae       	std	Z+56, r1	; 0x38
    3b74:	11 ae       	std	Z+57, r1	; 0x39
    3b76:	12 ae       	std	Z+58, r1	; 0x3a
    3b78:	13 ae       	std	Z+59, r1	; 0x3b

  signal[RFID_NEWTAG_TIMEOUT_SIGNAL].period = 30 * T_1SEC;
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7e:	fc 01       	movw	r30, r24
    3b80:	fd 96       	adiw	r30, 0x3d	; 61
    3b82:	80 e8       	ldi	r24, 0x80	; 128
    3b84:	93 ec       	ldi	r25, 0xC3	; 195
    3b86:	a9 ec       	ldi	r26, 0xC9	; 201
    3b88:	b1 e0       	ldi	r27, 0x01	; 1
    3b8a:	80 83       	st	Z, r24
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	a2 83       	std	Z+2, r26	; 0x02
    3b90:	b3 83       	std	Z+3, r27	; 0x03
  signal[RFID_NEWTAG_TIMEOUT_SIGNAL].timer = 0;
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	9a 81       	ldd	r25, Y+2	; 0x02
    3b96:	fc 01       	movw	r30, r24
    3b98:	ef 5b       	subi	r30, 0xBF	; 191
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	10 82       	st	Z, r1
    3b9e:	11 82       	std	Z+1, r1	; 0x01
    3ba0:	12 82       	std	Z+2, r1	; 0x02
    3ba2:	13 82       	std	Z+3, r1	; 0x03
}
    3ba4:	27 96       	adiw	r28, 0x07	; 7
    3ba6:	0f b6       	in	r0, 0x3f	; 63
    3ba8:	f8 94       	cli
    3baa:	de bf       	out	0x3e, r29	; 62
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	cd bf       	out	0x3d, r28	; 61
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <_ZN5CRFIDC2EP5CUARThP7CServer>:
extern CUART DbgUart;
#endif

//using namespace RFID;

CRFID::CRFID(CUART *_pUart, u08 _tableLen, CServer *_server) {
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	27 97       	sbiw	r28, 0x07	; 7
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	9a 83       	std	Y+2, r25	; 0x02
    3bcc:	89 83       	std	Y+1, r24	; 0x01
    3bce:	7c 83       	std	Y+4, r23	; 0x04
    3bd0:	6b 83       	std	Y+3, r22	; 0x03
    3bd2:	4d 83       	std	Y+5, r20	; 0x05
    3bd4:	3f 83       	std	Y+7, r19	; 0x07
    3bd6:	2e 83       	std	Y+6, r18	; 0x06
  pUart = _pUart;
    3bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    3bda:	fa 81       	ldd	r31, Y+2	; 0x02
    3bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bde:	9c 81       	ldd	r25, Y+4	; 0x04
    3be0:	91 83       	std	Z+1, r25	; 0x01
    3be2:	80 83       	st	Z, r24
  server = _server;
    3be4:	e9 81       	ldd	r30, Y+1	; 0x01
    3be6:	fa 81       	ldd	r31, Y+2	; 0x02
    3be8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bea:	9f 81       	ldd	r25, Y+7	; 0x07
    3bec:	93 83       	std	Z+3, r25	; 0x03
    3bee:	82 83       	std	Z+2, r24	; 0x02
  tableLen = _tableLen;
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	e6 5b       	subi	r30, 0xB6	; 182
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfc:	80 83       	st	Z, r24
  pTable = (sRfidTag*) malloc((sizeof(sRfidTag) * _tableLen));
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	88 2f       	mov	r24, r24
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	9c 01       	movw	r18, r24
    3c06:	22 0f       	add	r18, r18
    3c08:	33 1f       	adc	r19, r19
    3c0a:	c9 01       	movw	r24, r18
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	82 1b       	sub	r24, r18
    3c1a:	93 0b       	sbc	r25, r19
    3c1c:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <malloc>
    3c20:	9c 01       	movw	r18, r24
    3c22:	89 81       	ldd	r24, Y+1	; 0x01
    3c24:	9a 81       	ldd	r25, Y+2	; 0x02
    3c26:	fc 01       	movw	r30, r24
    3c28:	e5 5b       	subi	r30, 0xB5	; 181
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	31 83       	std	Z+1, r19	; 0x01
    3c2e:	20 83       	st	Z, r18
  memset((u08*) pTable, 0, (sizeof(sRfidTag) * _tableLen));
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	9a 81       	ldd	r25, Y+2	; 0x02
    3c34:	fc 01       	movw	r30, r24
    3c36:	e5 5b       	subi	r30, 0xB5	; 181
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	ac 01       	movw	r20, r24
    3c40:	8d 81       	ldd	r24, Y+5	; 0x05
    3c42:	88 2f       	mov	r24, r24
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	9c 01       	movw	r18, r24
    3c48:	22 0f       	add	r18, r18
    3c4a:	33 1f       	adc	r19, r19
    3c4c:	c9 01       	movw	r24, r18
    3c4e:	88 0f       	add	r24, r24
    3c50:	99 1f       	adc	r25, r25
    3c52:	88 0f       	add	r24, r24
    3c54:	99 1f       	adc	r25, r25
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	bc 01       	movw	r22, r24
    3c5c:	62 1b       	sub	r22, r18
    3c5e:	73 0b       	sbc	r23, r19
    3c60:	9b 01       	movw	r18, r22
    3c62:	ca 01       	movw	r24, r20
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	70 e0       	ldi	r23, 0x00	; 0
    3c68:	a9 01       	movw	r20, r18
    3c6a:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
  cntByte = 0;
    3c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c70:	fa 81       	ldd	r31, Y+2	; 0x02
    3c72:	15 82       	std	Z+5, r1	; 0x05
  maxPersistCnt = 30;//in seconds
    3c74:	e9 81       	ldd	r30, Y+1	; 0x01
    3c76:	fa 81       	ldd	r31, Y+2	; 0x02
    3c78:	8e e1       	ldi	r24, 0x1E	; 30
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	92 a7       	std	Z+42, r25	; 0x2a
    3c7e:	81 a7       	std	Z+41, r24	; 0x29
  prevtimer = 0;
    3c80:	89 81       	ldd	r24, Y+1	; 0x01
    3c82:	9a 81       	ldd	r25, Y+2	; 0x02
    3c84:	fc 01       	movw	r30, r24
    3c86:	ea 5b       	subi	r30, 0xBA	; 186
    3c88:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8a:	10 82       	st	Z, r1
    3c8c:	11 82       	std	Z+1, r1	; 0x01
    3c8e:	12 82       	std	Z+2, r1	; 0x02
    3c90:	13 82       	std	Z+3, r1	; 0x03
  timer = 0;
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	9a 81       	ldd	r25, Y+2	; 0x02
    3c96:	fc 01       	movw	r30, r24
    3c98:	e3 5b       	subi	r30, 0xB3	; 179
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	10 82       	st	Z, r1
    3c9e:	11 82       	std	Z+1, r1	; 0x01
    3ca0:	12 82       	std	Z+2, r1	; 0x02
    3ca2:	13 82       	std	Z+3, r1	; 0x03
  newTag.tagID = 0;
    3ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca8:	16 8e       	std	Z+30, r1	; 0x1e
    3caa:	17 8e       	std	Z+31, r1	; 0x1f
    3cac:	10 a2       	std	Z+32, r1	; 0x20
    3cae:	11 a2       	std	Z+33, r1	; 0x21
  signal[RFID_TABLE_SIGNAL].period = T_1SEC;
    3cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb4:	80 e4       	ldi	r24, 0x40	; 64
    3cb6:	92 e4       	ldi	r25, 0x42	; 66
    3cb8:	af e0       	ldi	r26, 0x0F	; 15
    3cba:	b0 e0       	ldi	r27, 0x00	; 0
    3cbc:	83 a7       	std	Z+43, r24	; 0x2b
    3cbe:	94 a7       	std	Z+44, r25	; 0x2c
    3cc0:	a5 a7       	std	Z+45, r26	; 0x2d
    3cc2:	b6 a7       	std	Z+46, r27	; 0x2e
  signal[RFID_TABLE_SIGNAL].timer = 0;
    3cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc8:	17 a6       	std	Z+47, r1	; 0x2f
    3cca:	10 aa       	std	Z+48, r1	; 0x30
    3ccc:	11 aa       	std	Z+49, r1	; 0x31
    3cce:	12 aa       	std	Z+50, r1	; 0x32

  signal[RFID_TAG_SIGNAL].period = T_100MS;
    3cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd4:	80 ea       	ldi	r24, 0xA0	; 160
    3cd6:	96 e8       	ldi	r25, 0x86	; 134
    3cd8:	a1 e0       	ldi	r26, 0x01	; 1
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	84 ab       	std	Z+52, r24	; 0x34
    3cde:	95 ab       	std	Z+53, r25	; 0x35
    3ce0:	a6 ab       	std	Z+54, r26	; 0x36
    3ce2:	b7 ab       	std	Z+55, r27	; 0x37
  signal[RFID_TAG_SIGNAL].timer = 0;
    3ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce8:	10 ae       	std	Z+56, r1	; 0x38
    3cea:	11 ae       	std	Z+57, r1	; 0x39
    3cec:	12 ae       	std	Z+58, r1	; 0x3a
    3cee:	13 ae       	std	Z+59, r1	; 0x3b

  signal[RFID_NEWTAG_TIMEOUT_SIGNAL].period = 30 * T_1SEC;
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	fd 96       	adiw	r30, 0x3d	; 61
    3cf8:	80 e8       	ldi	r24, 0x80	; 128
    3cfa:	93 ec       	ldi	r25, 0xC3	; 195
    3cfc:	a9 ec       	ldi	r26, 0xC9	; 201
    3cfe:	b1 e0       	ldi	r27, 0x01	; 1
    3d00:	80 83       	st	Z, r24
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	a2 83       	std	Z+2, r26	; 0x02
    3d06:	b3 83       	std	Z+3, r27	; 0x03
  signal[RFID_NEWTAG_TIMEOUT_SIGNAL].timer = 0;
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	ef 5b       	subi	r30, 0xBF	; 191
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	10 82       	st	Z, r1
    3d14:	11 82       	std	Z+1, r1	; 0x01
    3d16:	12 82       	std	Z+2, r1	; 0x02
    3d18:	13 82       	std	Z+3, r1	; 0x03
}
    3d1a:	27 96       	adiw	r28, 0x07	; 7
    3d1c:	0f b6       	in	r0, 0x3f	; 63
    3d1e:	f8 94       	cli
    3d20:	de bf       	out	0x3e, r29	; 62
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	cd bf       	out	0x3d, r28	; 61
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <_ZN4CrtcC2EPN3I2C4CI2CEh>:

/*==========================================================================
 FUNCTION:DS3231 driver
 PURPOSE:
 ---------------------------------------------------------------------------*/
Crtc::Crtc(CI2C* _i2c, u08 _id) {
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <_ZN4CrtcC2EPN3I2C4CI2CEh+0x6>
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <_ZN4CrtcC2EPN3I2C4CI2CEh+0x8>
    3d34:	0f 92       	push	r0
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
    3d3e:	7c 83       	std	Y+4, r23	; 0x04
    3d40:	6b 83       	std	Y+3, r22	; 0x03
    3d42:	4d 83       	std	Y+5, r20	; 0x05
  rtc_id = _id;
    3d44:	e9 81       	ldd	r30, Y+1	; 0x01
    3d46:	fa 81       	ldd	r31, Y+2	; 0x02
    3d48:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4a:	80 83       	st	Z, r24
  i2c = _i2c;
    3d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	9c 81       	ldd	r25, Y+4	; 0x04
    3d54:	92 83       	std	Z+2, r25	; 0x02
    3d56:	81 83       	std	Z+1, r24	; 0x01
}
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	cf 91       	pop	r28
    3d64:	df 91       	pop	r29
    3d66:	08 95       	ret

00003d68 <_ZN4CrtcC1EPN3I2C4CI2CEh>:

/*==========================================================================
 FUNCTION:DS3231 driver
 PURPOSE:
 ---------------------------------------------------------------------------*/
Crtc::Crtc(CI2C* _i2c, u08 _id) {
    3d68:	df 93       	push	r29
    3d6a:	cf 93       	push	r28
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <_ZN4CrtcC1EPN3I2C4CI2CEh+0x6>
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <_ZN4CrtcC1EPN3I2C4CI2CEh+0x8>
    3d70:	0f 92       	push	r0
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	9a 83       	std	Y+2, r25	; 0x02
    3d78:	89 83       	std	Y+1, r24	; 0x01
    3d7a:	7c 83       	std	Y+4, r23	; 0x04
    3d7c:	6b 83       	std	Y+3, r22	; 0x03
    3d7e:	4d 83       	std	Y+5, r20	; 0x05
  rtc_id = _id;
    3d80:	e9 81       	ldd	r30, Y+1	; 0x01
    3d82:	fa 81       	ldd	r31, Y+2	; 0x02
    3d84:	8d 81       	ldd	r24, Y+5	; 0x05
    3d86:	80 83       	st	Z, r24
  i2c = _i2c;
    3d88:	e9 81       	ldd	r30, Y+1	; 0x01
    3d8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d90:	92 83       	std	Z+2, r25	; 0x02
    3d92:	81 83       	std	Z+1, r24	; 0x01
}
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <_ZN4Crtc7setDateEthhhhh>:

/*==========================================================================
 FUNCTION:DS3231 driver
 PURPOSE:
 ---------------------------------------------------------------------------*/
bool Crtc::setDate(u16 year, u08 mon, u08 day, u08 wday, u08 hour, u08 min) {
    3da4:	cf 92       	push	r12
    3da6:	ef 92       	push	r14
    3da8:	0f 93       	push	r16
    3daa:	df 93       	push	r29
    3dac:	cf 93       	push	r28
    3dae:	cd b7       	in	r28, 0x3d	; 61
    3db0:	de b7       	in	r29, 0x3e	; 62
    3db2:	61 97       	sbiw	r28, 0x11	; 17
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	9a 87       	std	Y+10, r25	; 0x0a
    3dc0:	89 87       	std	Y+9, r24	; 0x09
    3dc2:	7c 87       	std	Y+12, r23	; 0x0c
    3dc4:	6b 87       	std	Y+11, r22	; 0x0b
    3dc6:	4d 87       	std	Y+13, r20	; 0x0d
    3dc8:	2e 87       	std	Y+14, r18	; 0x0e
    3dca:	0f 87       	std	Y+15, r16	; 0x0f
    3dcc:	e8 8a       	std	Y+16, r14	; 0x10
    3dce:	c9 8a       	std	Y+17, r12	; 0x11
  u08 buf[8];
  /* select address 0x00 */
  buf[0] = 0x00;
    3dd0:	19 82       	std	Y+1, r1	; 0x01

  buf[1] = (BIN_TO_BCD (0)); //sec
    3dd2:	1a 82       	std	Y+2, r1	; 0x02
  buf[2] = (BIN_TO_BCD (min)) & 0x7F;
    3dd4:	89 89       	ldd	r24, Y+17	; 0x11
    3dd6:	9a e0       	ldi	r25, 0x0A	; 10
    3dd8:	69 2f       	mov	r22, r25
    3dda:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3dde:	28 2f       	mov	r18, r24
    3de0:	22 95       	swap	r18
    3de2:	20 7f       	andi	r18, 0xF0	; 240
    3de4:	89 89       	ldd	r24, Y+17	; 0x11
    3de6:	9a e0       	ldi	r25, 0x0A	; 10
    3de8:	69 2f       	mov	r22, r25
    3dea:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3dee:	89 2f       	mov	r24, r25
    3df0:	82 0f       	add	r24, r18
    3df2:	8f 77       	andi	r24, 0x7F	; 127
    3df4:	8b 83       	std	Y+3, r24	; 0x03
  buf[3] = (BIN_TO_BCD (hour)) & 0x3F;// 00-->23
    3df6:	88 89       	ldd	r24, Y+16	; 0x10
    3df8:	9a e0       	ldi	r25, 0x0A	; 10
    3dfa:	69 2f       	mov	r22, r25
    3dfc:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3e00:	28 2f       	mov	r18, r24
    3e02:	22 95       	swap	r18
    3e04:	20 7f       	andi	r18, 0xF0	; 240
    3e06:	88 89       	ldd	r24, Y+16	; 0x10
    3e08:	9a e0       	ldi	r25, 0x0A	; 10
    3e0a:	69 2f       	mov	r22, r25
    3e0c:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3e10:	89 2f       	mov	r24, r25
    3e12:	82 0f       	add	r24, r18
    3e14:	8f 73       	andi	r24, 0x3F	; 63
    3e16:	8c 83       	std	Y+4, r24	; 0x04
  buf[4] = wday;
    3e18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
  buf[5] = (BIN_TO_BCD (day)) & 0x3F; //1--31/30
    3e1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e1e:	9a e0       	ldi	r25, 0x0A	; 10
    3e20:	69 2f       	mov	r22, r25
    3e22:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3e26:	28 2f       	mov	r18, r24
    3e28:	22 95       	swap	r18
    3e2a:	20 7f       	andi	r18, 0xF0	; 240
    3e2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e2e:	9a e0       	ldi	r25, 0x0A	; 10
    3e30:	69 2f       	mov	r22, r25
    3e32:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3e36:	89 2f       	mov	r24, r25
    3e38:	82 0f       	add	r24, r18
    3e3a:	8f 73       	andi	r24, 0x3F	; 63
    3e3c:	8e 83       	std	Y+6, r24	; 0x06
  buf[6] = BIN_TO_BCD (mon) & 0x1F; //1--12
    3e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e40:	9a e0       	ldi	r25, 0x0A	; 10
    3e42:	69 2f       	mov	r22, r25
    3e44:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3e48:	28 2f       	mov	r18, r24
    3e4a:	22 95       	swap	r18
    3e4c:	20 7f       	andi	r18, 0xF0	; 240
    3e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e50:	9a e0       	ldi	r25, 0x0A	; 10
    3e52:	69 2f       	mov	r22, r25
    3e54:	0e 94 a5 59 	call	0xb34a	; 0xb34a <__udivmodqi4>
    3e58:	89 2f       	mov	r24, r25
    3e5a:	82 0f       	add	r24, r18
    3e5c:	8f 71       	andi	r24, 0x1F	; 31
    3e5e:	8f 83       	std	Y+7, r24	; 0x07
  buf[7] = BIN_TO_BCD (year-2000); //00 -- 99
    3e60:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e62:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e64:	80 5d       	subi	r24, 0xD0	; 208
    3e66:	97 40       	sbci	r25, 0x07	; 7
    3e68:	2a e0       	ldi	r18, 0x0A	; 10
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	b9 01       	movw	r22, r18
    3e6e:	0e 94 b1 59 	call	0xb362	; 0xb362 <__udivmodhi4>
    3e72:	cb 01       	movw	r24, r22
    3e74:	48 2f       	mov	r20, r24
    3e76:	42 95       	swap	r20
    3e78:	40 7f       	andi	r20, 0xF0	; 240
    3e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e7e:	80 5d       	subi	r24, 0xD0	; 208
    3e80:	97 40       	sbci	r25, 0x07	; 7
    3e82:	2a e0       	ldi	r18, 0x0A	; 10
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	b9 01       	movw	r22, r18
    3e88:	0e 94 b1 59 	call	0xb362	; 0xb362 <__udivmodhi4>
    3e8c:	84 0f       	add	r24, r20
    3e8e:	88 87       	std	Y+8, r24	; 0x08
  i2c->masterSend(rtc_id, 8, buf);
    3e90:	e9 85       	ldd	r30, Y+9	; 0x09
    3e92:	fa 85       	ldd	r31, Y+10	; 0x0a
    3e94:	81 81       	ldd	r24, Z+1	; 0x01
    3e96:	92 81       	ldd	r25, Z+2	; 0x02
    3e98:	e9 85       	ldd	r30, Y+9	; 0x09
    3e9a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3e9c:	20 81       	ld	r18, Z
    3e9e:	62 2f       	mov	r22, r18
    3ea0:	48 e0       	ldi	r20, 0x08	; 8
    3ea2:	9e 01       	movw	r18, r28
    3ea4:	2f 5f       	subi	r18, 0xFF	; 255
    3ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea8:	0e 94 4c 44 	call	0x8898	; 0x8898 <_ZN3I2C4CI2C10masterSendEhhPh>
  return true;
    3eac:	81 e0       	ldi	r24, 0x01	; 1
}
    3eae:	61 96       	adiw	r28, 0x11	; 17
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	cf 91       	pop	r28
    3ebc:	df 91       	pop	r29
    3ebe:	0f 91       	pop	r16
    3ec0:	ef 90       	pop	r14
    3ec2:	cf 90       	pop	r12
    3ec4:	08 95       	ret

00003ec6 <_ZN4Crtc7getDateEPtPhS1_S1_S1_S1_S1_>:
  *mon = BCD_TO_BIN (buf[5] & 0x1F);
  *year = BCD_TO_BIN (buf[6]) + 2000; /* byte*/
  return true;
}

bool Crtc::getDate(u16* year, u08* mon, u08* day, u08 *wday, u08* hour, u08* min, u08* sec) {
    3ec6:	af 92       	push	r10
    3ec8:	bf 92       	push	r11
    3eca:	cf 92       	push	r12
    3ecc:	df 92       	push	r13
    3ece:	ef 92       	push	r14
    3ed0:	ff 92       	push	r15
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	df 93       	push	r29
    3ed8:	cf 93       	push	r28
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	a2 97       	sbiw	r28, 0x22	; 34
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	de bf       	out	0x3e, r29	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	cd bf       	out	0x3d, r28	; 61
    3eea:	9c 8b       	std	Y+20, r25	; 0x14
    3eec:	8b 8b       	std	Y+19, r24	; 0x13
    3eee:	7e 8b       	std	Y+22, r23	; 0x16
    3ef0:	6d 8b       	std	Y+21, r22	; 0x15
    3ef2:	58 8f       	std	Y+24, r21	; 0x18
    3ef4:	4f 8b       	std	Y+23, r20	; 0x17
    3ef6:	3a 8f       	std	Y+26, r19	; 0x1a
    3ef8:	29 8f       	std	Y+25, r18	; 0x19
    3efa:	1c 8f       	std	Y+28, r17	; 0x1c
    3efc:	0b 8f       	std	Y+27, r16	; 0x1b
    3efe:	fe 8e       	std	Y+30, r15	; 0x1e
    3f00:	ed 8e       	std	Y+29, r14	; 0x1d
    3f02:	d8 a2       	std	Y+32, r13	; 0x20
    3f04:	cf 8e       	std	Y+31, r12	; 0x1f
    3f06:	ba a2       	std	Y+34, r11	; 0x22
    3f08:	a9 a2       	std	Y+33, r10	; 0x21
  u08 buf[0x12];
  // send address
  buf[0] = 0x00;
    3f0a:	19 82       	std	Y+1, r1	; 0x01
  i2c->masterSend(rtc_id, 1, buf);
    3f0c:	eb 89       	ldd	r30, Y+19	; 0x13
    3f0e:	fc 89       	ldd	r31, Y+20	; 0x14
    3f10:	81 81       	ldd	r24, Z+1	; 0x01
    3f12:	92 81       	ldd	r25, Z+2	; 0x02
    3f14:	eb 89       	ldd	r30, Y+19	; 0x13
    3f16:	fc 89       	ldd	r31, Y+20	; 0x14
    3f18:	20 81       	ld	r18, Z
    3f1a:	62 2f       	mov	r22, r18
    3f1c:	41 e0       	ldi	r20, 0x01	; 1
    3f1e:	9e 01       	movw	r18, r28
    3f20:	2f 5f       	subi	r18, 0xFF	; 255
    3f22:	3f 4f       	sbci	r19, 0xFF	; 255
    3f24:	0e 94 4c 44 	call	0x8898	; 0x8898 <_ZN3I2C4CI2C10masterSendEhhPh>
  // get the data
  i2c->masterReceive(rtc_id, 7, buf);
    3f28:	eb 89       	ldd	r30, Y+19	; 0x13
    3f2a:	fc 89       	ldd	r31, Y+20	; 0x14
    3f2c:	81 81       	ldd	r24, Z+1	; 0x01
    3f2e:	92 81       	ldd	r25, Z+2	; 0x02
    3f30:	eb 89       	ldd	r30, Y+19	; 0x13
    3f32:	fc 89       	ldd	r31, Y+20	; 0x14
    3f34:	20 81       	ld	r18, Z
    3f36:	62 2f       	mov	r22, r18
    3f38:	47 e0       	ldi	r20, 0x07	; 7
    3f3a:	9e 01       	movw	r18, r28
    3f3c:	2f 5f       	subi	r18, 0xFF	; 255
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	0e 94 a0 44 	call	0x8940	; 0x8940 <_ZN3I2C4CI2C13masterReceiveEhhPh>

  *sec = BCD_TO_BIN (buf[0] & 0x7F);
    3f44:	89 81       	ldd	r24, Y+1	; 0x01
    3f46:	48 2f       	mov	r20, r24
    3f48:	4f 70       	andi	r20, 0x0F	; 15
    3f4a:	89 81       	ldd	r24, Y+1	; 0x01
    3f4c:	88 2f       	mov	r24, r24
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	8f 77       	andi	r24, 0x7F	; 127
    3f52:	90 70       	andi	r25, 0x00	; 0
    3f54:	95 95       	asr	r25
    3f56:	87 95       	ror	r24
    3f58:	95 95       	asr	r25
    3f5a:	87 95       	ror	r24
    3f5c:	95 95       	asr	r25
    3f5e:	87 95       	ror	r24
    3f60:	95 95       	asr	r25
    3f62:	87 95       	ror	r24
    3f64:	9c 01       	movw	r18, r24
    3f66:	22 0f       	add	r18, r18
    3f68:	33 1f       	adc	r19, r19
    3f6a:	c9 01       	movw	r24, r18
    3f6c:	88 0f       	add	r24, r24
    3f6e:	99 1f       	adc	r25, r25
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	82 0f       	add	r24, r18
    3f76:	93 1f       	adc	r25, r19
    3f78:	84 0f       	add	r24, r20
    3f7a:	e9 a1       	ldd	r30, Y+33	; 0x21
    3f7c:	fa a1       	ldd	r31, Y+34	; 0x22
    3f7e:	80 83       	st	Z, r24
  *min = BCD_TO_BIN (buf[1] & 0x7F);
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	48 2f       	mov	r20, r24
    3f84:	4f 70       	andi	r20, 0x0F	; 15
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	88 2f       	mov	r24, r24
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	8f 77       	andi	r24, 0x7F	; 127
    3f8e:	90 70       	andi	r25, 0x00	; 0
    3f90:	95 95       	asr	r25
    3f92:	87 95       	ror	r24
    3f94:	95 95       	asr	r25
    3f96:	87 95       	ror	r24
    3f98:	95 95       	asr	r25
    3f9a:	87 95       	ror	r24
    3f9c:	95 95       	asr	r25
    3f9e:	87 95       	ror	r24
    3fa0:	9c 01       	movw	r18, r24
    3fa2:	22 0f       	add	r18, r18
    3fa4:	33 1f       	adc	r19, r19
    3fa6:	c9 01       	movw	r24, r18
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	88 0f       	add	r24, r24
    3fae:	99 1f       	adc	r25, r25
    3fb0:	82 0f       	add	r24, r18
    3fb2:	93 1f       	adc	r25, r19
    3fb4:	84 0f       	add	r24, r20
    3fb6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3fb8:	f8 a1       	ldd	r31, Y+32	; 0x20
    3fba:	80 83       	st	Z, r24
  *hour = BCD_TO_BIN (buf[2] & 0x3F);
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	48 2f       	mov	r20, r24
    3fc0:	4f 70       	andi	r20, 0x0F	; 15
    3fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fc4:	88 2f       	mov	r24, r24
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	8f 73       	andi	r24, 0x3F	; 63
    3fca:	90 70       	andi	r25, 0x00	; 0
    3fcc:	95 95       	asr	r25
    3fce:	87 95       	ror	r24
    3fd0:	95 95       	asr	r25
    3fd2:	87 95       	ror	r24
    3fd4:	95 95       	asr	r25
    3fd6:	87 95       	ror	r24
    3fd8:	95 95       	asr	r25
    3fda:	87 95       	ror	r24
    3fdc:	9c 01       	movw	r18, r24
    3fde:	22 0f       	add	r18, r18
    3fe0:	33 1f       	adc	r19, r19
    3fe2:	c9 01       	movw	r24, r18
    3fe4:	88 0f       	add	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	82 0f       	add	r24, r18
    3fee:	93 1f       	adc	r25, r19
    3ff0:	84 0f       	add	r24, r20
    3ff2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3ff4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3ff6:	80 83       	st	Z, r24
  *wday = (buf[3]) & 0x7; //1--7
    3ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    3ffa:	87 70       	andi	r24, 0x07	; 7
    3ffc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3ffe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    4000:	80 83       	st	Z, r24
  *day = BCD_TO_BIN (buf[4] & 0x3F); //01--31
    4002:	8d 81       	ldd	r24, Y+5	; 0x05
    4004:	48 2f       	mov	r20, r24
    4006:	4f 70       	andi	r20, 0x0F	; 15
    4008:	8d 81       	ldd	r24, Y+5	; 0x05
    400a:	88 2f       	mov	r24, r24
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	8f 73       	andi	r24, 0x3F	; 63
    4010:	90 70       	andi	r25, 0x00	; 0
    4012:	95 95       	asr	r25
    4014:	87 95       	ror	r24
    4016:	95 95       	asr	r25
    4018:	87 95       	ror	r24
    401a:	95 95       	asr	r25
    401c:	87 95       	ror	r24
    401e:	95 95       	asr	r25
    4020:	87 95       	ror	r24
    4022:	9c 01       	movw	r18, r24
    4024:	22 0f       	add	r18, r18
    4026:	33 1f       	adc	r19, r19
    4028:	c9 01       	movw	r24, r18
    402a:	88 0f       	add	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	88 0f       	add	r24, r24
    4030:	99 1f       	adc	r25, r25
    4032:	82 0f       	add	r24, r18
    4034:	93 1f       	adc	r25, r19
    4036:	84 0f       	add	r24, r20
    4038:	e9 8d       	ldd	r30, Y+25	; 0x19
    403a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    403c:	80 83       	st	Z, r24
  *mon = BCD_TO_BIN (buf[5] & 0x1F);
    403e:	8e 81       	ldd	r24, Y+6	; 0x06
    4040:	48 2f       	mov	r20, r24
    4042:	4f 70       	andi	r20, 0x0F	; 15
    4044:	8e 81       	ldd	r24, Y+6	; 0x06
    4046:	88 2f       	mov	r24, r24
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	8f 71       	andi	r24, 0x1F	; 31
    404c:	90 70       	andi	r25, 0x00	; 0
    404e:	95 95       	asr	r25
    4050:	87 95       	ror	r24
    4052:	95 95       	asr	r25
    4054:	87 95       	ror	r24
    4056:	95 95       	asr	r25
    4058:	87 95       	ror	r24
    405a:	95 95       	asr	r25
    405c:	87 95       	ror	r24
    405e:	9c 01       	movw	r18, r24
    4060:	22 0f       	add	r18, r18
    4062:	33 1f       	adc	r19, r19
    4064:	c9 01       	movw	r24, r18
    4066:	88 0f       	add	r24, r24
    4068:	99 1f       	adc	r25, r25
    406a:	88 0f       	add	r24, r24
    406c:	99 1f       	adc	r25, r25
    406e:	82 0f       	add	r24, r18
    4070:	93 1f       	adc	r25, r19
    4072:	84 0f       	add	r24, r20
    4074:	ef 89       	ldd	r30, Y+23	; 0x17
    4076:	f8 8d       	ldd	r31, Y+24	; 0x18
    4078:	80 83       	st	Z, r24
  *year = BCD_TO_BIN (buf[6]) + 2000; /* byte*/
    407a:	8f 81       	ldd	r24, Y+7	; 0x07
    407c:	88 2f       	mov	r24, r24
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	ac 01       	movw	r20, r24
    4082:	4f 70       	andi	r20, 0x0F	; 15
    4084:	50 70       	andi	r21, 0x00	; 0
    4086:	8f 81       	ldd	r24, Y+7	; 0x07
    4088:	88 2f       	mov	r24, r24
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	95 95       	asr	r25
    408e:	87 95       	ror	r24
    4090:	95 95       	asr	r25
    4092:	87 95       	ror	r24
    4094:	95 95       	asr	r25
    4096:	87 95       	ror	r24
    4098:	95 95       	asr	r25
    409a:	87 95       	ror	r24
    409c:	9c 01       	movw	r18, r24
    409e:	22 0f       	add	r18, r18
    40a0:	33 1f       	adc	r19, r19
    40a2:	c9 01       	movw	r24, r18
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	88 0f       	add	r24, r24
    40aa:	99 1f       	adc	r25, r25
    40ac:	82 0f       	add	r24, r18
    40ae:	93 1f       	adc	r25, r19
    40b0:	84 0f       	add	r24, r20
    40b2:	95 1f       	adc	r25, r21
    40b4:	80 53       	subi	r24, 0x30	; 48
    40b6:	98 4f       	sbci	r25, 0xF8	; 248
    40b8:	ed 89       	ldd	r30, Y+21	; 0x15
    40ba:	fe 89       	ldd	r31, Y+22	; 0x16
    40bc:	91 83       	std	Z+1, r25	; 0x01
    40be:	80 83       	st	Z, r24
  return true;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
}
    40c2:	a2 96       	adiw	r28, 0x22	; 34
    40c4:	0f b6       	in	r0, 0x3f	; 63
    40c6:	f8 94       	cli
    40c8:	de bf       	out	0x3e, r29	; 62
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	cd bf       	out	0x3d, r28	; 61
    40ce:	cf 91       	pop	r28
    40d0:	df 91       	pop	r29
    40d2:	1f 91       	pop	r17
    40d4:	0f 91       	pop	r16
    40d6:	ff 90       	pop	r15
    40d8:	ef 90       	pop	r14
    40da:	df 90       	pop	r13
    40dc:	cf 90       	pop	r12
    40de:	bf 90       	pop	r11
    40e0:	af 90       	pop	r10
    40e2:	08 95       	ret

000040e4 <_ZN4Crtc12getTimestampEv>:
  buf[7] = BIN_TO_BCD (year-2000); //00 -- 99
  i2c->masterSend(rtc_id, 8, buf);
  return true;
}

char* Crtc::getTimestamp(void) {
    40e4:	af 92       	push	r10
    40e6:	bf 92       	push	r11
    40e8:	cf 92       	push	r12
    40ea:	df 92       	push	r13
    40ec:	ef 92       	push	r14
    40ee:	ff 92       	push	r15
    40f0:	0f 93       	push	r16
    40f2:	1f 93       	push	r17
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	2c 97       	sbiw	r28, 0x0c	; 12
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	9c 87       	std	Y+12, r25	; 0x0c
    410a:	8b 87       	std	Y+11, r24	; 0x0b
  char* aux = "\0                                                ";
    410c:	8f eb       	ldi	r24, 0xBF	; 191
    410e:	92 e0       	ldi	r25, 0x02	; 2
    4110:	9a 83       	std	Y+2, r25	; 0x02
    4112:	89 83       	std	Y+1, r24	; 0x01
  u08 day;
  u08 hour;
  u08 minute;
  u08 second;

  getDate(&year,&month,&date,&day,&hour,&minute,&second);
    4114:	8b 85       	ldd	r24, Y+11	; 0x0b
    4116:	9c 85       	ldd	r25, Y+12	; 0x0c
    4118:	9e 01       	movw	r18, r28
    411a:	2d 5f       	subi	r18, 0xFD	; 253
    411c:	3f 4f       	sbci	r19, 0xFF	; 255
    411e:	ae 01       	movw	r20, r28
    4120:	4b 5f       	subi	r20, 0xFB	; 251
    4122:	5f 4f       	sbci	r21, 0xFF	; 255
    4124:	fe 01       	movw	r30, r28
    4126:	36 96       	adiw	r30, 0x06	; 6
    4128:	de 01       	movw	r26, r28
    412a:	17 96       	adiw	r26, 0x07	; 7
    412c:	ee 24       	eor	r14, r14
    412e:	ff 24       	eor	r15, r15
    4130:	68 94       	set
    4132:	e3 f8       	bld	r14, 3
    4134:	ec 0e       	add	r14, r28
    4136:	fd 1e       	adc	r15, r29
    4138:	0f 2e       	mov	r0, r31
    413a:	f9 e0       	ldi	r31, 0x09	; 9
    413c:	cf 2e       	mov	r12, r31
    413e:	dd 24       	eor	r13, r13
    4140:	f0 2d       	mov	r31, r0
    4142:	cc 0e       	add	r12, r28
    4144:	dd 1e       	adc	r13, r29
    4146:	0f 2e       	mov	r0, r31
    4148:	fa e0       	ldi	r31, 0x0A	; 10
    414a:	af 2e       	mov	r10, r31
    414c:	bb 24       	eor	r11, r11
    414e:	f0 2d       	mov	r31, r0
    4150:	ac 0e       	add	r10, r28
    4152:	bd 1e       	adc	r11, r29
    4154:	b9 01       	movw	r22, r18
    4156:	9f 01       	movw	r18, r30
    4158:	8d 01       	movw	r16, r26
    415a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <_ZN4Crtc7getDateEPtPhS1_S1_S1_S1_S1_>
  sprintf(aux, "%d/%02d/%02d %02d:%02d:%02d", year, month, date, hour, minute, second);
    415e:	2b 81       	ldd	r18, Y+3	; 0x03
    4160:	3c 81       	ldd	r19, Y+4	; 0x04
    4162:	8d 81       	ldd	r24, Y+5	; 0x05
    4164:	48 2f       	mov	r20, r24
    4166:	50 e0       	ldi	r21, 0x00	; 0
    4168:	8e 81       	ldd	r24, Y+6	; 0x06
    416a:	68 2f       	mov	r22, r24
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	88 85       	ldd	r24, Y+8	; 0x08
    4170:	a8 2f       	mov	r26, r24
    4172:	b0 e0       	ldi	r27, 0x00	; 0
    4174:	89 85       	ldd	r24, Y+9	; 0x09
    4176:	08 2f       	mov	r16, r24
    4178:	10 e0       	ldi	r17, 0x00	; 0
    417a:	8a 85       	ldd	r24, Y+10	; 0x0a
    417c:	e8 2e       	mov	r14, r24
    417e:	ff 24       	eor	r15, r15
    4180:	8d b7       	in	r24, 0x3d	; 61
    4182:	9e b7       	in	r25, 0x3e	; 62
    4184:	40 97       	sbiw	r24, 0x10	; 16
    4186:	0f b6       	in	r0, 0x3f	; 63
    4188:	f8 94       	cli
    418a:	9e bf       	out	0x3e, r25	; 62
    418c:	0f be       	out	0x3f, r0	; 63
    418e:	8d bf       	out	0x3d, r24	; 61
    4190:	ed b7       	in	r30, 0x3d	; 61
    4192:	fe b7       	in	r31, 0x3e	; 62
    4194:	31 96       	adiw	r30, 0x01	; 1
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	9a 81       	ldd	r25, Y+2	; 0x02
    419a:	91 83       	std	Z+1, r25	; 0x01
    419c:	80 83       	st	Z, r24
    419e:	81 ef       	ldi	r24, 0xF1	; 241
    41a0:	92 e0       	ldi	r25, 0x02	; 2
    41a2:	93 83       	std	Z+3, r25	; 0x03
    41a4:	82 83       	std	Z+2, r24	; 0x02
    41a6:	35 83       	std	Z+5, r19	; 0x05
    41a8:	24 83       	std	Z+4, r18	; 0x04
    41aa:	57 83       	std	Z+7, r21	; 0x07
    41ac:	46 83       	std	Z+6, r20	; 0x06
    41ae:	71 87       	std	Z+9, r23	; 0x09
    41b0:	60 87       	std	Z+8, r22	; 0x08
    41b2:	b3 87       	std	Z+11, r27	; 0x0b
    41b4:	a2 87       	std	Z+10, r26	; 0x0a
    41b6:	15 87       	std	Z+13, r17	; 0x0d
    41b8:	04 87       	std	Z+12, r16	; 0x0c
    41ba:	f7 86       	std	Z+15, r15	; 0x0f
    41bc:	e6 86       	std	Z+14, r14	; 0x0e
    41be:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    41c2:	8d b7       	in	r24, 0x3d	; 61
    41c4:	9e b7       	in	r25, 0x3e	; 62
    41c6:	40 96       	adiw	r24, 0x10	; 16
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	f8 94       	cli
    41cc:	9e bf       	out	0x3e, r25	; 62
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	8d bf       	out	0x3d, r24	; 61
  return aux;
    41d2:	89 81       	ldd	r24, Y+1	; 0x01
    41d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    41d6:	2c 96       	adiw	r28, 0x0c	; 12
    41d8:	0f b6       	in	r0, 0x3f	; 63
    41da:	f8 94       	cli
    41dc:	de bf       	out	0x3e, r29	; 62
    41de:	0f be       	out	0x3f, r0	; 63
    41e0:	cd bf       	out	0x3d, r28	; 61
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	1f 91       	pop	r17
    41e8:	0f 91       	pop	r16
    41ea:	ff 90       	pop	r15
    41ec:	ef 90       	pop	r14
    41ee:	df 90       	pop	r13
    41f0:	cf 90       	pop	r12
    41f2:	bf 90       	pop	r11
    41f4:	af 90       	pop	r10
    41f6:	08 95       	ret

000041f8 <_ZN4Crtc7getDateEPtPhS1_S1_S1_S1_>:

/*==========================================================================
 FUNCTION:DS3231 driver
 PURPOSE:
 ---------------------------------------------------------------------------*/
bool Crtc::getDate(u16* year, u08* mon, u08* day, u08 *wday, u08* hour, u08* min) {
    41f8:	cf 92       	push	r12
    41fa:	df 92       	push	r13
    41fc:	ef 92       	push	r14
    41fe:	ff 92       	push	r15
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
    420c:	a0 97       	sbiw	r28, 0x20	; 32
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
    4218:	9c 8b       	std	Y+20, r25	; 0x14
    421a:	8b 8b       	std	Y+19, r24	; 0x13
    421c:	7e 8b       	std	Y+22, r23	; 0x16
    421e:	6d 8b       	std	Y+21, r22	; 0x15
    4220:	58 8f       	std	Y+24, r21	; 0x18
    4222:	4f 8b       	std	Y+23, r20	; 0x17
    4224:	3a 8f       	std	Y+26, r19	; 0x1a
    4226:	29 8f       	std	Y+25, r18	; 0x19
    4228:	1c 8f       	std	Y+28, r17	; 0x1c
    422a:	0b 8f       	std	Y+27, r16	; 0x1b
    422c:	fe 8e       	std	Y+30, r15	; 0x1e
    422e:	ed 8e       	std	Y+29, r14	; 0x1d
    4230:	d8 a2       	std	Y+32, r13	; 0x20
    4232:	cf 8e       	std	Y+31, r12	; 0x1f
  u08 buf[0x12];
  // send address
  buf[0] = 0x00;
    4234:	19 82       	std	Y+1, r1	; 0x01
  i2c->masterSend(rtc_id, 1, buf);
    4236:	eb 89       	ldd	r30, Y+19	; 0x13
    4238:	fc 89       	ldd	r31, Y+20	; 0x14
    423a:	81 81       	ldd	r24, Z+1	; 0x01
    423c:	92 81       	ldd	r25, Z+2	; 0x02
    423e:	eb 89       	ldd	r30, Y+19	; 0x13
    4240:	fc 89       	ldd	r31, Y+20	; 0x14
    4242:	20 81       	ld	r18, Z
    4244:	62 2f       	mov	r22, r18
    4246:	41 e0       	ldi	r20, 0x01	; 1
    4248:	9e 01       	movw	r18, r28
    424a:	2f 5f       	subi	r18, 0xFF	; 255
    424c:	3f 4f       	sbci	r19, 0xFF	; 255
    424e:	0e 94 4c 44 	call	0x8898	; 0x8898 <_ZN3I2C4CI2C10masterSendEhhPh>
  // get the data
  i2c->masterReceive(rtc_id, 7, buf);
    4252:	eb 89       	ldd	r30, Y+19	; 0x13
    4254:	fc 89       	ldd	r31, Y+20	; 0x14
    4256:	81 81       	ldd	r24, Z+1	; 0x01
    4258:	92 81       	ldd	r25, Z+2	; 0x02
    425a:	eb 89       	ldd	r30, Y+19	; 0x13
    425c:	fc 89       	ldd	r31, Y+20	; 0x14
    425e:	20 81       	ld	r18, Z
    4260:	62 2f       	mov	r22, r18
    4262:	47 e0       	ldi	r20, 0x07	; 7
    4264:	9e 01       	movw	r18, r28
    4266:	2f 5f       	subi	r18, 0xFF	; 255
    4268:	3f 4f       	sbci	r19, 0xFF	; 255
    426a:	0e 94 a0 44 	call	0x8940	; 0x8940 <_ZN3I2C4CI2C13masterReceiveEhhPh>

  //datetime.sec = BCD_TO_BIN (buf[0] & 0x7F);
  *min = BCD_TO_BIN (buf[1] & 0x7F);
    426e:	8a 81       	ldd	r24, Y+2	; 0x02
    4270:	48 2f       	mov	r20, r24
    4272:	4f 70       	andi	r20, 0x0F	; 15
    4274:	8a 81       	ldd	r24, Y+2	; 0x02
    4276:	88 2f       	mov	r24, r24
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	8f 77       	andi	r24, 0x7F	; 127
    427c:	90 70       	andi	r25, 0x00	; 0
    427e:	95 95       	asr	r25
    4280:	87 95       	ror	r24
    4282:	95 95       	asr	r25
    4284:	87 95       	ror	r24
    4286:	95 95       	asr	r25
    4288:	87 95       	ror	r24
    428a:	95 95       	asr	r25
    428c:	87 95       	ror	r24
    428e:	9c 01       	movw	r18, r24
    4290:	22 0f       	add	r18, r18
    4292:	33 1f       	adc	r19, r19
    4294:	c9 01       	movw	r24, r18
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	88 0f       	add	r24, r24
    429c:	99 1f       	adc	r25, r25
    429e:	82 0f       	add	r24, r18
    42a0:	93 1f       	adc	r25, r19
    42a2:	84 0f       	add	r24, r20
    42a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    42a6:	f8 a1       	ldd	r31, Y+32	; 0x20
    42a8:	80 83       	st	Z, r24
  *hour = BCD_TO_BIN (buf[2] & 0x3F);
    42aa:	8b 81       	ldd	r24, Y+3	; 0x03
    42ac:	48 2f       	mov	r20, r24
    42ae:	4f 70       	andi	r20, 0x0F	; 15
    42b0:	8b 81       	ldd	r24, Y+3	; 0x03
    42b2:	88 2f       	mov	r24, r24
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	8f 73       	andi	r24, 0x3F	; 63
    42b8:	90 70       	andi	r25, 0x00	; 0
    42ba:	95 95       	asr	r25
    42bc:	87 95       	ror	r24
    42be:	95 95       	asr	r25
    42c0:	87 95       	ror	r24
    42c2:	95 95       	asr	r25
    42c4:	87 95       	ror	r24
    42c6:	95 95       	asr	r25
    42c8:	87 95       	ror	r24
    42ca:	9c 01       	movw	r18, r24
    42cc:	22 0f       	add	r18, r18
    42ce:	33 1f       	adc	r19, r19
    42d0:	c9 01       	movw	r24, r18
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	82 0f       	add	r24, r18
    42dc:	93 1f       	adc	r25, r19
    42de:	84 0f       	add	r24, r20
    42e0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    42e2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    42e4:	80 83       	st	Z, r24
  //*wday = (buf[3]) & 0x7; //1--7
  *day = BCD_TO_BIN (buf[4] & 0x3F); //01--31
    42e6:	8d 81       	ldd	r24, Y+5	; 0x05
    42e8:	48 2f       	mov	r20, r24
    42ea:	4f 70       	andi	r20, 0x0F	; 15
    42ec:	8d 81       	ldd	r24, Y+5	; 0x05
    42ee:	88 2f       	mov	r24, r24
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	8f 73       	andi	r24, 0x3F	; 63
    42f4:	90 70       	andi	r25, 0x00	; 0
    42f6:	95 95       	asr	r25
    42f8:	87 95       	ror	r24
    42fa:	95 95       	asr	r25
    42fc:	87 95       	ror	r24
    42fe:	95 95       	asr	r25
    4300:	87 95       	ror	r24
    4302:	95 95       	asr	r25
    4304:	87 95       	ror	r24
    4306:	9c 01       	movw	r18, r24
    4308:	22 0f       	add	r18, r18
    430a:	33 1f       	adc	r19, r19
    430c:	c9 01       	movw	r24, r18
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	82 0f       	add	r24, r18
    4318:	93 1f       	adc	r25, r19
    431a:	84 0f       	add	r24, r20
    431c:	e9 8d       	ldd	r30, Y+25	; 0x19
    431e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4320:	80 83       	st	Z, r24
  *mon = BCD_TO_BIN (buf[5] & 0x1F);
    4322:	8e 81       	ldd	r24, Y+6	; 0x06
    4324:	48 2f       	mov	r20, r24
    4326:	4f 70       	andi	r20, 0x0F	; 15
    4328:	8e 81       	ldd	r24, Y+6	; 0x06
    432a:	88 2f       	mov	r24, r24
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	8f 71       	andi	r24, 0x1F	; 31
    4330:	90 70       	andi	r25, 0x00	; 0
    4332:	95 95       	asr	r25
    4334:	87 95       	ror	r24
    4336:	95 95       	asr	r25
    4338:	87 95       	ror	r24
    433a:	95 95       	asr	r25
    433c:	87 95       	ror	r24
    433e:	95 95       	asr	r25
    4340:	87 95       	ror	r24
    4342:	9c 01       	movw	r18, r24
    4344:	22 0f       	add	r18, r18
    4346:	33 1f       	adc	r19, r19
    4348:	c9 01       	movw	r24, r18
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	88 0f       	add	r24, r24
    4350:	99 1f       	adc	r25, r25
    4352:	82 0f       	add	r24, r18
    4354:	93 1f       	adc	r25, r19
    4356:	84 0f       	add	r24, r20
    4358:	ef 89       	ldd	r30, Y+23	; 0x17
    435a:	f8 8d       	ldd	r31, Y+24	; 0x18
    435c:	80 83       	st	Z, r24
  *year = BCD_TO_BIN (buf[6]) + 2000; /* byte*/
    435e:	8f 81       	ldd	r24, Y+7	; 0x07
    4360:	88 2f       	mov	r24, r24
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	ac 01       	movw	r20, r24
    4366:	4f 70       	andi	r20, 0x0F	; 15
    4368:	50 70       	andi	r21, 0x00	; 0
    436a:	8f 81       	ldd	r24, Y+7	; 0x07
    436c:	88 2f       	mov	r24, r24
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	95 95       	asr	r25
    4372:	87 95       	ror	r24
    4374:	95 95       	asr	r25
    4376:	87 95       	ror	r24
    4378:	95 95       	asr	r25
    437a:	87 95       	ror	r24
    437c:	95 95       	asr	r25
    437e:	87 95       	ror	r24
    4380:	9c 01       	movw	r18, r24
    4382:	22 0f       	add	r18, r18
    4384:	33 1f       	adc	r19, r19
    4386:	c9 01       	movw	r24, r18
    4388:	88 0f       	add	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	82 0f       	add	r24, r18
    4392:	93 1f       	adc	r25, r19
    4394:	84 0f       	add	r24, r20
    4396:	95 1f       	adc	r25, r21
    4398:	80 53       	subi	r24, 0x30	; 48
    439a:	98 4f       	sbci	r25, 0xF8	; 248
    439c:	ed 89       	ldd	r30, Y+21	; 0x15
    439e:	fe 89       	ldd	r31, Y+22	; 0x16
    43a0:	91 83       	std	Z+1, r25	; 0x01
    43a2:	80 83       	st	Z, r24
  return true;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
}
    43a6:	a0 96       	adiw	r28, 0x20	; 32
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	f8 94       	cli
    43ac:	de bf       	out	0x3e, r29	; 62
    43ae:	0f be       	out	0x3f, r0	; 63
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	cf 91       	pop	r28
    43b4:	df 91       	pop	r29
    43b6:	1f 91       	pop	r17
    43b8:	0f 91       	pop	r16
    43ba:	ff 90       	pop	r15
    43bc:	ef 90       	pop	r14
    43be:	df 90       	pop	r13
    43c0:	cf 90       	pop	r12
    43c2:	08 95       	ret

000043c4 <_ZN7CServerC2EP6CModem>:

extern Crtc rtc;

#define MAX_SERVER_STR_LEN	128

CServer::CServer(CModem *_modem) {
    43c4:	df 93       	push	r29
    43c6:	cf 93       	push	r28
    43c8:	00 d0       	rcall	.+0      	; 0x43ca <_ZN7CServerC2EP6CModem+0x6>
    43ca:	00 d0       	rcall	.+0      	; 0x43cc <_ZN7CServerC2EP6CModem+0x8>
    43cc:	cd b7       	in	r28, 0x3d	; 61
    43ce:	de b7       	in	r29, 0x3e	; 62
    43d0:	9a 83       	std	Y+2, r25	; 0x02
    43d2:	89 83       	std	Y+1, r24	; 0x01
    43d4:	7c 83       	std	Y+4, r23	; 0x04
    43d6:	6b 83       	std	Y+3, r22	; 0x03
  modem = _modem;
    43d8:	e9 81       	ldd	r30, Y+1	; 0x01
    43da:	fa 81       	ldd	r31, Y+2	; 0x02
    43dc:	8b 81       	ldd	r24, Y+3	; 0x03
    43de:	9c 81       	ldd	r25, Y+4	; 0x04
    43e0:	92 83       	std	Z+2, r25	; 0x02
    43e2:	81 83       	std	Z+1, r24	; 0x01
}
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <_ZN7CServerC1EP6CModem>:

extern Crtc rtc;

#define MAX_SERVER_STR_LEN	128

CServer::CServer(CModem *_modem) {
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <_ZN7CServerC1EP6CModem+0x6>
    43f8:	00 d0       	rcall	.+0      	; 0x43fa <_ZN7CServerC1EP6CModem+0x8>
    43fa:	cd b7       	in	r28, 0x3d	; 61
    43fc:	de b7       	in	r29, 0x3e	; 62
    43fe:	9a 83       	std	Y+2, r25	; 0x02
    4400:	89 83       	std	Y+1, r24	; 0x01
    4402:	7c 83       	std	Y+4, r23	; 0x04
    4404:	6b 83       	std	Y+3, r22	; 0x03
  modem = _modem;
    4406:	e9 81       	ldd	r30, Y+1	; 0x01
    4408:	fa 81       	ldd	r31, Y+2	; 0x02
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	9c 81       	ldd	r25, Y+4	; 0x04
    440e:	92 83       	std	Z+2, r25	; 0x02
    4410:	81 83       	std	Z+1, r24	; 0x01
}
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	cf 91       	pop	r28
    441c:	df 91       	pop	r29
    441e:	08 95       	ret

00004420 <_ZN7CServer9SetSiteNrEh>:

void CServer::SetSiteNr(u08 site_nr) {
    4420:	df 93       	push	r29
    4422:	cf 93       	push	r28
    4424:	00 d0       	rcall	.+0      	; 0x4426 <_ZN7CServer9SetSiteNrEh+0x6>
    4426:	0f 92       	push	r0
    4428:	cd b7       	in	r28, 0x3d	; 61
    442a:	de b7       	in	r29, 0x3e	; 62
    442c:	9a 83       	std	Y+2, r25	; 0x02
    442e:	89 83       	std	Y+1, r24	; 0x01
    4430:	6b 83       	std	Y+3, r22	; 0x03
  SiteNr = site_nr;
    4432:	e9 81       	ldd	r30, Y+1	; 0x01
    4434:	fa 81       	ldd	r31, Y+2	; 0x02
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	80 83       	st	Z, r24
}
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	cf 91       	pop	r28
    4442:	df 91       	pop	r29
    4444:	08 95       	ret

00004446 <_ZN7CServer10CompileStrEPcm6eEvent>:
  c08 strToServer[MAX_SERVER_STR_LEN];
  CompileStr(strToServer, tagNumber, DURESS);
  return (modem->DataToServer(strToServer));
}

bool CServer::CompileStr(c08* strToServer, u32 tagNumber, eEvent Event) {
    4446:	0f 93       	push	r16
    4448:	df 93       	push	r29
    444a:	cf 93       	push	r28
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	cb 54       	subi	r28, 0x4B	; 75
    4452:	d0 40       	sbci	r29, 0x00	; 0
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	fe 01       	movw	r30, r28
    4460:	ef 5b       	subi	r30, 0xBF	; 191
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	91 83       	std	Z+1, r25	; 0x01
    4466:	80 83       	st	Z, r24
    4468:	fe 01       	movw	r30, r28
    446a:	ed 5b       	subi	r30, 0xBD	; 189
    446c:	ff 4f       	sbci	r31, 0xFF	; 255
    446e:	71 83       	std	Z+1, r23	; 0x01
    4470:	60 83       	st	Z, r22
    4472:	fe 01       	movw	r30, r28
    4474:	eb 5b       	subi	r30, 0xBB	; 187
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	20 83       	st	Z, r18
    447a:	31 83       	std	Z+1, r19	; 0x01
    447c:	42 83       	std	Z+2, r20	; 0x02
    447e:	53 83       	std	Z+3, r21	; 0x03
    4480:	fe 01       	movw	r30, r28
    4482:	e7 5b       	subi	r30, 0xB7	; 183
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	00 83       	st	Z, r16

  c08 str[64];
  sprintf(str, "* U(%06d)U", SiteNr);
    4488:	fe 01       	movw	r30, r28
    448a:	ef 5b       	subi	r30, 0xBF	; 191
    448c:	ff 4f       	sbci	r31, 0xFF	; 255
    448e:	01 90       	ld	r0, Z+
    4490:	f0 81       	ld	r31, Z
    4492:	e0 2d       	mov	r30, r0
    4494:	80 81       	ld	r24, Z
    4496:	28 2f       	mov	r18, r24
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	00 d0       	rcall	.+0      	; 0x449c <_ZN7CServer10CompileStrEPcm6eEvent+0x56>
    449c:	00 d0       	rcall	.+0      	; 0x449e <_ZN7CServer10CompileStrEPcm6eEvent+0x58>
    449e:	00 d0       	rcall	.+0      	; 0x44a0 <_ZN7CServer10CompileStrEPcm6eEvent+0x5a>
    44a0:	ed b7       	in	r30, 0x3d	; 61
    44a2:	fe b7       	in	r31, 0x3e	; 62
    44a4:	31 96       	adiw	r30, 0x01	; 1
    44a6:	ce 01       	movw	r24, r28
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	80 83       	st	Z, r24
    44ae:	8d e0       	ldi	r24, 0x0D	; 13
    44b0:	93 e0       	ldi	r25, 0x03	; 3
    44b2:	93 83       	std	Z+3, r25	; 0x03
    44b4:	82 83       	std	Z+2, r24	; 0x02
    44b6:	35 83       	std	Z+5, r19	; 0x05
    44b8:	24 83       	std	Z+4, r18	; 0x04
    44ba:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    44be:	2d b7       	in	r18, 0x3d	; 61
    44c0:	3e b7       	in	r19, 0x3e	; 62
    44c2:	2a 5f       	subi	r18, 0xFA	; 250
    44c4:	3f 4f       	sbci	r19, 0xFF	; 255
    44c6:	0f b6       	in	r0, 0x3f	; 63
    44c8:	f8 94       	cli
    44ca:	3e bf       	out	0x3e, r19	; 62
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	2d bf       	out	0x3d, r18	; 61
  strcpy(strToServer, str);
    44d0:	fe 01       	movw	r30, r28
    44d2:	ed 5b       	subi	r30, 0xBD	; 189
    44d4:	ff 4f       	sbci	r31, 0xFF	; 255
    44d6:	80 81       	ld	r24, Z
    44d8:	91 81       	ldd	r25, Z+1	; 0x01
    44da:	9e 01       	movw	r18, r28
    44dc:	2f 5f       	subi	r18, 0xFF	; 255
    44de:	3f 4f       	sbci	r19, 0xFF	; 255
    44e0:	b9 01       	movw	r22, r18
    44e2:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
  sprintf(str, " R(%06d)R", (u16) tagNumber);
    44e6:	fe 01       	movw	r30, r28
    44e8:	eb 5b       	subi	r30, 0xBB	; 187
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	20 81       	ld	r18, Z
    44ee:	31 81       	ldd	r19, Z+1	; 0x01
    44f0:	00 d0       	rcall	.+0      	; 0x44f2 <_ZN7CServer10CompileStrEPcm6eEvent+0xac>
    44f2:	00 d0       	rcall	.+0      	; 0x44f4 <_ZN7CServer10CompileStrEPcm6eEvent+0xae>
    44f4:	00 d0       	rcall	.+0      	; 0x44f6 <_ZN7CServer10CompileStrEPcm6eEvent+0xb0>
    44f6:	ed b7       	in	r30, 0x3d	; 61
    44f8:	fe b7       	in	r31, 0x3e	; 62
    44fa:	31 96       	adiw	r30, 0x01	; 1
    44fc:	ce 01       	movw	r24, r28
    44fe:	01 96       	adiw	r24, 0x01	; 1
    4500:	91 83       	std	Z+1, r25	; 0x01
    4502:	80 83       	st	Z, r24
    4504:	88 e1       	ldi	r24, 0x18	; 24
    4506:	93 e0       	ldi	r25, 0x03	; 3
    4508:	93 83       	std	Z+3, r25	; 0x03
    450a:	82 83       	std	Z+2, r24	; 0x02
    450c:	35 83       	std	Z+5, r19	; 0x05
    450e:	24 83       	std	Z+4, r18	; 0x04
    4510:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    4514:	8d b7       	in	r24, 0x3d	; 61
    4516:	9e b7       	in	r25, 0x3e	; 62
    4518:	06 96       	adiw	r24, 0x06	; 6
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	9e bf       	out	0x3e, r25	; 62
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	8d bf       	out	0x3d, r24	; 61
  strcat(strToServer, str);
    4524:	fe 01       	movw	r30, r28
    4526:	ed 5b       	subi	r30, 0xBD	; 189
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	80 81       	ld	r24, Z
    452c:	91 81       	ldd	r25, Z+1	; 0x01
    452e:	9e 01       	movw	r18, r28
    4530:	2f 5f       	subi	r18, 0xFF	; 255
    4532:	3f 4f       	sbci	r19, 0xFF	; 255
    4534:	b9 01       	movw	r22, r18
    4536:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
  sprintf(str, " T(%s)T",rtc.getTimestamp());
    453a:	8c ea       	ldi	r24, 0xAC	; 172
    453c:	99 e0       	ldi	r25, 0x09	; 9
    453e:	0e 94 72 20 	call	0x40e4	; 0x40e4 <_ZN4Crtc12getTimestampEv>
    4542:	9c 01       	movw	r18, r24
    4544:	00 d0       	rcall	.+0      	; 0x4546 <_ZN7CServer10CompileStrEPcm6eEvent+0x100>
    4546:	00 d0       	rcall	.+0      	; 0x4548 <_ZN7CServer10CompileStrEPcm6eEvent+0x102>
    4548:	00 d0       	rcall	.+0      	; 0x454a <_ZN7CServer10CompileStrEPcm6eEvent+0x104>
    454a:	ed b7       	in	r30, 0x3d	; 61
    454c:	fe b7       	in	r31, 0x3e	; 62
    454e:	31 96       	adiw	r30, 0x01	; 1
    4550:	ce 01       	movw	r24, r28
    4552:	01 96       	adiw	r24, 0x01	; 1
    4554:	91 83       	std	Z+1, r25	; 0x01
    4556:	80 83       	st	Z, r24
    4558:	82 e2       	ldi	r24, 0x22	; 34
    455a:	93 e0       	ldi	r25, 0x03	; 3
    455c:	93 83       	std	Z+3, r25	; 0x03
    455e:	82 83       	std	Z+2, r24	; 0x02
    4560:	35 83       	std	Z+5, r19	; 0x05
    4562:	24 83       	std	Z+4, r18	; 0x04
    4564:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    4568:	2d b7       	in	r18, 0x3d	; 61
    456a:	3e b7       	in	r19, 0x3e	; 62
    456c:	2a 5f       	subi	r18, 0xFA	; 250
    456e:	3f 4f       	sbci	r19, 0xFF	; 255
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	3e bf       	out	0x3e, r19	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	2d bf       	out	0x3d, r18	; 61
  strcat(strToServer, str);
    457a:	fe 01       	movw	r30, r28
    457c:	ed 5b       	subi	r30, 0xBD	; 189
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	80 81       	ld	r24, Z
    4582:	91 81       	ldd	r25, Z+1	; 0x01
    4584:	9e 01       	movw	r18, r28
    4586:	2f 5f       	subi	r18, 0xFF	; 255
    4588:	3f 4f       	sbci	r19, 0xFF	; 255
    458a:	b9 01       	movw	r22, r18
    458c:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>

  switch (Event) {
    4590:	fe 01       	movw	r30, r28
    4592:	e7 5b       	subi	r30, 0xB7	; 183
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	28 2f       	mov	r18, r24
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	2c 96       	adiw	r28, 0x0c	; 12
    459e:	3f af       	std	Y+63, r19	; 0x3f
    45a0:	2e af       	std	Y+62, r18	; 0x3e
    45a2:	2c 97       	sbiw	r28, 0x0c	; 12
    45a4:	2c 96       	adiw	r28, 0x0c	; 12
    45a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    45a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    45aa:	2c 97       	sbiw	r28, 0x0c	; 12
    45ac:	81 30       	cpi	r24, 0x01	; 1
    45ae:	91 05       	cpc	r25, r1
    45b0:	c1 f0       	breq	.+48     	; 0x45e2 <_ZN7CServer10CompileStrEPcm6eEvent+0x19c>
    45b2:	2c 96       	adiw	r28, 0x0c	; 12
    45b4:	2e ad       	ldd	r18, Y+62	; 0x3e
    45b6:	3f ad       	ldd	r19, Y+63	; 0x3f
    45b8:	2c 97       	sbiw	r28, 0x0c	; 12
    45ba:	22 30       	cpi	r18, 0x02	; 2
    45bc:	31 05       	cpc	r19, r1
    45be:	e1 f0       	breq	.+56     	; 0x45f8 <_ZN7CServer10CompileStrEPcm6eEvent+0x1b2>
    45c0:	2c 96       	adiw	r28, 0x0c	; 12
    45c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    45c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    45c6:	2c 97       	sbiw	r28, 0x0c	; 12
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	01 f5       	brne	.+64     	; 0x460c <_ZN7CServer10CompileStrEPcm6eEvent+0x1c6>
    case LOST:
      strcat(strToServer, " E(L)E");
    45cc:	fe 01       	movw	r30, r28
    45ce:	ed 5b       	subi	r30, 0xBD	; 189
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	80 81       	ld	r24, Z
    45d4:	91 81       	ldd	r25, Z+1	; 0x01
    45d6:	2a e2       	ldi	r18, 0x2A	; 42
    45d8:	33 e0       	ldi	r19, 0x03	; 3
    45da:	b9 01       	movw	r22, r18
    45dc:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
    45e0:	15 c0       	rjmp	.+42     	; 0x460c <_ZN7CServer10CompileStrEPcm6eEvent+0x1c6>
      break;
    case GAINED:
      strcat(strToServer, " E(G)E");
    45e2:	fe 01       	movw	r30, r28
    45e4:	ed 5b       	subi	r30, 0xBD	; 189
    45e6:	ff 4f       	sbci	r31, 0xFF	; 255
    45e8:	80 81       	ld	r24, Z
    45ea:	91 81       	ldd	r25, Z+1	; 0x01
    45ec:	21 e3       	ldi	r18, 0x31	; 49
    45ee:	33 e0       	ldi	r19, 0x03	; 3
    45f0:	b9 01       	movw	r22, r18
    45f2:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
    45f6:	0a c0       	rjmp	.+20     	; 0x460c <_ZN7CServer10CompileStrEPcm6eEvent+0x1c6>
      break;
    case DURESS:
      strcat(strToServer, " E(D)E");
    45f8:	fe 01       	movw	r30, r28
    45fa:	ed 5b       	subi	r30, 0xBD	; 189
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	80 81       	ld	r24, Z
    4600:	91 81       	ldd	r25, Z+1	; 0x01
    4602:	28 e3       	ldi	r18, 0x38	; 56
    4604:	33 e0       	ldi	r19, 0x03	; 3
    4606:	b9 01       	movw	r22, r18
    4608:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
      break;
    default:
      break;
  }
  strcat(strToServer, " #");
    460c:	fe 01       	movw	r30, r28
    460e:	ed 5b       	subi	r30, 0xBD	; 189
    4610:	ff 4f       	sbci	r31, 0xFF	; 255
    4612:	80 81       	ld	r24, Z
    4614:	91 81       	ldd	r25, Z+1	; 0x01
    4616:	2f e3       	ldi	r18, 0x3F	; 63
    4618:	33 e0       	ldi	r19, 0x03	; 3
    461a:	b9 01       	movw	r22, r18
    461c:	0e 94 a3 5b 	call	0xb746	; 0xb746 <strcat>
  return true;
    4620:	81 e0       	ldi	r24, 0x01	; 1
}
    4622:	c5 5b       	subi	r28, 0xB5	; 181
    4624:	df 4f       	sbci	r29, 0xFF	; 255
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	cd bf       	out	0x3d, r28	; 61
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	0f 91       	pop	r16
    4636:	08 95       	ret

00004638 <_ZN7CServer12SetTagDuressEm>:
  c08 strToServer[MAX_SERVER_STR_LEN];
  CompileStr(strToServer, tagNumber, LOST);
  return (modem->DataToServer(strToServer));
}

bool CServer::SetTagDuress(u32 tagNumber) {
    4638:	ef 92       	push	r14
    463a:	ff 92       	push	r15
    463c:	0f 93       	push	r16
    463e:	1f 93       	push	r17
    4640:	df 93       	push	r29
    4642:	cf 93       	push	r28
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	c6 58       	subi	r28, 0x86	; 134
    464a:	d0 40       	sbci	r29, 0x00	; 0
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	f8 94       	cli
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	0f be       	out	0x3f, r0	; 63
    4654:	cd bf       	out	0x3d, r28	; 61
    4656:	fe 01       	movw	r30, r28
    4658:	ef 57       	subi	r30, 0x7F	; 127
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
    4660:	fe 01       	movw	r30, r28
    4662:	ed 57       	subi	r30, 0x7D	; 125
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	40 83       	st	Z, r20
    4668:	51 83       	std	Z+1, r21	; 0x01
    466a:	62 83       	std	Z+2, r22	; 0x02
    466c:	73 83       	std	Z+3, r23	; 0x03

  c08 strToServer[MAX_SERVER_STR_LEN];
  CompileStr(strToServer, tagNumber, DURESS);
    466e:	fe 01       	movw	r30, r28
    4670:	ef 57       	subi	r30, 0x7F	; 127
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	80 81       	ld	r24, Z
    4676:	91 81       	ldd	r25, Z+1	; 0x01
    4678:	fe 01       	movw	r30, r28
    467a:	ed 57       	subi	r30, 0x7D	; 125
    467c:	ff 4f       	sbci	r31, 0xFF	; 255
    467e:	e0 80       	ld	r14, Z
    4680:	f1 80       	ldd	r15, Z+1	; 0x01
    4682:	02 81       	ldd	r16, Z+2	; 0x02
    4684:	13 81       	ldd	r17, Z+3	; 0x03
    4686:	9e 01       	movw	r18, r28
    4688:	2f 5f       	subi	r18, 0xFF	; 255
    468a:	3f 4f       	sbci	r19, 0xFF	; 255
    468c:	b9 01       	movw	r22, r18
    468e:	a8 01       	movw	r20, r16
    4690:	97 01       	movw	r18, r14
    4692:	02 e0       	ldi	r16, 0x02	; 2
    4694:	0e 94 23 22 	call	0x4446	; 0x4446 <_ZN7CServer10CompileStrEPcm6eEvent>
  return (modem->DataToServer(strToServer));
    4698:	fe 01       	movw	r30, r28
    469a:	ef 57       	subi	r30, 0x7F	; 127
    469c:	ff 4f       	sbci	r31, 0xFF	; 255
    469e:	01 90       	ld	r0, Z+
    46a0:	f0 81       	ld	r31, Z
    46a2:	e0 2d       	mov	r30, r0
    46a4:	81 81       	ldd	r24, Z+1	; 0x01
    46a6:	92 81       	ldd	r25, Z+2	; 0x02
    46a8:	9e 01       	movw	r18, r28
    46aa:	2f 5f       	subi	r18, 0xFF	; 255
    46ac:	3f 4f       	sbci	r19, 0xFF	; 255
    46ae:	b9 01       	movw	r22, r18
    46b0:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN6CModem12DataToServerEPc>
}
    46b4:	ca 57       	subi	r28, 0x7A	; 122
    46b6:	df 4f       	sbci	r29, 0xFF	; 255
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	cf 91       	pop	r28
    46c4:	df 91       	pop	r29
    46c6:	1f 91       	pop	r17
    46c8:	0f 91       	pop	r16
    46ca:	ff 90       	pop	r15
    46cc:	ef 90       	pop	r14
    46ce:	08 95       	ret

000046d0 <_ZN7CServer14SetTagOutRangeEm>:
  c08 strToServer[MAX_SERVER_STR_LEN];
  CompileStr(strToServer, tagNumber, GAINED);
  return (modem->DataToServer(strToServer));
}

bool CServer::SetTagOutRange(u32 tagNumber) {
    46d0:	ef 92       	push	r14
    46d2:	ff 92       	push	r15
    46d4:	0f 93       	push	r16
    46d6:	1f 93       	push	r17
    46d8:	df 93       	push	r29
    46da:	cf 93       	push	r28
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	c6 58       	subi	r28, 0x86	; 134
    46e2:	d0 40       	sbci	r29, 0x00	; 0
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	fe 01       	movw	r30, r28
    46f0:	ef 57       	subi	r30, 0x7F	; 127
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	91 83       	std	Z+1, r25	; 0x01
    46f6:	80 83       	st	Z, r24
    46f8:	fe 01       	movw	r30, r28
    46fa:	ed 57       	subi	r30, 0x7D	; 125
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	40 83       	st	Z, r20
    4700:	51 83       	std	Z+1, r21	; 0x01
    4702:	62 83       	std	Z+2, r22	; 0x02
    4704:	73 83       	std	Z+3, r23	; 0x03

  c08 strToServer[MAX_SERVER_STR_LEN];
  CompileStr(strToServer, tagNumber, LOST);
    4706:	fe 01       	movw	r30, r28
    4708:	ef 57       	subi	r30, 0x7F	; 127
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	fe 01       	movw	r30, r28
    4712:	ed 57       	subi	r30, 0x7D	; 125
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	e0 80       	ld	r14, Z
    4718:	f1 80       	ldd	r15, Z+1	; 0x01
    471a:	02 81       	ldd	r16, Z+2	; 0x02
    471c:	13 81       	ldd	r17, Z+3	; 0x03
    471e:	9e 01       	movw	r18, r28
    4720:	2f 5f       	subi	r18, 0xFF	; 255
    4722:	3f 4f       	sbci	r19, 0xFF	; 255
    4724:	b9 01       	movw	r22, r18
    4726:	a8 01       	movw	r20, r16
    4728:	97 01       	movw	r18, r14
    472a:	00 e0       	ldi	r16, 0x00	; 0
    472c:	0e 94 23 22 	call	0x4446	; 0x4446 <_ZN7CServer10CompileStrEPcm6eEvent>
  return (modem->DataToServer(strToServer));
    4730:	fe 01       	movw	r30, r28
    4732:	ef 57       	subi	r30, 0x7F	; 127
    4734:	ff 4f       	sbci	r31, 0xFF	; 255
    4736:	01 90       	ld	r0, Z+
    4738:	f0 81       	ld	r31, Z
    473a:	e0 2d       	mov	r30, r0
    473c:	81 81       	ldd	r24, Z+1	; 0x01
    473e:	92 81       	ldd	r25, Z+2	; 0x02
    4740:	9e 01       	movw	r18, r28
    4742:	2f 5f       	subi	r18, 0xFF	; 255
    4744:	3f 4f       	sbci	r19, 0xFF	; 255
    4746:	b9 01       	movw	r22, r18
    4748:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN6CModem12DataToServerEPc>
}
    474c:	ca 57       	subi	r28, 0x7A	; 122
    474e:	df 4f       	sbci	r29, 0xFF	; 255
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
    475a:	cf 91       	pop	r28
    475c:	df 91       	pop	r29
    475e:	1f 91       	pop	r17
    4760:	0f 91       	pop	r16
    4762:	ff 90       	pop	r15
    4764:	ef 90       	pop	r14
    4766:	08 95       	ret

00004768 <_ZN7CServer13SetTagInRangeEm>:

void CServer::SetSiteNr(u08 site_nr) {
  SiteNr = site_nr;
}

bool CServer::SetTagInRange(u32 tagNumber) {
    4768:	ef 92       	push	r14
    476a:	ff 92       	push	r15
    476c:	0f 93       	push	r16
    476e:	1f 93       	push	r17
    4770:	df 93       	push	r29
    4772:	cf 93       	push	r28
    4774:	cd b7       	in	r28, 0x3d	; 61
    4776:	de b7       	in	r29, 0x3e	; 62
    4778:	c6 58       	subi	r28, 0x86	; 134
    477a:	d0 40       	sbci	r29, 0x00	; 0
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	f8 94       	cli
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	cd bf       	out	0x3d, r28	; 61
    4786:	fe 01       	movw	r30, r28
    4788:	ef 57       	subi	r30, 0x7F	; 127
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	91 83       	std	Z+1, r25	; 0x01
    478e:	80 83       	st	Z, r24
    4790:	fe 01       	movw	r30, r28
    4792:	ed 57       	subi	r30, 0x7D	; 125
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	40 83       	st	Z, r20
    4798:	51 83       	std	Z+1, r21	; 0x01
    479a:	62 83       	std	Z+2, r22	; 0x02
    479c:	73 83       	std	Z+3, r23	; 0x03

  c08 strToServer[MAX_SERVER_STR_LEN];
  CompileStr(strToServer, tagNumber, GAINED);
    479e:	fe 01       	movw	r30, r28
    47a0:	ef 57       	subi	r30, 0x7F	; 127
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	80 81       	ld	r24, Z
    47a6:	91 81       	ldd	r25, Z+1	; 0x01
    47a8:	fe 01       	movw	r30, r28
    47aa:	ed 57       	subi	r30, 0x7D	; 125
    47ac:	ff 4f       	sbci	r31, 0xFF	; 255
    47ae:	e0 80       	ld	r14, Z
    47b0:	f1 80       	ldd	r15, Z+1	; 0x01
    47b2:	02 81       	ldd	r16, Z+2	; 0x02
    47b4:	13 81       	ldd	r17, Z+3	; 0x03
    47b6:	9e 01       	movw	r18, r28
    47b8:	2f 5f       	subi	r18, 0xFF	; 255
    47ba:	3f 4f       	sbci	r19, 0xFF	; 255
    47bc:	b9 01       	movw	r22, r18
    47be:	a8 01       	movw	r20, r16
    47c0:	97 01       	movw	r18, r14
    47c2:	01 e0       	ldi	r16, 0x01	; 1
    47c4:	0e 94 23 22 	call	0x4446	; 0x4446 <_ZN7CServer10CompileStrEPcm6eEvent>
  return (modem->DataToServer(strToServer));
    47c8:	fe 01       	movw	r30, r28
    47ca:	ef 57       	subi	r30, 0x7F	; 127
    47cc:	ff 4f       	sbci	r31, 0xFF	; 255
    47ce:	01 90       	ld	r0, Z+
    47d0:	f0 81       	ld	r31, Z
    47d2:	e0 2d       	mov	r30, r0
    47d4:	81 81       	ldd	r24, Z+1	; 0x01
    47d6:	92 81       	ldd	r25, Z+2	; 0x02
    47d8:	9e 01       	movw	r18, r28
    47da:	2f 5f       	subi	r18, 0xFF	; 255
    47dc:	3f 4f       	sbci	r19, 0xFF	; 255
    47de:	b9 01       	movw	r22, r18
    47e0:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN6CModem12DataToServerEPc>
}
    47e4:	ca 57       	subi	r28, 0x7A	; 122
    47e6:	df 4f       	sbci	r29, 0xFF	; 255
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	cd bf       	out	0x3d, r28	; 61
    47f2:	cf 91       	pop	r28
    47f4:	df 91       	pop	r29
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	ff 90       	pop	r15
    47fc:	ef 90       	pop	r14
    47fe:	08 95       	ret

00004800 <_ZL12__iCliRetValv>:
{
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
    4800:	df 93       	push	r29
    4802:	cf 93       	push	r28
    4804:	cd b7       	in	r28, 0x3d	; 61
    4806:	de b7       	in	r29, 0x3e	; 62
{
    cli();
    4808:	f8 94       	cli
    return 1;
    480a:	81 e0       	ldi	r24, 0x01	; 1
}
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	08 95       	ret

00004812 <_ZL10__iRestorePKh>:
    cli();
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
    4812:	df 93       	push	r29
    4814:	cf 93       	push	r28
    4816:	00 d0       	rcall	.+0      	; 0x4818 <_ZL10__iRestorePKh+0x6>
    4818:	cd b7       	in	r28, 0x3d	; 61
    481a:	de b7       	in	r29, 0x3e	; 62
    481c:	9a 83       	std	Y+2, r25	; 0x02
    481e:	89 83       	std	Y+1, r24	; 0x01
{
    SREG = *__s;
    4820:	ef e5       	ldi	r30, 0x5F	; 95
    4822:	f0 e0       	ldi	r31, 0x00	; 0
    4824:	a9 81       	ldd	r26, Y+1	; 0x01
    4826:	ba 81       	ldd	r27, Y+2	; 0x02
    4828:	8c 91       	ld	r24, X
    482a:	80 83       	st	Z, r24
    __asm__ volatile ("" ::: "memory");
}
    482c:	0f 90       	pop	r0
    482e:	0f 90       	pop	r0
    4830:	cf 91       	pop	r28
    4832:	df 91       	pop	r29
    4834:	08 95       	ret

00004836 <_ZN11CCONTROLLER11CController14signalsServiceEv>:
      }
    }
  }

  /****************************************************************************************/
  void CController::signalsService(void) {
    4836:	ef 92       	push	r14
    4838:	ff 92       	push	r15
    483a:	0f 93       	push	r16
    483c:	1f 93       	push	r17
    483e:	df 93       	push	r29
    4840:	cf 93       	push	r28
    4842:	cd b7       	in	r28, 0x3d	; 61
    4844:	de b7       	in	r29, 0x3e	; 62
    4846:	28 97       	sbiw	r28, 0x08	; 8
    4848:	0f b6       	in	r0, 0x3f	; 63
    484a:	f8 94       	cli
    484c:	de bf       	out	0x3e, r29	; 62
    484e:	0f be       	out	0x3f, r0	; 63
    4850:	cd bf       	out	0x3d, r28	; 61
    4852:	9d 83       	std	Y+5, r25	; 0x05
    4854:	8c 83       	std	Y+4, r24	; 0x04
    u08 i;
    for (i = 0; i < NUM_OF_SIGNALS; i++) {
    4856:	1a 82       	std	Y+2, r1	; 0x02
    4858:	5c c1       	rjmp	.+696    	; 0x4b12 <_ZN11CCONTROLLER11CController14signalsServiceEv+0x2dc>
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    485a:	ef e5       	ldi	r30, 0x5F	; 95
    485c:	f0 e0       	ldi	r31, 0x00	; 0
    485e:	80 81       	ld	r24, Z
    4860:	8b 83       	std	Y+3, r24	; 0x03
    4862:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    4866:	89 83       	std	Y+1, r24	; 0x01
    4868:	92 c0       	rjmp	.+292    	; 0x498e <_ZN11CCONTROLLER11CController14signalsServiceEv+0x158>
        if (timer) {
    486a:	8c 81       	ldd	r24, Y+4	; 0x04
    486c:	9d 81       	ldd	r25, Y+5	; 0x05
    486e:	fc 01       	movw	r30, r24
    4870:	ed 5b       	subi	r30, 0xBD	; 189
    4872:	ff 4f       	sbci	r31, 0xFF	; 255
    4874:	80 81       	ld	r24, Z
    4876:	91 81       	ldd	r25, Z+1	; 0x01
    4878:	a2 81       	ldd	r26, Z+2	; 0x02
    487a:	b3 81       	ldd	r27, Z+3	; 0x03
    487c:	18 86       	std	Y+8, r1	; 0x08
    487e:	00 97       	sbiw	r24, 0x00	; 0
    4880:	a1 05       	cpc	r26, r1
    4882:	b1 05       	cpc	r27, r1
    4884:	11 f0       	breq	.+4      	; 0x488a <_ZN11CCONTROLLER11CController14signalsServiceEv+0x54>
    4886:	21 e0       	ldi	r18, 0x01	; 1
    4888:	28 87       	std	Y+8, r18	; 0x08
    488a:	88 85       	ldd	r24, Y+8	; 0x08
    488c:	88 23       	and	r24, r24
    488e:	09 f4       	brne	.+2      	; 0x4892 <_ZN11CCONTROLLER11CController14signalsServiceEv+0x5c>
    4890:	7d c0       	rjmp	.+250    	; 0x498c <_ZN11CCONTROLLER11CController14signalsServiceEv+0x156>
          if (signal[i].timer < 0xFFFFFFFF && signal[i].state == SIG_PENDING) {
    4892:	8a 81       	ldd	r24, Y+2	; 0x02
    4894:	28 2f       	mov	r18, r24
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	4c 81       	ldd	r20, Y+4	; 0x04
    489a:	5d 81       	ldd	r21, Y+5	; 0x05
    489c:	c9 01       	movw	r24, r18
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	88 0f       	add	r24, r24
    48a4:	99 1f       	adc	r25, r25
    48a6:	88 0f       	add	r24, r24
    48a8:	99 1f       	adc	r25, r25
    48aa:	82 0f       	add	r24, r18
    48ac:	93 1f       	adc	r25, r19
    48ae:	84 0f       	add	r24, r20
    48b0:	95 1f       	adc	r25, r21
    48b2:	fc 01       	movw	r30, r24
    48b4:	3f 96       	adiw	r30, 0x0f	; 15
    48b6:	80 81       	ld	r24, Z
    48b8:	91 81       	ldd	r25, Z+1	; 0x01
    48ba:	a2 81       	ldd	r26, Z+2	; 0x02
    48bc:	b3 81       	ldd	r27, Z+3	; 0x03
    48be:	8f 3f       	cpi	r24, 0xFF	; 255
    48c0:	2f ef       	ldi	r18, 0xFF	; 255
    48c2:	92 07       	cpc	r25, r18
    48c4:	2f ef       	ldi	r18, 0xFF	; 255
    48c6:	a2 07       	cpc	r26, r18
    48c8:	2f ef       	ldi	r18, 0xFF	; 255
    48ca:	b2 07       	cpc	r27, r18
    48cc:	c1 f0       	breq	.+48     	; 0x48fe <_ZN11CCONTROLLER11CController14signalsServiceEv+0xc8>
    48ce:	8a 81       	ldd	r24, Y+2	; 0x02
    48d0:	28 2f       	mov	r18, r24
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	4c 81       	ldd	r20, Y+4	; 0x04
    48d6:	5d 81       	ldd	r21, Y+5	; 0x05
    48d8:	c9 01       	movw	r24, r18
    48da:	88 0f       	add	r24, r24
    48dc:	99 1f       	adc	r25, r25
    48de:	88 0f       	add	r24, r24
    48e0:	99 1f       	adc	r25, r25
    48e2:	88 0f       	add	r24, r24
    48e4:	99 1f       	adc	r25, r25
    48e6:	82 0f       	add	r24, r18
    48e8:	93 1f       	adc	r25, r19
    48ea:	84 0f       	add	r24, r20
    48ec:	95 1f       	adc	r25, r21
    48ee:	fc 01       	movw	r30, r24
    48f0:	73 96       	adiw	r30, 0x13	; 19
    48f2:	80 81       	ld	r24, Z
    48f4:	84 30       	cpi	r24, 0x04	; 4
    48f6:	19 f4       	brne	.+6      	; 0x48fe <_ZN11CCONTROLLER11CController14signalsServiceEv+0xc8>
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	8f 83       	std	Y+7, r24	; 0x07
    48fc:	01 c0       	rjmp	.+2      	; 0x4900 <_ZN11CCONTROLLER11CController14signalsServiceEv+0xca>
    48fe:	1f 82       	std	Y+7, r1	; 0x07
    4900:	8f 81       	ldd	r24, Y+7	; 0x07
    4902:	88 23       	and	r24, r24
    4904:	09 f4       	brne	.+2      	; 0x4908 <_ZN11CCONTROLLER11CController14signalsServiceEv+0xd2>
    4906:	42 c0       	rjmp	.+132    	; 0x498c <_ZN11CCONTROLLER11CController14signalsServiceEv+0x156>
            signal[i].timer += timer;
    4908:	8a 81       	ldd	r24, Y+2	; 0x02
    490a:	08 2f       	mov	r16, r24
    490c:	10 e0       	ldi	r17, 0x00	; 0
    490e:	8a 81       	ldd	r24, Y+2	; 0x02
    4910:	28 2f       	mov	r18, r24
    4912:	30 e0       	ldi	r19, 0x00	; 0
    4914:	4c 81       	ldd	r20, Y+4	; 0x04
    4916:	5d 81       	ldd	r21, Y+5	; 0x05
    4918:	c9 01       	movw	r24, r18
    491a:	88 0f       	add	r24, r24
    491c:	99 1f       	adc	r25, r25
    491e:	88 0f       	add	r24, r24
    4920:	99 1f       	adc	r25, r25
    4922:	88 0f       	add	r24, r24
    4924:	99 1f       	adc	r25, r25
    4926:	82 0f       	add	r24, r18
    4928:	93 1f       	adc	r25, r19
    492a:	84 0f       	add	r24, r20
    492c:	95 1f       	adc	r25, r21
    492e:	fc 01       	movw	r30, r24
    4930:	3f 96       	adiw	r30, 0x0f	; 15
    4932:	20 81       	ld	r18, Z
    4934:	31 81       	ldd	r19, Z+1	; 0x01
    4936:	42 81       	ldd	r20, Z+2	; 0x02
    4938:	53 81       	ldd	r21, Z+3	; 0x03
    493a:	8c 81       	ldd	r24, Y+4	; 0x04
    493c:	9d 81       	ldd	r25, Y+5	; 0x05
    493e:	fc 01       	movw	r30, r24
    4940:	ed 5b       	subi	r30, 0xBD	; 189
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	80 81       	ld	r24, Z
    4946:	91 81       	ldd	r25, Z+1	; 0x01
    4948:	a2 81       	ldd	r26, Z+2	; 0x02
    494a:	b3 81       	ldd	r27, Z+3	; 0x03
    494c:	28 0f       	add	r18, r24
    494e:	39 1f       	adc	r19, r25
    4950:	4a 1f       	adc	r20, r26
    4952:	5b 1f       	adc	r21, r27
    4954:	6c 81       	ldd	r22, Y+4	; 0x04
    4956:	7d 81       	ldd	r23, Y+5	; 0x05
    4958:	c8 01       	movw	r24, r16
    495a:	88 0f       	add	r24, r24
    495c:	99 1f       	adc	r25, r25
    495e:	88 0f       	add	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	88 0f       	add	r24, r24
    4964:	99 1f       	adc	r25, r25
    4966:	80 0f       	add	r24, r16
    4968:	91 1f       	adc	r25, r17
    496a:	86 0f       	add	r24, r22
    496c:	97 1f       	adc	r25, r23
    496e:	fc 01       	movw	r30, r24
    4970:	3f 96       	adiw	r30, 0x0f	; 15
    4972:	20 83       	st	Z, r18
    4974:	31 83       	std	Z+1, r19	; 0x01
    4976:	42 83       	std	Z+2, r20	; 0x02
    4978:	53 83       	std	Z+3, r21	; 0x03
            timer = 0;
    497a:	8c 81       	ldd	r24, Y+4	; 0x04
    497c:	9d 81       	ldd	r25, Y+5	; 0x05
    497e:	fc 01       	movw	r30, r24
    4980:	ed 5b       	subi	r30, 0xBD	; 189
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	10 82       	st	Z, r1
    4986:	11 82       	std	Z+1, r1	; 0x01
    4988:	12 82       	std	Z+2, r1	; 0x02
    498a:	13 82       	std	Z+3, r1	; 0x03

  /****************************************************************************************/
  void CController::signalsService(void) {
    u08 i;
    for (i = 0; i < NUM_OF_SIGNALS; i++) {
      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    498c:	19 82       	std	Y+1, r1	; 0x01
    498e:	89 81       	ldd	r24, Y+1	; 0x01
    4990:	88 23       	and	r24, r24
    4992:	09 f0       	breq	.+2      	; 0x4996 <_ZN11CCONTROLLER11CController14signalsServiceEv+0x160>
    4994:	6a cf       	rjmp	.-300    	; 0x486a <_ZN11CCONTROLLER11CController14signalsServiceEv+0x34>
          if (signal[i].timer < 0xFFFFFFFF && signal[i].state == SIG_PENDING) {
            signal[i].timer += timer;
            timer = 0;
          }
        }
      }
    4996:	ce 01       	movw	r24, r28
    4998:	03 96       	adiw	r24, 0x03	; 3
    499a:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
      if (signal[i].state == SIG_RESET) {
    499e:	8a 81       	ldd	r24, Y+2	; 0x02
    49a0:	28 2f       	mov	r18, r24
    49a2:	30 e0       	ldi	r19, 0x00	; 0
    49a4:	4c 81       	ldd	r20, Y+4	; 0x04
    49a6:	5d 81       	ldd	r21, Y+5	; 0x05
    49a8:	c9 01       	movw	r24, r18
    49aa:	88 0f       	add	r24, r24
    49ac:	99 1f       	adc	r25, r25
    49ae:	88 0f       	add	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	82 0f       	add	r24, r18
    49b8:	93 1f       	adc	r25, r19
    49ba:	84 0f       	add	r24, r20
    49bc:	95 1f       	adc	r25, r21
    49be:	fc 01       	movw	r30, r24
    49c0:	73 96       	adiw	r30, 0x13	; 19
    49c2:	80 81       	ld	r24, Z
    49c4:	83 30       	cpi	r24, 0x03	; 3
    49c6:	59 f5       	brne	.+86     	; 0x4a1e <_ZN11CCONTROLLER11CController14signalsServiceEv+0x1e8>
        signal[i].timer = 0;
    49c8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ca:	28 2f       	mov	r18, r24
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	4c 81       	ldd	r20, Y+4	; 0x04
    49d0:	5d 81       	ldd	r21, Y+5	; 0x05
    49d2:	c9 01       	movw	r24, r18
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	88 0f       	add	r24, r24
    49da:	99 1f       	adc	r25, r25
    49dc:	88 0f       	add	r24, r24
    49de:	99 1f       	adc	r25, r25
    49e0:	82 0f       	add	r24, r18
    49e2:	93 1f       	adc	r25, r19
    49e4:	84 0f       	add	r24, r20
    49e6:	95 1f       	adc	r25, r21
    49e8:	fc 01       	movw	r30, r24
    49ea:	3f 96       	adiw	r30, 0x0f	; 15
    49ec:	10 82       	st	Z, r1
    49ee:	11 82       	std	Z+1, r1	; 0x01
    49f0:	12 82       	std	Z+2, r1	; 0x02
    49f2:	13 82       	std	Z+3, r1	; 0x03
        signal[i].state = SIG_PENDING;
    49f4:	8a 81       	ldd	r24, Y+2	; 0x02
    49f6:	28 2f       	mov	r18, r24
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	4c 81       	ldd	r20, Y+4	; 0x04
    49fc:	5d 81       	ldd	r21, Y+5	; 0x05
    49fe:	c9 01       	movw	r24, r18
    4a00:	88 0f       	add	r24, r24
    4a02:	99 1f       	adc	r25, r25
    4a04:	88 0f       	add	r24, r24
    4a06:	99 1f       	adc	r25, r25
    4a08:	88 0f       	add	r24, r24
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	82 0f       	add	r24, r18
    4a0e:	93 1f       	adc	r25, r19
    4a10:	84 0f       	add	r24, r20
    4a12:	95 1f       	adc	r25, r21
    4a14:	fc 01       	movw	r30, r24
    4a16:	73 96       	adiw	r30, 0x13	; 19
    4a18:	84 e0       	ldi	r24, 0x04	; 4
    4a1a:	80 83       	st	Z, r24
    4a1c:	77 c0       	rjmp	.+238    	; 0x4b0c <_ZN11CCONTROLLER11CController14signalsServiceEv+0x2d6>
      } else if (signal[i].state == SIG_STOP) {
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	28 2f       	mov	r18, r24
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	4c 81       	ldd	r20, Y+4	; 0x04
    4a26:	5d 81       	ldd	r21, Y+5	; 0x05
    4a28:	c9 01       	movw	r24, r18
    4a2a:	88 0f       	add	r24, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	88 0f       	add	r24, r24
    4a30:	99 1f       	adc	r25, r25
    4a32:	88 0f       	add	r24, r24
    4a34:	99 1f       	adc	r25, r25
    4a36:	82 0f       	add	r24, r18
    4a38:	93 1f       	adc	r25, r19
    4a3a:	84 0f       	add	r24, r20
    4a3c:	95 1f       	adc	r25, r21
    4a3e:	fc 01       	movw	r30, r24
    4a40:	73 96       	adiw	r30, 0x13	; 19
    4a42:	80 81       	ld	r24, Z
    4a44:	85 30       	cpi	r24, 0x05	; 5
    4a46:	b9 f4       	brne	.+46     	; 0x4a76 <_ZN11CCONTROLLER11CController14signalsServiceEv+0x240>
        signal[i].timer = 0;
    4a48:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4a:	28 2f       	mov	r18, r24
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	4c 81       	ldd	r20, Y+4	; 0x04
    4a50:	5d 81       	ldd	r21, Y+5	; 0x05
    4a52:	c9 01       	movw	r24, r18
    4a54:	88 0f       	add	r24, r24
    4a56:	99 1f       	adc	r25, r25
    4a58:	88 0f       	add	r24, r24
    4a5a:	99 1f       	adc	r25, r25
    4a5c:	88 0f       	add	r24, r24
    4a5e:	99 1f       	adc	r25, r25
    4a60:	82 0f       	add	r24, r18
    4a62:	93 1f       	adc	r25, r19
    4a64:	84 0f       	add	r24, r20
    4a66:	95 1f       	adc	r25, r21
    4a68:	fc 01       	movw	r30, r24
    4a6a:	3f 96       	adiw	r30, 0x0f	; 15
    4a6c:	10 82       	st	Z, r1
    4a6e:	11 82       	std	Z+1, r1	; 0x01
    4a70:	12 82       	std	Z+2, r1	; 0x02
    4a72:	13 82       	std	Z+3, r1	; 0x03
    4a74:	4b c0       	rjmp	.+150    	; 0x4b0c <_ZN11CCONTROLLER11CController14signalsServiceEv+0x2d6>
      } else if (signal[i].timer > signal[i].period) {
    4a76:	8a 81       	ldd	r24, Y+2	; 0x02
    4a78:	28 2f       	mov	r18, r24
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	4c 81       	ldd	r20, Y+4	; 0x04
    4a7e:	5d 81       	ldd	r21, Y+5	; 0x05
    4a80:	c9 01       	movw	r24, r18
    4a82:	88 0f       	add	r24, r24
    4a84:	99 1f       	adc	r25, r25
    4a86:	88 0f       	add	r24, r24
    4a88:	99 1f       	adc	r25, r25
    4a8a:	88 0f       	add	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	82 0f       	add	r24, r18
    4a90:	93 1f       	adc	r25, r19
    4a92:	84 0f       	add	r24, r20
    4a94:	95 1f       	adc	r25, r21
    4a96:	fc 01       	movw	r30, r24
    4a98:	3f 96       	adiw	r30, 0x0f	; 15
    4a9a:	e0 80       	ld	r14, Z
    4a9c:	f1 80       	ldd	r15, Z+1	; 0x01
    4a9e:	02 81       	ldd	r16, Z+2	; 0x02
    4aa0:	13 81       	ldd	r17, Z+3	; 0x03
    4aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa4:	28 2f       	mov	r18, r24
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	4c 81       	ldd	r20, Y+4	; 0x04
    4aaa:	5d 81       	ldd	r21, Y+5	; 0x05
    4aac:	c9 01       	movw	r24, r18
    4aae:	88 0f       	add	r24, r24
    4ab0:	99 1f       	adc	r25, r25
    4ab2:	88 0f       	add	r24, r24
    4ab4:	99 1f       	adc	r25, r25
    4ab6:	88 0f       	add	r24, r24
    4ab8:	99 1f       	adc	r25, r25
    4aba:	82 0f       	add	r24, r18
    4abc:	93 1f       	adc	r25, r19
    4abe:	84 0f       	add	r24, r20
    4ac0:	95 1f       	adc	r25, r21
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	3b 96       	adiw	r30, 0x0b	; 11
    4ac6:	80 81       	ld	r24, Z
    4ac8:	91 81       	ldd	r25, Z+1	; 0x01
    4aca:	a2 81       	ldd	r26, Z+2	; 0x02
    4acc:	b3 81       	ldd	r27, Z+3	; 0x03
    4ace:	1e 82       	std	Y+6, r1	; 0x06
    4ad0:	8e 15       	cp	r24, r14
    4ad2:	9f 05       	cpc	r25, r15
    4ad4:	a0 07       	cpc	r26, r16
    4ad6:	b1 07       	cpc	r27, r17
    4ad8:	10 f4       	brcc	.+4      	; 0x4ade <_ZN11CCONTROLLER11CController14signalsServiceEv+0x2a8>
    4ada:	21 e0       	ldi	r18, 0x01	; 1
    4adc:	2e 83       	std	Y+6, r18	; 0x06
    4ade:	8e 81       	ldd	r24, Y+6	; 0x06
    4ae0:	88 23       	and	r24, r24
    4ae2:	a1 f0       	breq	.+40     	; 0x4b0c <_ZN11CCONTROLLER11CController14signalsServiceEv+0x2d6>
        signal[i].state = SIG_TRIGGERED;
    4ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae6:	28 2f       	mov	r18, r24
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	4c 81       	ldd	r20, Y+4	; 0x04
    4aec:	5d 81       	ldd	r21, Y+5	; 0x05
    4aee:	c9 01       	movw	r24, r18
    4af0:	88 0f       	add	r24, r24
    4af2:	99 1f       	adc	r25, r25
    4af4:	88 0f       	add	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	88 0f       	add	r24, r24
    4afa:	99 1f       	adc	r25, r25
    4afc:	82 0f       	add	r24, r18
    4afe:	93 1f       	adc	r25, r19
    4b00:	84 0f       	add	r24, r20
    4b02:	95 1f       	adc	r25, r21
    4b04:	fc 01       	movw	r30, r24
    4b06:	73 96       	adiw	r30, 0x13	; 19
    4b08:	82 e0       	ldi	r24, 0x02	; 2
    4b0a:	80 83       	st	Z, r24
  }

  /****************************************************************************************/
  void CController::signalsService(void) {
    u08 i;
    for (i = 0; i < NUM_OF_SIGNALS; i++) {
    4b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b0e:	8f 5f       	subi	r24, 0xFF	; 255
    4b10:	8a 83       	std	Y+2, r24	; 0x02
    4b12:	8a 81       	ldd	r24, Y+2	; 0x02
    4b14:	82 30       	cpi	r24, 0x02	; 2
    4b16:	08 f4       	brcc	.+2      	; 0x4b1a <_ZN11CCONTROLLER11CController14signalsServiceEv+0x2e4>
    4b18:	a0 ce       	rjmp	.-704    	; 0x485a <_ZN11CCONTROLLER11CController14signalsServiceEv+0x24>
        signal[i].timer = 0;
      } else if (signal[i].timer > signal[i].period) {
        signal[i].state = SIG_TRIGGERED;
      }
    }
  }
    4b1a:	28 96       	adiw	r28, 0x08	; 8
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	cf 91       	pop	r28
    4b28:	df 91       	pop	r29
    4b2a:	1f 91       	pop	r17
    4b2c:	0f 91       	pop	r16
    4b2e:	ff 90       	pop	r15
    4b30:	ef 90       	pop	r14
    4b32:	08 95       	ret

00004b34 <_Z4menuv>:
  }
  modem->smstx_en = eeprom_read_byte(&EEsmsEnable);

}
/****************************************************************************************/
void menu(void) {
    4b34:	df 93       	push	r29
    4b36:	cf 93       	push	r28
    4b38:	cd b7       	in	r28, 0x3d	; 61
    4b3a:	de b7       	in	r29, 0x3e	; 62
  DbgUart.sendStr_P(PSTR("\n\n\r\t\tMENU"));
    4b3c:	2e e4       	ldi	r18, 0x4E	; 78
    4b3e:	39 e0       	ldi	r19, 0x09	; 9
    4b40:	89 ee       	ldi	r24, 0xE9	; 233
    4b42:	94 e0       	ldi	r25, 0x04	; 4
    4b44:	b9 01       	movw	r22, r18
    4b46:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rt\t: Display Tags Found")));
    4b4a:	25 e3       	ldi	r18, 0x35	; 53
    4b4c:	39 e0       	ldi	r19, 0x09	; 9
    4b4e:	89 ee       	ldi	r24, 0xE9	; 233
    4b50:	94 e0       	ldi	r25, 0x04	; 4
    4b52:	b9 01       	movw	r22, r18
    4b54:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rq\t: GetSignalQuality")));
    4b58:	2e e1       	ldi	r18, 0x1E	; 30
    4b5a:	39 e0       	ldi	r19, 0x09	; 9
    4b5c:	89 ee       	ldi	r24, 0xE9	; 233
    4b5e:	94 e0       	ldi	r25, 0x04	; 4
    4b60:	b9 01       	movw	r22, r18
    4b62:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\ri\t: Get the IP status")));
    4b66:	26 e0       	ldi	r18, 0x06	; 6
    4b68:	39 e0       	ldi	r19, 0x09	; 9
    4b6a:	89 ee       	ldi	r24, 0xE9	; 233
    4b6c:	94 e0       	ldi	r25, 0x04	; 4
    4b6e:	b9 01       	movw	r22, r18
    4b70:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rs\t: Send Test SMS")));
    4b74:	22 ef       	ldi	r18, 0xF2	; 242
    4b76:	38 e0       	ldi	r19, 0x08	; 8
    4b78:	89 ee       	ldi	r24, 0xE9	; 233
    4b7a:	94 e0       	ldi	r25, 0x04	; 4
    4b7c:	b9 01       	movw	r22, r18
    4b7e:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rc\t: Check Simcard")));
    4b82:	2e ed       	ldi	r18, 0xDE	; 222
    4b84:	38 e0       	ldi	r19, 0x08	; 8
    4b86:	89 ee       	ldi	r24, 0xE9	; 233
    4b88:	94 e0       	ldi	r25, 0x04	; 4
    4b8a:	b9 01       	movw	r22, r18
    4b8c:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\r$\t: Check Simcard Balance")));
    4b90:	22 ec       	ldi	r18, 0xC2	; 194
    4b92:	38 e0       	ldi	r19, 0x08	; 8
    4b94:	89 ee       	ldi	r24, 0xE9	; 233
    4b96:	94 e0       	ldi	r25, 0x04	; 4
    4b98:	b9 01       	movw	r22, r18
    4b9a:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rd\t: Send Test Data to Server tag=123")));
    4b9e:	2b e9       	ldi	r18, 0x9B	; 155
    4ba0:	38 e0       	ldi	r19, 0x08	; 8
    4ba2:	89 ee       	ldi	r24, 0xE9	; 233
    4ba4:	94 e0       	ldi	r25, 0x04	; 4
    4ba6:	b9 01       	movw	r22, r18
    4ba8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rg\t: Get SMS PhoneNumbers")));
    4bac:	20 e8       	ldi	r18, 0x80	; 128
    4bae:	38 e0       	ldi	r19, 0x08	; 8
    4bb0:	89 ee       	ldi	r24, 0xE9	; 233
    4bb2:	94 e0       	ldi	r25, 0x04	; 4
    4bb4:	b9 01       	movw	r22, r18
    4bb6:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rn\t: Set SMS PhoneNumber")));
    4bba:	26 e6       	ldi	r18, 0x66	; 102
    4bbc:	38 e0       	ldi	r19, 0x08	; 8
    4bbe:	89 ee       	ldi	r24, 0xE9	; 233
    4bc0:	94 e0       	ldi	r25, 0x04	; 4
    4bc2:	b9 01       	movw	r22, r18
    4bc4:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rp\t: Set PIN for SIM 1")));
    4bc8:	2e e4       	ldi	r18, 0x4E	; 78
    4bca:	38 e0       	ldi	r19, 0x08	; 8
    4bcc:	89 ee       	ldi	r24, 0xE9	; 233
    4bce:	94 e0       	ldi	r25, 0x04	; 4
    4bd0:	b9 01       	movw	r22, r18
    4bd2:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rx\t: Restart Modem")));
    4bd6:	2a e3       	ldi	r18, 0x3A	; 58
    4bd8:	38 e0       	ldi	r19, 0x08	; 8
    4bda:	89 ee       	ldi	r24, 0xE9	; 233
    4bdc:	94 e0       	ldi	r25, 0x04	; 4
    4bde:	b9 01       	movw	r22, r18
    4be0:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rz\t: Restart Modem TCP IP Stack")));
    4be4:	29 e1       	ldi	r18, 0x19	; 25
    4be6:	38 e0       	ldi	r19, 0x08	; 8
    4be8:	89 ee       	ldi	r24, 0xE9	; 233
    4bea:	94 e0       	ldi	r25, 0x04	; 4
    4bec:	b9 01       	movw	r22, r18
    4bee:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rw\t: Get Site ID")));
    4bf2:	27 e0       	ldi	r18, 0x07	; 7
    4bf4:	38 e0       	ldi	r19, 0x08	; 8
    4bf6:	89 ee       	ldi	r24, 0xE9	; 233
    4bf8:	94 e0       	ldi	r25, 0x04	; 4
    4bfa:	b9 01       	movw	r22, r18
    4bfc:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rW\t: Set Site ID")));
    4c00:	25 ef       	ldi	r18, 0xF5	; 245
    4c02:	37 e0       	ldi	r19, 0x07	; 7
    4c04:	89 ee       	ldi	r24, 0xE9	; 233
    4c06:	94 e0       	ldi	r25, 0x04	; 4
    4c08:	b9 01       	movw	r22, r18
    4c0a:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\ra\t: Get Server IP Address")));
    4c0e:	29 ed       	ldi	r18, 0xD9	; 217
    4c10:	37 e0       	ldi	r19, 0x07	; 7
    4c12:	89 ee       	ldi	r24, 0xE9	; 233
    4c14:	94 e0       	ldi	r25, 0x04	; 4
    4c16:	b9 01       	movw	r22, r18
    4c18:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rA\t: Set Server IP Address")));
    4c1c:	2d eb       	ldi	r18, 0xBD	; 189
    4c1e:	37 e0       	ldi	r19, 0x07	; 7
    4c20:	89 ee       	ldi	r24, 0xE9	; 233
    4c22:	94 e0       	ldi	r25, 0x04	; 4
    4c24:	b9 01       	movw	r22, r18
    4c26:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rT\t: Get Time")));
    4c2a:	2e ea       	ldi	r18, 0xAE	; 174
    4c2c:	37 e0       	ldi	r19, 0x07	; 7
    4c2e:	89 ee       	ldi	r24, 0xE9	; 233
    4c30:	94 e0       	ldi	r25, 0x04	; 4
    4c32:	b9 01       	movw	r22, r18
    4c34:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rv\t: Get Modem Time")));
    4c38:	29 e9       	ldi	r18, 0x99	; 153
    4c3a:	37 e0       	ldi	r19, 0x07	; 7
    4c3c:	89 ee       	ldi	r24, 0xE9	; 233
    4c3e:	94 e0       	ldi	r25, 0x04	; 4
    4c40:	b9 01       	movw	r22, r18
    4c42:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>

}
    4c46:	cf 91       	pop	r28
    4c48:	df 91       	pop	r29
    4c4a:	08 95       	ret

00004c4c <_ZN11CCONTROLLER11CController15TagTableServiceEv>:
    consoleService();
    modem->Service();
    HandleRxData();
  }
  /****************************************************************************************/
  void CController::TagTableService(void) {
    4c4c:	0f 93       	push	r16
    4c4e:	1f 93       	push	r17
    4c50:	df 93       	push	r29
    4c52:	cf 93       	push	r28
    4c54:	cd b7       	in	r28, 0x3d	; 61
    4c56:	de b7       	in	r29, 0x3e	; 62
    4c58:	c5 58       	subi	r28, 0x85	; 133
    4c5a:	d0 40       	sbci	r29, 0x00	; 0
    4c5c:	0f b6       	in	r0, 0x3f	; 63
    4c5e:	f8 94       	cli
    4c60:	de bf       	out	0x3e, r29	; 62
    4c62:	0f be       	out	0x3f, r0	; 63
    4c64:	cd bf       	out	0x3d, r28	; 61
    4c66:	fe 01       	movw	r30, r28
    4c68:	ec 57       	subi	r30, 0x7C	; 124
    4c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6c:	91 83       	std	Z+1, r25	; 0x01
    4c6e:	80 83       	st	Z, r24
    u08 i;
    c08 SmsTxt[128];
    u08 len;
    u08 ret;

    if (signal[TAGTABLE_SIGNAL].state == SIG_TRIGGERED) {
    4c70:	fe 01       	movw	r30, r28
    4c72:	ec 57       	subi	r30, 0x7C	; 124
    4c74:	ff 4f       	sbci	r31, 0xFF	; 255
    4c76:	01 90       	ld	r0, Z+
    4c78:	f0 81       	ld	r31, Z
    4c7a:	e0 2d       	mov	r30, r0
    4c7c:	83 89       	ldd	r24, Z+19	; 0x13
    4c7e:	82 30       	cpi	r24, 0x02	; 2
    4c80:	09 f0       	breq	.+2      	; 0x4c84 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x38>
    4c82:	14 c5       	rjmp	.+2600   	; 0x56ac <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa60>
      signal[TAGTABLE_SIGNAL].state = SIG_RESET;
    4c84:	fe 01       	movw	r30, r28
    4c86:	ec 57       	subi	r30, 0x7C	; 124
    4c88:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8a:	01 90       	ld	r0, Z+
    4c8c:	f0 81       	ld	r31, Z
    4c8e:	e0 2d       	mov	r30, r0
    4c90:	83 e0       	ldi	r24, 0x03	; 3
    4c92:	83 8b       	std	Z+19, r24	; 0x13
      for (i = 0; i < Rfid->tableLen; i++) {
    4c94:	1b 82       	std	Y+3, r1	; 0x03
    4c96:	fa c4       	rjmp	.+2548   	; 0x568c <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa40>
        /****************************************************************/
        if (Rfid->pTable[i].status == TAG_PRESENT) {
    4c98:	fe 01       	movw	r30, r28
    4c9a:	ec 57       	subi	r30, 0x7C	; 124
    4c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9e:	01 90       	ld	r0, Z+
    4ca0:	f0 81       	ld	r31, Z
    4ca2:	e0 2d       	mov	r30, r0
    4ca4:	81 85       	ldd	r24, Z+9	; 0x09
    4ca6:	92 85       	ldd	r25, Z+10	; 0x0a
    4ca8:	fc 01       	movw	r30, r24
    4caa:	e5 5b       	subi	r30, 0xB5	; 181
    4cac:	ff 4f       	sbci	r31, 0xFF	; 255
    4cae:	40 81       	ld	r20, Z
    4cb0:	51 81       	ldd	r21, Z+1	; 0x01
    4cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb4:	88 2f       	mov	r24, r24
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	9c 01       	movw	r18, r24
    4cba:	22 0f       	add	r18, r18
    4cbc:	33 1f       	adc	r19, r19
    4cbe:	c9 01       	movw	r24, r18
    4cc0:	88 0f       	add	r24, r24
    4cc2:	99 1f       	adc	r25, r25
    4cc4:	88 0f       	add	r24, r24
    4cc6:	99 1f       	adc	r25, r25
    4cc8:	88 0f       	add	r24, r24
    4cca:	99 1f       	adc	r25, r25
    4ccc:	82 1b       	sub	r24, r18
    4cce:	93 0b       	sbc	r25, r19
    4cd0:	fa 01       	movw	r30, r20
    4cd2:	e8 0f       	add	r30, r24
    4cd4:	f9 1f       	adc	r31, r25
    4cd6:	82 81       	ldd	r24, Z+2	; 0x02
    4cd8:	82 30       	cpi	r24, 0x02	; 2
    4cda:	09 f0       	breq	.+2      	; 0x4cde <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x92>
    4cdc:	8f c1       	rjmp	.+798    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
          if (Rfid->pTable[i].smslogged == false) {
    4cde:	fe 01       	movw	r30, r28
    4ce0:	ec 57       	subi	r30, 0x7C	; 124
    4ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce4:	01 90       	ld	r0, Z+
    4ce6:	f0 81       	ld	r31, Z
    4ce8:	e0 2d       	mov	r30, r0
    4cea:	81 85       	ldd	r24, Z+9	; 0x09
    4cec:	92 85       	ldd	r25, Z+10	; 0x0a
    4cee:	fc 01       	movw	r30, r24
    4cf0:	e5 5b       	subi	r30, 0xB5	; 181
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	40 81       	ld	r20, Z
    4cf6:	51 81       	ldd	r21, Z+1	; 0x01
    4cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfa:	88 2f       	mov	r24, r24
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	9c 01       	movw	r18, r24
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	c9 01       	movw	r24, r18
    4d06:	88 0f       	add	r24, r24
    4d08:	99 1f       	adc	r25, r25
    4d0a:	88 0f       	add	r24, r24
    4d0c:	99 1f       	adc	r25, r25
    4d0e:	88 0f       	add	r24, r24
    4d10:	99 1f       	adc	r25, r25
    4d12:	82 1b       	sub	r24, r18
    4d14:	93 0b       	sbc	r25, r19
    4d16:	fa 01       	movw	r30, r20
    4d18:	e8 0f       	add	r30, r24
    4d1a:	f9 1f       	adc	r31, r25
    4d1c:	85 85       	ldd	r24, Z+13	; 0x0d
    4d1e:	88 23       	and	r24, r24
    4d20:	09 f0       	breq	.+2      	; 0x4d24 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xd8>
    4d22:	6c c1       	rjmp	.+728    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
            sprintf(SmsTxt, "CULLINAN SITE NR %d -> TAG DETECTED! : ", SiteID);
    4d24:	fe 01       	movw	r30, r28
    4d26:	ec 57       	subi	r30, 0x7C	; 124
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	01 90       	ld	r0, Z+
    4d2c:	f0 81       	ld	r31, Z
    4d2e:	e0 2d       	mov	r30, r0
    4d30:	86 81       	ldd	r24, Z+6	; 0x06
    4d32:	28 2f       	mov	r18, r24
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	00 d0       	rcall	.+0      	; 0x4d38 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xec>
    4d38:	00 d0       	rcall	.+0      	; 0x4d3a <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xee>
    4d3a:	00 d0       	rcall	.+0      	; 0x4d3c <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xf0>
    4d3c:	ed b7       	in	r30, 0x3d	; 61
    4d3e:	fe b7       	in	r31, 0x3e	; 62
    4d40:	31 96       	adiw	r30, 0x01	; 1
    4d42:	ce 01       	movw	r24, r28
    4d44:	04 96       	adiw	r24, 0x04	; 4
    4d46:	91 83       	std	Z+1, r25	; 0x01
    4d48:	80 83       	st	Z, r24
    4d4a:	82 e4       	ldi	r24, 0x42	; 66
    4d4c:	93 e0       	ldi	r25, 0x03	; 3
    4d4e:	93 83       	std	Z+3, r25	; 0x03
    4d50:	82 83       	std	Z+2, r24	; 0x02
    4d52:	35 83       	std	Z+5, r19	; 0x05
    4d54:	24 83       	std	Z+4, r18	; 0x04
    4d56:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    4d5a:	8d b7       	in	r24, 0x3d	; 61
    4d5c:	9e b7       	in	r25, 0x3e	; 62
    4d5e:	06 96       	adiw	r24, 0x06	; 6
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	f8 94       	cli
    4d64:	9e bf       	out	0x3e, r25	; 62
    4d66:	0f be       	out	0x3f, r0	; 63
    4d68:	8d bf       	out	0x3d, r24	; 61
            len = strlen(SmsTxt);
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	04 96       	adiw	r24, 0x04	; 4
    4d6e:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    4d72:	8a 83       	std	Y+2, r24	; 0x02
            ultoa(Rfid->pTable[i].tagID, &SmsTxt[len], 10);
    4d74:	fe 01       	movw	r30, r28
    4d76:	ec 57       	subi	r30, 0x7C	; 124
    4d78:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7a:	01 90       	ld	r0, Z+
    4d7c:	f0 81       	ld	r31, Z
    4d7e:	e0 2d       	mov	r30, r0
    4d80:	81 85       	ldd	r24, Z+9	; 0x09
    4d82:	92 85       	ldd	r25, Z+10	; 0x0a
    4d84:	fc 01       	movw	r30, r24
    4d86:	e5 5b       	subi	r30, 0xB5	; 181
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	40 81       	ld	r20, Z
    4d8c:	51 81       	ldd	r21, Z+1	; 0x01
    4d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d90:	88 2f       	mov	r24, r24
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	9c 01       	movw	r18, r24
    4d96:	22 0f       	add	r18, r18
    4d98:	33 1f       	adc	r19, r19
    4d9a:	c9 01       	movw	r24, r18
    4d9c:	88 0f       	add	r24, r24
    4d9e:	99 1f       	adc	r25, r25
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	88 0f       	add	r24, r24
    4da6:	99 1f       	adc	r25, r25
    4da8:	82 1b       	sub	r24, r18
    4daa:	93 0b       	sbc	r25, r19
    4dac:	fa 01       	movw	r30, r20
    4dae:	e8 0f       	add	r30, r24
    4db0:	f9 1f       	adc	r31, r25
    4db2:	43 81       	ldd	r20, Z+3	; 0x03
    4db4:	54 81       	ldd	r21, Z+4	; 0x04
    4db6:	65 81       	ldd	r22, Z+5	; 0x05
    4db8:	76 81       	ldd	r23, Z+6	; 0x06
    4dba:	8a 81       	ldd	r24, Y+2	; 0x02
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	04 96       	adiw	r24, 0x04	; 4
    4dc4:	28 0f       	add	r18, r24
    4dc6:	39 1f       	adc	r19, r25
    4dc8:	cb 01       	movw	r24, r22
    4dca:	ba 01       	movw	r22, r20
    4dcc:	a9 01       	movw	r20, r18
    4dce:	2a e0       	ldi	r18, 0x0A	; 10
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	0e 94 28 5c 	call	0xb850	; 0xb850 <ultoa>
            strcat(SmsTxt, " ");
    4dd6:	8e 01       	movw	r16, r28
    4dd8:	0c 5f       	subi	r16, 0xFC	; 252
    4dda:	1f 4f       	sbci	r17, 0xFF	; 255
    4ddc:	ce 01       	movw	r24, r28
    4dde:	04 96       	adiw	r24, 0x04	; 4
    4de0:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    4de4:	80 0f       	add	r24, r16
    4de6:	91 1f       	adc	r25, r17
    4de8:	2a e6       	ldi	r18, 0x6A	; 106
    4dea:	33 e0       	ldi	r19, 0x03	; 3
    4dec:	b9 01       	movw	r22, r18
    4dee:	42 e0       	ldi	r20, 0x02	; 2
    4df0:	50 e0       	ldi	r21, 0x00	; 0
    4df2:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
            if (nrValid) {
    4df6:	fe 01       	movw	r30, r28
    4df8:	ec 57       	subi	r30, 0x7C	; 124
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	fc 01       	movw	r30, r24
    4e02:	ef 5b       	subi	r30, 0xBF	; 191
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	80 81       	ld	r24, Z
    4e08:	88 23       	and	r24, r24
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x1c2>
    4e0c:	f7 c0       	rjmp	.+494    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
              if (smsCnt == MAX_SMS_PHONENUMBERS) {
    4e0e:	fe 01       	movw	r30, r28
    4e10:	ec 57       	subi	r30, 0x7C	; 124
    4e12:	ff 4f       	sbci	r31, 0xFF	; 255
    4e14:	01 90       	ld	r0, Z+
    4e16:	f0 81       	ld	r31, Z
    4e18:	e0 2d       	mov	r30, r0
    4e1a:	80 81       	ld	r24, Z
    4e1c:	82 30       	cpi	r24, 0x02	; 2
    4e1e:	09 f0       	breq	.+2      	; 0x4e22 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x1d6>
    4e20:	a7 c0       	rjmp	.+334    	; 0x4f70 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x324>
                if (Rfid->pTable[i].srvlogged == false) {
    4e22:	fe 01       	movw	r30, r28
    4e24:	ec 57       	subi	r30, 0x7C	; 124
    4e26:	ff 4f       	sbci	r31, 0xFF	; 255
    4e28:	01 90       	ld	r0, Z+
    4e2a:	f0 81       	ld	r31, Z
    4e2c:	e0 2d       	mov	r30, r0
    4e2e:	81 85       	ldd	r24, Z+9	; 0x09
    4e30:	92 85       	ldd	r25, Z+10	; 0x0a
    4e32:	fc 01       	movw	r30, r24
    4e34:	e5 5b       	subi	r30, 0xB5	; 181
    4e36:	ff 4f       	sbci	r31, 0xFF	; 255
    4e38:	40 81       	ld	r20, Z
    4e3a:	51 81       	ldd	r21, Z+1	; 0x01
    4e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e3e:	88 2f       	mov	r24, r24
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	9c 01       	movw	r18, r24
    4e44:	22 0f       	add	r18, r18
    4e46:	33 1f       	adc	r19, r19
    4e48:	c9 01       	movw	r24, r18
    4e4a:	88 0f       	add	r24, r24
    4e4c:	99 1f       	adc	r25, r25
    4e4e:	88 0f       	add	r24, r24
    4e50:	99 1f       	adc	r25, r25
    4e52:	88 0f       	add	r24, r24
    4e54:	99 1f       	adc	r25, r25
    4e56:	82 1b       	sub	r24, r18
    4e58:	93 0b       	sbc	r25, r19
    4e5a:	fa 01       	movw	r30, r20
    4e5c:	e8 0f       	add	r30, r24
    4e5e:	f9 1f       	adc	r31, r25
    4e60:	84 85       	ldd	r24, Z+12	; 0x0c
    4e62:	88 23       	and	r24, r24
    4e64:	09 f0       	breq	.+2      	; 0x4e68 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x21c>
    4e66:	ca c0       	rjmp	.+404    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
                  if (server->SetTagInRange(Rfid->pTable[i].tagID)) {
    4e68:	fe 01       	movw	r30, r28
    4e6a:	ec 57       	subi	r30, 0x7C	; 124
    4e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6e:	01 90       	ld	r0, Z+
    4e70:	f0 81       	ld	r31, Z
    4e72:	e0 2d       	mov	r30, r0
    4e74:	64 81       	ldd	r22, Z+4	; 0x04
    4e76:	75 81       	ldd	r23, Z+5	; 0x05
    4e78:	fe 01       	movw	r30, r28
    4e7a:	ec 57       	subi	r30, 0x7C	; 124
    4e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7e:	01 90       	ld	r0, Z+
    4e80:	f0 81       	ld	r31, Z
    4e82:	e0 2d       	mov	r30, r0
    4e84:	81 85       	ldd	r24, Z+9	; 0x09
    4e86:	92 85       	ldd	r25, Z+10	; 0x0a
    4e88:	fc 01       	movw	r30, r24
    4e8a:	e5 5b       	subi	r30, 0xB5	; 181
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	40 81       	ld	r20, Z
    4e90:	51 81       	ldd	r21, Z+1	; 0x01
    4e92:	8b 81       	ldd	r24, Y+3	; 0x03
    4e94:	88 2f       	mov	r24, r24
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	9c 01       	movw	r18, r24
    4e9a:	22 0f       	add	r18, r18
    4e9c:	33 1f       	adc	r19, r19
    4e9e:	c9 01       	movw	r24, r18
    4ea0:	88 0f       	add	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	88 0f       	add	r24, r24
    4ea6:	99 1f       	adc	r25, r25
    4ea8:	88 0f       	add	r24, r24
    4eaa:	99 1f       	adc	r25, r25
    4eac:	82 1b       	sub	r24, r18
    4eae:	93 0b       	sbc	r25, r19
    4eb0:	fa 01       	movw	r30, r20
    4eb2:	e8 0f       	add	r30, r24
    4eb4:	f9 1f       	adc	r31, r25
    4eb6:	23 81       	ldd	r18, Z+3	; 0x03
    4eb8:	34 81       	ldd	r19, Z+4	; 0x04
    4eba:	45 81       	ldd	r20, Z+5	; 0x05
    4ebc:	56 81       	ldd	r21, Z+6	; 0x06
    4ebe:	cb 01       	movw	r24, r22
    4ec0:	ba 01       	movw	r22, r20
    4ec2:	a9 01       	movw	r20, r18
    4ec4:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN7CServer13SetTagInRangeEm>
    4ec8:	88 23       	and	r24, r24
    4eca:	09 f4       	brne	.+2      	; 0x4ece <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x282>
    4ecc:	97 c0       	rjmp	.+302    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
                    DbgUart.sendStr_P((PSTR("\n\r !! New Tag Upload Issued !!")));
    4ece:	29 ea       	ldi	r18, 0xA9	; 169
    4ed0:	33 e0       	ldi	r19, 0x03	; 3
    4ed2:	89 ee       	ldi	r24, 0xE9	; 233
    4ed4:	94 e0       	ldi	r25, 0x04	; 4
    4ed6:	b9 01       	movw	r22, r18
    4ed8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
                    Rfid->pTable[i].srvlogged = true;
    4edc:	fe 01       	movw	r30, r28
    4ede:	ec 57       	subi	r30, 0x7C	; 124
    4ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee2:	01 90       	ld	r0, Z+
    4ee4:	f0 81       	ld	r31, Z
    4ee6:	e0 2d       	mov	r30, r0
    4ee8:	81 85       	ldd	r24, Z+9	; 0x09
    4eea:	92 85       	ldd	r25, Z+10	; 0x0a
    4eec:	fc 01       	movw	r30, r24
    4eee:	e5 5b       	subi	r30, 0xB5	; 181
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	40 81       	ld	r20, Z
    4ef4:	51 81       	ldd	r21, Z+1	; 0x01
    4ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef8:	88 2f       	mov	r24, r24
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	9c 01       	movw	r18, r24
    4efe:	22 0f       	add	r18, r18
    4f00:	33 1f       	adc	r19, r19
    4f02:	c9 01       	movw	r24, r18
    4f04:	88 0f       	add	r24, r24
    4f06:	99 1f       	adc	r25, r25
    4f08:	88 0f       	add	r24, r24
    4f0a:	99 1f       	adc	r25, r25
    4f0c:	88 0f       	add	r24, r24
    4f0e:	99 1f       	adc	r25, r25
    4f10:	82 1b       	sub	r24, r18
    4f12:	93 0b       	sbc	r25, r19
    4f14:	fa 01       	movw	r30, r20
    4f16:	e8 0f       	add	r30, r24
    4f18:	f9 1f       	adc	r31, r25
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	84 87       	std	Z+12, r24	; 0x0c
                    Rfid->pTable[i].smslogged = true;
    4f1e:	fe 01       	movw	r30, r28
    4f20:	ec 57       	subi	r30, 0x7C	; 124
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	01 90       	ld	r0, Z+
    4f26:	f0 81       	ld	r31, Z
    4f28:	e0 2d       	mov	r30, r0
    4f2a:	81 85       	ldd	r24, Z+9	; 0x09
    4f2c:	92 85       	ldd	r25, Z+10	; 0x0a
    4f2e:	fc 01       	movw	r30, r24
    4f30:	e5 5b       	subi	r30, 0xB5	; 181
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	40 81       	ld	r20, Z
    4f36:	51 81       	ldd	r21, Z+1	; 0x01
    4f38:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3a:	88 2f       	mov	r24, r24
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	9c 01       	movw	r18, r24
    4f40:	22 0f       	add	r18, r18
    4f42:	33 1f       	adc	r19, r19
    4f44:	c9 01       	movw	r24, r18
    4f46:	88 0f       	add	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	88 0f       	add	r24, r24
    4f4c:	99 1f       	adc	r25, r25
    4f4e:	88 0f       	add	r24, r24
    4f50:	99 1f       	adc	r25, r25
    4f52:	82 1b       	sub	r24, r18
    4f54:	93 0b       	sbc	r25, r19
    4f56:	fa 01       	movw	r30, r20
    4f58:	e8 0f       	add	r30, r24
    4f5a:	f9 1f       	adc	r31, r25
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	85 87       	std	Z+13, r24	; 0x0d
                    smsCnt = 0;
    4f60:	fe 01       	movw	r30, r28
    4f62:	ec 57       	subi	r30, 0x7C	; 124
    4f64:	ff 4f       	sbci	r31, 0xFF	; 255
    4f66:	01 90       	ld	r0, Z+
    4f68:	f0 81       	ld	r31, Z
    4f6a:	e0 2d       	mov	r30, r0
    4f6c:	10 82       	st	Z, r1
    4f6e:	46 c0       	rjmp	.+140    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
                  }
                }
              } else if (smsCnt < MAX_SMS_PHONENUMBERS) {
    4f70:	fe 01       	movw	r30, r28
    4f72:	ec 57       	subi	r30, 0x7C	; 124
    4f74:	ff 4f       	sbci	r31, 0xFF	; 255
    4f76:	01 90       	ld	r0, Z+
    4f78:	f0 81       	ld	r31, Z
    4f7a:	e0 2d       	mov	r30, r0
    4f7c:	80 81       	ld	r24, Z
    4f7e:	82 30       	cpi	r24, 0x02	; 2
    4f80:	e8 f5       	brcc	.+122    	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
                if (modem->SendSMS(PhoneNumbers[smsCnt], SmsTxt)) {
    4f82:	fe 01       	movw	r30, r28
    4f84:	ec 57       	subi	r30, 0x7C	; 124
    4f86:	ff 4f       	sbci	r31, 0xFF	; 255
    4f88:	01 90       	ld	r0, Z+
    4f8a:	f0 81       	ld	r31, Z
    4f8c:	e0 2d       	mov	r30, r0
    4f8e:	62 81       	ldd	r22, Z+2	; 0x02
    4f90:	73 81       	ldd	r23, Z+3	; 0x03
    4f92:	fe 01       	movw	r30, r28
    4f94:	ec 57       	subi	r30, 0x7C	; 124
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	01 90       	ld	r0, Z+
    4f9a:	f0 81       	ld	r31, Z
    4f9c:	e0 2d       	mov	r30, r0
    4f9e:	80 81       	ld	r24, Z
    4fa0:	28 2f       	mov	r18, r24
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	fe 01       	movw	r30, r28
    4fa6:	ec 57       	subi	r30, 0x7C	; 124
    4fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4faa:	c9 01       	movw	r24, r18
    4fac:	88 0f       	add	r24, r24
    4fae:	99 1f       	adc	r25, r25
    4fb0:	82 0f       	add	r24, r18
    4fb2:	93 1f       	adc	r25, r19
    4fb4:	88 0f       	add	r24, r24
    4fb6:	99 1f       	adc	r25, r25
    4fb8:	88 0f       	add	r24, r24
    4fba:	99 1f       	adc	r25, r25
    4fbc:	9c 01       	movw	r18, r24
    4fbe:	23 5e       	subi	r18, 0xE3	; 227
    4fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fc2:	80 81       	ld	r24, Z
    4fc4:	91 81       	ldd	r25, Z+1	; 0x01
    4fc6:	82 0f       	add	r24, r18
    4fc8:	93 1f       	adc	r25, r19
    4fca:	9c 01       	movw	r18, r24
    4fcc:	ae 01       	movw	r20, r28
    4fce:	4c 5f       	subi	r20, 0xFC	; 252
    4fd0:	5f 4f       	sbci	r21, 0xFF	; 255
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	b9 01       	movw	r22, r18
    4fd6:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6CModem7SendSMSEPcS0_>
    4fda:	88 23       	and	r24, r24
    4fdc:	79 f0       	breq	.+30     	; 0x4ffc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3b0>
                  smsCnt++;
    4fde:	fe 01       	movw	r30, r28
    4fe0:	ec 57       	subi	r30, 0x7C	; 124
    4fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe4:	01 90       	ld	r0, Z+
    4fe6:	f0 81       	ld	r31, Z
    4fe8:	e0 2d       	mov	r30, r0
    4fea:	80 81       	ld	r24, Z
    4fec:	8f 5f       	subi	r24, 0xFF	; 255
    4fee:	fe 01       	movw	r30, r28
    4ff0:	ec 57       	subi	r30, 0x7C	; 124
    4ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff4:	01 90       	ld	r0, Z+
    4ff6:	f0 81       	ld	r31, Z
    4ff8:	e0 2d       	mov	r30, r0
    4ffa:	80 83       	st	Z, r24
              }
            }
          }
        }
        /****************************************************************/
        if (Rfid->pTable[i].duress) {
    4ffc:	fe 01       	movw	r30, r28
    4ffe:	ec 57       	subi	r30, 0x7C	; 124
    5000:	ff 4f       	sbci	r31, 0xFF	; 255
    5002:	01 90       	ld	r0, Z+
    5004:	f0 81       	ld	r31, Z
    5006:	e0 2d       	mov	r30, r0
    5008:	81 85       	ldd	r24, Z+9	; 0x09
    500a:	92 85       	ldd	r25, Z+10	; 0x0a
    500c:	fc 01       	movw	r30, r24
    500e:	e5 5b       	subi	r30, 0xB5	; 181
    5010:	ff 4f       	sbci	r31, 0xFF	; 255
    5012:	40 81       	ld	r20, Z
    5014:	51 81       	ldd	r21, Z+1	; 0x01
    5016:	8b 81       	ldd	r24, Y+3	; 0x03
    5018:	88 2f       	mov	r24, r24
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	9c 01       	movw	r18, r24
    501e:	22 0f       	add	r18, r18
    5020:	33 1f       	adc	r19, r19
    5022:	c9 01       	movw	r24, r18
    5024:	88 0f       	add	r24, r24
    5026:	99 1f       	adc	r25, r25
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	82 1b       	sub	r24, r18
    5032:	93 0b       	sbc	r25, r19
    5034:	fa 01       	movw	r30, r20
    5036:	e8 0f       	add	r30, r24
    5038:	f9 1f       	adc	r31, r25
    503a:	83 85       	ldd	r24, Z+11	; 0x0b
    503c:	88 23       	and	r24, r24
    503e:	09 f4       	brne	.+2      	; 0x5042 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x3f6>
    5040:	49 c1       	rjmp	.+658    	; 0x52d4 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x688>
          sprintf(SmsTxt, "CULLINAN SITE NR %d -> TAG DURESS : ", SiteID);
    5042:	fe 01       	movw	r30, r28
    5044:	ec 57       	subi	r30, 0x7C	; 124
    5046:	ff 4f       	sbci	r31, 0xFF	; 255
    5048:	01 90       	ld	r0, Z+
    504a:	f0 81       	ld	r31, Z
    504c:	e0 2d       	mov	r30, r0
    504e:	86 81       	ldd	r24, Z+6	; 0x06
    5050:	28 2f       	mov	r18, r24
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	00 d0       	rcall	.+0      	; 0x5056 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x40a>
    5056:	00 d0       	rcall	.+0      	; 0x5058 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x40c>
    5058:	00 d0       	rcall	.+0      	; 0x505a <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x40e>
    505a:	ed b7       	in	r30, 0x3d	; 61
    505c:	fe b7       	in	r31, 0x3e	; 62
    505e:	31 96       	adiw	r30, 0x01	; 1
    5060:	ce 01       	movw	r24, r28
    5062:	04 96       	adiw	r24, 0x04	; 4
    5064:	91 83       	std	Z+1, r25	; 0x01
    5066:	80 83       	st	Z, r24
    5068:	8c e6       	ldi	r24, 0x6C	; 108
    506a:	93 e0       	ldi	r25, 0x03	; 3
    506c:	93 83       	std	Z+3, r25	; 0x03
    506e:	82 83       	std	Z+2, r24	; 0x02
    5070:	35 83       	std	Z+5, r19	; 0x05
    5072:	24 83       	std	Z+4, r18	; 0x04
    5074:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    5078:	8d b7       	in	r24, 0x3d	; 61
    507a:	9e b7       	in	r25, 0x3e	; 62
    507c:	06 96       	adiw	r24, 0x06	; 6
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	9e bf       	out	0x3e, r25	; 62
    5084:	0f be       	out	0x3f, r0	; 63
    5086:	8d bf       	out	0x3d, r24	; 61
          len = strlen(SmsTxt);
    5088:	ce 01       	movw	r24, r28
    508a:	04 96       	adiw	r24, 0x04	; 4
    508c:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    5090:	8a 83       	std	Y+2, r24	; 0x02
          ultoa(Rfid->pTable[i].tagID, &SmsTxt[len], 10);
    5092:	fe 01       	movw	r30, r28
    5094:	ec 57       	subi	r30, 0x7C	; 124
    5096:	ff 4f       	sbci	r31, 0xFF	; 255
    5098:	01 90       	ld	r0, Z+
    509a:	f0 81       	ld	r31, Z
    509c:	e0 2d       	mov	r30, r0
    509e:	81 85       	ldd	r24, Z+9	; 0x09
    50a0:	92 85       	ldd	r25, Z+10	; 0x0a
    50a2:	fc 01       	movw	r30, r24
    50a4:	e5 5b       	subi	r30, 0xB5	; 181
    50a6:	ff 4f       	sbci	r31, 0xFF	; 255
    50a8:	40 81       	ld	r20, Z
    50aa:	51 81       	ldd	r21, Z+1	; 0x01
    50ac:	8b 81       	ldd	r24, Y+3	; 0x03
    50ae:	88 2f       	mov	r24, r24
    50b0:	90 e0       	ldi	r25, 0x00	; 0
    50b2:	9c 01       	movw	r18, r24
    50b4:	22 0f       	add	r18, r18
    50b6:	33 1f       	adc	r19, r19
    50b8:	c9 01       	movw	r24, r18
    50ba:	88 0f       	add	r24, r24
    50bc:	99 1f       	adc	r25, r25
    50be:	88 0f       	add	r24, r24
    50c0:	99 1f       	adc	r25, r25
    50c2:	88 0f       	add	r24, r24
    50c4:	99 1f       	adc	r25, r25
    50c6:	82 1b       	sub	r24, r18
    50c8:	93 0b       	sbc	r25, r19
    50ca:	fa 01       	movw	r30, r20
    50cc:	e8 0f       	add	r30, r24
    50ce:	f9 1f       	adc	r31, r25
    50d0:	43 81       	ldd	r20, Z+3	; 0x03
    50d2:	54 81       	ldd	r21, Z+4	; 0x04
    50d4:	65 81       	ldd	r22, Z+5	; 0x05
    50d6:	76 81       	ldd	r23, Z+6	; 0x06
    50d8:	8a 81       	ldd	r24, Y+2	; 0x02
    50da:	28 2f       	mov	r18, r24
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	ce 01       	movw	r24, r28
    50e0:	04 96       	adiw	r24, 0x04	; 4
    50e2:	28 0f       	add	r18, r24
    50e4:	39 1f       	adc	r19, r25
    50e6:	cb 01       	movw	r24, r22
    50e8:	ba 01       	movw	r22, r20
    50ea:	a9 01       	movw	r20, r18
    50ec:	2a e0       	ldi	r18, 0x0A	; 10
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	0e 94 28 5c 	call	0xb850	; 0xb850 <ultoa>
          strcat(SmsTxt, " ");
    50f4:	8e 01       	movw	r16, r28
    50f6:	0c 5f       	subi	r16, 0xFC	; 252
    50f8:	1f 4f       	sbci	r17, 0xFF	; 255
    50fa:	ce 01       	movw	r24, r28
    50fc:	04 96       	adiw	r24, 0x04	; 4
    50fe:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    5102:	80 0f       	add	r24, r16
    5104:	91 1f       	adc	r25, r17
    5106:	2a e6       	ldi	r18, 0x6A	; 106
    5108:	33 e0       	ldi	r19, 0x03	; 3
    510a:	b9 01       	movw	r22, r18
    510c:	42 e0       	ldi	r20, 0x02	; 2
    510e:	50 e0       	ldi	r21, 0x00	; 0
    5110:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
          if (nrValid) {
    5114:	fe 01       	movw	r30, r28
    5116:	ec 57       	subi	r30, 0x7C	; 124
    5118:	ff 4f       	sbci	r31, 0xFF	; 255
    511a:	80 81       	ld	r24, Z
    511c:	91 81       	ldd	r25, Z+1	; 0x01
    511e:	fc 01       	movw	r30, r24
    5120:	ef 5b       	subi	r30, 0xBF	; 191
    5122:	ff 4f       	sbci	r31, 0xFF	; 255
    5124:	80 81       	ld	r24, Z
    5126:	88 23       	and	r24, r24
    5128:	09 f4       	brne	.+2      	; 0x512c <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x4e0>
    512a:	9b c0       	rjmp	.+310    	; 0x5262 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x616>
            if (smsCnt < MAX_SMS_PHONENUMBERS) {
    512c:	fe 01       	movw	r30, r28
    512e:	ec 57       	subi	r30, 0x7C	; 124
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	01 90       	ld	r0, Z+
    5134:	f0 81       	ld	r31, Z
    5136:	e0 2d       	mov	r30, r0
    5138:	80 81       	ld	r24, Z
    513a:	82 30       	cpi	r24, 0x02	; 2
    513c:	08 f0       	brcs	.+2      	; 0x5140 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x4f4>
    513e:	91 c0       	rjmp	.+290    	; 0x5262 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x616>
              ret = modem->SendSMS(PhoneNumbers[smsCnt], SmsTxt);
    5140:	fe 01       	movw	r30, r28
    5142:	ec 57       	subi	r30, 0x7C	; 124
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	01 90       	ld	r0, Z+
    5148:	f0 81       	ld	r31, Z
    514a:	e0 2d       	mov	r30, r0
    514c:	62 81       	ldd	r22, Z+2	; 0x02
    514e:	73 81       	ldd	r23, Z+3	; 0x03
    5150:	fe 01       	movw	r30, r28
    5152:	ec 57       	subi	r30, 0x7C	; 124
    5154:	ff 4f       	sbci	r31, 0xFF	; 255
    5156:	01 90       	ld	r0, Z+
    5158:	f0 81       	ld	r31, Z
    515a:	e0 2d       	mov	r30, r0
    515c:	80 81       	ld	r24, Z
    515e:	28 2f       	mov	r18, r24
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	fe 01       	movw	r30, r28
    5164:	ec 57       	subi	r30, 0x7C	; 124
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	c9 01       	movw	r24, r18
    516a:	88 0f       	add	r24, r24
    516c:	99 1f       	adc	r25, r25
    516e:	82 0f       	add	r24, r18
    5170:	93 1f       	adc	r25, r19
    5172:	88 0f       	add	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	88 0f       	add	r24, r24
    5178:	99 1f       	adc	r25, r25
    517a:	9c 01       	movw	r18, r24
    517c:	23 5e       	subi	r18, 0xE3	; 227
    517e:	3f 4f       	sbci	r19, 0xFF	; 255
    5180:	80 81       	ld	r24, Z
    5182:	91 81       	ldd	r25, Z+1	; 0x01
    5184:	82 0f       	add	r24, r18
    5186:	93 1f       	adc	r25, r19
    5188:	9c 01       	movw	r18, r24
    518a:	ae 01       	movw	r20, r28
    518c:	4c 5f       	subi	r20, 0xFC	; 252
    518e:	5f 4f       	sbci	r21, 0xFF	; 255
    5190:	cb 01       	movw	r24, r22
    5192:	b9 01       	movw	r22, r18
    5194:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6CModem7SendSMSEPcS0_>
    5198:	89 83       	std	Y+1, r24	; 0x01
              if (ret) {
    519a:	89 81       	ldd	r24, Y+1	; 0x01
    519c:	88 23       	and	r24, r24
    519e:	79 f0       	breq	.+30     	; 0x51be <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x572>
                // Previous SMS was send successfully
                smsCnt++;
    51a0:	fe 01       	movw	r30, r28
    51a2:	ec 57       	subi	r30, 0x7C	; 124
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	01 90       	ld	r0, Z+
    51a8:	f0 81       	ld	r31, Z
    51aa:	e0 2d       	mov	r30, r0
    51ac:	80 81       	ld	r24, Z
    51ae:	8f 5f       	subi	r24, 0xFF	; 255
    51b0:	fe 01       	movw	r30, r28
    51b2:	ec 57       	subi	r30, 0x7C	; 124
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	01 90       	ld	r0, Z+
    51b8:	f0 81       	ld	r31, Z
    51ba:	e0 2d       	mov	r30, r0
    51bc:	80 83       	st	Z, r24
              }
              if (smsCnt == MAX_SMS_PHONENUMBERS) {
    51be:	fe 01       	movw	r30, r28
    51c0:	ec 57       	subi	r30, 0x7C	; 124
    51c2:	ff 4f       	sbci	r31, 0xFF	; 255
    51c4:	01 90       	ld	r0, Z+
    51c6:	f0 81       	ld	r31, Z
    51c8:	e0 2d       	mov	r30, r0
    51ca:	80 81       	ld	r24, Z
    51cc:	82 30       	cpi	r24, 0x02	; 2
    51ce:	09 f0       	breq	.+2      	; 0x51d2 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x586>
    51d0:	48 c0       	rjmp	.+144    	; 0x5262 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x616>
                smsCnt = 0;
    51d2:	fe 01       	movw	r30, r28
    51d4:	ec 57       	subi	r30, 0x7C	; 124
    51d6:	ff 4f       	sbci	r31, 0xFF	; 255
    51d8:	01 90       	ld	r0, Z+
    51da:	f0 81       	ld	r31, Z
    51dc:	e0 2d       	mov	r30, r0
    51de:	10 82       	st	Z, r1
                Rfid->pTable[i].smslogged = true;
    51e0:	fe 01       	movw	r30, r28
    51e2:	ec 57       	subi	r30, 0x7C	; 124
    51e4:	ff 4f       	sbci	r31, 0xFF	; 255
    51e6:	01 90       	ld	r0, Z+
    51e8:	f0 81       	ld	r31, Z
    51ea:	e0 2d       	mov	r30, r0
    51ec:	81 85       	ldd	r24, Z+9	; 0x09
    51ee:	92 85       	ldd	r25, Z+10	; 0x0a
    51f0:	fc 01       	movw	r30, r24
    51f2:	e5 5b       	subi	r30, 0xB5	; 181
    51f4:	ff 4f       	sbci	r31, 0xFF	; 255
    51f6:	40 81       	ld	r20, Z
    51f8:	51 81       	ldd	r21, Z+1	; 0x01
    51fa:	8b 81       	ldd	r24, Y+3	; 0x03
    51fc:	88 2f       	mov	r24, r24
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	9c 01       	movw	r18, r24
    5202:	22 0f       	add	r18, r18
    5204:	33 1f       	adc	r19, r19
    5206:	c9 01       	movw	r24, r18
    5208:	88 0f       	add	r24, r24
    520a:	99 1f       	adc	r25, r25
    520c:	88 0f       	add	r24, r24
    520e:	99 1f       	adc	r25, r25
    5210:	88 0f       	add	r24, r24
    5212:	99 1f       	adc	r25, r25
    5214:	82 1b       	sub	r24, r18
    5216:	93 0b       	sbc	r25, r19
    5218:	fa 01       	movw	r30, r20
    521a:	e8 0f       	add	r30, r24
    521c:	f9 1f       	adc	r31, r25
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	85 87       	std	Z+13, r24	; 0x0d
                Rfid->pTable[i].duress = 0;
    5222:	fe 01       	movw	r30, r28
    5224:	ec 57       	subi	r30, 0x7C	; 124
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	01 90       	ld	r0, Z+
    522a:	f0 81       	ld	r31, Z
    522c:	e0 2d       	mov	r30, r0
    522e:	81 85       	ldd	r24, Z+9	; 0x09
    5230:	92 85       	ldd	r25, Z+10	; 0x0a
    5232:	fc 01       	movw	r30, r24
    5234:	e5 5b       	subi	r30, 0xB5	; 181
    5236:	ff 4f       	sbci	r31, 0xFF	; 255
    5238:	40 81       	ld	r20, Z
    523a:	51 81       	ldd	r21, Z+1	; 0x01
    523c:	8b 81       	ldd	r24, Y+3	; 0x03
    523e:	88 2f       	mov	r24, r24
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	9c 01       	movw	r18, r24
    5244:	22 0f       	add	r18, r18
    5246:	33 1f       	adc	r19, r19
    5248:	c9 01       	movw	r24, r18
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	88 0f       	add	r24, r24
    5254:	99 1f       	adc	r25, r25
    5256:	82 1b       	sub	r24, r18
    5258:	93 0b       	sbc	r25, r19
    525a:	fa 01       	movw	r30, r20
    525c:	e8 0f       	add	r30, r24
    525e:	f9 1f       	adc	r31, r25
    5260:	13 86       	std	Z+11, r1	; 0x0b
              }
            }
          }
          if (server->SetTagDuress(Rfid->pTable[i].tagID)) {
    5262:	fe 01       	movw	r30, r28
    5264:	ec 57       	subi	r30, 0x7C	; 124
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	01 90       	ld	r0, Z+
    526a:	f0 81       	ld	r31, Z
    526c:	e0 2d       	mov	r30, r0
    526e:	64 81       	ldd	r22, Z+4	; 0x04
    5270:	75 81       	ldd	r23, Z+5	; 0x05
    5272:	fe 01       	movw	r30, r28
    5274:	ec 57       	subi	r30, 0x7C	; 124
    5276:	ff 4f       	sbci	r31, 0xFF	; 255
    5278:	01 90       	ld	r0, Z+
    527a:	f0 81       	ld	r31, Z
    527c:	e0 2d       	mov	r30, r0
    527e:	81 85       	ldd	r24, Z+9	; 0x09
    5280:	92 85       	ldd	r25, Z+10	; 0x0a
    5282:	fc 01       	movw	r30, r24
    5284:	e5 5b       	subi	r30, 0xB5	; 181
    5286:	ff 4f       	sbci	r31, 0xFF	; 255
    5288:	40 81       	ld	r20, Z
    528a:	51 81       	ldd	r21, Z+1	; 0x01
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	88 2f       	mov	r24, r24
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	9c 01       	movw	r18, r24
    5294:	22 0f       	add	r18, r18
    5296:	33 1f       	adc	r19, r19
    5298:	c9 01       	movw	r24, r18
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	88 0f       	add	r24, r24
    52a0:	99 1f       	adc	r25, r25
    52a2:	88 0f       	add	r24, r24
    52a4:	99 1f       	adc	r25, r25
    52a6:	82 1b       	sub	r24, r18
    52a8:	93 0b       	sbc	r25, r19
    52aa:	fa 01       	movw	r30, r20
    52ac:	e8 0f       	add	r30, r24
    52ae:	f9 1f       	adc	r31, r25
    52b0:	23 81       	ldd	r18, Z+3	; 0x03
    52b2:	34 81       	ldd	r19, Z+4	; 0x04
    52b4:	45 81       	ldd	r20, Z+5	; 0x05
    52b6:	56 81       	ldd	r21, Z+6	; 0x06
    52b8:	cb 01       	movw	r24, r22
    52ba:	ba 01       	movw	r22, r20
    52bc:	a9 01       	movw	r20, r18
    52be:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN7CServer12SetTagDuressEm>
    52c2:	88 23       	and	r24, r24
    52c4:	39 f0       	breq	.+14     	; 0x52d4 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x688>
            DbgUart.sendStr_P((PSTR("\n\r Duress Upload Issued")));
    52c6:	21 e9       	ldi	r18, 0x91	; 145
    52c8:	33 e0       	ldi	r19, 0x03	; 3
    52ca:	89 ee       	ldi	r24, 0xE9	; 233
    52cc:	94 e0       	ldi	r25, 0x04	; 4
    52ce:	b9 01       	movw	r22, r18
    52d0:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
          }
        }
        /****************************************************************/
        if (Rfid->pTable[i].status == TAG_LOST) {
    52d4:	fe 01       	movw	r30, r28
    52d6:	ec 57       	subi	r30, 0x7C	; 124
    52d8:	ff 4f       	sbci	r31, 0xFF	; 255
    52da:	01 90       	ld	r0, Z+
    52dc:	f0 81       	ld	r31, Z
    52de:	e0 2d       	mov	r30, r0
    52e0:	81 85       	ldd	r24, Z+9	; 0x09
    52e2:	92 85       	ldd	r25, Z+10	; 0x0a
    52e4:	fc 01       	movw	r30, r24
    52e6:	e5 5b       	subi	r30, 0xB5	; 181
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	40 81       	ld	r20, Z
    52ec:	51 81       	ldd	r21, Z+1	; 0x01
    52ee:	8b 81       	ldd	r24, Y+3	; 0x03
    52f0:	88 2f       	mov	r24, r24
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	9c 01       	movw	r18, r24
    52f6:	22 0f       	add	r18, r18
    52f8:	33 1f       	adc	r19, r19
    52fa:	c9 01       	movw	r24, r18
    52fc:	88 0f       	add	r24, r24
    52fe:	99 1f       	adc	r25, r25
    5300:	88 0f       	add	r24, r24
    5302:	99 1f       	adc	r25, r25
    5304:	88 0f       	add	r24, r24
    5306:	99 1f       	adc	r25, r25
    5308:	82 1b       	sub	r24, r18
    530a:	93 0b       	sbc	r25, r19
    530c:	fa 01       	movw	r30, r20
    530e:	e8 0f       	add	r30, r24
    5310:	f9 1f       	adc	r31, r25
    5312:	82 81       	ldd	r24, Z+2	; 0x02
    5314:	84 30       	cpi	r24, 0x04	; 4
    5316:	09 f0       	breq	.+2      	; 0x531a <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x6ce>
    5318:	b6 c1       	rjmp	.+876    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
          if (Rfid->pTable[i].smslogged == false) {
    531a:	fe 01       	movw	r30, r28
    531c:	ec 57       	subi	r30, 0x7C	; 124
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	01 90       	ld	r0, Z+
    5322:	f0 81       	ld	r31, Z
    5324:	e0 2d       	mov	r30, r0
    5326:	81 85       	ldd	r24, Z+9	; 0x09
    5328:	92 85       	ldd	r25, Z+10	; 0x0a
    532a:	fc 01       	movw	r30, r24
    532c:	e5 5b       	subi	r30, 0xB5	; 181
    532e:	ff 4f       	sbci	r31, 0xFF	; 255
    5330:	40 81       	ld	r20, Z
    5332:	51 81       	ldd	r21, Z+1	; 0x01
    5334:	8b 81       	ldd	r24, Y+3	; 0x03
    5336:	88 2f       	mov	r24, r24
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	9c 01       	movw	r18, r24
    533c:	22 0f       	add	r18, r18
    533e:	33 1f       	adc	r19, r19
    5340:	c9 01       	movw	r24, r18
    5342:	88 0f       	add	r24, r24
    5344:	99 1f       	adc	r25, r25
    5346:	88 0f       	add	r24, r24
    5348:	99 1f       	adc	r25, r25
    534a:	88 0f       	add	r24, r24
    534c:	99 1f       	adc	r25, r25
    534e:	82 1b       	sub	r24, r18
    5350:	93 0b       	sbc	r25, r19
    5352:	fa 01       	movw	r30, r20
    5354:	e8 0f       	add	r30, r24
    5356:	f9 1f       	adc	r31, r25
    5358:	85 85       	ldd	r24, Z+13	; 0x0d
    535a:	88 23       	and	r24, r24
    535c:	09 f0       	breq	.+2      	; 0x5360 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x714>
    535e:	93 c1       	rjmp	.+806    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
            sprintf(SmsTxt, "CULLINAN SITE NR %d -> TAG LOST : ", SiteID);
    5360:	fe 01       	movw	r30, r28
    5362:	ec 57       	subi	r30, 0x7C	; 124
    5364:	ff 4f       	sbci	r31, 0xFF	; 255
    5366:	01 90       	ld	r0, Z+
    5368:	f0 81       	ld	r31, Z
    536a:	e0 2d       	mov	r30, r0
    536c:	86 81       	ldd	r24, Z+6	; 0x06
    536e:	28 2f       	mov	r18, r24
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	00 d0       	rcall	.+0      	; 0x5374 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x728>
    5374:	00 d0       	rcall	.+0      	; 0x5376 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x72a>
    5376:	00 d0       	rcall	.+0      	; 0x5378 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x72c>
    5378:	ed b7       	in	r30, 0x3d	; 61
    537a:	fe b7       	in	r31, 0x3e	; 62
    537c:	31 96       	adiw	r30, 0x01	; 1
    537e:	ce 01       	movw	r24, r28
    5380:	04 96       	adiw	r24, 0x04	; 4
    5382:	91 83       	std	Z+1, r25	; 0x01
    5384:	80 83       	st	Z, r24
    5386:	81 e9       	ldi	r24, 0x91	; 145
    5388:	93 e0       	ldi	r25, 0x03	; 3
    538a:	93 83       	std	Z+3, r25	; 0x03
    538c:	82 83       	std	Z+2, r24	; 0x02
    538e:	35 83       	std	Z+5, r19	; 0x05
    5390:	24 83       	std	Z+4, r18	; 0x04
    5392:	0e 94 4d 5c 	call	0xb89a	; 0xb89a <sprintf>
    5396:	8d b7       	in	r24, 0x3d	; 61
    5398:	9e b7       	in	r25, 0x3e	; 62
    539a:	06 96       	adiw	r24, 0x06	; 6
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	f8 94       	cli
    53a0:	9e bf       	out	0x3e, r25	; 62
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	8d bf       	out	0x3d, r24	; 61
            len = strlen(SmsTxt);
    53a6:	ce 01       	movw	r24, r28
    53a8:	04 96       	adiw	r24, 0x04	; 4
    53aa:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    53ae:	8a 83       	std	Y+2, r24	; 0x02
            ultoa(Rfid->pTable[i].tagID, &SmsTxt[len], 10);
    53b0:	fe 01       	movw	r30, r28
    53b2:	ec 57       	subi	r30, 0x7C	; 124
    53b4:	ff 4f       	sbci	r31, 0xFF	; 255
    53b6:	01 90       	ld	r0, Z+
    53b8:	f0 81       	ld	r31, Z
    53ba:	e0 2d       	mov	r30, r0
    53bc:	81 85       	ldd	r24, Z+9	; 0x09
    53be:	92 85       	ldd	r25, Z+10	; 0x0a
    53c0:	fc 01       	movw	r30, r24
    53c2:	e5 5b       	subi	r30, 0xB5	; 181
    53c4:	ff 4f       	sbci	r31, 0xFF	; 255
    53c6:	40 81       	ld	r20, Z
    53c8:	51 81       	ldd	r21, Z+1	; 0x01
    53ca:	8b 81       	ldd	r24, Y+3	; 0x03
    53cc:	88 2f       	mov	r24, r24
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	9c 01       	movw	r18, r24
    53d2:	22 0f       	add	r18, r18
    53d4:	33 1f       	adc	r19, r19
    53d6:	c9 01       	movw	r24, r18
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	88 0f       	add	r24, r24
    53de:	99 1f       	adc	r25, r25
    53e0:	88 0f       	add	r24, r24
    53e2:	99 1f       	adc	r25, r25
    53e4:	82 1b       	sub	r24, r18
    53e6:	93 0b       	sbc	r25, r19
    53e8:	fa 01       	movw	r30, r20
    53ea:	e8 0f       	add	r30, r24
    53ec:	f9 1f       	adc	r31, r25
    53ee:	43 81       	ldd	r20, Z+3	; 0x03
    53f0:	54 81       	ldd	r21, Z+4	; 0x04
    53f2:	65 81       	ldd	r22, Z+5	; 0x05
    53f4:	76 81       	ldd	r23, Z+6	; 0x06
    53f6:	8a 81       	ldd	r24, Y+2	; 0x02
    53f8:	28 2f       	mov	r18, r24
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	ce 01       	movw	r24, r28
    53fe:	04 96       	adiw	r24, 0x04	; 4
    5400:	28 0f       	add	r18, r24
    5402:	39 1f       	adc	r19, r25
    5404:	cb 01       	movw	r24, r22
    5406:	ba 01       	movw	r22, r20
    5408:	a9 01       	movw	r20, r18
    540a:	2a e0       	ldi	r18, 0x0A	; 10
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	0e 94 28 5c 	call	0xb850	; 0xb850 <ultoa>
            strcat(SmsTxt, " ");
    5412:	8e 01       	movw	r16, r28
    5414:	0c 5f       	subi	r16, 0xFC	; 252
    5416:	1f 4f       	sbci	r17, 0xFF	; 255
    5418:	ce 01       	movw	r24, r28
    541a:	04 96       	adiw	r24, 0x04	; 4
    541c:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    5420:	80 0f       	add	r24, r16
    5422:	91 1f       	adc	r25, r17
    5424:	2a e6       	ldi	r18, 0x6A	; 106
    5426:	33 e0       	ldi	r19, 0x03	; 3
    5428:	b9 01       	movw	r22, r18
    542a:	42 e0       	ldi	r20, 0x02	; 2
    542c:	50 e0       	ldi	r21, 0x00	; 0
    542e:	0e 94 93 5b 	call	0xb726	; 0xb726 <memcpy>
            if (nrValid) {
    5432:	fe 01       	movw	r30, r28
    5434:	ec 57       	subi	r30, 0x7C	; 124
    5436:	ff 4f       	sbci	r31, 0xFF	; 255
    5438:	80 81       	ld	r24, Z
    543a:	91 81       	ldd	r25, Z+1	; 0x01
    543c:	fc 01       	movw	r30, r24
    543e:	ef 5b       	subi	r30, 0xBF	; 191
    5440:	ff 4f       	sbci	r31, 0xFF	; 255
    5442:	80 81       	ld	r24, Z
    5444:	88 23       	and	r24, r24
    5446:	09 f4       	brne	.+2      	; 0x544a <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x7fe>
    5448:	1e c1       	rjmp	.+572    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
              if (smsCnt < MAX_SMS_PHONENUMBERS) {
    544a:	fe 01       	movw	r30, r28
    544c:	ec 57       	subi	r30, 0x7C	; 124
    544e:	ff 4f       	sbci	r31, 0xFF	; 255
    5450:	01 90       	ld	r0, Z+
    5452:	f0 81       	ld	r31, Z
    5454:	e0 2d       	mov	r30, r0
    5456:	80 81       	ld	r24, Z
    5458:	82 30       	cpi	r24, 0x02	; 2
    545a:	08 f0       	brcs	.+2      	; 0x545e <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x812>
    545c:	3f c0       	rjmp	.+126    	; 0x54dc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x890>
                if (modem->SendSMS(PhoneNumbers[smsCnt], SmsTxt)) {
    545e:	fe 01       	movw	r30, r28
    5460:	ec 57       	subi	r30, 0x7C	; 124
    5462:	ff 4f       	sbci	r31, 0xFF	; 255
    5464:	01 90       	ld	r0, Z+
    5466:	f0 81       	ld	r31, Z
    5468:	e0 2d       	mov	r30, r0
    546a:	62 81       	ldd	r22, Z+2	; 0x02
    546c:	73 81       	ldd	r23, Z+3	; 0x03
    546e:	fe 01       	movw	r30, r28
    5470:	ec 57       	subi	r30, 0x7C	; 124
    5472:	ff 4f       	sbci	r31, 0xFF	; 255
    5474:	01 90       	ld	r0, Z+
    5476:	f0 81       	ld	r31, Z
    5478:	e0 2d       	mov	r30, r0
    547a:	80 81       	ld	r24, Z
    547c:	28 2f       	mov	r18, r24
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	fe 01       	movw	r30, r28
    5482:	ec 57       	subi	r30, 0x7C	; 124
    5484:	ff 4f       	sbci	r31, 0xFF	; 255
    5486:	c9 01       	movw	r24, r18
    5488:	88 0f       	add	r24, r24
    548a:	99 1f       	adc	r25, r25
    548c:	82 0f       	add	r24, r18
    548e:	93 1f       	adc	r25, r19
    5490:	88 0f       	add	r24, r24
    5492:	99 1f       	adc	r25, r25
    5494:	88 0f       	add	r24, r24
    5496:	99 1f       	adc	r25, r25
    5498:	9c 01       	movw	r18, r24
    549a:	23 5e       	subi	r18, 0xE3	; 227
    549c:	3f 4f       	sbci	r19, 0xFF	; 255
    549e:	80 81       	ld	r24, Z
    54a0:	91 81       	ldd	r25, Z+1	; 0x01
    54a2:	82 0f       	add	r24, r18
    54a4:	93 1f       	adc	r25, r19
    54a6:	9c 01       	movw	r18, r24
    54a8:	ae 01       	movw	r20, r28
    54aa:	4c 5f       	subi	r20, 0xFC	; 252
    54ac:	5f 4f       	sbci	r21, 0xFF	; 255
    54ae:	cb 01       	movw	r24, r22
    54b0:	b9 01       	movw	r22, r18
    54b2:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6CModem7SendSMSEPcS0_>
    54b6:	88 23       	and	r24, r24
    54b8:	09 f4       	brne	.+2      	; 0x54bc <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x870>
    54ba:	e5 c0       	rjmp	.+458    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
                  smsCnt++;
    54bc:	fe 01       	movw	r30, r28
    54be:	ec 57       	subi	r30, 0x7C	; 124
    54c0:	ff 4f       	sbci	r31, 0xFF	; 255
    54c2:	01 90       	ld	r0, Z+
    54c4:	f0 81       	ld	r31, Z
    54c6:	e0 2d       	mov	r30, r0
    54c8:	80 81       	ld	r24, Z
    54ca:	8f 5f       	subi	r24, 0xFF	; 255
    54cc:	fe 01       	movw	r30, r28
    54ce:	ec 57       	subi	r30, 0x7C	; 124
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	01 90       	ld	r0, Z+
    54d4:	f0 81       	ld	r31, Z
    54d6:	e0 2d       	mov	r30, r0
    54d8:	80 83       	st	Z, r24
    54da:	d5 c0       	rjmp	.+426    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
                }
              } else if (Rfid->pTable[i].srvlogged == false && smsCnt == MAX_SMS_PHONENUMBERS) {
    54dc:	fe 01       	movw	r30, r28
    54de:	ec 57       	subi	r30, 0x7C	; 124
    54e0:	ff 4f       	sbci	r31, 0xFF	; 255
    54e2:	01 90       	ld	r0, Z+
    54e4:	f0 81       	ld	r31, Z
    54e6:	e0 2d       	mov	r30, r0
    54e8:	81 85       	ldd	r24, Z+9	; 0x09
    54ea:	92 85       	ldd	r25, Z+10	; 0x0a
    54ec:	fc 01       	movw	r30, r24
    54ee:	e5 5b       	subi	r30, 0xB5	; 181
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
    54f2:	40 81       	ld	r20, Z
    54f4:	51 81       	ldd	r21, Z+1	; 0x01
    54f6:	8b 81       	ldd	r24, Y+3	; 0x03
    54f8:	88 2f       	mov	r24, r24
    54fa:	90 e0       	ldi	r25, 0x00	; 0
    54fc:	9c 01       	movw	r18, r24
    54fe:	22 0f       	add	r18, r18
    5500:	33 1f       	adc	r19, r19
    5502:	c9 01       	movw	r24, r18
    5504:	88 0f       	add	r24, r24
    5506:	99 1f       	adc	r25, r25
    5508:	88 0f       	add	r24, r24
    550a:	99 1f       	adc	r25, r25
    550c:	88 0f       	add	r24, r24
    550e:	99 1f       	adc	r25, r25
    5510:	82 1b       	sub	r24, r18
    5512:	93 0b       	sbc	r25, r19
    5514:	fa 01       	movw	r30, r20
    5516:	e8 0f       	add	r30, r24
    5518:	f9 1f       	adc	r31, r25
    551a:	84 85       	ldd	r24, Z+12	; 0x0c
    551c:	88 23       	and	r24, r24
    551e:	09 f0       	breq	.+2      	; 0x5522 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x8d6>
    5520:	b2 c0       	rjmp	.+356    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
    5522:	fe 01       	movw	r30, r28
    5524:	ec 57       	subi	r30, 0x7C	; 124
    5526:	ff 4f       	sbci	r31, 0xFF	; 255
    5528:	01 90       	ld	r0, Z+
    552a:	f0 81       	ld	r31, Z
    552c:	e0 2d       	mov	r30, r0
    552e:	80 81       	ld	r24, Z
    5530:	82 30       	cpi	r24, 0x02	; 2
    5532:	09 f0       	breq	.+2      	; 0x5536 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x8ea>
    5534:	a8 c0       	rjmp	.+336    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
                if (server->SetTagOutRange(Rfid->pTable[i].tagID)) {
    5536:	fe 01       	movw	r30, r28
    5538:	ec 57       	subi	r30, 0x7C	; 124
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	01 90       	ld	r0, Z+
    553e:	f0 81       	ld	r31, Z
    5540:	e0 2d       	mov	r30, r0
    5542:	64 81       	ldd	r22, Z+4	; 0x04
    5544:	75 81       	ldd	r23, Z+5	; 0x05
    5546:	fe 01       	movw	r30, r28
    5548:	ec 57       	subi	r30, 0x7C	; 124
    554a:	ff 4f       	sbci	r31, 0xFF	; 255
    554c:	01 90       	ld	r0, Z+
    554e:	f0 81       	ld	r31, Z
    5550:	e0 2d       	mov	r30, r0
    5552:	81 85       	ldd	r24, Z+9	; 0x09
    5554:	92 85       	ldd	r25, Z+10	; 0x0a
    5556:	fc 01       	movw	r30, r24
    5558:	e5 5b       	subi	r30, 0xB5	; 181
    555a:	ff 4f       	sbci	r31, 0xFF	; 255
    555c:	40 81       	ld	r20, Z
    555e:	51 81       	ldd	r21, Z+1	; 0x01
    5560:	8b 81       	ldd	r24, Y+3	; 0x03
    5562:	88 2f       	mov	r24, r24
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	9c 01       	movw	r18, r24
    5568:	22 0f       	add	r18, r18
    556a:	33 1f       	adc	r19, r19
    556c:	c9 01       	movw	r24, r18
    556e:	88 0f       	add	r24, r24
    5570:	99 1f       	adc	r25, r25
    5572:	88 0f       	add	r24, r24
    5574:	99 1f       	adc	r25, r25
    5576:	88 0f       	add	r24, r24
    5578:	99 1f       	adc	r25, r25
    557a:	82 1b       	sub	r24, r18
    557c:	93 0b       	sbc	r25, r19
    557e:	fa 01       	movw	r30, r20
    5580:	e8 0f       	add	r30, r24
    5582:	f9 1f       	adc	r31, r25
    5584:	23 81       	ldd	r18, Z+3	; 0x03
    5586:	34 81       	ldd	r19, Z+4	; 0x04
    5588:	45 81       	ldd	r20, Z+5	; 0x05
    558a:	56 81       	ldd	r21, Z+6	; 0x06
    558c:	cb 01       	movw	r24, r22
    558e:	ba 01       	movw	r22, r20
    5590:	a9 01       	movw	r20, r18
    5592:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN7CServer14SetTagOutRangeEm>
    5596:	88 23       	and	r24, r24
    5598:	09 f4       	brne	.+2      	; 0x559c <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x950>
    559a:	75 c0       	rjmp	.+234    	; 0x5686 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa3a>
                  DbgUart.sendStr_P((PSTR("\n\rLost Tag Upload Issued")));
    559c:	28 e7       	ldi	r18, 0x78	; 120
    559e:	33 e0       	ldi	r19, 0x03	; 3
    55a0:	89 ee       	ldi	r24, 0xE9	; 233
    55a2:	94 e0       	ldi	r25, 0x04	; 4
    55a4:	b9 01       	movw	r22, r18
    55a6:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
                  smsCnt = 0;
    55aa:	fe 01       	movw	r30, r28
    55ac:	ec 57       	subi	r30, 0x7C	; 124
    55ae:	ff 4f       	sbci	r31, 0xFF	; 255
    55b0:	01 90       	ld	r0, Z+
    55b2:	f0 81       	ld	r31, Z
    55b4:	e0 2d       	mov	r30, r0
    55b6:	10 82       	st	Z, r1
                  Rfid->pTable[i].smslogged = true;
    55b8:	fe 01       	movw	r30, r28
    55ba:	ec 57       	subi	r30, 0x7C	; 124
    55bc:	ff 4f       	sbci	r31, 0xFF	; 255
    55be:	01 90       	ld	r0, Z+
    55c0:	f0 81       	ld	r31, Z
    55c2:	e0 2d       	mov	r30, r0
    55c4:	81 85       	ldd	r24, Z+9	; 0x09
    55c6:	92 85       	ldd	r25, Z+10	; 0x0a
    55c8:	fc 01       	movw	r30, r24
    55ca:	e5 5b       	subi	r30, 0xB5	; 181
    55cc:	ff 4f       	sbci	r31, 0xFF	; 255
    55ce:	40 81       	ld	r20, Z
    55d0:	51 81       	ldd	r21, Z+1	; 0x01
    55d2:	8b 81       	ldd	r24, Y+3	; 0x03
    55d4:	88 2f       	mov	r24, r24
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	9c 01       	movw	r18, r24
    55da:	22 0f       	add	r18, r18
    55dc:	33 1f       	adc	r19, r19
    55de:	c9 01       	movw	r24, r18
    55e0:	88 0f       	add	r24, r24
    55e2:	99 1f       	adc	r25, r25
    55e4:	88 0f       	add	r24, r24
    55e6:	99 1f       	adc	r25, r25
    55e8:	88 0f       	add	r24, r24
    55ea:	99 1f       	adc	r25, r25
    55ec:	82 1b       	sub	r24, r18
    55ee:	93 0b       	sbc	r25, r19
    55f0:	fa 01       	movw	r30, r20
    55f2:	e8 0f       	add	r30, r24
    55f4:	f9 1f       	adc	r31, r25
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	85 87       	std	Z+13, r24	; 0x0d
                  Rfid->pTable[i].srvlogged = true;
    55fa:	fe 01       	movw	r30, r28
    55fc:	ec 57       	subi	r30, 0x7C	; 124
    55fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5600:	01 90       	ld	r0, Z+
    5602:	f0 81       	ld	r31, Z
    5604:	e0 2d       	mov	r30, r0
    5606:	81 85       	ldd	r24, Z+9	; 0x09
    5608:	92 85       	ldd	r25, Z+10	; 0x0a
    560a:	fc 01       	movw	r30, r24
    560c:	e5 5b       	subi	r30, 0xB5	; 181
    560e:	ff 4f       	sbci	r31, 0xFF	; 255
    5610:	40 81       	ld	r20, Z
    5612:	51 81       	ldd	r21, Z+1	; 0x01
    5614:	8b 81       	ldd	r24, Y+3	; 0x03
    5616:	88 2f       	mov	r24, r24
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	9c 01       	movw	r18, r24
    561c:	22 0f       	add	r18, r18
    561e:	33 1f       	adc	r19, r19
    5620:	c9 01       	movw	r24, r18
    5622:	88 0f       	add	r24, r24
    5624:	99 1f       	adc	r25, r25
    5626:	88 0f       	add	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	88 0f       	add	r24, r24
    562c:	99 1f       	adc	r25, r25
    562e:	82 1b       	sub	r24, r18
    5630:	93 0b       	sbc	r25, r19
    5632:	fa 01       	movw	r30, r20
    5634:	e8 0f       	add	r30, r24
    5636:	f9 1f       	adc	r31, r25
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	84 87       	std	Z+12, r24	; 0x0c
                  memset((u08 *) &Rfid->pTable[i], 0, sizeof(sRfidTag));
    563c:	fe 01       	movw	r30, r28
    563e:	ec 57       	subi	r30, 0x7C	; 124
    5640:	ff 4f       	sbci	r31, 0xFF	; 255
    5642:	01 90       	ld	r0, Z+
    5644:	f0 81       	ld	r31, Z
    5646:	e0 2d       	mov	r30, r0
    5648:	81 85       	ldd	r24, Z+9	; 0x09
    564a:	92 85       	ldd	r25, Z+10	; 0x0a
    564c:	fc 01       	movw	r30, r24
    564e:	e5 5b       	subi	r30, 0xB5	; 181
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	80 81       	ld	r24, Z
    5654:	91 81       	ldd	r25, Z+1	; 0x01
    5656:	ac 01       	movw	r20, r24
    5658:	8b 81       	ldd	r24, Y+3	; 0x03
    565a:	88 2f       	mov	r24, r24
    565c:	90 e0       	ldi	r25, 0x00	; 0
    565e:	9c 01       	movw	r18, r24
    5660:	22 0f       	add	r18, r18
    5662:	33 1f       	adc	r19, r19
    5664:	c9 01       	movw	r24, r18
    5666:	88 0f       	add	r24, r24
    5668:	99 1f       	adc	r25, r25
    566a:	88 0f       	add	r24, r24
    566c:	99 1f       	adc	r25, r25
    566e:	88 0f       	add	r24, r24
    5670:	99 1f       	adc	r25, r25
    5672:	82 1b       	sub	r24, r18
    5674:	93 0b       	sbc	r25, r19
    5676:	84 0f       	add	r24, r20
    5678:	95 1f       	adc	r25, r21
    567a:	60 e0       	ldi	r22, 0x00	; 0
    567c:	70 e0       	ldi	r23, 0x00	; 0
    567e:	4e e0       	ldi	r20, 0x0E	; 14
    5680:	50 e0       	ldi	r21, 0x00	; 0
    5682:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
    u08 len;
    u08 ret;

    if (signal[TAGTABLE_SIGNAL].state == SIG_TRIGGERED) {
      signal[TAGTABLE_SIGNAL].state = SIG_RESET;
      for (i = 0; i < Rfid->tableLen; i++) {
    5686:	8b 81       	ldd	r24, Y+3	; 0x03
    5688:	8f 5f       	subi	r24, 0xFF	; 255
    568a:	8b 83       	std	Y+3, r24	; 0x03
    568c:	fe 01       	movw	r30, r28
    568e:	ec 57       	subi	r30, 0x7C	; 124
    5690:	ff 4f       	sbci	r31, 0xFF	; 255
    5692:	01 90       	ld	r0, Z+
    5694:	f0 81       	ld	r31, Z
    5696:	e0 2d       	mov	r30, r0
    5698:	81 85       	ldd	r24, Z+9	; 0x09
    569a:	92 85       	ldd	r25, Z+10	; 0x0a
    569c:	fc 01       	movw	r30, r24
    569e:	e6 5b       	subi	r30, 0xB6	; 182
    56a0:	ff 4f       	sbci	r31, 0xFF	; 255
    56a2:	90 81       	ld	r25, Z
    56a4:	8b 81       	ldd	r24, Y+3	; 0x03
    56a6:	89 17       	cp	r24, r25
    56a8:	08 f4       	brcc	.+2      	; 0x56ac <_ZN11CCONTROLLER11CController15TagTableServiceEv+0xa60>
    56aa:	f6 ca       	rjmp	.-2580   	; 0x4c98 <_ZN11CCONTROLLER11CController15TagTableServiceEv+0x4c>
            }
          }
        }
      }
    }
  }
    56ac:	cb 57       	subi	r28, 0x7B	; 123
    56ae:	df 4f       	sbci	r29, 0xFF	; 255
    56b0:	0f b6       	in	r0, 0x3f	; 63
    56b2:	f8 94       	cli
    56b4:	de bf       	out	0x3e, r29	; 62
    56b6:	0f be       	out	0x3f, r0	; 63
    56b8:	cd bf       	out	0x3d, r28	; 61
    56ba:	cf 91       	pop	r28
    56bc:	df 91       	pop	r29
    56be:	1f 91       	pop	r17
    56c0:	0f 91       	pop	r16
    56c2:	08 95       	ret

000056c4 <_ZN11CCONTROLLER11CController12HandleRxDataEv>:
      cmd = 0;
      break;
  }
}

void CController::HandleRxData(void) {
    56c4:	df 93       	push	r29
    56c6:	cf 93       	push	r28
    56c8:	00 d0       	rcall	.+0      	; 0x56ca <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x6>
    56ca:	00 d0       	rcall	.+0      	; 0x56cc <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x8>
    56cc:	00 d0       	rcall	.+0      	; 0x56ce <_ZN11CCONTROLLER11CController12HandleRxDataEv+0xa>
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    56d2:	9c 83       	std	Y+4, r25	; 0x04
    56d4:	8b 83       	std	Y+3, r24	; 0x03
  c08 *pstr;
  if (modem->smsrx == true) {
    56d6:	eb 81       	ldd	r30, Y+3	; 0x03
    56d8:	fc 81       	ldd	r31, Y+4	; 0x04
    56da:	82 81       	ldd	r24, Z+2	; 0x02
    56dc:	93 81       	ldd	r25, Z+3	; 0x03
    56de:	fc 01       	movw	r30, r24
    56e0:	ee 5c       	subi	r30, 0xCE	; 206
    56e2:	fc 4f       	sbci	r31, 0xFC	; 252
    56e4:	80 81       	ld	r24, Z
    56e6:	81 30       	cpi	r24, 0x01	; 1
    56e8:	09 f0       	breq	.+2      	; 0x56ec <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x28>
    56ea:	58 c0       	rjmp	.+176    	; 0x579c <_ZN11CCONTROLLER11CController12HandleRxDataEv+0xd8>
    modem->smsrx = false;
    56ec:	eb 81       	ldd	r30, Y+3	; 0x03
    56ee:	fc 81       	ldd	r31, Y+4	; 0x04
    56f0:	82 81       	ldd	r24, Z+2	; 0x02
    56f2:	93 81       	ldd	r25, Z+3	; 0x03
    56f4:	fc 01       	movw	r30, r24
    56f6:	ee 5c       	subi	r30, 0xCE	; 206
    56f8:	fc 4f       	sbci	r31, 0xFC	; 252
    56fa:	10 82       	st	Z, r1
    if (strstr_P(modem->sms.message, PSTR("SMS(E)SMS"))) {
    56fc:	eb 81       	ldd	r30, Y+3	; 0x03
    56fe:	fc 81       	ldd	r31, Y+4	; 0x04
    5700:	82 81       	ldd	r24, Z+2	; 0x02
    5702:	93 81       	ldd	r25, Z+3	; 0x03
    5704:	8a 55       	subi	r24, 0x5A	; 90
    5706:	9d 4f       	sbci	r25, 0xFD	; 253
    5708:	26 e8       	ldi	r18, 0x86	; 134
    570a:	34 e0       	ldi	r19, 0x04	; 4
    570c:	b9 01       	movw	r22, r18
    570e:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    5712:	1e 82       	std	Y+6, r1	; 0x06
    5714:	00 97       	sbiw	r24, 0x00	; 0
    5716:	11 f0       	breq	.+4      	; 0x571c <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x58>
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	8e 83       	std	Y+6, r24	; 0x06
    571c:	8e 81       	ldd	r24, Y+6	; 0x06
    571e:	88 23       	and	r24, r24
    5720:	b1 f0       	breq	.+44     	; 0x574e <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x8a>
      modem->smstx_en = true;
    5722:	eb 81       	ldd	r30, Y+3	; 0x03
    5724:	fc 81       	ldd	r31, Y+4	; 0x04
    5726:	82 81       	ldd	r24, Z+2	; 0x02
    5728:	93 81       	ldd	r25, Z+3	; 0x03
    572a:	fc 01       	movw	r30, r24
    572c:	ed 5c       	subi	r30, 0xCD	; 205
    572e:	fc 4f       	sbci	r31, 0xFC	; 252
    5730:	81 e0       	ldi	r24, 0x01	; 1
    5732:	80 83       	st	Z, r24
      eeprom_write_byte(&EEsmsEnable, true);
    5734:	89 e3       	ldi	r24, 0x39	; 57
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	61 e0       	ldi	r22, 0x01	; 1
    573a:	0e 94 cf 5e 	call	0xbd9e	; 0xbd9e <__eewr_byte_m1280>
      DbgUart.sendStr_P(PSTR("\r\n ENABLE SMS\n\r"));
    573e:	26 e7       	ldi	r18, 0x76	; 118
    5740:	34 e0       	ldi	r19, 0x04	; 4
    5742:	89 ee       	ldi	r24, 0xE9	; 233
    5744:	94 e0       	ldi	r25, 0x04	; 4
    5746:	b9 01       	movw	r22, r18
    5748:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    574c:	27 c0       	rjmp	.+78     	; 0x579c <_ZN11CCONTROLLER11CController12HandleRxDataEv+0xd8>
    } else if (strstr_P(modem->sms.message, PSTR("SMS(D)SMS"))) {
    574e:	eb 81       	ldd	r30, Y+3	; 0x03
    5750:	fc 81       	ldd	r31, Y+4	; 0x04
    5752:	82 81       	ldd	r24, Z+2	; 0x02
    5754:	93 81       	ldd	r25, Z+3	; 0x03
    5756:	8a 55       	subi	r24, 0x5A	; 90
    5758:	9d 4f       	sbci	r25, 0xFD	; 253
    575a:	2c e6       	ldi	r18, 0x6C	; 108
    575c:	34 e0       	ldi	r19, 0x04	; 4
    575e:	b9 01       	movw	r22, r18
    5760:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    5764:	1d 82       	std	Y+5, r1	; 0x05
    5766:	00 97       	sbiw	r24, 0x00	; 0
    5768:	11 f0       	breq	.+4      	; 0x576e <_ZN11CCONTROLLER11CController12HandleRxDataEv+0xaa>
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	8d 83       	std	Y+5, r24	; 0x05
    576e:	8d 81       	ldd	r24, Y+5	; 0x05
    5770:	88 23       	and	r24, r24
    5772:	a1 f0       	breq	.+40     	; 0x579c <_ZN11CCONTROLLER11CController12HandleRxDataEv+0xd8>
      DbgUart.sendStr_P(PSTR("\r\n DISABLE SMS\n\r"));
    5774:	2b e5       	ldi	r18, 0x5B	; 91
    5776:	34 e0       	ldi	r19, 0x04	; 4
    5778:	89 ee       	ldi	r24, 0xE9	; 233
    577a:	94 e0       	ldi	r25, 0x04	; 4
    577c:	b9 01       	movw	r22, r18
    577e:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      modem->smstx_en = false;
    5782:	eb 81       	ldd	r30, Y+3	; 0x03
    5784:	fc 81       	ldd	r31, Y+4	; 0x04
    5786:	82 81       	ldd	r24, Z+2	; 0x02
    5788:	93 81       	ldd	r25, Z+3	; 0x03
    578a:	fc 01       	movw	r30, r24
    578c:	ed 5c       	subi	r30, 0xCD	; 205
    578e:	fc 4f       	sbci	r31, 0xFC	; 252
    5790:	10 82       	st	Z, r1
      eeprom_write_byte(&EEsmsEnable, false);
    5792:	89 e3       	ldi	r24, 0x39	; 57
    5794:	90 e0       	ldi	r25, 0x00	; 0
    5796:	60 e0       	ldi	r22, 0x00	; 0
    5798:	0e 94 cf 5e 	call	0xbd9e	; 0xbd9e <__eewr_byte_m1280>
    }
  }

  if (modem->gprsrx == true) {
    579c:	eb 81       	ldd	r30, Y+3	; 0x03
    579e:	fc 81       	ldd	r31, Y+4	; 0x04
    57a0:	82 81       	ldd	r24, Z+2	; 0x02
    57a2:	93 81       	ldd	r25, Z+3	; 0x03
    57a4:	fc 01       	movw	r30, r24
    57a6:	ee 5c       	subi	r30, 0xCE	; 206
    57a8:	fb 4f       	sbci	r31, 0xFB	; 251
    57aa:	80 81       	ld	r24, Z
    57ac:	81 30       	cpi	r24, 0x01	; 1
    57ae:	09 f0       	breq	.+2      	; 0x57b2 <_ZN11CCONTROLLER11CController12HandleRxDataEv+0xee>
    57b0:	d3 c0       	rjmp	.+422    	; 0x5958 <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x294>

    pstr = strstr_P(modem->gprsraw, PSTR("SMS(E)SMS"));
    57b2:	eb 81       	ldd	r30, Y+3	; 0x03
    57b4:	fc 81       	ldd	r31, Y+4	; 0x04
    57b6:	82 81       	ldd	r24, Z+2	; 0x02
    57b8:	93 81       	ldd	r25, Z+3	; 0x03
    57ba:	8c 5c       	subi	r24, 0xCC	; 204
    57bc:	9c 4f       	sbci	r25, 0xFC	; 252
    57be:	21 e5       	ldi	r18, 0x51	; 81
    57c0:	34 e0       	ldi	r19, 0x04	; 4
    57c2:	b9 01       	movw	r22, r18
    57c4:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    57c8:	9a 83       	std	Y+2, r25	; 0x02
    57ca:	89 83       	std	Y+1, r24	; 0x01
    if (pstr) {
    57cc:	89 81       	ldd	r24, Y+1	; 0x01
    57ce:	9a 81       	ldd	r25, Y+2	; 0x02
    57d0:	00 97       	sbiw	r24, 0x00	; 0
    57d2:	a9 f0       	breq	.+42     	; 0x57fe <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x13a>
      modem->smstx_en = true;
    57d4:	eb 81       	ldd	r30, Y+3	; 0x03
    57d6:	fc 81       	ldd	r31, Y+4	; 0x04
    57d8:	82 81       	ldd	r24, Z+2	; 0x02
    57da:	93 81       	ldd	r25, Z+3	; 0x03
    57dc:	fc 01       	movw	r30, r24
    57de:	ed 5c       	subi	r30, 0xCD	; 205
    57e0:	fc 4f       	sbci	r31, 0xFC	; 252
    57e2:	81 e0       	ldi	r24, 0x01	; 1
    57e4:	80 83       	st	Z, r24
      eeprom_write_byte(&EEsmsEnable, true);
    57e6:	89 e3       	ldi	r24, 0x39	; 57
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	61 e0       	ldi	r22, 0x01	; 1
    57ec:	0e 94 cf 5e 	call	0xbd9e	; 0xbd9e <__eewr_byte_m1280>
      DbgUart.sendStr_P(PSTR("\r\n ===> ENABLE SMS\n\r"));
    57f0:	2c e3       	ldi	r18, 0x3C	; 60
    57f2:	34 e0       	ldi	r19, 0x04	; 4
    57f4:	89 ee       	ldi	r24, 0xE9	; 233
    57f6:	94 e0       	ldi	r25, 0x04	; 4
    57f8:	b9 01       	movw	r22, r18
    57fa:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    }
    pstr = strstr_P(modem->gprsraw, PSTR("SMS(D)SMS"));
    57fe:	eb 81       	ldd	r30, Y+3	; 0x03
    5800:	fc 81       	ldd	r31, Y+4	; 0x04
    5802:	82 81       	ldd	r24, Z+2	; 0x02
    5804:	93 81       	ldd	r25, Z+3	; 0x03
    5806:	8c 5c       	subi	r24, 0xCC	; 204
    5808:	9c 4f       	sbci	r25, 0xFC	; 252
    580a:	22 e3       	ldi	r18, 0x32	; 50
    580c:	34 e0       	ldi	r19, 0x04	; 4
    580e:	b9 01       	movw	r22, r18
    5810:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    5814:	9a 83       	std	Y+2, r25	; 0x02
    5816:	89 83       	std	Y+1, r24	; 0x01
    if (pstr) {
    5818:	89 81       	ldd	r24, Y+1	; 0x01
    581a:	9a 81       	ldd	r25, Y+2	; 0x02
    581c:	00 97       	sbiw	r24, 0x00	; 0
    581e:	a1 f0       	breq	.+40     	; 0x5848 <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x184>
      DbgUart.sendStr_P(PSTR("\r\n ====>DISABLE SMS\n\r"));
    5820:	2c e1       	ldi	r18, 0x1C	; 28
    5822:	34 e0       	ldi	r19, 0x04	; 4
    5824:	89 ee       	ldi	r24, 0xE9	; 233
    5826:	94 e0       	ldi	r25, 0x04	; 4
    5828:	b9 01       	movw	r22, r18
    582a:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      modem->smstx_en = false;
    582e:	eb 81       	ldd	r30, Y+3	; 0x03
    5830:	fc 81       	ldd	r31, Y+4	; 0x04
    5832:	82 81       	ldd	r24, Z+2	; 0x02
    5834:	93 81       	ldd	r25, Z+3	; 0x03
    5836:	fc 01       	movw	r30, r24
    5838:	ed 5c       	subi	r30, 0xCD	; 205
    583a:	fc 4f       	sbci	r31, 0xFC	; 252
    583c:	10 82       	st	Z, r1
      eeprom_write_byte(&EEsmsEnable, false);
    583e:	89 e3       	ldi	r24, 0x39	; 57
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	60 e0       	ldi	r22, 0x00	; 0
    5844:	0e 94 cf 5e 	call	0xbd9e	; 0xbd9e <__eewr_byte_m1280>
    }
    pstr = strstr_P(modem->gprsraw, PSTR("NUM1("));
    5848:	eb 81       	ldd	r30, Y+3	; 0x03
    584a:	fc 81       	ldd	r31, Y+4	; 0x04
    584c:	82 81       	ldd	r24, Z+2	; 0x02
    584e:	93 81       	ldd	r25, Z+3	; 0x03
    5850:	8c 5c       	subi	r24, 0xCC	; 204
    5852:	9c 4f       	sbci	r25, 0xFC	; 252
    5854:	26 e1       	ldi	r18, 0x16	; 22
    5856:	34 e0       	ldi	r19, 0x04	; 4
    5858:	b9 01       	movw	r22, r18
    585a:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    585e:	9a 83       	std	Y+2, r25	; 0x02
    5860:	89 83       	std	Y+1, r24	; 0x01
    if (pstr) {
    5862:	89 81       	ldd	r24, Y+1	; 0x01
    5864:	9a 81       	ldd	r25, Y+2	; 0x02
    5866:	00 97       	sbiw	r24, 0x00	; 0
    5868:	49 f1       	breq	.+82     	; 0x58bc <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x1f8>
      strncpy(PhoneNumbers[0], pstr + strlen("NUM1("), 10);
    586a:	8b 81       	ldd	r24, Y+3	; 0x03
    586c:	9c 81       	ldd	r25, Y+4	; 0x04
    586e:	4d 96       	adiw	r24, 0x1d	; 29
    5870:	ac 01       	movw	r20, r24
    5872:	89 81       	ldd	r24, Y+1	; 0x01
    5874:	9a 81       	ldd	r25, Y+2	; 0x02
    5876:	9c 01       	movw	r18, r24
    5878:	2b 5f       	subi	r18, 0xFB	; 251
    587a:	3f 4f       	sbci	r19, 0xFF	; 255
    587c:	ca 01       	movw	r24, r20
    587e:	b9 01       	movw	r22, r18
    5880:	4a e0       	ldi	r20, 0x0A	; 10
    5882:	50 e0       	ldi	r21, 0x00	; 0
    5884:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <strncpy>
      DbgUart.sendStr(PhoneNumbers[0]);
    5888:	8b 81       	ldd	r24, Y+3	; 0x03
    588a:	9c 81       	ldd	r25, Y+4	; 0x04
    588c:	4d 96       	adiw	r24, 0x1d	; 29
    588e:	9c 01       	movw	r18, r24
    5890:	89 ee       	ldi	r24, 0xE9	; 233
    5892:	94 e0       	ldi	r25, 0x04	; 4
    5894:	b9 01       	movw	r22, r18
    5896:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      eeprom_write_block(PhoneNumbers[0], eePhoneNumbers[0], sizeof(eePhoneNumbers[0]));
    589a:	8b 81       	ldd	r24, Y+3	; 0x03
    589c:	9c 81       	ldd	r25, Y+4	; 0x04
    589e:	4d 96       	adiw	r24, 0x1d	; 29
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	b9 01       	movw	r22, r18
    58a6:	4c e0       	ldi	r20, 0x0C	; 12
    58a8:	50 e0       	ldi	r21, 0x00	; 0
    58aa:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
      DbgUart.sendStr_P(PSTR("\r\n ====>PROGRAM PHONE NUMBER1 OK \n\r"));
    58ae:	22 ef       	ldi	r18, 0xF2	; 242
    58b0:	33 e0       	ldi	r19, 0x03	; 3
    58b2:	89 ee       	ldi	r24, 0xE9	; 233
    58b4:	94 e0       	ldi	r25, 0x04	; 4
    58b6:	b9 01       	movw	r22, r18
    58b8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    }
    pstr = strstr_P(modem->gprsraw, PSTR("NUM2("));
    58bc:	eb 81       	ldd	r30, Y+3	; 0x03
    58be:	fc 81       	ldd	r31, Y+4	; 0x04
    58c0:	82 81       	ldd	r24, Z+2	; 0x02
    58c2:	93 81       	ldd	r25, Z+3	; 0x03
    58c4:	8c 5c       	subi	r24, 0xCC	; 204
    58c6:	9c 4f       	sbci	r25, 0xFC	; 252
    58c8:	2c ee       	ldi	r18, 0xEC	; 236
    58ca:	33 e0       	ldi	r19, 0x03	; 3
    58cc:	b9 01       	movw	r22, r18
    58ce:	0e 94 74 5b 	call	0xb6e8	; 0xb6e8 <strstr_P>
    58d2:	9a 83       	std	Y+2, r25	; 0x02
    58d4:	89 83       	std	Y+1, r24	; 0x01
    if (pstr) {
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	9a 81       	ldd	r25, Y+2	; 0x02
    58da:	00 97       	sbiw	r24, 0x00	; 0
    58dc:	49 f1       	breq	.+82     	; 0x5930 <_ZN11CCONTROLLER11CController12HandleRxDataEv+0x26c>
      strncpy(PhoneNumbers[1], pstr + strlen("NUM2("), 10);
    58de:	8b 81       	ldd	r24, Y+3	; 0x03
    58e0:	9c 81       	ldd	r25, Y+4	; 0x04
    58e2:	89 96       	adiw	r24, 0x29	; 41
    58e4:	ac 01       	movw	r20, r24
    58e6:	89 81       	ldd	r24, Y+1	; 0x01
    58e8:	9a 81       	ldd	r25, Y+2	; 0x02
    58ea:	9c 01       	movw	r18, r24
    58ec:	2b 5f       	subi	r18, 0xFB	; 251
    58ee:	3f 4f       	sbci	r19, 0xFF	; 255
    58f0:	ca 01       	movw	r24, r20
    58f2:	b9 01       	movw	r22, r18
    58f4:	4a e0       	ldi	r20, 0x0A	; 10
    58f6:	50 e0       	ldi	r21, 0x00	; 0
    58f8:	0e 94 d2 5b 	call	0xb7a4	; 0xb7a4 <strncpy>
      DbgUart.sendStr(PhoneNumbers[1]);
    58fc:	8b 81       	ldd	r24, Y+3	; 0x03
    58fe:	9c 81       	ldd	r25, Y+4	; 0x04
    5900:	89 96       	adiw	r24, 0x29	; 41
    5902:	9c 01       	movw	r18, r24
    5904:	89 ee       	ldi	r24, 0xE9	; 233
    5906:	94 e0       	ldi	r25, 0x04	; 4
    5908:	b9 01       	movw	r22, r18
    590a:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      eeprom_write_block(PhoneNumbers[1], eePhoneNumbers[1], sizeof(eePhoneNumbers[0]));
    590e:	8b 81       	ldd	r24, Y+3	; 0x03
    5910:	9c 81       	ldd	r25, Y+4	; 0x04
    5912:	89 96       	adiw	r24, 0x29	; 41
    5914:	2c e0       	ldi	r18, 0x0C	; 12
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	b9 01       	movw	r22, r18
    591a:	4c e0       	ldi	r20, 0x0C	; 12
    591c:	50 e0       	ldi	r21, 0x00	; 0
    591e:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
      DbgUart.sendStr_P(PSTR("\r\n ====>PROGRAM PHONE NUMBER 2 OK\n\r"));
    5922:	28 ec       	ldi	r18, 0xC8	; 200
    5924:	33 e0       	ldi	r19, 0x03	; 3
    5926:	89 ee       	ldi	r24, 0xE9	; 233
    5928:	94 e0       	ldi	r25, 0x04	; 4
    592a:	b9 01       	movw	r22, r18
    592c:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    }
    memset(modem->gprsraw,0,sizeof(modem->gprsraw));
    5930:	eb 81       	ldd	r30, Y+3	; 0x03
    5932:	fc 81       	ldd	r31, Y+4	; 0x04
    5934:	82 81       	ldd	r24, Z+2	; 0x02
    5936:	93 81       	ldd	r25, Z+3	; 0x03
    5938:	8c 5c       	subi	r24, 0xCC	; 204
    593a:	9c 4f       	sbci	r25, 0xFC	; 252
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	4e ef       	ldi	r20, 0xFE	; 254
    5942:	50 e0       	ldi	r21, 0x00	; 0
    5944:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
    modem->gprsrx = false;
    5948:	eb 81       	ldd	r30, Y+3	; 0x03
    594a:	fc 81       	ldd	r31, Y+4	; 0x04
    594c:	82 81       	ldd	r24, Z+2	; 0x02
    594e:	93 81       	ldd	r25, Z+3	; 0x03
    5950:	fc 01       	movw	r30, r24
    5952:	ee 5c       	subi	r30, 0xCE	; 206
    5954:	fb 4f       	sbci	r31, 0xFB	; 251
    5956:	10 82       	st	Z, r1
  }
 }
    5958:	26 96       	adiw	r28, 0x06	; 6
    595a:	0f b6       	in	r0, 0x3f	; 63
    595c:	f8 94       	cli
    595e:	de bf       	out	0x3e, r29	; 62
    5960:	0f be       	out	0x3f, r0	; 63
    5962:	cd bf       	out	0x3d, r28	; 61
    5964:	cf 91       	pop	r28
    5966:	df 91       	pop	r29
    5968:	08 95       	ret

0000596a <_ZN11CCONTROLLER11CController14consoleServiceEv>:
        break;
    }
  }
}

void CController::consoleService(void) {
    596a:	df 93       	push	r29
    596c:	cf 93       	push	r28
    596e:	cd b7       	in	r28, 0x3d	; 61
    5970:	de b7       	in	r29, 0x3e	; 62
    5972:	e8 97       	sbiw	r28, 0x38	; 56
    5974:	0f b6       	in	r0, 0x3f	; 63
    5976:	f8 94       	cli
    5978:	de bf       	out	0x3e, r29	; 62
    597a:	0f be       	out	0x3f, r0	; 63
    597c:	cd bf       	out	0x3d, r28	; 61
    597e:	98 ab       	std	Y+48, r25	; 0x30
    5980:	8f a7       	std	Y+47, r24	; 0x2f
  u08 cmd;
  c08 tmp;
  c08 *pstr;
  c08 str[32];
  u08 i, j;
  cmd = 0;
    5982:	19 86       	std	Y+9, r1	; 0x09

  TagTableService();
    5984:	8f a5       	ldd	r24, Y+47	; 0x2f
    5986:	98 a9       	ldd	r25, Y+48	; 0x30
    5988:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <_ZN11CCONTROLLER11CController15TagTableServiceEv>
  if (signal[MODEM_SIGNAL].state == SIG_TRIGGERED) {
    598c:	ef a5       	ldd	r30, Y+47	; 0x2f
    598e:	f8 a9       	ldd	r31, Y+48	; 0x30
    5990:	84 8d       	ldd	r24, Z+28	; 0x1c
    5992:	82 30       	cpi	r24, 0x02	; 2
    5994:	51 f4       	brne	.+20     	; 0x59aa <_ZN11CCONTROLLER11CController14consoleServiceEv+0x40>
    signal[MODEM_SIGNAL].state = SIG_RESET;
    5996:	ef a5       	ldd	r30, Y+47	; 0x2f
    5998:	f8 a9       	ldd	r31, Y+48	; 0x30
    599a:	83 e0       	ldi	r24, 0x03	; 3
    599c:	84 8f       	std	Z+28, r24	; 0x1c
    modem->UpdateMdmStatus();
    599e:	ef a5       	ldd	r30, Y+47	; 0x2f
    59a0:	f8 a9       	ldd	r31, Y+48	; 0x30
    59a2:	82 81       	ldd	r24, Z+2	; 0x02
    59a4:	93 81       	ldd	r25, Z+3	; 0x03
    59a6:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN6CModem15UpdateMdmStatusEv>
  }

  DbgUart.receive(&cmd, 1);
    59aa:	89 ee       	ldi	r24, 0xE9	; 233
    59ac:	94 e0       	ldi	r25, 0x04	; 4
    59ae:	9e 01       	movw	r18, r28
    59b0:	27 5f       	subi	r18, 0xF7	; 247
    59b2:	3f 4f       	sbci	r19, 0xFF	; 255
    59b4:	b9 01       	movw	r22, r18
    59b6:	41 e0       	ldi	r20, 0x01	; 1
    59b8:	50 e0       	ldi	r21, 0x00	; 0
    59ba:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
  switch (cmd) {
    59be:	89 85       	ldd	r24, Y+9	; 0x09
    59c0:	28 2f       	mov	r18, r24
    59c2:	30 e0       	ldi	r19, 0x00	; 0
    59c4:	38 af       	std	Y+56, r19	; 0x38
    59c6:	2f ab       	std	Y+55, r18	; 0x37
    59c8:	8f a9       	ldd	r24, Y+55	; 0x37
    59ca:	98 ad       	ldd	r25, Y+56	; 0x38
    59cc:	87 36       	cpi	r24, 0x67	; 103
    59ce:	91 05       	cpc	r25, r1
    59d0:	09 f4       	brne	.+2      	; 0x59d4 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x6a>
    59d2:	31 c1       	rjmp	.+610    	; 0x5c36 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x2cc>
    59d4:	2f a9       	ldd	r18, Y+55	; 0x37
    59d6:	38 ad       	ldd	r19, Y+56	; 0x38
    59d8:	28 36       	cpi	r18, 0x68	; 104
    59da:	31 05       	cpc	r19, r1
    59dc:	0c f0       	brlt	.+2      	; 0x59e0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x76>
    59de:	5b c0       	rjmp	.+182    	; 0x5a96 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x12c>
    59e0:	8f a9       	ldd	r24, Y+55	; 0x37
    59e2:	98 ad       	ldd	r25, Y+56	; 0x38
    59e4:	81 34       	cpi	r24, 0x41	; 65
    59e6:	91 05       	cpc	r25, r1
    59e8:	09 f4       	brne	.+2      	; 0x59ec <_ZN11CCONTROLLER11CController14consoleServiceEv+0x82>
    59ea:	5a c2       	rjmp	.+1204   	; 0x5ea0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x536>
    59ec:	2f a9       	ldd	r18, Y+55	; 0x37
    59ee:	38 ad       	ldd	r19, Y+56	; 0x38
    59f0:	22 34       	cpi	r18, 0x42	; 66
    59f2:	31 05       	cpc	r19, r1
    59f4:	5c f5       	brge	.+86     	; 0x5a4c <_ZN11CCONTROLLER11CController14consoleServiceEv+0xe2>
    59f6:	8f a9       	ldd	r24, Y+55	; 0x37
    59f8:	98 ad       	ldd	r25, Y+56	; 0x38
    59fa:	82 33       	cpi	r24, 0x32	; 50
    59fc:	91 05       	cpc	r25, r1
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x98>
    5a00:	d9 c0       	rjmp	.+434    	; 0x5bb4 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x24a>
    5a02:	2f a9       	ldd	r18, Y+55	; 0x37
    5a04:	38 ad       	ldd	r19, Y+56	; 0x38
    5a06:	23 33       	cpi	r18, 0x33	; 51
    5a08:	31 05       	cpc	r19, r1
    5a0a:	9c f4       	brge	.+38     	; 0x5a32 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xc8>
    5a0c:	8f a9       	ldd	r24, Y+55	; 0x37
    5a0e:	98 ad       	ldd	r25, Y+56	; 0x38
    5a10:	84 32       	cpi	r24, 0x24	; 36
    5a12:	91 05       	cpc	r25, r1
    5a14:	09 f4       	brne	.+2      	; 0x5a18 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xae>
    5a16:	07 c1       	rjmp	.+526    	; 0x5c26 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x2bc>
    5a18:	2f a9       	ldd	r18, Y+55	; 0x37
    5a1a:	38 ad       	ldd	r19, Y+56	; 0x38
    5a1c:	21 33       	cpi	r18, 0x31	; 49
    5a1e:	31 05       	cpc	r19, r1
    5a20:	09 f4       	brne	.+2      	; 0x5a24 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xba>
    5a22:	bd c0       	rjmp	.+378    	; 0x5b9e <_ZN11CCONTROLLER11CController14consoleServiceEv+0x234>
    5a24:	8f a9       	ldd	r24, Y+55	; 0x37
    5a26:	98 ad       	ldd	r25, Y+56	; 0x38
    5a28:	80 32       	cpi	r24, 0x20	; 32
    5a2a:	91 05       	cpc	r25, r1
    5a2c:	09 f4       	brne	.+2      	; 0x5a30 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xc6>
    5a2e:	61 c5       	rjmp	.+2754   	; 0x64f2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb88>
    5a30:	13 c6       	rjmp	.+3110   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5a32:	2f a9       	ldd	r18, Y+55	; 0x37
    5a34:	38 ad       	ldd	r19, Y+56	; 0x38
    5a36:	23 33       	cpi	r18, 0x33	; 51
    5a38:	31 05       	cpc	r19, r1
    5a3a:	09 f4       	brne	.+2      	; 0x5a3e <_ZN11CCONTROLLER11CController14consoleServiceEv+0xd4>
    5a3c:	c6 c0       	rjmp	.+396    	; 0x5bca <_ZN11CCONTROLLER11CController14consoleServiceEv+0x260>
    5a3e:	8f a9       	ldd	r24, Y+55	; 0x37
    5a40:	98 ad       	ldd	r25, Y+56	; 0x38
    5a42:	84 33       	cpi	r24, 0x34	; 52
    5a44:	91 05       	cpc	r25, r1
    5a46:	09 f4       	brne	.+2      	; 0x5a4a <_ZN11CCONTROLLER11CController14consoleServiceEv+0xe0>
    5a48:	cb c0       	rjmp	.+406    	; 0x5be0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x276>
    5a4a:	06 c6       	rjmp	.+3084   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5a4c:	2f a9       	ldd	r18, Y+55	; 0x37
    5a4e:	38 ad       	ldd	r19, Y+56	; 0x38
    5a50:	27 35       	cpi	r18, 0x57	; 87
    5a52:	31 05       	cpc	r19, r1
    5a54:	09 f4       	brne	.+2      	; 0x5a58 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xee>
    5a56:	51 c1       	rjmp	.+674    	; 0x5cfa <_ZN11CCONTROLLER11CController14consoleServiceEv+0x390>
    5a58:	8f a9       	ldd	r24, Y+55	; 0x37
    5a5a:	98 ad       	ldd	r25, Y+56	; 0x38
    5a5c:	88 35       	cpi	r24, 0x58	; 88
    5a5e:	91 05       	cpc	r25, r1
    5a60:	6c f4       	brge	.+26     	; 0x5a7c <_ZN11CCONTROLLER11CController14consoleServiceEv+0x112>
    5a62:	2f a9       	ldd	r18, Y+55	; 0x37
    5a64:	38 ad       	ldd	r19, Y+56	; 0x38
    5a66:	2e 34       	cpi	r18, 0x4E	; 78
    5a68:	31 05       	cpc	r19, r1
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <_ZN11CCONTROLLER11CController14consoleServiceEv+0x104>
    5a6c:	be c3       	rjmp	.+1916   	; 0x61ea <_ZN11CCONTROLLER11CController14consoleServiceEv+0x880>
    5a6e:	8f a9       	ldd	r24, Y+55	; 0x37
    5a70:	98 ad       	ldd	r25, Y+56	; 0x38
    5a72:	84 35       	cpi	r24, 0x54	; 84
    5a74:	91 05       	cpc	r25, r1
    5a76:	09 f4       	brne	.+2      	; 0x5a7a <_ZN11CCONTROLLER11CController14consoleServiceEv+0x110>
    5a78:	da c1       	rjmp	.+948    	; 0x5e2e <_ZN11CCONTROLLER11CController14consoleServiceEv+0x4c4>
    5a7a:	ee c5       	rjmp	.+3036   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5a7c:	2f a9       	ldd	r18, Y+55	; 0x37
    5a7e:	38 ad       	ldd	r19, Y+56	; 0x38
    5a80:	21 36       	cpi	r18, 0x61	; 97
    5a82:	31 05       	cpc	r19, r1
    5a84:	09 f4       	brne	.+2      	; 0x5a88 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x11e>
    5a86:	e5 c1       	rjmp	.+970    	; 0x5e52 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x4e8>
    5a88:	8f a9       	ldd	r24, Y+55	; 0x37
    5a8a:	98 ad       	ldd	r25, Y+56	; 0x38
    5a8c:	83 36       	cpi	r24, 0x63	; 99
    5a8e:	91 05       	cpc	r25, r1
    5a90:	09 f4       	brne	.+2      	; 0x5a94 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x12a>
    5a92:	7e c0       	rjmp	.+252    	; 0x5b90 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x226>
    5a94:	e1 c5       	rjmp	.+3010   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5a96:	2f a9       	ldd	r18, Y+55	; 0x37
    5a98:	38 ad       	ldd	r19, Y+56	; 0x38
    5a9a:	22 37       	cpi	r18, 0x72	; 114
    5a9c:	31 05       	cpc	r19, r1
    5a9e:	09 f4       	brne	.+2      	; 0x5aa2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x138>
    5aa0:	ba c0       	rjmp	.+372    	; 0x5c16 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x2ac>
    5aa2:	8f a9       	ldd	r24, Y+55	; 0x37
    5aa4:	98 ad       	ldd	r25, Y+56	; 0x38
    5aa6:	83 37       	cpi	r24, 0x73	; 115
    5aa8:	91 05       	cpc	r25, r1
    5aaa:	2c f5       	brge	.+74     	; 0x5af6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x18c>
    5aac:	2f a9       	ldd	r18, Y+55	; 0x37
    5aae:	38 ad       	ldd	r19, Y+56	; 0x38
    5ab0:	2e 36       	cpi	r18, 0x6E	; 110
    5ab2:	31 05       	cpc	r19, r1
    5ab4:	09 f4       	brne	.+2      	; 0x5ab8 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x14e>
    5ab6:	99 c3       	rjmp	.+1842   	; 0x61ea <_ZN11CCONTROLLER11CController14consoleServiceEv+0x880>
    5ab8:	8f a9       	ldd	r24, Y+55	; 0x37
    5aba:	98 ad       	ldd	r25, Y+56	; 0x38
    5abc:	8f 36       	cpi	r24, 0x6F	; 111
    5abe:	91 05       	cpc	r25, r1
    5ac0:	6c f4       	brge	.+26     	; 0x5adc <_ZN11CCONTROLLER11CController14consoleServiceEv+0x172>
    5ac2:	2f a9       	ldd	r18, Y+55	; 0x37
    5ac4:	38 ad       	ldd	r19, Y+56	; 0x38
    5ac6:	29 36       	cpi	r18, 0x69	; 105
    5ac8:	31 05       	cpc	r19, r1
    5aca:	09 f4       	brne	.+2      	; 0x5ace <_ZN11CCONTROLLER11CController14consoleServiceEv+0x164>
    5acc:	94 c0       	rjmp	.+296    	; 0x5bf6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x28c>
    5ace:	8f a9       	ldd	r24, Y+55	; 0x37
    5ad0:	98 ad       	ldd	r25, Y+56	; 0x38
    5ad2:	8d 36       	cpi	r24, 0x6D	; 109
    5ad4:	91 05       	cpc	r25, r1
    5ad6:	09 f4       	brne	.+2      	; 0x5ada <_ZN11CCONTROLLER11CController14consoleServiceEv+0x170>
    5ad8:	0c c5       	rjmp	.+2584   	; 0x64f2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb88>
    5ada:	be c5       	rjmp	.+2940   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5adc:	2f a9       	ldd	r18, Y+55	; 0x37
    5ade:	38 ad       	ldd	r19, Y+56	; 0x38
    5ae0:	20 37       	cpi	r18, 0x70	; 112
    5ae2:	31 05       	cpc	r19, r1
    5ae4:	09 f4       	brne	.+2      	; 0x5ae8 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x17e>
    5ae6:	85 c4       	rjmp	.+2314   	; 0x63f2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xa88>
    5ae8:	8f a9       	ldd	r24, Y+55	; 0x37
    5aea:	98 ad       	ldd	r25, Y+56	; 0x38
    5aec:	81 37       	cpi	r24, 0x71	; 113
    5aee:	91 05       	cpc	r25, r1
    5af0:	09 f4       	brne	.+2      	; 0x5af4 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x18a>
    5af2:	47 c0       	rjmp	.+142    	; 0x5b82 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x218>
    5af4:	b1 c5       	rjmp	.+2914   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5af6:	2f a9       	ldd	r18, Y+55	; 0x37
    5af8:	38 ad       	ldd	r19, Y+56	; 0x38
    5afa:	26 37       	cpi	r18, 0x76	; 118
    5afc:	31 05       	cpc	r19, r1
    5afe:	09 f4       	brne	.+2      	; 0x5b02 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x198>
    5b00:	de c2       	rjmp	.+1468   	; 0x60be <_ZN11CCONTROLLER11CController14consoleServiceEv+0x754>
    5b02:	8f a9       	ldd	r24, Y+55	; 0x37
    5b04:	98 ad       	ldd	r25, Y+56	; 0x38
    5b06:	87 37       	cpi	r24, 0x77	; 119
    5b08:	91 05       	cpc	r25, r1
    5b0a:	64 f4       	brge	.+24     	; 0x5b24 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x1ba>
    5b0c:	2f a9       	ldd	r18, Y+55	; 0x37
    5b0e:	38 ad       	ldd	r19, Y+56	; 0x38
    5b10:	23 37       	cpi	r18, 0x73	; 115
    5b12:	31 05       	cpc	r19, r1
    5b14:	d1 f0       	breq	.+52     	; 0x5b4a <_ZN11CCONTROLLER11CController14consoleServiceEv+0x1e0>
    5b16:	8f a9       	ldd	r24, Y+55	; 0x37
    5b18:	98 ad       	ldd	r25, Y+56	; 0x38
    5b1a:	84 37       	cpi	r24, 0x74	; 116
    5b1c:	91 05       	cpc	r25, r1
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x1b8>
    5b20:	ec c4       	rjmp	.+2520   	; 0x64fa <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb90>
    5b22:	9a c5       	rjmp	.+2868   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    5b24:	2f a9       	ldd	r18, Y+55	; 0x37
    5b26:	38 ad       	ldd	r19, Y+56	; 0x38
    5b28:	28 37       	cpi	r18, 0x78	; 120
    5b2a:	31 05       	cpc	r19, r1
    5b2c:	09 f4       	brne	.+2      	; 0x5b30 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x1c6>
    5b2e:	bf c2       	rjmp	.+1406   	; 0x60ae <_ZN11CCONTROLLER11CController14consoleServiceEv+0x744>
    5b30:	8f a9       	ldd	r24, Y+55	; 0x37
    5b32:	98 ad       	ldd	r25, Y+56	; 0x38
    5b34:	88 37       	cpi	r24, 0x78	; 120
    5b36:	91 05       	cpc	r25, r1
    5b38:	0c f4       	brge	.+2      	; 0x5b3c <_ZN11CCONTROLLER11CController14consoleServiceEv+0x1d2>
    5b3a:	bf c0       	rjmp	.+382    	; 0x5cba <_ZN11CCONTROLLER11CController14consoleServiceEv+0x350>
    5b3c:	2f a9       	ldd	r18, Y+55	; 0x37
    5b3e:	38 ad       	ldd	r19, Y+56	; 0x38
    5b40:	2a 37       	cpi	r18, 0x7A	; 122
    5b42:	31 05       	cpc	r19, r1
    5b44:	09 f4       	brne	.+2      	; 0x5b48 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x1de>
    5b46:	5f c0       	rjmp	.+190    	; 0x5c06 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x29c>
    5b48:	87 c5       	rjmp	.+2830   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
    case 's':
      if (nrValid) {
    5b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    5b4e:	fc 01       	movw	r30, r24
    5b50:	ef 5b       	subi	r30, 0xBF	; 191
    5b52:	ff 4f       	sbci	r31, 0xFF	; 255
    5b54:	80 81       	ld	r24, Z
    5b56:	88 23       	and	r24, r24
    5b58:	61 f0       	breq	.+24     	; 0x5b72 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x208>
        modem->SendSMS("0836524564", "GPRS CORE RFID SITE MANAGER DEMO");
    5b5a:	ef a5       	ldd	r30, Y+47	; 0x2f
    5b5c:	f8 a9       	ldd	r31, Y+48	; 0x30
    5b5e:	82 81       	ldd	r24, Z+2	; 0x02
    5b60:	93 81       	ldd	r25, Z+3	; 0x03
    5b62:	24 eb       	ldi	r18, 0xB4	; 180
    5b64:	33 e0       	ldi	r19, 0x03	; 3
    5b66:	4f eb       	ldi	r20, 0xBF	; 191
    5b68:	53 e0       	ldi	r21, 0x03	; 3
    5b6a:	b9 01       	movw	r22, r18
    5b6c:	0e 94 4e 08 	call	0x109c	; 0x109c <_ZN6CModem7SendSMSEPcS0_>
    5b70:	73 c5       	rjmp	.+2790   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      } else {
        DbgUart.sendStr("\n\rSet Phone Number: ");
    5b72:	20 ee       	ldi	r18, 0xE0	; 224
    5b74:	33 e0       	ldi	r19, 0x03	; 3
    5b76:	89 ee       	ldi	r24, 0xE9	; 233
    5b78:	94 e0       	ldi	r25, 0x04	; 4
    5b7a:	b9 01       	movw	r22, r18
    5b7c:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
    5b80:	6b c5       	rjmp	.+2774   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      }
      break;
    case 'q':
      modem->GetSignalQuality();
    5b82:	ef a5       	ldd	r30, Y+47	; 0x2f
    5b84:	f8 a9       	ldd	r31, Y+48	; 0x30
    5b86:	82 81       	ldd	r24, Z+2	; 0x02
    5b88:	93 81       	ldd	r25, Z+3	; 0x03
    5b8a:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN6CModem16GetSignalQualityEv>
    5b8e:	64 c5       	rjmp	.+2760   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 'c':
      modem->SIMCheckReady();
    5b90:	ef a5       	ldd	r30, Y+47	; 0x2f
    5b92:	f8 a9       	ldd	r31, Y+48	; 0x30
    5b94:	82 81       	ldd	r24, Z+2	; 0x02
    5b96:	93 81       	ldd	r25, Z+3	; 0x03
    5b98:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN6CModem13SIMCheckReadyEv>
    5b9c:	5d c5       	rjmp	.+2746   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case '1':
      server->SetTagInRange(22222);
    5b9e:	ef a5       	ldd	r30, Y+47	; 0x2f
    5ba0:	f8 a9       	ldd	r31, Y+48	; 0x30
    5ba2:	84 81       	ldd	r24, Z+4	; 0x04
    5ba4:	95 81       	ldd	r25, Z+5	; 0x05
    5ba6:	4e ec       	ldi	r20, 0xCE	; 206
    5ba8:	56 e5       	ldi	r21, 0x56	; 86
    5baa:	60 e0       	ldi	r22, 0x00	; 0
    5bac:	70 e0       	ldi	r23, 0x00	; 0
    5bae:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN7CServer13SetTagInRangeEm>
    5bb2:	52 c5       	rjmp	.+2724   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case '2':
      server->SetTagInRange(12345);
    5bb4:	ef a5       	ldd	r30, Y+47	; 0x2f
    5bb6:	f8 a9       	ldd	r31, Y+48	; 0x30
    5bb8:	84 81       	ldd	r24, Z+4	; 0x04
    5bba:	95 81       	ldd	r25, Z+5	; 0x05
    5bbc:	49 e3       	ldi	r20, 0x39	; 57
    5bbe:	50 e3       	ldi	r21, 0x30	; 48
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	70 e0       	ldi	r23, 0x00	; 0
    5bc4:	0e 94 b4 23 	call	0x4768	; 0x4768 <_ZN7CServer13SetTagInRangeEm>
    5bc8:	47 c5       	rjmp	.+2702   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;
    case '3':
      server->SetTagDuress(33333);
    5bca:	ef a5       	ldd	r30, Y+47	; 0x2f
    5bcc:	f8 a9       	ldd	r31, Y+48	; 0x30
    5bce:	84 81       	ldd	r24, Z+4	; 0x04
    5bd0:	95 81       	ldd	r25, Z+5	; 0x05
    5bd2:	45 e3       	ldi	r20, 0x35	; 53
    5bd4:	52 e8       	ldi	r21, 0x82	; 130
    5bd6:	60 e0       	ldi	r22, 0x00	; 0
    5bd8:	70 e0       	ldi	r23, 0x00	; 0
    5bda:	0e 94 1c 23 	call	0x4638	; 0x4638 <_ZN7CServer12SetTagDuressEm>
    5bde:	3c c5       	rjmp	.+2680   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;
    case '4':
      server->SetTagOutRange(44444);
    5be0:	ef a5       	ldd	r30, Y+47	; 0x2f
    5be2:	f8 a9       	ldd	r31, Y+48	; 0x30
    5be4:	84 81       	ldd	r24, Z+4	; 0x04
    5be6:	95 81       	ldd	r25, Z+5	; 0x05
    5be8:	4c e9       	ldi	r20, 0x9C	; 156
    5bea:	5d ea       	ldi	r21, 0xAD	; 173
    5bec:	60 e0       	ldi	r22, 0x00	; 0
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	0e 94 68 23 	call	0x46d0	; 0x46d0 <_ZN7CServer14SetTagOutRangeEm>
    5bf4:	31 c5       	rjmp	.+2658   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 'i':
      modem->setNextState(MDM_IP_STATUS);
    5bf6:	ef a5       	ldd	r30, Y+47	; 0x2f
    5bf8:	f8 a9       	ldd	r31, Y+48	; 0x30
    5bfa:	82 81       	ldd	r24, Z+2	; 0x02
    5bfc:	93 81       	ldd	r25, Z+3	; 0x03
    5bfe:	6b e2       	ldi	r22, 0x2B	; 43
    5c00:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN6CModem12setNextStateE9eMdmState>
    5c04:	29 c5       	rjmp	.+2642   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 'z':
      modem->setNextState(MDM_START_IP);
    5c06:	ef a5       	ldd	r30, Y+47	; 0x2f
    5c08:	f8 a9       	ldd	r31, Y+48	; 0x30
    5c0a:	82 81       	ldd	r24, Z+2	; 0x02
    5c0c:	93 81       	ldd	r25, Z+3	; 0x03
    5c0e:	61 e3       	ldi	r22, 0x31	; 49
    5c10:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN6CModem12setNextStateE9eMdmState>
    5c14:	21 c5       	rjmp	.+2626   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 'r':
      modem->setNextState(MDM_IPSHUTDOWN);
    5c16:	ef a5       	ldd	r30, Y+47	; 0x2f
    5c18:	f8 a9       	ldd	r31, Y+48	; 0x30
    5c1a:	82 81       	ldd	r24, Z+2	; 0x02
    5c1c:	93 81       	ldd	r25, Z+3	; 0x03
    5c1e:	6a e2       	ldi	r22, 0x2A	; 42
    5c20:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN6CModem12setNextStateE9eMdmState>
    5c24:	19 c5       	rjmp	.+2610   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case '$':
      modem->setNextState(MDM_GET_BALANCE);
    5c26:	ef a5       	ldd	r30, Y+47	; 0x2f
    5c28:	f8 a9       	ldd	r31, Y+48	; 0x30
    5c2a:	82 81       	ldd	r24, Z+2	; 0x02
    5c2c:	93 81       	ldd	r25, Z+3	; 0x03
    5c2e:	6c e2       	ldi	r22, 0x2C	; 44
    5c30:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN6CModem12setNextStateE9eMdmState>
    5c34:	11 c5       	rjmp	.+2594   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 'g':
      for (i = 0; i < MAX_SMS_PHONENUMBERS; i++) {
    5c36:	1e 82       	std	Y+6, r1	; 0x06
    5c38:	3c c0       	rjmp	.+120    	; 0x5cb2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x348>
        DbgUart.uprintf("\n\rPhoneNumber[%d]:\t%s", i, PhoneNumbers[i]);
    5c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    5c3c:	48 2f       	mov	r20, r24
    5c3e:	50 e0       	ldi	r21, 0x00	; 0
    5c40:	8e 81       	ldd	r24, Y+6	; 0x06
    5c42:	28 2f       	mov	r18, r24
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	c9 01       	movw	r24, r18
    5c48:	88 0f       	add	r24, r24
    5c4a:	99 1f       	adc	r25, r25
    5c4c:	82 0f       	add	r24, r18
    5c4e:	93 1f       	adc	r25, r19
    5c50:	88 0f       	add	r24, r24
    5c52:	99 1f       	adc	r25, r25
    5c54:	88 0f       	add	r24, r24
    5c56:	99 1f       	adc	r25, r25
    5c58:	9c 01       	movw	r18, r24
    5c5a:	23 5e       	subi	r18, 0xE3	; 227
    5c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5c60:	98 a9       	ldd	r25, Y+48	; 0x30
    5c62:	82 0f       	add	r24, r18
    5c64:	93 1f       	adc	r25, r19
    5c66:	9c 01       	movw	r18, r24
    5c68:	8d b7       	in	r24, 0x3d	; 61
    5c6a:	9e b7       	in	r25, 0x3e	; 62
    5c6c:	08 97       	sbiw	r24, 0x08	; 8
    5c6e:	0f b6       	in	r0, 0x3f	; 63
    5c70:	f8 94       	cli
    5c72:	9e bf       	out	0x3e, r25	; 62
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	8d bf       	out	0x3d, r24	; 61
    5c78:	ed b7       	in	r30, 0x3d	; 61
    5c7a:	fe b7       	in	r31, 0x3e	; 62
    5c7c:	31 96       	adiw	r30, 0x01	; 1
    5c7e:	89 ee       	ldi	r24, 0xE9	; 233
    5c80:	94 e0       	ldi	r25, 0x04	; 4
    5c82:	91 83       	std	Z+1, r25	; 0x01
    5c84:	80 83       	st	Z, r24
    5c86:	85 ef       	ldi	r24, 0xF5	; 245
    5c88:	93 e0       	ldi	r25, 0x03	; 3
    5c8a:	93 83       	std	Z+3, r25	; 0x03
    5c8c:	82 83       	std	Z+2, r24	; 0x02
    5c8e:	55 83       	std	Z+5, r21	; 0x05
    5c90:	44 83       	std	Z+4, r20	; 0x04
    5c92:	37 83       	std	Z+7, r19	; 0x07
    5c94:	26 83       	std	Z+6, r18	; 0x06
    5c96:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5c9a:	2d b7       	in	r18, 0x3d	; 61
    5c9c:	3e b7       	in	r19, 0x3e	; 62
    5c9e:	28 5f       	subi	r18, 0xF8	; 248
    5ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca2:	0f b6       	in	r0, 0x3f	; 63
    5ca4:	f8 94       	cli
    5ca6:	3e bf       	out	0x3e, r19	; 62
    5ca8:	0f be       	out	0x3f, r0	; 63
    5caa:	2d bf       	out	0x3d, r18	; 61
    case '$':
      modem->setNextState(MDM_GET_BALANCE);
      break;

    case 'g':
      for (i = 0; i < MAX_SMS_PHONENUMBERS; i++) {
    5cac:	8e 81       	ldd	r24, Y+6	; 0x06
    5cae:	8f 5f       	subi	r24, 0xFF	; 255
    5cb0:	8e 83       	std	Y+6, r24	; 0x06
    5cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    5cb4:	82 30       	cpi	r24, 0x02	; 2
    5cb6:	08 f2       	brcs	.-126    	; 0x5c3a <_ZN11CCONTROLLER11CController14consoleServiceEv+0x2d0>
    5cb8:	cf c4       	rjmp	.+2462   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
        DbgUart.uprintf("\n\rPhoneNumber[%d]:\t%s", i, PhoneNumbers[i]);
      }
      break;

    case 'w':
      DbgUart.uprintf("\n\rSITE ID : %d", SiteID);
    5cba:	ef a5       	ldd	r30, Y+47	; 0x2f
    5cbc:	f8 a9       	ldd	r31, Y+48	; 0x30
    5cbe:	86 81       	ldd	r24, Z+6	; 0x06
    5cc0:	28 2f       	mov	r18, r24
    5cc2:	30 e0       	ldi	r19, 0x00	; 0
    5cc4:	00 d0       	rcall	.+0      	; 0x5cc6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x35c>
    5cc6:	00 d0       	rcall	.+0      	; 0x5cc8 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x35e>
    5cc8:	00 d0       	rcall	.+0      	; 0x5cca <_ZN11CCONTROLLER11CController14consoleServiceEv+0x360>
    5cca:	ed b7       	in	r30, 0x3d	; 61
    5ccc:	fe b7       	in	r31, 0x3e	; 62
    5cce:	31 96       	adiw	r30, 0x01	; 1
    5cd0:	89 ee       	ldi	r24, 0xE9	; 233
    5cd2:	94 e0       	ldi	r25, 0x04	; 4
    5cd4:	91 83       	std	Z+1, r25	; 0x01
    5cd6:	80 83       	st	Z, r24
    5cd8:	8b e0       	ldi	r24, 0x0B	; 11
    5cda:	94 e0       	ldi	r25, 0x04	; 4
    5cdc:	93 83       	std	Z+3, r25	; 0x03
    5cde:	82 83       	std	Z+2, r24	; 0x02
    5ce0:	35 83       	std	Z+5, r19	; 0x05
    5ce2:	24 83       	std	Z+4, r18	; 0x04
    5ce4:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5ce8:	8d b7       	in	r24, 0x3d	; 61
    5cea:	9e b7       	in	r25, 0x3e	; 62
    5cec:	06 96       	adiw	r24, 0x06	; 6
    5cee:	0f b6       	in	r0, 0x3f	; 63
    5cf0:	f8 94       	cli
    5cf2:	9e bf       	out	0x3e, r25	; 62
    5cf4:	0f be       	out	0x3f, r0	; 63
    5cf6:	8d bf       	out	0x3d, r24	; 61
    5cf8:	af c4       	rjmp	.+2398   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;
    case 'W':
      DbgUart.uprintf("\n\r0 < SET SITE ID < 255\n\r");
    5cfa:	00 d0       	rcall	.+0      	; 0x5cfc <_ZN11CCONTROLLER11CController14consoleServiceEv+0x392>
    5cfc:	00 d0       	rcall	.+0      	; 0x5cfe <_ZN11CCONTROLLER11CController14consoleServiceEv+0x394>
    5cfe:	ed b7       	in	r30, 0x3d	; 61
    5d00:	fe b7       	in	r31, 0x3e	; 62
    5d02:	31 96       	adiw	r30, 0x01	; 1
    5d04:	89 ee       	ldi	r24, 0xE9	; 233
    5d06:	94 e0       	ldi	r25, 0x04	; 4
    5d08:	91 83       	std	Z+1, r25	; 0x01
    5d0a:	80 83       	st	Z, r24
    5d0c:	8a e1       	ldi	r24, 0x1A	; 26
    5d0e:	94 e0       	ldi	r25, 0x04	; 4
    5d10:	93 83       	std	Z+3, r25	; 0x03
    5d12:	82 83       	std	Z+2, r24	; 0x02
    5d14:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5d18:	0f 90       	pop	r0
    5d1a:	0f 90       	pop	r0
    5d1c:	0f 90       	pop	r0
    5d1e:	0f 90       	pop	r0
      j = 0;
    5d20:	1d 82       	std	Y+5, r1	; 0x05
      while (1) {
        if (DbgUart.receive(&cmd, 1)) {
    5d22:	89 ee       	ldi	r24, 0xE9	; 233
    5d24:	94 e0       	ldi	r25, 0x04	; 4
    5d26:	9e 01       	movw	r18, r28
    5d28:	27 5f       	subi	r18, 0xF7	; 247
    5d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2c:	b9 01       	movw	r22, r18
    5d2e:	41 e0       	ldi	r20, 0x01	; 1
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    5d36:	1e aa       	std	Y+54, r1	; 0x36
    5d38:	00 97       	sbiw	r24, 0x00	; 0
    5d3a:	11 f0       	breq	.+4      	; 0x5d40 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x3d6>
    5d3c:	91 e0       	ldi	r25, 0x01	; 1
    5d3e:	9e ab       	std	Y+54, r25	; 0x36
    5d40:	2e a9       	ldd	r18, Y+54	; 0x36
    5d42:	22 23       	and	r18, r18
    5d44:	71 f3       	breq	.-36     	; 0x5d22 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x3b8>
          DbgUart.uprintf("%c", cmd);
    5d46:	89 85       	ldd	r24, Y+9	; 0x09
    5d48:	28 2f       	mov	r18, r24
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	00 d0       	rcall	.+0      	; 0x5d4e <_ZN11CCONTROLLER11CController14consoleServiceEv+0x3e4>
    5d4e:	00 d0       	rcall	.+0      	; 0x5d50 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x3e6>
    5d50:	00 d0       	rcall	.+0      	; 0x5d52 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x3e8>
    5d52:	ed b7       	in	r30, 0x3d	; 61
    5d54:	fe b7       	in	r31, 0x3e	; 62
    5d56:	31 96       	adiw	r30, 0x01	; 1
    5d58:	89 ee       	ldi	r24, 0xE9	; 233
    5d5a:	94 e0       	ldi	r25, 0x04	; 4
    5d5c:	91 83       	std	Z+1, r25	; 0x01
    5d5e:	80 83       	st	Z, r24
    5d60:	84 e3       	ldi	r24, 0x34	; 52
    5d62:	94 e0       	ldi	r25, 0x04	; 4
    5d64:	93 83       	std	Z+3, r25	; 0x03
    5d66:	82 83       	std	Z+2, r24	; 0x02
    5d68:	35 83       	std	Z+5, r19	; 0x05
    5d6a:	24 83       	std	Z+4, r18	; 0x04
    5d6c:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5d70:	8d b7       	in	r24, 0x3d	; 61
    5d72:	9e b7       	in	r25, 0x3e	; 62
    5d74:	06 96       	adiw	r24, 0x06	; 6
    5d76:	0f b6       	in	r0, 0x3f	; 63
    5d78:	f8 94       	cli
    5d7a:	9e bf       	out	0x3e, r25	; 62
    5d7c:	0f be       	out	0x3f, r0	; 63
    5d7e:	8d bf       	out	0x3d, r24	; 61
          if (cmd == '\r' || j >= 3 || cmd == '\n') {
    5d80:	89 85       	ldd	r24, Y+9	; 0x09
    5d82:	8d 30       	cpi	r24, 0x0D	; 13
    5d84:	39 f0       	breq	.+14     	; 0x5d94 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x42a>
    5d86:	8d 81       	ldd	r24, Y+5	; 0x05
    5d88:	83 30       	cpi	r24, 0x03	; 3
    5d8a:	20 f4       	brcc	.+8      	; 0x5d94 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x42a>
    5d8c:	89 85       	ldd	r24, Y+9	; 0x09
    5d8e:	8a 30       	cpi	r24, 0x0A	; 10
    5d90:	09 f0       	breq	.+2      	; 0x5d94 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x42a>
    5d92:	3f c0       	rjmp	.+126    	; 0x5e12 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x4a8>
            str[j] = 0;
    5d94:	8d 81       	ldd	r24, Y+5	; 0x05
    5d96:	28 2f       	mov	r18, r24
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	ce 01       	movw	r24, r28
    5d9c:	0f 96       	adiw	r24, 0x0f	; 15
    5d9e:	fc 01       	movw	r30, r24
    5da0:	e2 0f       	add	r30, r18
    5da2:	f3 1f       	adc	r31, r19
    5da4:	10 82       	st	Z, r1
            i = atoi(str);
    5da6:	ce 01       	movw	r24, r28
    5da8:	0f 96       	adiw	r24, 0x0f	; 15
    5daa:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    5dae:	8e 83       	std	Y+6, r24	; 0x06
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5db0:	ef e5       	ldi	r30, 0x5F	; 95
    5db2:	f0 e0       	ldi	r31, 0x00	; 0
    5db4:	80 81       	ld	r24, Z
    5db6:	8b 87       	std	Y+11, r24	; 0x0b
    5db8:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    5dbc:	8c 83       	std	Y+4, r24	; 0x04
    5dbe:	06 c0       	rjmp	.+12     	; 0x5dcc <_ZN11CCONTROLLER11CController14consoleServiceEv+0x462>
              eeprom_write_byte(&eeSiteID, i);
    5dc0:	88 e1       	ldi	r24, 0x18	; 24
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	6e 81       	ldd	r22, Y+6	; 0x06
    5dc6:	0e 94 cf 5e 	call	0xbd9e	; 0xbd9e <__eewr_byte_m1280>
        if (DbgUart.receive(&cmd, 1)) {
          DbgUart.uprintf("%c", cmd);
          if (cmd == '\r' || j >= 3 || cmd == '\n') {
            str[j] = 0;
            i = atoi(str);
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5dca:	1c 82       	std	Y+4, r1	; 0x04
    5dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    5dce:	88 23       	and	r24, r24
    5dd0:	b9 f7       	brne	.-18     	; 0x5dc0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x456>
              eeprom_write_byte(&eeSiteID, i);
            }
    5dd2:	ce 01       	movw	r24, r28
    5dd4:	0b 96       	adiw	r24, 0x0b	; 11
    5dd6:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
            SiteID = i;
    5dda:	ef a5       	ldd	r30, Y+47	; 0x2f
    5ddc:	f8 a9       	ldd	r31, Y+48	; 0x30
    5dde:	8e 81       	ldd	r24, Y+6	; 0x06
    5de0:	86 83       	std	Z+6, r24	; 0x06
            DbgUart.uprintf("\n\rSiteID is set OK");
    5de2:	00 d0       	rcall	.+0      	; 0x5de4 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x47a>
    5de4:	00 d0       	rcall	.+0      	; 0x5de6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x47c>
    5de6:	ed b7       	in	r30, 0x3d	; 61
    5de8:	fe b7       	in	r31, 0x3e	; 62
    5dea:	31 96       	adiw	r30, 0x01	; 1
    5dec:	89 ee       	ldi	r24, 0xE9	; 233
    5dee:	94 e0       	ldi	r25, 0x04	; 4
    5df0:	91 83       	std	Z+1, r25	; 0x01
    5df2:	80 83       	st	Z, r24
    5df4:	87 e3       	ldi	r24, 0x37	; 55
    5df6:	94 e0       	ldi	r25, 0x04	; 4
    5df8:	93 83       	std	Z+3, r25	; 0x03
    5dfa:	82 83       	std	Z+2, r24	; 0x02
    5dfc:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5e00:	0f 90       	pop	r0
    5e02:	0f 90       	pop	r0
    5e04:	0f 90       	pop	r0
    5e06:	0f 90       	pop	r0
            idValid = true;
    5e08:	ef a5       	ldd	r30, Y+47	; 0x2f
    5e0a:	f8 a9       	ldd	r31, Y+48	; 0x30
    5e0c:	81 e0       	ldi	r24, 0x01	; 1
    5e0e:	87 83       	std	Z+7, r24	; 0x07
    5e10:	23 c4       	rjmp	.+2118   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
            break;
          } else {
            str[j++] = cmd;
    5e12:	8d 81       	ldd	r24, Y+5	; 0x05
    5e14:	28 2f       	mov	r18, r24
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	49 85       	ldd	r20, Y+9	; 0x09
    5e1a:	ce 01       	movw	r24, r28
    5e1c:	0f 96       	adiw	r24, 0x0f	; 15
    5e1e:	fc 01       	movw	r30, r24
    5e20:	e2 0f       	add	r30, r18
    5e22:	f3 1f       	adc	r31, r19
    5e24:	40 83       	st	Z, r20
    5e26:	8d 81       	ldd	r24, Y+5	; 0x05
    5e28:	8f 5f       	subi	r24, 0xFF	; 255
    5e2a:	8d 83       	std	Y+5, r24	; 0x05
    5e2c:	7a cf       	rjmp	.-268    	; 0x5d22 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x3b8>
          }
        }
      }
      break;
    case 'T':
      DbgUart.sendStr_P((PSTR("\n\r")));
    5e2e:	2c e1       	ldi	r18, 0x1C	; 28
    5e30:	35 e0       	ldi	r19, 0x05	; 5
    5e32:	89 ee       	ldi	r24, 0xE9	; 233
    5e34:	94 e0       	ldi	r25, 0x04	; 4
    5e36:	b9 01       	movw	r22, r18
    5e38:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      DbgUart.sendStr(rtc.getTimestamp());
    5e3c:	8c ea       	ldi	r24, 0xAC	; 172
    5e3e:	99 e0       	ldi	r25, 0x09	; 9
    5e40:	0e 94 72 20 	call	0x40e4	; 0x40e4 <_ZN4Crtc12getTimestampEv>
    5e44:	9c 01       	movw	r18, r24
    5e46:	89 ee       	ldi	r24, 0xE9	; 233
    5e48:	94 e0       	ldi	r25, 0x04	; 4
    5e4a:	b9 01       	movw	r22, r18
    5e4c:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
    5e50:	03 c4       	rjmp	.+2054   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;
    case 'a':
      DbgUart.sendStr_P((PSTR("\n\rServer IP Address : ")));
    5e52:	25 e0       	ldi	r18, 0x05	; 5
    5e54:	35 e0       	ldi	r19, 0x05	; 5
    5e56:	89 ee       	ldi	r24, 0xE9	; 233
    5e58:	94 e0       	ldi	r25, 0x04	; 4
    5e5a:	b9 01       	movw	r22, r18
    5e5c:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      DbgUart.sendStr(modem->serverIP);
    5e60:	ef a5       	ldd	r30, Y+47	; 0x2f
    5e62:	f8 a9       	ldd	r31, Y+48	; 0x30
    5e64:	82 81       	ldd	r24, Z+2	; 0x02
    5e66:	93 81       	ldd	r25, Z+3	; 0x03
    5e68:	9c 01       	movw	r18, r24
    5e6a:	21 5d       	subi	r18, 0xD1	; 209
    5e6c:	3d 4f       	sbci	r19, 0xFD	; 253
    5e6e:	89 ee       	ldi	r24, 0xE9	; 233
    5e70:	94 e0       	ldi	r25, 0x04	; 4
    5e72:	b9 01       	movw	r22, r18
    5e74:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      DbgUart.sendStr(":");
    5e78:	2a e4       	ldi	r18, 0x4A	; 74
    5e7a:	34 e0       	ldi	r19, 0x04	; 4
    5e7c:	89 ee       	ldi	r24, 0xE9	; 233
    5e7e:	94 e0       	ldi	r25, 0x04	; 4
    5e80:	b9 01       	movw	r22, r18
    5e82:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
      DbgUart.sendStr(modem->port);
    5e86:	ef a5       	ldd	r30, Y+47	; 0x2f
    5e88:	f8 a9       	ldd	r31, Y+48	; 0x30
    5e8a:	82 81       	ldd	r24, Z+2	; 0x02
    5e8c:	93 81       	ldd	r25, Z+3	; 0x03
    5e8e:	9c 01       	movw	r18, r24
    5e90:	20 5b       	subi	r18, 0xB0	; 176
    5e92:	3d 4f       	sbci	r19, 0xFD	; 253
    5e94:	89 ee       	ldi	r24, 0xE9	; 233
    5e96:	94 e0       	ldi	r25, 0x04	; 4
    5e98:	b9 01       	movw	r22, r18
    5e9a:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
    5e9e:	dc c3       	rjmp	.+1976   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;
    case 'A':
      DbgUart.sendStr_P((PSTR("\n\rSet Server IP Address : xxx.yyy.zzz:port:dns\n\r")));
    5ea0:	24 ed       	ldi	r18, 0xD4	; 212
    5ea2:	34 e0       	ldi	r19, 0x04	; 4
    5ea4:	89 ee       	ldi	r24, 0xE9	; 233
    5ea6:	94 e0       	ldi	r25, 0x04	; 4
    5ea8:	b9 01       	movw	r22, r18
    5eaa:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      j = 0;
    5eae:	1d 82       	std	Y+5, r1	; 0x05
      while (1) {
        if (DbgUart.receive(&cmd, 1)) {
    5eb0:	89 ee       	ldi	r24, 0xE9	; 233
    5eb2:	94 e0       	ldi	r25, 0x04	; 4
    5eb4:	9e 01       	movw	r18, r28
    5eb6:	27 5f       	subi	r18, 0xF7	; 247
    5eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eba:	b9 01       	movw	r22, r18
    5ebc:	41 e0       	ldi	r20, 0x01	; 1
    5ebe:	50 e0       	ldi	r21, 0x00	; 0
    5ec0:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    5ec4:	1d aa       	std	Y+53, r1	; 0x35
    5ec6:	00 97       	sbiw	r24, 0x00	; 0
    5ec8:	11 f0       	breq	.+4      	; 0x5ece <_ZN11CCONTROLLER11CController14consoleServiceEv+0x564>
    5eca:	91 e0       	ldi	r25, 0x01	; 1
    5ecc:	9d ab       	std	Y+53, r25	; 0x35
    5ece:	2d a9       	ldd	r18, Y+53	; 0x35
    5ed0:	22 23       	and	r18, r18
    5ed2:	71 f3       	breq	.-36     	; 0x5eb0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x546>
          DbgUart.uprintf("%c", cmd);
    5ed4:	89 85       	ldd	r24, Y+9	; 0x09
    5ed6:	28 2f       	mov	r18, r24
    5ed8:	30 e0       	ldi	r19, 0x00	; 0
    5eda:	00 d0       	rcall	.+0      	; 0x5edc <_ZN11CCONTROLLER11CController14consoleServiceEv+0x572>
    5edc:	00 d0       	rcall	.+0      	; 0x5ede <_ZN11CCONTROLLER11CController14consoleServiceEv+0x574>
    5ede:	00 d0       	rcall	.+0      	; 0x5ee0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x576>
    5ee0:	ed b7       	in	r30, 0x3d	; 61
    5ee2:	fe b7       	in	r31, 0x3e	; 62
    5ee4:	31 96       	adiw	r30, 0x01	; 1
    5ee6:	89 ee       	ldi	r24, 0xE9	; 233
    5ee8:	94 e0       	ldi	r25, 0x04	; 4
    5eea:	91 83       	std	Z+1, r25	; 0x01
    5eec:	80 83       	st	Z, r24
    5eee:	84 e3       	ldi	r24, 0x34	; 52
    5ef0:	94 e0       	ldi	r25, 0x04	; 4
    5ef2:	93 83       	std	Z+3, r25	; 0x03
    5ef4:	82 83       	std	Z+2, r24	; 0x02
    5ef6:	35 83       	std	Z+5, r19	; 0x05
    5ef8:	24 83       	std	Z+4, r18	; 0x04
    5efa:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5efe:	8d b7       	in	r24, 0x3d	; 61
    5f00:	9e b7       	in	r25, 0x3e	; 62
    5f02:	06 96       	adiw	r24, 0x06	; 6
    5f04:	0f b6       	in	r0, 0x3f	; 63
    5f06:	f8 94       	cli
    5f08:	9e bf       	out	0x3e, r25	; 62
    5f0a:	0f be       	out	0x3f, r0	; 63
    5f0c:	8d bf       	out	0x3d, r24	; 61
          if (j >= 24) {
    5f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f10:	88 31       	cpi	r24, 0x18	; 24
    5f12:	a0 f0       	brcs	.+40     	; 0x5f3c <_ZN11CCONTROLLER11CController14consoleServiceEv+0x5d2>
            DbgUart.uprintf("\n\rInvalid format");
    5f14:	00 d0       	rcall	.+0      	; 0x5f16 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x5ac>
    5f16:	00 d0       	rcall	.+0      	; 0x5f18 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x5ae>
    5f18:	ed b7       	in	r30, 0x3d	; 61
    5f1a:	fe b7       	in	r31, 0x3e	; 62
    5f1c:	31 96       	adiw	r30, 0x01	; 1
    5f1e:	89 ee       	ldi	r24, 0xE9	; 233
    5f20:	94 e0       	ldi	r25, 0x04	; 4
    5f22:	91 83       	std	Z+1, r25	; 0x01
    5f24:	80 83       	st	Z, r24
    5f26:	8c e4       	ldi	r24, 0x4C	; 76
    5f28:	94 e0       	ldi	r25, 0x04	; 4
    5f2a:	93 83       	std	Z+3, r25	; 0x03
    5f2c:	82 83       	std	Z+2, r24	; 0x02
    5f2e:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    5f32:	0f 90       	pop	r0
    5f34:	0f 90       	pop	r0
    5f36:	0f 90       	pop	r0
    5f38:	0f 90       	pop	r0
    5f3a:	8e c3       	rjmp	.+1820   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
            break;
          }
          if (cmd == '\r' || cmd == '\n') {
    5f3c:	89 85       	ldd	r24, Y+9	; 0x09
    5f3e:	8d 30       	cpi	r24, 0x0D	; 13
    5f40:	21 f0       	breq	.+8      	; 0x5f4a <_ZN11CCONTROLLER11CController14consoleServiceEv+0x5e0>
    5f42:	89 85       	ldd	r24, Y+9	; 0x09
    5f44:	8a 30       	cpi	r24, 0x0A	; 10
    5f46:	09 f0       	breq	.+2      	; 0x5f4a <_ZN11CCONTROLLER11CController14consoleServiceEv+0x5e0>
    5f48:	a4 c0       	rjmp	.+328    	; 0x6092 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x728>
            str[j] = ':';
    5f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f4c:	28 2f       	mov	r18, r24
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	ce 01       	movw	r24, r28
    5f52:	0f 96       	adiw	r24, 0x0f	; 15
    5f54:	fc 01       	movw	r30, r24
    5f56:	e2 0f       	add	r30, r18
    5f58:	f3 1f       	adc	r31, r19
    5f5a:	8a e3       	ldi	r24, 0x3A	; 58
    5f5c:	80 83       	st	Z, r24
            str[j + 1] = 0;
    5f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f60:	88 2f       	mov	r24, r24
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	9c 01       	movw	r18, r24
    5f66:	2f 5f       	subi	r18, 0xFF	; 255
    5f68:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6a:	ce 01       	movw	r24, r28
    5f6c:	0f 96       	adiw	r24, 0x0f	; 15
    5f6e:	fc 01       	movw	r30, r24
    5f70:	e2 0f       	add	r30, r18
    5f72:	f3 1f       	adc	r31, r19
    5f74:	10 82       	st	Z, r1
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5f76:	ef e5       	ldi	r30, 0x5F	; 95
    5f78:	f0 e0       	ldi	r31, 0x00	; 0
    5f7a:	80 81       	ld	r24, Z
    5f7c:	8c 87       	std	Y+12, r24	; 0x0c
    5f7e:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    5f82:	8b 83       	std	Y+3, r24	; 0x03
    5f84:	0a c0       	rjmp	.+20     	; 0x5f9a <_ZN11CCONTROLLER11CController14consoleServiceEv+0x630>
              eeprom_write_block(str, eeIP, sizeof(eeIP));
    5f86:	ce 01       	movw	r24, r28
    5f88:	0f 96       	adiw	r24, 0x0f	; 15
    5f8a:	29 e1       	ldi	r18, 0x19	; 25
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
    5f8e:	b9 01       	movw	r22, r18
    5f90:	40 e2       	ldi	r20, 0x20	; 32
    5f92:	50 e0       	ldi	r21, 0x00	; 0
    5f94:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
            break;
          }
          if (cmd == '\r' || cmd == '\n') {
            str[j] = ':';
            str[j + 1] = 0;
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    5f98:	1b 82       	std	Y+3, r1	; 0x03
    5f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f9c:	88 23       	and	r24, r24
    5f9e:	99 f7       	brne	.-26     	; 0x5f86 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x61c>
              eeprom_write_block(str, eeIP, sizeof(eeIP));
            }
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	0c 96       	adiw	r24, 0x0c	; 12
    5fa4:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>

            pstr = strtok(str, ":");
    5fa8:	ce 01       	movw	r24, r28
    5faa:	0f 96       	adiw	r24, 0x0f	; 15
    5fac:	2a e4       	ldi	r18, 0x4A	; 74
    5fae:	34 e0       	ldi	r19, 0x04	; 4
    5fb0:	b9 01       	movw	r22, r18
    5fb2:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    5fb6:	98 87       	std	Y+8, r25	; 0x08
    5fb8:	8f 83       	std	Y+7, r24	; 0x07
            if (pstr) {
    5fba:	8f 81       	ldd	r24, Y+7	; 0x07
    5fbc:	98 85       	ldd	r25, Y+8	; 0x08
    5fbe:	00 97       	sbiw	r24, 0x00	; 0
    5fc0:	29 f0       	breq	.+10     	; 0x5fcc <_ZN11CCONTROLLER11CController14consoleServiceEv+0x662>
              ipValid = true;
    5fc2:	ef a5       	ldd	r30, Y+47	; 0x2f
    5fc4:	f8 a9       	ldd	r31, Y+48	; 0x30
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	80 87       	std	Z+8, r24	; 0x08
    5fca:	03 c0       	rjmp	.+6      	; 0x5fd2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x668>
            } else {
              ipValid = false;
    5fcc:	ef a5       	ldd	r30, Y+47	; 0x2f
    5fce:	f8 a9       	ldd	r31, Y+48	; 0x30
    5fd0:	10 86       	std	Z+8, r1	; 0x08
            }
            strcpy(modem->serverIP, pstr);
    5fd2:	ef a5       	ldd	r30, Y+47	; 0x2f
    5fd4:	f8 a9       	ldd	r31, Y+48	; 0x30
    5fd6:	82 81       	ldd	r24, Z+2	; 0x02
    5fd8:	93 81       	ldd	r25, Z+3	; 0x03
    5fda:	81 5d       	subi	r24, 0xD1	; 209
    5fdc:	9d 4f       	sbci	r25, 0xFD	; 253
    5fde:	2f 81       	ldd	r18, Y+7	; 0x07
    5fe0:	38 85       	ldd	r19, Y+8	; 0x08
    5fe2:	b9 01       	movw	r22, r18
    5fe4:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
            pstr = strtok(NULL, ":");
    5fe8:	2a e4       	ldi	r18, 0x4A	; 74
    5fea:	34 e0       	ldi	r19, 0x04	; 4
    5fec:	80 e0       	ldi	r24, 0x00	; 0
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	b9 01       	movw	r22, r18
    5ff2:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    5ff6:	98 87       	std	Y+8, r25	; 0x08
    5ff8:	8f 83       	std	Y+7, r24	; 0x07
            strcpy(modem->port, pstr);
    5ffa:	ef a5       	ldd	r30, Y+47	; 0x2f
    5ffc:	f8 a9       	ldd	r31, Y+48	; 0x30
    5ffe:	82 81       	ldd	r24, Z+2	; 0x02
    6000:	93 81       	ldd	r25, Z+3	; 0x03
    6002:	80 5b       	subi	r24, 0xB0	; 176
    6004:	9d 4f       	sbci	r25, 0xFD	; 253
    6006:	2f 81       	ldd	r18, Y+7	; 0x07
    6008:	38 85       	ldd	r19, Y+8	; 0x08
    600a:	b9 01       	movw	r22, r18
    600c:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
            pstr = strtok(NULL, ":");
    6010:	2a e4       	ldi	r18, 0x4A	; 74
    6012:	34 e0       	ldi	r19, 0x04	; 4
    6014:	80 e0       	ldi	r24, 0x00	; 0
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	b9 01       	movw	r22, r18
    601a:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    601e:	98 87       	std	Y+8, r25	; 0x08
    6020:	8f 83       	std	Y+7, r24	; 0x07
            if (*pstr == '1') {
    6022:	ef 81       	ldd	r30, Y+7	; 0x07
    6024:	f8 85       	ldd	r31, Y+8	; 0x08
    6026:	80 81       	ld	r24, Z
    6028:	81 33       	cpi	r24, 0x31	; 49
    602a:	51 f4       	brne	.+20     	; 0x6040 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x6d6>
              modem->usedns = true;
    602c:	ef a5       	ldd	r30, Y+47	; 0x2f
    602e:	f8 a9       	ldd	r31, Y+48	; 0x30
    6030:	82 81       	ldd	r24, Z+2	; 0x02
    6032:	93 81       	ldd	r25, Z+3	; 0x03
    6034:	fc 01       	movw	r30, r24
    6036:	e1 5b       	subi	r30, 0xB1	; 177
    6038:	fd 4f       	sbci	r31, 0xFD	; 253
    603a:	81 e0       	ldi	r24, 0x01	; 1
    603c:	80 83       	st	Z, r24
    603e:	08 c0       	rjmp	.+16     	; 0x6050 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x6e6>
            } else {
              modem->usedns = false;
    6040:	ef a5       	ldd	r30, Y+47	; 0x2f
    6042:	f8 a9       	ldd	r31, Y+48	; 0x30
    6044:	82 81       	ldd	r24, Z+2	; 0x02
    6046:	93 81       	ldd	r25, Z+3	; 0x03
    6048:	fc 01       	movw	r30, r24
    604a:	e1 5b       	subi	r30, 0xB1	; 177
    604c:	fd 4f       	sbci	r31, 0xFD	; 253
    604e:	10 82       	st	Z, r1
            }
            eeprom_write_block(str, eeIP, sizeof(eeIP));
    6050:	ce 01       	movw	r24, r28
    6052:	0f 96       	adiw	r24, 0x0f	; 15
    6054:	29 e1       	ldi	r18, 0x19	; 25
    6056:	30 e0       	ldi	r19, 0x00	; 0
    6058:	b9 01       	movw	r22, r18
    605a:	40 e2       	ldi	r20, 0x20	; 32
    605c:	50 e0       	ldi	r21, 0x00	; 0
    605e:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
            DbgUart.uprintf("\n\rServer IP is set OK");
    6062:	00 d0       	rcall	.+0      	; 0x6064 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x6fa>
    6064:	00 d0       	rcall	.+0      	; 0x6066 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x6fc>
    6066:	ed b7       	in	r30, 0x3d	; 61
    6068:	fe b7       	in	r31, 0x3e	; 62
    606a:	31 96       	adiw	r30, 0x01	; 1
    606c:	89 ee       	ldi	r24, 0xE9	; 233
    606e:	94 e0       	ldi	r25, 0x04	; 4
    6070:	91 83       	std	Z+1, r25	; 0x01
    6072:	80 83       	st	Z, r24
    6074:	8d e5       	ldi	r24, 0x5D	; 93
    6076:	94 e0       	ldi	r25, 0x04	; 4
    6078:	93 83       	std	Z+3, r25	; 0x03
    607a:	82 83       	std	Z+2, r24	; 0x02
    607c:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6080:	0f 90       	pop	r0
    6082:	0f 90       	pop	r0
    6084:	0f 90       	pop	r0
    6086:	0f 90       	pop	r0
            ipValid = true;
    6088:	ef a5       	ldd	r30, Y+47	; 0x2f
    608a:	f8 a9       	ldd	r31, Y+48	; 0x30
    608c:	81 e0       	ldi	r24, 0x01	; 1
    608e:	80 87       	std	Z+8, r24	; 0x08
    6090:	e3 c2       	rjmp	.+1478   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
            break;
          } else {
            str[j++] = cmd;
    6092:	8d 81       	ldd	r24, Y+5	; 0x05
    6094:	28 2f       	mov	r18, r24
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	49 85       	ldd	r20, Y+9	; 0x09
    609a:	ce 01       	movw	r24, r28
    609c:	0f 96       	adiw	r24, 0x0f	; 15
    609e:	fc 01       	movw	r30, r24
    60a0:	e2 0f       	add	r30, r18
    60a2:	f3 1f       	adc	r31, r19
    60a4:	40 83       	st	Z, r20
    60a6:	8d 81       	ldd	r24, Y+5	; 0x05
    60a8:	8f 5f       	subi	r24, 0xFF	; 255
    60aa:	8d 83       	std	Y+5, r24	; 0x05
    60ac:	01 cf       	rjmp	.-510    	; 0x5eb0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x546>
          }
        }
      }
      break;
    case 'x':
      modem->setNextState(MDM_STARTUP);
    60ae:	ef a5       	ldd	r30, Y+47	; 0x2f
    60b0:	f8 a9       	ldd	r31, Y+48	; 0x30
    60b2:	82 81       	ldd	r24, Z+2	; 0x02
    60b4:	93 81       	ldd	r25, Z+3	; 0x03
    60b6:	64 e0       	ldi	r22, 0x04	; 4
    60b8:	0e 94 70 05 	call	0xae0	; 0xae0 <_ZN6CModem12setNextStateE9eMdmState>
    60bc:	cd c2       	rjmp	.+1434   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 'v':
      DbgUart.sendStr_P((PSTR("\n\rCOMMAND ")));
    60be:	29 ec       	ldi	r18, 0xC9	; 201
    60c0:	34 e0       	ldi	r19, 0x04	; 4
    60c2:	89 ee       	ldi	r24, 0xE9	; 233
    60c4:	94 e0       	ldi	r25, 0x04	; 4
    60c6:	b9 01       	movw	r22, r18
    60c8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      while (1) {
        i = 0;
    60cc:	1e 82       	std	Y+6, r1	; 0x06
        do {
          cmd = 0;
    60ce:	19 86       	std	Y+9, r1	; 0x09
          if (DbgUart.receive(&cmd, 1)) {
    60d0:	89 ee       	ldi	r24, 0xE9	; 233
    60d2:	94 e0       	ldi	r25, 0x04	; 4
    60d4:	9e 01       	movw	r18, r28
    60d6:	27 5f       	subi	r18, 0xF7	; 247
    60d8:	3f 4f       	sbci	r19, 0xFF	; 255
    60da:	b9 01       	movw	r22, r18
    60dc:	41 e0       	ldi	r20, 0x01	; 1
    60de:	50 e0       	ldi	r21, 0x00	; 0
    60e0:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    60e4:	1c aa       	std	Y+52, r1	; 0x34
    60e6:	00 97       	sbiw	r24, 0x00	; 0
    60e8:	11 f0       	breq	.+4      	; 0x60ee <_ZN11CCONTROLLER11CController14consoleServiceEv+0x784>
    60ea:	91 e0       	ldi	r25, 0x01	; 1
    60ec:	9c ab       	std	Y+52, r25	; 0x34
    60ee:	2c a9       	ldd	r18, Y+52	; 0x34
    60f0:	22 23       	and	r18, r18
    60f2:	b9 f0       	breq	.+46     	; 0x6122 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x7b8>
            DbgUart.send((c08 *) &cmd, 1);
    60f4:	89 ee       	ldi	r24, 0xE9	; 233
    60f6:	94 e0       	ldi	r25, 0x04	; 4
    60f8:	9e 01       	movw	r18, r28
    60fa:	27 5f       	subi	r18, 0xF7	; 247
    60fc:	3f 4f       	sbci	r19, 0xFF	; 255
    60fe:	b9 01       	movw	r22, r18
    6100:	41 e0       	ldi	r20, 0x01	; 1
    6102:	50 e0       	ldi	r21, 0x00	; 0
    6104:	0e 94 ab 4c 	call	0x9956	; 0x9956 <_ZN5CUART4sendEPct>
            str[i++] = cmd;
    6108:	8e 81       	ldd	r24, Y+6	; 0x06
    610a:	28 2f       	mov	r18, r24
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	49 85       	ldd	r20, Y+9	; 0x09
    6110:	ce 01       	movw	r24, r28
    6112:	0f 96       	adiw	r24, 0x0f	; 15
    6114:	fc 01       	movw	r30, r24
    6116:	e2 0f       	add	r30, r18
    6118:	f3 1f       	adc	r31, r19
    611a:	40 83       	st	Z, r20
    611c:	8e 81       	ldd	r24, Y+6	; 0x06
    611e:	8f 5f       	subi	r24, 0xFF	; 255
    6120:	8e 83       	std	Y+6, r24	; 0x06

    case 'v':
      DbgUart.sendStr_P((PSTR("\n\rCOMMAND ")));
      while (1) {
        i = 0;
        do {
    6122:	89 85       	ldd	r24, Y+9	; 0x09
    6124:	8d 30       	cpi	r24, 0x0D	; 13
    6126:	99 f6       	brne	.-90     	; 0x60ce <_ZN11CCONTROLLER11CController14consoleServiceEv+0x764>
          if (DbgUart.receive(&cmd, 1)) {
            DbgUart.send((c08 *) &cmd, 1);
            str[i++] = cmd;
          }
        } while (cmd != 0x0D);
        str[i++] = 0x00;
    6128:	8e 81       	ldd	r24, Y+6	; 0x06
    612a:	28 2f       	mov	r18, r24
    612c:	30 e0       	ldi	r19, 0x00	; 0
    612e:	ce 01       	movw	r24, r28
    6130:	0f 96       	adiw	r24, 0x0f	; 15
    6132:	fc 01       	movw	r30, r24
    6134:	e2 0f       	add	r30, r18
    6136:	f3 1f       	adc	r31, r19
    6138:	10 82       	st	Z, r1
    613a:	8e 81       	ldd	r24, Y+6	; 0x06
    613c:	8f 5f       	subi	r24, 0xFF	; 255
    613e:	8e 83       	std	Y+6, r24	; 0x06

        if (str[0] == 'X' || str[0] == 'x') {
    6140:	8f 85       	ldd	r24, Y+15	; 0x0f
    6142:	88 35       	cpi	r24, 0x58	; 88
    6144:	19 f0       	breq	.+6      	; 0x614c <_ZN11CCONTROLLER11CController14consoleServiceEv+0x7e2>
    6146:	8f 85       	ldd	r24, Y+15	; 0x0f
    6148:	88 37       	cpi	r24, 0x78	; 120
    614a:	41 f4       	brne	.+16     	; 0x615c <_ZN11CCONTROLLER11CController14consoleServiceEv+0x7f2>
          DbgUart.sendStr_P((PSTR("\n\rEXIT\n\r")));
    614c:	20 ec       	ldi	r18, 0xC0	; 192
    614e:	34 e0       	ldi	r19, 0x04	; 4
    6150:	89 ee       	ldi	r24, 0xE9	; 233
    6152:	94 e0       	ldi	r25, 0x04	; 4
    6154:	b9 01       	movw	r22, r18
    6156:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    615a:	7e c2       	rjmp	.+1276   	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
          break;
        }

        modem->pUart->sendStr(str);
    615c:	ef a5       	ldd	r30, Y+47	; 0x2f
    615e:	f8 a9       	ldd	r31, Y+48	; 0x30
    6160:	82 81       	ldd	r24, Z+2	; 0x02
    6162:	93 81       	ldd	r25, Z+3	; 0x03
    6164:	fc 01       	movw	r30, r24
    6166:	e7 5d       	subi	r30, 0xD7	; 215
    6168:	fd 4f       	sbci	r31, 0xFD	; 253
    616a:	80 81       	ld	r24, Z
    616c:	91 81       	ldd	r25, Z+1	; 0x01
    616e:	9e 01       	movw	r18, r28
    6170:	21 5f       	subi	r18, 0xF1	; 241
    6172:	3f 4f       	sbci	r19, 0xFF	; 255
    6174:	b9 01       	movw	r22, r18
    6176:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
    617a:	1d c0       	rjmp	.+58     	; 0x61b6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x84c>
        while (modem->pUart->receive((u08*) &tmp, 1)) {
          DbgUart.uprintf("%c", tmp);
    617c:	8a 85       	ldd	r24, Y+10	; 0x0a
    617e:	28 2f       	mov	r18, r24
    6180:	30 e0       	ldi	r19, 0x00	; 0
    6182:	00 d0       	rcall	.+0      	; 0x6184 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x81a>
    6184:	00 d0       	rcall	.+0      	; 0x6186 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x81c>
    6186:	00 d0       	rcall	.+0      	; 0x6188 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x81e>
    6188:	ed b7       	in	r30, 0x3d	; 61
    618a:	fe b7       	in	r31, 0x3e	; 62
    618c:	31 96       	adiw	r30, 0x01	; 1
    618e:	89 ee       	ldi	r24, 0xE9	; 233
    6190:	94 e0       	ldi	r25, 0x04	; 4
    6192:	91 83       	std	Z+1, r25	; 0x01
    6194:	80 83       	st	Z, r24
    6196:	84 e3       	ldi	r24, 0x34	; 52
    6198:	94 e0       	ldi	r25, 0x04	; 4
    619a:	93 83       	std	Z+3, r25	; 0x03
    619c:	82 83       	std	Z+2, r24	; 0x02
    619e:	35 83       	std	Z+5, r19	; 0x05
    61a0:	24 83       	std	Z+4, r18	; 0x04
    61a2:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    61a6:	8d b7       	in	r24, 0x3d	; 61
    61a8:	9e b7       	in	r25, 0x3e	; 62
    61aa:	06 96       	adiw	r24, 0x06	; 6
    61ac:	0f b6       	in	r0, 0x3f	; 63
    61ae:	f8 94       	cli
    61b0:	9e bf       	out	0x3e, r25	; 62
    61b2:	0f be       	out	0x3f, r0	; 63
    61b4:	8d bf       	out	0x3d, r24	; 61
          DbgUart.sendStr_P((PSTR("\n\rEXIT\n\r")));
          break;
        }

        modem->pUart->sendStr(str);
        while (modem->pUart->receive((u08*) &tmp, 1)) {
    61b6:	ef a5       	ldd	r30, Y+47	; 0x2f
    61b8:	f8 a9       	ldd	r31, Y+48	; 0x30
    61ba:	82 81       	ldd	r24, Z+2	; 0x02
    61bc:	93 81       	ldd	r25, Z+3	; 0x03
    61be:	fc 01       	movw	r30, r24
    61c0:	e7 5d       	subi	r30, 0xD7	; 215
    61c2:	fd 4f       	sbci	r31, 0xFD	; 253
    61c4:	80 81       	ld	r24, Z
    61c6:	91 81       	ldd	r25, Z+1	; 0x01
    61c8:	9e 01       	movw	r18, r28
    61ca:	26 5f       	subi	r18, 0xF6	; 246
    61cc:	3f 4f       	sbci	r19, 0xFF	; 255
    61ce:	b9 01       	movw	r22, r18
    61d0:	41 e0       	ldi	r20, 0x01	; 1
    61d2:	50 e0       	ldi	r21, 0x00	; 0
    61d4:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    61d8:	1b aa       	std	Y+51, r1	; 0x33
    61da:	00 97       	sbiw	r24, 0x00	; 0
    61dc:	11 f0       	breq	.+4      	; 0x61e2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x878>
    61de:	91 e0       	ldi	r25, 0x01	; 1
    61e0:	9b ab       	std	Y+51, r25	; 0x33
    61e2:	2b a9       	ldd	r18, Y+51	; 0x33
    61e4:	22 23       	and	r18, r18
    61e6:	51 f6       	brne	.-108    	; 0x617c <_ZN11CCONTROLLER11CController14consoleServiceEv+0x812>
    61e8:	71 cf       	rjmp	.-286    	; 0x60cc <_ZN11CCONTROLLER11CController14consoleServiceEv+0x762>
      }
      break;

    case 'n':
    case 'N':
      j = 0;
    61ea:	1d 82       	std	Y+5, r1	; 0x05
      i = 0;
    61ec:	1e 82       	std	Y+6, r1	; 0x06
      DbgUart.uprintf("\n\rSet %d SMS Phone Numbers\n\r", MAX_SMS_PHONENUMBERS);
    61ee:	00 d0       	rcall	.+0      	; 0x61f0 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x886>
    61f0:	00 d0       	rcall	.+0      	; 0x61f2 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x888>
    61f2:	00 d0       	rcall	.+0      	; 0x61f4 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x88a>
    61f4:	ed b7       	in	r30, 0x3d	; 61
    61f6:	fe b7       	in	r31, 0x3e	; 62
    61f8:	31 96       	adiw	r30, 0x01	; 1
    61fa:	89 ee       	ldi	r24, 0xE9	; 233
    61fc:	94 e0       	ldi	r25, 0x04	; 4
    61fe:	91 83       	std	Z+1, r25	; 0x01
    6200:	80 83       	st	Z, r24
    6202:	83 e7       	ldi	r24, 0x73	; 115
    6204:	94 e0       	ldi	r25, 0x04	; 4
    6206:	93 83       	std	Z+3, r25	; 0x03
    6208:	82 83       	std	Z+2, r24	; 0x02
    620a:	82 e0       	ldi	r24, 0x02	; 2
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	95 83       	std	Z+5, r25	; 0x05
    6210:	84 83       	std	Z+4, r24	; 0x04
    6212:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6216:	8d b7       	in	r24, 0x3d	; 61
    6218:	9e b7       	in	r25, 0x3e	; 62
    621a:	06 96       	adiw	r24, 0x06	; 6
    621c:	0f b6       	in	r0, 0x3f	; 63
    621e:	f8 94       	cli
    6220:	9e bf       	out	0x3e, r25	; 62
    6222:	0f be       	out	0x3f, r0	; 63
    6224:	8d bf       	out	0x3d, r24	; 61
      while (1) {
        if (DbgUart.receive(&cmd, 1)) {
    6226:	89 ee       	ldi	r24, 0xE9	; 233
    6228:	94 e0       	ldi	r25, 0x04	; 4
    622a:	9e 01       	movw	r18, r28
    622c:	27 5f       	subi	r18, 0xF7	; 247
    622e:	3f 4f       	sbci	r19, 0xFF	; 255
    6230:	b9 01       	movw	r22, r18
    6232:	41 e0       	ldi	r20, 0x01	; 1
    6234:	50 e0       	ldi	r21, 0x00	; 0
    6236:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    623a:	1a aa       	std	Y+50, r1	; 0x32
    623c:	00 97       	sbiw	r24, 0x00	; 0
    623e:	11 f0       	breq	.+4      	; 0x6244 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8da>
    6240:	91 e0       	ldi	r25, 0x01	; 1
    6242:	9a ab       	std	Y+50, r25	; 0x32
    6244:	2a a9       	ldd	r18, Y+50	; 0x32
    6246:	22 23       	and	r18, r18
    6248:	71 f3       	breq	.-36     	; 0x6226 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8bc>
          DbgUart.uprintf("%c", cmd);
    624a:	89 85       	ldd	r24, Y+9	; 0x09
    624c:	28 2f       	mov	r18, r24
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	00 d0       	rcall	.+0      	; 0x6252 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8e8>
    6252:	00 d0       	rcall	.+0      	; 0x6254 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8ea>
    6254:	00 d0       	rcall	.+0      	; 0x6256 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8ec>
    6256:	ed b7       	in	r30, 0x3d	; 61
    6258:	fe b7       	in	r31, 0x3e	; 62
    625a:	31 96       	adiw	r30, 0x01	; 1
    625c:	89 ee       	ldi	r24, 0xE9	; 233
    625e:	94 e0       	ldi	r25, 0x04	; 4
    6260:	91 83       	std	Z+1, r25	; 0x01
    6262:	80 83       	st	Z, r24
    6264:	84 e3       	ldi	r24, 0x34	; 52
    6266:	94 e0       	ldi	r25, 0x04	; 4
    6268:	93 83       	std	Z+3, r25	; 0x03
    626a:	82 83       	std	Z+2, r24	; 0x02
    626c:	35 83       	std	Z+5, r19	; 0x05
    626e:	24 83       	std	Z+4, r18	; 0x04
    6270:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6274:	8d b7       	in	r24, 0x3d	; 61
    6276:	9e b7       	in	r25, 0x3e	; 62
    6278:	06 96       	adiw	r24, 0x06	; 6
    627a:	0f b6       	in	r0, 0x3f	; 63
    627c:	f8 94       	cli
    627e:	9e bf       	out	0x3e, r25	; 62
    6280:	0f be       	out	0x3f, r0	; 63
    6282:	8d bf       	out	0x3d, r24	; 61
          if (cmd == '\r' || j >= 10 || cmd == '\n') {
    6284:	89 85       	ldd	r24, Y+9	; 0x09
    6286:	8d 30       	cpi	r24, 0x0D	; 13
    6288:	39 f0       	breq	.+14     	; 0x6298 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x92e>
    628a:	8d 81       	ldd	r24, Y+5	; 0x05
    628c:	8a 30       	cpi	r24, 0x0A	; 10
    628e:	20 f4       	brcc	.+8      	; 0x6298 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x92e>
    6290:	89 85       	ldd	r24, Y+9	; 0x09
    6292:	8a 30       	cpi	r24, 0x0A	; 10
    6294:	09 f0       	breq	.+2      	; 0x6298 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x92e>
    6296:	9f c0       	rjmp	.+318    	; 0x63d6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xa6c>
            str[j] = 0;
    6298:	8d 81       	ldd	r24, Y+5	; 0x05
    629a:	28 2f       	mov	r18, r24
    629c:	30 e0       	ldi	r19, 0x00	; 0
    629e:	ce 01       	movw	r24, r28
    62a0:	0f 96       	adiw	r24, 0x0f	; 15
    62a2:	fc 01       	movw	r30, r24
    62a4:	e2 0f       	add	r30, r18
    62a6:	f3 1f       	adc	r31, r19
    62a8:	10 82       	st	Z, r1
            strcpy(PhoneNumbers[i], str);
    62aa:	8e 81       	ldd	r24, Y+6	; 0x06
    62ac:	28 2f       	mov	r18, r24
    62ae:	30 e0       	ldi	r19, 0x00	; 0
    62b0:	c9 01       	movw	r24, r18
    62b2:	88 0f       	add	r24, r24
    62b4:	99 1f       	adc	r25, r25
    62b6:	82 0f       	add	r24, r18
    62b8:	93 1f       	adc	r25, r19
    62ba:	88 0f       	add	r24, r24
    62bc:	99 1f       	adc	r25, r25
    62be:	88 0f       	add	r24, r24
    62c0:	99 1f       	adc	r25, r25
    62c2:	9c 01       	movw	r18, r24
    62c4:	23 5e       	subi	r18, 0xE3	; 227
    62c6:	3f 4f       	sbci	r19, 0xFF	; 255
    62c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    62ca:	98 a9       	ldd	r25, Y+48	; 0x30
    62cc:	82 0f       	add	r24, r18
    62ce:	93 1f       	adc	r25, r19
    62d0:	9e 01       	movw	r18, r28
    62d2:	21 5f       	subi	r18, 0xF1	; 241
    62d4:	3f 4f       	sbci	r19, 0xFF	; 255
    62d6:	b9 01       	movw	r22, r18
    62d8:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
            DbgUart.uprintf("\n\rNumber[%d]=%s Set %d of %d\n\r", i, str, i + 1,
                            MAX_SMS_PHONENUMBERS);
    62dc:	8e 81       	ldd	r24, Y+6	; 0x06
    62de:	28 2f       	mov	r18, r24
    62e0:	30 e0       	ldi	r19, 0x00	; 0
    62e2:	8e 81       	ldd	r24, Y+6	; 0x06
    62e4:	88 2f       	mov	r24, r24
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	ac 01       	movw	r20, r24
    62ea:	4f 5f       	subi	r20, 0xFF	; 255
    62ec:	5f 4f       	sbci	r21, 0xFF	; 255
    62ee:	8d b7       	in	r24, 0x3d	; 61
    62f0:	9e b7       	in	r25, 0x3e	; 62
    62f2:	0c 97       	sbiw	r24, 0x0c	; 12
    62f4:	0f b6       	in	r0, 0x3f	; 63
    62f6:	f8 94       	cli
    62f8:	9e bf       	out	0x3e, r25	; 62
    62fa:	0f be       	out	0x3f, r0	; 63
    62fc:	8d bf       	out	0x3d, r24	; 61
    62fe:	ed b7       	in	r30, 0x3d	; 61
    6300:	fe b7       	in	r31, 0x3e	; 62
    6302:	31 96       	adiw	r30, 0x01	; 1
    6304:	89 ee       	ldi	r24, 0xE9	; 233
    6306:	94 e0       	ldi	r25, 0x04	; 4
    6308:	91 83       	std	Z+1, r25	; 0x01
    630a:	80 83       	st	Z, r24
    630c:	80 e9       	ldi	r24, 0x90	; 144
    630e:	94 e0       	ldi	r25, 0x04	; 4
    6310:	93 83       	std	Z+3, r25	; 0x03
    6312:	82 83       	std	Z+2, r24	; 0x02
    6314:	35 83       	std	Z+5, r19	; 0x05
    6316:	24 83       	std	Z+4, r18	; 0x04
    6318:	ce 01       	movw	r24, r28
    631a:	0f 96       	adiw	r24, 0x0f	; 15
    631c:	97 83       	std	Z+7, r25	; 0x07
    631e:	86 83       	std	Z+6, r24	; 0x06
    6320:	51 87       	std	Z+9, r21	; 0x09
    6322:	40 87       	std	Z+8, r20	; 0x08
    6324:	82 e0       	ldi	r24, 0x02	; 2
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	93 87       	std	Z+11, r25	; 0x0b
    632a:	82 87       	std	Z+10, r24	; 0x0a
    632c:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6330:	2d b7       	in	r18, 0x3d	; 61
    6332:	3e b7       	in	r19, 0x3e	; 62
    6334:	24 5f       	subi	r18, 0xF4	; 244
    6336:	3f 4f       	sbci	r19, 0xFF	; 255
    6338:	0f b6       	in	r0, 0x3f	; 63
    633a:	f8 94       	cli
    633c:	3e bf       	out	0x3e, r19	; 62
    633e:	0f be       	out	0x3f, r0	; 63
    6340:	2d bf       	out	0x3d, r18	; 61
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6342:	ef e5       	ldi	r30, 0x5F	; 95
    6344:	f0 e0       	ldi	r31, 0x00	; 0
    6346:	80 81       	ld	r24, Z
    6348:	8d 87       	std	Y+13, r24	; 0x0d
    634a:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    634e:	8a 83       	std	Y+2, r24	; 0x02
    6350:	2a c0       	rjmp	.+84     	; 0x63a6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xa3c>
              eeprom_write_block(PhoneNumbers[i], eePhoneNumbers[i],
                                 sizeof(eePhoneNumbers[0]));
    6352:	8e 81       	ldd	r24, Y+6	; 0x06
    6354:	28 2f       	mov	r18, r24
    6356:	30 e0       	ldi	r19, 0x00	; 0
    6358:	c9 01       	movw	r24, r18
    635a:	88 0f       	add	r24, r24
    635c:	99 1f       	adc	r25, r25
    635e:	82 0f       	add	r24, r18
    6360:	93 1f       	adc	r25, r19
    6362:	88 0f       	add	r24, r24
    6364:	99 1f       	adc	r25, r25
    6366:	88 0f       	add	r24, r24
    6368:	99 1f       	adc	r25, r25
    636a:	9c 01       	movw	r18, r24
    636c:	23 5e       	subi	r18, 0xE3	; 227
    636e:	3f 4f       	sbci	r19, 0xFF	; 255
    6370:	8f a5       	ldd	r24, Y+47	; 0x2f
    6372:	98 a9       	ldd	r25, Y+48	; 0x30
    6374:	82 0f       	add	r24, r18
    6376:	93 1f       	adc	r25, r19
    6378:	ac 01       	movw	r20, r24
    637a:	8e 81       	ldd	r24, Y+6	; 0x06
    637c:	28 2f       	mov	r18, r24
    637e:	30 e0       	ldi	r19, 0x00	; 0
    6380:	c9 01       	movw	r24, r18
    6382:	88 0f       	add	r24, r24
    6384:	99 1f       	adc	r25, r25
    6386:	82 0f       	add	r24, r18
    6388:	93 1f       	adc	r25, r19
    638a:	88 0f       	add	r24, r24
    638c:	99 1f       	adc	r25, r25
    638e:	88 0f       	add	r24, r24
    6390:	99 1f       	adc	r25, r25
    6392:	80 50       	subi	r24, 0x00	; 0
    6394:	90 40       	sbci	r25, 0x00	; 0
    6396:	9c 01       	movw	r18, r24
    6398:	ca 01       	movw	r24, r20
    639a:	b9 01       	movw	r22, r18
    639c:	4c e0       	ldi	r20, 0x0C	; 12
    639e:	50 e0       	ldi	r21, 0x00	; 0
    63a0:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
          if (cmd == '\r' || j >= 10 || cmd == '\n') {
            str[j] = 0;
            strcpy(PhoneNumbers[i], str);
            DbgUart.uprintf("\n\rNumber[%d]=%s Set %d of %d\n\r", i, str, i + 1,
                            MAX_SMS_PHONENUMBERS);
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    63a4:	1a 82       	std	Y+2, r1	; 0x02
    63a6:	8a 81       	ldd	r24, Y+2	; 0x02
    63a8:	88 23       	and	r24, r24
    63aa:	99 f6       	brne	.-90     	; 0x6352 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x9e8>
              eeprom_write_block(PhoneNumbers[i], eePhoneNumbers[i],
                                 sizeof(eePhoneNumbers[0]));
            }
    63ac:	ce 01       	movw	r24, r28
    63ae:	0d 96       	adiw	r24, 0x0d	; 13
    63b0:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
            j = 0;
    63b4:	1d 82       	std	Y+5, r1	; 0x05
            i++;
    63b6:	8e 81       	ldd	r24, Y+6	; 0x06
    63b8:	8f 5f       	subi	r24, 0xFF	; 255
    63ba:	8e 83       	std	Y+6, r24	; 0x06
            if (i == MAX_SMS_PHONENUMBERS) {
    63bc:	8e 81       	ldd	r24, Y+6	; 0x06
    63be:	82 30       	cpi	r24, 0x02	; 2
    63c0:	09 f0       	breq	.+2      	; 0x63c4 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xa5a>
    63c2:	31 cf       	rjmp	.-414    	; 0x6226 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8bc>
              nrValid = true;
    63c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    63c6:	98 a9       	ldd	r25, Y+48	; 0x30
    63c8:	fc 01       	movw	r30, r24
    63ca:	ef 5b       	subi	r30, 0xBF	; 191
    63cc:	ff 4f       	sbci	r31, 0xFF	; 255
    63ce:	81 e0       	ldi	r24, 0x01	; 1
    63d0:	80 83       	st	Z, r24
          } else {
            str[j++] = cmd;
          }
        }
      }
      cmd = 0;
    63d2:	19 86       	std	Y+9, r1	; 0x09
    63d4:	41 c1       	rjmp	.+642    	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
            if (i == MAX_SMS_PHONENUMBERS) {
              nrValid = true;
              break;
            }
          } else {
            str[j++] = cmd;
    63d6:	8d 81       	ldd	r24, Y+5	; 0x05
    63d8:	28 2f       	mov	r18, r24
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	49 85       	ldd	r20, Y+9	; 0x09
    63de:	ce 01       	movw	r24, r28
    63e0:	0f 96       	adiw	r24, 0x0f	; 15
    63e2:	fc 01       	movw	r30, r24
    63e4:	e2 0f       	add	r30, r18
    63e6:	f3 1f       	adc	r31, r19
    63e8:	40 83       	st	Z, r20
    63ea:	8d 81       	ldd	r24, Y+5	; 0x05
    63ec:	8f 5f       	subi	r24, 0xFF	; 255
    63ee:	8d 83       	std	Y+5, r24	; 0x05
    63f0:	1a cf       	rjmp	.-460    	; 0x6226 <_ZN11CCONTROLLER11CController14consoleServiceEv+0x8bc>
      }
      cmd = 0;
      break;

    case 'p':
      j = 0;
    63f2:	1d 82       	std	Y+5, r1	; 0x05
      DbgUart.sendStr_P(PSTR("\n\rSet SIM1 PIN\n\r"));
    63f4:	2f ea       	ldi	r18, 0xAF	; 175
    63f6:	34 e0       	ldi	r19, 0x04	; 4
    63f8:	89 ee       	ldi	r24, 0xE9	; 233
    63fa:	94 e0       	ldi	r25, 0x04	; 4
    63fc:	b9 01       	movw	r22, r18
    63fe:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      while (1) {
        if (DbgUart.receive(&cmd, 1)) {
    6402:	89 ee       	ldi	r24, 0xE9	; 233
    6404:	94 e0       	ldi	r25, 0x04	; 4
    6406:	9e 01       	movw	r18, r28
    6408:	27 5f       	subi	r18, 0xF7	; 247
    640a:	3f 4f       	sbci	r19, 0xFF	; 255
    640c:	b9 01       	movw	r22, r18
    640e:	41 e0       	ldi	r20, 0x01	; 1
    6410:	50 e0       	ldi	r21, 0x00	; 0
    6412:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    6416:	19 aa       	std	Y+49, r1	; 0x31
    6418:	00 97       	sbiw	r24, 0x00	; 0
    641a:	11 f0       	breq	.+4      	; 0x6420 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xab6>
    641c:	31 e0       	ldi	r19, 0x01	; 1
    641e:	39 ab       	std	Y+49, r19	; 0x31
    6420:	89 a9       	ldd	r24, Y+49	; 0x31
    6422:	88 23       	and	r24, r24
    6424:	71 f3       	breq	.-36     	; 0x6402 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xa98>
          DbgUart.uprintf("%c", cmd);
    6426:	89 85       	ldd	r24, Y+9	; 0x09
    6428:	28 2f       	mov	r18, r24
    642a:	30 e0       	ldi	r19, 0x00	; 0
    642c:	00 d0       	rcall	.+0      	; 0x642e <_ZN11CCONTROLLER11CController14consoleServiceEv+0xac4>
    642e:	00 d0       	rcall	.+0      	; 0x6430 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xac6>
    6430:	00 d0       	rcall	.+0      	; 0x6432 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xac8>
    6432:	ed b7       	in	r30, 0x3d	; 61
    6434:	fe b7       	in	r31, 0x3e	; 62
    6436:	31 96       	adiw	r30, 0x01	; 1
    6438:	89 ee       	ldi	r24, 0xE9	; 233
    643a:	94 e0       	ldi	r25, 0x04	; 4
    643c:	91 83       	std	Z+1, r25	; 0x01
    643e:	80 83       	st	Z, r24
    6440:	84 e3       	ldi	r24, 0x34	; 52
    6442:	94 e0       	ldi	r25, 0x04	; 4
    6444:	93 83       	std	Z+3, r25	; 0x03
    6446:	82 83       	std	Z+2, r24	; 0x02
    6448:	35 83       	std	Z+5, r19	; 0x05
    644a:	24 83       	std	Z+4, r18	; 0x04
    644c:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6450:	2d b7       	in	r18, 0x3d	; 61
    6452:	3e b7       	in	r19, 0x3e	; 62
    6454:	2a 5f       	subi	r18, 0xFA	; 250
    6456:	3f 4f       	sbci	r19, 0xFF	; 255
    6458:	0f b6       	in	r0, 0x3f	; 63
    645a:	f8 94       	cli
    645c:	3e bf       	out	0x3e, r19	; 62
    645e:	0f be       	out	0x3f, r0	; 63
    6460:	2d bf       	out	0x3d, r18	; 61
          if (cmd == '\r' || j >= 10 || cmd == '\n') {
    6462:	89 85       	ldd	r24, Y+9	; 0x09
    6464:	8d 30       	cpi	r24, 0x0D	; 13
    6466:	31 f0       	breq	.+12     	; 0x6474 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb0a>
    6468:	8d 81       	ldd	r24, Y+5	; 0x05
    646a:	8a 30       	cpi	r24, 0x0A	; 10
    646c:	18 f4       	brcc	.+6      	; 0x6474 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb0a>
    646e:	89 85       	ldd	r24, Y+9	; 0x09
    6470:	8a 30       	cpi	r24, 0x0A	; 10
    6472:	89 f5       	brne	.+98     	; 0x64d6 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb6c>
            str[j] = 0;
    6474:	8d 81       	ldd	r24, Y+5	; 0x05
    6476:	28 2f       	mov	r18, r24
    6478:	30 e0       	ldi	r19, 0x00	; 0
    647a:	ce 01       	movw	r24, r28
    647c:	0f 96       	adiw	r24, 0x0f	; 15
    647e:	fc 01       	movw	r30, r24
    6480:	e2 0f       	add	r30, r18
    6482:	f3 1f       	adc	r31, r19
    6484:	10 82       	st	Z, r1
            strcpy(sim1PIN, str);
    6486:	8f a5       	ldd	r24, Y+47	; 0x2f
    6488:	98 a9       	ldd	r25, Y+48	; 0x30
    648a:	c5 96       	adiw	r24, 0x35	; 53
    648c:	9e 01       	movw	r18, r28
    648e:	21 5f       	subi	r18, 0xF1	; 241
    6490:	3f 4f       	sbci	r19, 0xFF	; 255
    6492:	b9 01       	movw	r22, r18
    6494:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    6498:	ef e5       	ldi	r30, 0x5F	; 95
    649a:	f0 e0       	ldi	r31, 0x00	; 0
    649c:	80 81       	ld	r24, Z
    649e:	8e 87       	std	Y+14, r24	; 0x0e
    64a0:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    64a4:	89 83       	std	Y+1, r24	; 0x01
    64a6:	01 c0       	rjmp	.+2      	; 0x64aa <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb40>
    64a8:	19 82       	std	Y+1, r1	; 0x01
    64aa:	89 81       	ldd	r24, Y+1	; 0x01
    64ac:	88 23       	and	r24, r24
    64ae:	e1 f7       	brne	.-8      	; 0x64a8 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xb3e>
              //eeprom_write_block(sim1PIN, eePIN1, sizeof(eePIN1));
            }
    64b0:	ce 01       	movw	r24, r28
    64b2:	0e 96       	adiw	r24, 0x0e	; 14
    64b4:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
            PIN1Invalid = false;
    64b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    64ba:	98 a9       	ldd	r25, Y+48	; 0x30
    64bc:	fc 01       	movw	r30, r24
    64be:	ee 5b       	subi	r30, 0xBE	; 190
    64c0:	ff 4f       	sbci	r31, 0xFF	; 255
    64c2:	10 82       	st	Z, r1
            DbgUart.sendStr_P(PSTR("\n\rOK"));
    64c4:	2a ea       	ldi	r18, 0xAA	; 170
    64c6:	34 e0       	ldi	r19, 0x04	; 4
    64c8:	89 ee       	ldi	r24, 0xE9	; 233
    64ca:	94 e0       	ldi	r25, 0x04	; 4
    64cc:	b9 01       	movw	r22, r18
    64ce:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
          } else {
            str[j++] = cmd;
          }
        }
      }
      cmd = 0;
    64d2:	19 86       	std	Y+9, r1	; 0x09
    64d4:	c1 c0       	rjmp	.+386    	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
            }
            PIN1Invalid = false;
            DbgUart.sendStr_P(PSTR("\n\rOK"));
            break;
          } else {
            str[j++] = cmd;
    64d6:	8d 81       	ldd	r24, Y+5	; 0x05
    64d8:	28 2f       	mov	r18, r24
    64da:	30 e0       	ldi	r19, 0x00	; 0
    64dc:	49 85       	ldd	r20, Y+9	; 0x09
    64de:	ce 01       	movw	r24, r28
    64e0:	0f 96       	adiw	r24, 0x0f	; 15
    64e2:	fc 01       	movw	r30, r24
    64e4:	e2 0f       	add	r30, r18
    64e6:	f3 1f       	adc	r31, r19
    64e8:	40 83       	st	Z, r20
    64ea:	8d 81       	ldd	r24, Y+5	; 0x05
    64ec:	8f 5f       	subi	r24, 0xFF	; 255
    64ee:	8d 83       	std	Y+5, r24	; 0x05
    64f0:	88 cf       	rjmp	.-240    	; 0x6402 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xa98>
      cmd = 0;
      break;

    case ' ':
    case 'm':
      menu();
    64f2:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <_Z4menuv>
      cmd = 0;
    64f6:	19 86       	std	Y+9, r1	; 0x09
    64f8:	af c0       	rjmp	.+350    	; 0x6658 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcee>
      break;

    case 't':
      DbgUart.sendStr_P((PSTR("\n\r=====TAGS Seen :=====\n\r")));
    64fa:	20 e9       	ldi	r18, 0x90	; 144
    64fc:	34 e0       	ldi	r19, 0x04	; 4
    64fe:	89 ee       	ldi	r24, 0xE9	; 233
    6500:	94 e0       	ldi	r25, 0x04	; 4
    6502:	b9 01       	movw	r22, r18
    6504:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
      for (i = 0; i < 8; i++) {
    6508:	1e 82       	std	Y+6, r1	; 0x06
    650a:	a1 c0       	rjmp	.+322    	; 0x664e <_ZN11CCONTROLLER11CController14consoleServiceEv+0xce4>
        if (Rfid->pTable[i].persistCnt >= 1) {
    650c:	ef a5       	ldd	r30, Y+47	; 0x2f
    650e:	f8 a9       	ldd	r31, Y+48	; 0x30
    6510:	81 85       	ldd	r24, Z+9	; 0x09
    6512:	92 85       	ldd	r25, Z+10	; 0x0a
    6514:	fc 01       	movw	r30, r24
    6516:	e5 5b       	subi	r30, 0xB5	; 181
    6518:	ff 4f       	sbci	r31, 0xFF	; 255
    651a:	40 81       	ld	r20, Z
    651c:	51 81       	ldd	r21, Z+1	; 0x01
    651e:	8e 81       	ldd	r24, Y+6	; 0x06
    6520:	88 2f       	mov	r24, r24
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	9c 01       	movw	r18, r24
    6526:	22 0f       	add	r18, r18
    6528:	33 1f       	adc	r19, r19
    652a:	c9 01       	movw	r24, r18
    652c:	88 0f       	add	r24, r24
    652e:	99 1f       	adc	r25, r25
    6530:	88 0f       	add	r24, r24
    6532:	99 1f       	adc	r25, r25
    6534:	88 0f       	add	r24, r24
    6536:	99 1f       	adc	r25, r25
    6538:	82 1b       	sub	r24, r18
    653a:	93 0b       	sbc	r25, r19
    653c:	fa 01       	movw	r30, r20
    653e:	e8 0f       	add	r30, r24
    6540:	f9 1f       	adc	r31, r25
    6542:	80 81       	ld	r24, Z
    6544:	91 81       	ldd	r25, Z+1	; 0x01
    6546:	00 97       	sbiw	r24, 0x00	; 0
    6548:	09 f4       	brne	.+2      	; 0x654c <_ZN11CCONTROLLER11CController14consoleServiceEv+0xbe2>
    654a:	7e c0       	rjmp	.+252    	; 0x6648 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcde>
          DbgUart.uprintf("\t\r\n[ID:=%d cnt:%d rssi:=%d]", (u16) Rfid->pTable[i].tagID,
                          (u16) Rfid->pTable[i].persistCnt, (u16) Rfid->pTable[i].rssi);
    654c:	ef a5       	ldd	r30, Y+47	; 0x2f
    654e:	f8 a9       	ldd	r31, Y+48	; 0x30
    6550:	81 85       	ldd	r24, Z+9	; 0x09
    6552:	92 85       	ldd	r25, Z+10	; 0x0a
    6554:	fc 01       	movw	r30, r24
    6556:	e5 5b       	subi	r30, 0xB5	; 181
    6558:	ff 4f       	sbci	r31, 0xFF	; 255
    655a:	40 81       	ld	r20, Z
    655c:	51 81       	ldd	r21, Z+1	; 0x01
    655e:	8e 81       	ldd	r24, Y+6	; 0x06
    6560:	88 2f       	mov	r24, r24
    6562:	90 e0       	ldi	r25, 0x00	; 0
    6564:	9c 01       	movw	r18, r24
    6566:	22 0f       	add	r18, r18
    6568:	33 1f       	adc	r19, r19
    656a:	c9 01       	movw	r24, r18
    656c:	88 0f       	add	r24, r24
    656e:	99 1f       	adc	r25, r25
    6570:	88 0f       	add	r24, r24
    6572:	99 1f       	adc	r25, r25
    6574:	88 0f       	add	r24, r24
    6576:	99 1f       	adc	r25, r25
    6578:	82 1b       	sub	r24, r18
    657a:	93 0b       	sbc	r25, r19
    657c:	fa 01       	movw	r30, r20
    657e:	e8 0f       	add	r30, r24
    6580:	f9 1f       	adc	r31, r25
    6582:	83 81       	ldd	r24, Z+3	; 0x03
    6584:	94 81       	ldd	r25, Z+4	; 0x04
    6586:	a5 81       	ldd	r26, Z+5	; 0x05
    6588:	b6 81       	ldd	r27, Z+6	; 0x06
    658a:	dc 01       	movw	r26, r24
    658c:	ef a5       	ldd	r30, Y+47	; 0x2f
    658e:	f8 a9       	ldd	r31, Y+48	; 0x30
    6590:	81 85       	ldd	r24, Z+9	; 0x09
    6592:	92 85       	ldd	r25, Z+10	; 0x0a
    6594:	fc 01       	movw	r30, r24
    6596:	e5 5b       	subi	r30, 0xB5	; 181
    6598:	ff 4f       	sbci	r31, 0xFF	; 255
    659a:	40 81       	ld	r20, Z
    659c:	51 81       	ldd	r21, Z+1	; 0x01
    659e:	8e 81       	ldd	r24, Y+6	; 0x06
    65a0:	88 2f       	mov	r24, r24
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	9c 01       	movw	r18, r24
    65a6:	22 0f       	add	r18, r18
    65a8:	33 1f       	adc	r19, r19
    65aa:	c9 01       	movw	r24, r18
    65ac:	88 0f       	add	r24, r24
    65ae:	99 1f       	adc	r25, r25
    65b0:	88 0f       	add	r24, r24
    65b2:	99 1f       	adc	r25, r25
    65b4:	88 0f       	add	r24, r24
    65b6:	99 1f       	adc	r25, r25
    65b8:	82 1b       	sub	r24, r18
    65ba:	93 0b       	sbc	r25, r19
    65bc:	fa 01       	movw	r30, r20
    65be:	e8 0f       	add	r30, r24
    65c0:	f9 1f       	adc	r31, r25
    65c2:	60 81       	ld	r22, Z
    65c4:	71 81       	ldd	r23, Z+1	; 0x01
    65c6:	ef a5       	ldd	r30, Y+47	; 0x2f
    65c8:	f8 a9       	ldd	r31, Y+48	; 0x30
    65ca:	81 85       	ldd	r24, Z+9	; 0x09
    65cc:	92 85       	ldd	r25, Z+10	; 0x0a
    65ce:	fc 01       	movw	r30, r24
    65d0:	e5 5b       	subi	r30, 0xB5	; 181
    65d2:	ff 4f       	sbci	r31, 0xFF	; 255
    65d4:	40 81       	ld	r20, Z
    65d6:	51 81       	ldd	r21, Z+1	; 0x01
    65d8:	8e 81       	ldd	r24, Y+6	; 0x06
    65da:	88 2f       	mov	r24, r24
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	9c 01       	movw	r18, r24
    65e0:	22 0f       	add	r18, r18
    65e2:	33 1f       	adc	r19, r19
    65e4:	c9 01       	movw	r24, r18
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	88 0f       	add	r24, r24
    65ec:	99 1f       	adc	r25, r25
    65ee:	88 0f       	add	r24, r24
    65f0:	99 1f       	adc	r25, r25
    65f2:	82 1b       	sub	r24, r18
    65f4:	93 0b       	sbc	r25, r19
    65f6:	fa 01       	movw	r30, r20
    65f8:	e8 0f       	add	r30, r24
    65fa:	f9 1f       	adc	r31, r25
    65fc:	21 85       	ldd	r18, Z+9	; 0x09
    65fe:	32 85       	ldd	r19, Z+10	; 0x0a
    6600:	8d b7       	in	r24, 0x3d	; 61
    6602:	9e b7       	in	r25, 0x3e	; 62
    6604:	0a 97       	sbiw	r24, 0x0a	; 10
    6606:	0f b6       	in	r0, 0x3f	; 63
    6608:	f8 94       	cli
    660a:	9e bf       	out	0x3e, r25	; 62
    660c:	0f be       	out	0x3f, r0	; 63
    660e:	8d bf       	out	0x3d, r24	; 61
    6610:	ed b7       	in	r30, 0x3d	; 61
    6612:	fe b7       	in	r31, 0x3e	; 62
    6614:	31 96       	adiw	r30, 0x01	; 1
    6616:	89 ee       	ldi	r24, 0xE9	; 233
    6618:	94 e0       	ldi	r25, 0x04	; 4
    661a:	91 83       	std	Z+1, r25	; 0x01
    661c:	80 83       	st	Z, r24
    661e:	8f ea       	ldi	r24, 0xAF	; 175
    6620:	94 e0       	ldi	r25, 0x04	; 4
    6622:	93 83       	std	Z+3, r25	; 0x03
    6624:	82 83       	std	Z+2, r24	; 0x02
    6626:	b5 83       	std	Z+5, r27	; 0x05
    6628:	a4 83       	std	Z+4, r26	; 0x04
    662a:	77 83       	std	Z+7, r23	; 0x07
    662c:	66 83       	std	Z+6, r22	; 0x06
    662e:	31 87       	std	Z+9, r19	; 0x09
    6630:	20 87       	std	Z+8, r18	; 0x08
    6632:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6636:	2d b7       	in	r18, 0x3d	; 61
    6638:	3e b7       	in	r19, 0x3e	; 62
    663a:	26 5f       	subi	r18, 0xF6	; 246
    663c:	3f 4f       	sbci	r19, 0xFF	; 255
    663e:	0f b6       	in	r0, 0x3f	; 63
    6640:	f8 94       	cli
    6642:	3e bf       	out	0x3e, r19	; 62
    6644:	0f be       	out	0x3f, r0	; 63
    6646:	2d bf       	out	0x3d, r18	; 61
      cmd = 0;
      break;

    case 't':
      DbgUart.sendStr_P((PSTR("\n\r=====TAGS Seen :=====\n\r")));
      for (i = 0; i < 8; i++) {
    6648:	8e 81       	ldd	r24, Y+6	; 0x06
    664a:	8f 5f       	subi	r24, 0xFF	; 255
    664c:	8e 83       	std	Y+6, r24	; 0x06
    664e:	8e 81       	ldd	r24, Y+6	; 0x06
    6650:	88 30       	cpi	r24, 0x08	; 8
    6652:	08 f4       	brcc	.+2      	; 0x6656 <_ZN11CCONTROLLER11CController14consoleServiceEv+0xcec>
    6654:	5b cf       	rjmp	.-330    	; 0x650c <_ZN11CCONTROLLER11CController14consoleServiceEv+0xba2>
        if (Rfid->pTable[i].persistCnt >= 1) {
          DbgUart.uprintf("\t\r\n[ID:=%d cnt:%d rssi:=%d]", (u16) Rfid->pTable[i].tagID,
                          (u16) Rfid->pTable[i].persistCnt, (u16) Rfid->pTable[i].rssi);
        }
      }
      cmd = 0;
    6656:	19 86       	std	Y+9, r1	; 0x09
      break;
  }
}
    6658:	e8 96       	adiw	r28, 0x38	; 56
    665a:	0f b6       	in	r0, 0x3f	; 63
    665c:	f8 94       	cli
    665e:	de bf       	out	0x3e, r29	; 62
    6660:	0f be       	out	0x3f, r0	; 63
    6662:	cd bf       	out	0x3d, r28	; 61
    6664:	cf 91       	pop	r28
    6666:	df 91       	pop	r29
    6668:	08 95       	ret

0000666a <_ZN11CCONTROLLER11CController7ServiceEv>:
    memset(modem->gprsraw,0,sizeof(modem->gprsraw));
    modem->gprsrx = false;
  }
 }
  /****************************************************************************************/
  void CController::Service(void) {
    666a:	df 93       	push	r29
    666c:	cf 93       	push	r28
    666e:	00 d0       	rcall	.+0      	; 0x6670 <_ZN11CCONTROLLER11CController7ServiceEv+0x6>
    6670:	cd b7       	in	r28, 0x3d	; 61
    6672:	de b7       	in	r29, 0x3e	; 62
    6674:	9a 83       	std	Y+2, r25	; 0x02
    6676:	89 83       	std	Y+1, r24	; 0x01
    signalsService();
    6678:	89 81       	ldd	r24, Y+1	; 0x01
    667a:	9a 81       	ldd	r25, Y+2	; 0x02
    667c:	0e 94 1b 24 	call	0x4836	; 0x4836 <_ZN11CCONTROLLER11CController14signalsServiceEv>
    consoleService();
    6680:	89 81       	ldd	r24, Y+1	; 0x01
    6682:	9a 81       	ldd	r25, Y+2	; 0x02
    6684:	0e 94 b5 2c 	call	0x596a	; 0x596a <_ZN11CCONTROLLER11CController14consoleServiceEv>
    modem->Service();
    6688:	e9 81       	ldd	r30, Y+1	; 0x01
    668a:	fa 81       	ldd	r31, Y+2	; 0x02
    668c:	82 81       	ldd	r24, Z+2	; 0x02
    668e:	93 81       	ldd	r25, Z+3	; 0x03
    6690:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <_ZN6CModem7ServiceEv>
    HandleRxData();
    6694:	89 81       	ldd	r24, Y+1	; 0x01
    6696:	9a 81       	ldd	r25, Y+2	; 0x02
    6698:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <_ZN11CCONTROLLER11CController12HandleRxDataEv>
  }
    669c:	0f 90       	pop	r0
    669e:	0f 90       	pop	r0
    66a0:	cf 91       	pop	r28
    66a2:	df 91       	pop	r29
    66a4:	08 95       	ret

000066a6 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer>:
#//define CULLINAN_PHONE2 "0836524564"

extern CUART DbgUart;
extern Crtc rtc;
/****************************************************************************************/
CController::CController(CRFID* _Rfid, CModem *_modem, CServer *_server) {
    66a6:	0f 93       	push	r16
    66a8:	1f 93       	push	r17
    66aa:	df 93       	push	r29
    66ac:	cf 93       	push	r28
    66ae:	cd b7       	in	r28, 0x3d	; 61
    66b0:	de b7       	in	r29, 0x3e	; 62
    66b2:	aa 97       	sbiw	r28, 0x2a	; 42
    66b4:	0f b6       	in	r0, 0x3f	; 63
    66b6:	f8 94       	cli
    66b8:	de bf       	out	0x3e, r29	; 62
    66ba:	0f be       	out	0x3f, r0	; 63
    66bc:	cd bf       	out	0x3d, r28	; 61
    66be:	9c a3       	std	Y+36, r25	; 0x24
    66c0:	8b a3       	std	Y+35, r24	; 0x23
    66c2:	7e a3       	std	Y+38, r23	; 0x26
    66c4:	6d a3       	std	Y+37, r22	; 0x25
    66c6:	58 a7       	std	Y+40, r21	; 0x28
    66c8:	4f a3       	std	Y+39, r20	; 0x27
    66ca:	3a a7       	std	Y+42, r19	; 0x2a
    66cc:	29 a7       	std	Y+41, r18	; 0x29
  c08 str[32];
  c08 *pstr;
  Rfid = _Rfid;
    66ce:	eb a1       	ldd	r30, Y+35	; 0x23
    66d0:	fc a1       	ldd	r31, Y+36	; 0x24
    66d2:	8d a1       	ldd	r24, Y+37	; 0x25
    66d4:	9e a1       	ldd	r25, Y+38	; 0x26
    66d6:	92 87       	std	Z+10, r25	; 0x0a
    66d8:	81 87       	std	Z+9, r24	; 0x09
  modem = _modem;
    66da:	eb a1       	ldd	r30, Y+35	; 0x23
    66dc:	fc a1       	ldd	r31, Y+36	; 0x24
    66de:	8f a1       	ldd	r24, Y+39	; 0x27
    66e0:	98 a5       	ldd	r25, Y+40	; 0x28
    66e2:	93 83       	std	Z+3, r25	; 0x03
    66e4:	82 83       	std	Z+2, r24	; 0x02
  server = _server;
    66e6:	eb a1       	ldd	r30, Y+35	; 0x23
    66e8:	fc a1       	ldd	r31, Y+36	; 0x24
    66ea:	89 a5       	ldd	r24, Y+41	; 0x29
    66ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    66ee:	95 83       	std	Z+5, r25	; 0x05
    66f0:	84 83       	std	Z+4, r24	; 0x04
  smsCnt = 0;
    66f2:	eb a1       	ldd	r30, Y+35	; 0x23
    66f4:	fc a1       	ldd	r31, Y+36	; 0x24
    66f6:	10 82       	st	Z, r1
  signal[TAGTABLE_SIGNAL].period = 10000000;
    66f8:	eb a1       	ldd	r30, Y+35	; 0x23
    66fa:	fc a1       	ldd	r31, Y+36	; 0x24
    66fc:	80 e8       	ldi	r24, 0x80	; 128
    66fe:	96 e9       	ldi	r25, 0x96	; 150
    6700:	a8 e9       	ldi	r26, 0x98	; 152
    6702:	b0 e0       	ldi	r27, 0x00	; 0
    6704:	83 87       	std	Z+11, r24	; 0x0b
    6706:	94 87       	std	Z+12, r25	; 0x0c
    6708:	a5 87       	std	Z+13, r26	; 0x0d
    670a:	b6 87       	std	Z+14, r27	; 0x0e
  signal[TAGTABLE_SIGNAL].timer = 0;
    670c:	eb a1       	ldd	r30, Y+35	; 0x23
    670e:	fc a1       	ldd	r31, Y+36	; 0x24
    6710:	17 86       	std	Z+15, r1	; 0x0f
    6712:	10 8a       	std	Z+16, r1	; 0x10
    6714:	11 8a       	std	Z+17, r1	; 0x11
    6716:	12 8a       	std	Z+18, r1	; 0x12
  signal[TAGTABLE_SIGNAL].state = SIG_RESET;
    6718:	eb a1       	ldd	r30, Y+35	; 0x23
    671a:	fc a1       	ldd	r31, Y+36	; 0x24
    671c:	83 e0       	ldi	r24, 0x03	; 3
    671e:	83 8b       	std	Z+19, r24	; 0x13
  signal[MODEM_SIGNAL].period = 2500000;
    6720:	eb a1       	ldd	r30, Y+35	; 0x23
    6722:	fc a1       	ldd	r31, Y+36	; 0x24
    6724:	80 ea       	ldi	r24, 0xA0	; 160
    6726:	95 e2       	ldi	r25, 0x25	; 37
    6728:	a6 e2       	ldi	r26, 0x26	; 38
    672a:	b0 e0       	ldi	r27, 0x00	; 0
    672c:	84 8b       	std	Z+20, r24	; 0x14
    672e:	95 8b       	std	Z+21, r25	; 0x15
    6730:	a6 8b       	std	Z+22, r26	; 0x16
    6732:	b7 8b       	std	Z+23, r27	; 0x17
  signal[MODEM_SIGNAL].timer = 0;
    6734:	eb a1       	ldd	r30, Y+35	; 0x23
    6736:	fc a1       	ldd	r31, Y+36	; 0x24
    6738:	10 8e       	std	Z+24, r1	; 0x18
    673a:	11 8e       	std	Z+25, r1	; 0x19
    673c:	12 8e       	std	Z+26, r1	; 0x1a
    673e:	13 8e       	std	Z+27, r1	; 0x1b
  signal[MODEM_SIGNAL].state = SIG_RESET;
    6740:	eb a1       	ldd	r30, Y+35	; 0x23
    6742:	fc a1       	ldd	r31, Y+36	; 0x24
    6744:	83 e0       	ldi	r24, 0x03	; 3
    6746:	84 8f       	std	Z+28, r24	; 0x1c
  nrValid = false;
    6748:	8b a1       	ldd	r24, Y+35	; 0x23
    674a:	9c a1       	ldd	r25, Y+36	; 0x24
    674c:	fc 01       	movw	r30, r24
    674e:	ef 5b       	subi	r30, 0xBF	; 191
    6750:	ff 4f       	sbci	r31, 0xFF	; 255
    6752:	10 82       	st	Z, r1
  ipValid = false;
    6754:	eb a1       	ldd	r30, Y+35	; 0x23
    6756:	fc a1       	ldd	r31, Y+36	; 0x24
    6758:	10 86       	std	Z+8, r1	; 0x08
  idValid = false;
    675a:	eb a1       	ldd	r30, Y+35	; 0x23
    675c:	fc a1       	ldd	r31, Y+36	; 0x24
    675e:	17 82       	std	Z+7, r1	; 0x07
  SiteID = eeprom_read_byte(&eeSiteID);
    6760:	88 e1       	ldi	r24, 0x18	; 24
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	0e 94 bd 5e 	call	0xbd7a	; 0xbd7a <__eerd_byte_m1280>
    6768:	eb a1       	ldd	r30, Y+35	; 0x23
    676a:	fc a1       	ldd	r31, Y+36	; 0x24
    676c:	86 83       	std	Z+6, r24	; 0x06
  if (SiteID > 0 && SiteID < 0xFF) {
    676e:	eb a1       	ldd	r30, Y+35	; 0x23
    6770:	fc a1       	ldd	r31, Y+36	; 0x24
    6772:	86 81       	ldd	r24, Z+6	; 0x06
    6774:	88 23       	and	r24, r24
    6776:	49 f0       	breq	.+18     	; 0x678a <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0xe4>
    6778:	eb a1       	ldd	r30, Y+35	; 0x23
    677a:	fc a1       	ldd	r31, Y+36	; 0x24
    677c:	86 81       	ldd	r24, Z+6	; 0x06
    677e:	8f 3f       	cpi	r24, 0xFF	; 255
    6780:	21 f0       	breq	.+8      	; 0x678a <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0xe4>
    idValid = true;
    6782:	eb a1       	ldd	r30, Y+35	; 0x23
    6784:	fc a1       	ldd	r31, Y+36	; 0x24
    6786:	81 e0       	ldi	r24, 0x01	; 1
    6788:	87 83       	std	Z+7, r24	; 0x07
  }
  server->SetSiteNr(SiteID);
    678a:	eb a1       	ldd	r30, Y+35	; 0x23
    678c:	fc a1       	ldd	r31, Y+36	; 0x24
    678e:	84 81       	ldd	r24, Z+4	; 0x04
    6790:	95 81       	ldd	r25, Z+5	; 0x05
    6792:	eb a1       	ldd	r30, Y+35	; 0x23
    6794:	fc a1       	ldd	r31, Y+36	; 0x24
    6796:	26 81       	ldd	r18, Z+6	; 0x06
    6798:	62 2f       	mov	r22, r18
    679a:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN7CServer9SetSiteNrEh>

  eeprom_read_block(PhoneNumbers, eePhoneNumbers, sizeof(eePhoneNumbers));
    679e:	8b a1       	ldd	r24, Y+35	; 0x23
    67a0:	9c a1       	ldd	r25, Y+36	; 0x24
    67a2:	4d 96       	adiw	r24, 0x1d	; 29
    67a4:	20 e0       	ldi	r18, 0x00	; 0
    67a6:	30 e0       	ldi	r19, 0x00	; 0
    67a8:	b9 01       	movw	r22, r18
    67aa:	48 e1       	ldi	r20, 0x18	; 24
    67ac:	50 e0       	ldi	r21, 0x00	; 0
    67ae:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <__eerd_block_m1280>
  if (strcmp(PhoneNumbers[1], "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0") == 0
    67b2:	8b a1       	ldd	r24, Y+35	; 0x23
    67b4:	9c a1       	ldd	r25, Y+36	; 0x24
    67b6:	89 96       	adiw	r24, 0x29	; 41
    67b8:	fc 01       	movw	r30, r24
    67ba:	80 81       	ld	r24, Z
    67bc:	88 23       	and	r24, r24
    67be:	51 f0       	breq	.+20     	; 0x67d4 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x12e>
    67c0:	8b a1       	ldd	r24, Y+35	; 0x23
    67c2:	9c a1       	ldd	r25, Y+36	; 0x24
    67c4:	89 96       	adiw	r24, 0x29	; 41
    67c6:	2b ec       	ldi	r18, 0xCB	; 203
    67c8:	34 e0       	ldi	r19, 0x04	; 4
    67ca:	b9 01       	movw	r22, r18
    67cc:	0e 94 b9 5b 	call	0xb772	; 0xb772 <strcmp>
    67d0:	00 97       	sbiw	r24, 0x00	; 0
    67d2:	39 f4       	brne	.+14     	; 0x67e2 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x13c>
      || strcmp(PhoneNumbers[1], "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF") == 0) {
    nrValid = false;
    67d4:	8b a1       	ldd	r24, Y+35	; 0x23
    67d6:	9c a1       	ldd	r25, Y+36	; 0x24
    67d8:	fc 01       	movw	r30, r24
    67da:	ef 5b       	subi	r30, 0xBF	; 191
    67dc:	ff 4f       	sbci	r31, 0xFF	; 255
    67de:	10 82       	st	Z, r1
    67e0:	07 c0       	rjmp	.+14     	; 0x67f0 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x14a>
  } else {
    nrValid = true;
    67e2:	8b a1       	ldd	r24, Y+35	; 0x23
    67e4:	9c a1       	ldd	r25, Y+36	; 0x24
    67e6:	fc 01       	movw	r30, r24
    67e8:	ef 5b       	subi	r30, 0xBF	; 191
    67ea:	ff 4f       	sbci	r31, 0xFF	; 255
    67ec:	81 e0       	ldi	r24, 0x01	; 1
    67ee:	80 83       	st	Z, r24
  }
  memset(str, 0, 32);
    67f0:	ce 01       	movw	r24, r28
    67f2:	03 96       	adiw	r24, 0x03	; 3
    67f4:	60 e0       	ldi	r22, 0x00	; 0
    67f6:	70 e0       	ldi	r23, 0x00	; 0
    67f8:	40 e2       	ldi	r20, 0x20	; 32
    67fa:	50 e0       	ldi	r21, 0x00	; 0
    67fc:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
  eeprom_read_block(str, eeIP, sizeof(eeIP));
    6800:	ce 01       	movw	r24, r28
    6802:	03 96       	adiw	r24, 0x03	; 3
    6804:	29 e1       	ldi	r18, 0x19	; 25
    6806:	30 e0       	ldi	r19, 0x00	; 0
    6808:	b9 01       	movw	r22, r18
    680a:	40 e2       	ldi	r20, 0x20	; 32
    680c:	50 e0       	ldi	r21, 0x00	; 0
    680e:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <__eerd_block_m1280>
  str[31] = 0;
    6812:	1a a2       	std	Y+34, r1	; 0x22
  pstr = strtok(str, ":");
    6814:	ce 01       	movw	r24, r28
    6816:	03 96       	adiw	r24, 0x03	; 3
    6818:	2a e4       	ldi	r18, 0x4A	; 74
    681a:	34 e0       	ldi	r19, 0x04	; 4
    681c:	b9 01       	movw	r22, r18
    681e:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    6822:	9a 83       	std	Y+2, r25	; 0x02
    6824:	89 83       	std	Y+1, r24	; 0x01
  if (pstr) {
    6826:	89 81       	ldd	r24, Y+1	; 0x01
    6828:	9a 81       	ldd	r25, Y+2	; 0x02
    682a:	00 97       	sbiw	r24, 0x00	; 0
    682c:	29 f0       	breq	.+10     	; 0x6838 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x192>
    ipValid = true;
    682e:	eb a1       	ldd	r30, Y+35	; 0x23
    6830:	fc a1       	ldd	r31, Y+36	; 0x24
    6832:	81 e0       	ldi	r24, 0x01	; 1
    6834:	80 87       	std	Z+8, r24	; 0x08
    6836:	03 c0       	rjmp	.+6      	; 0x683e <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x198>
  } else {
    ipValid = false;
    6838:	eb a1       	ldd	r30, Y+35	; 0x23
    683a:	fc a1       	ldd	r31, Y+36	; 0x24
    683c:	10 86       	std	Z+8, r1	; 0x08
  }
  strcpy(modem->serverIP, pstr);
    683e:	eb a1       	ldd	r30, Y+35	; 0x23
    6840:	fc a1       	ldd	r31, Y+36	; 0x24
    6842:	82 81       	ldd	r24, Z+2	; 0x02
    6844:	93 81       	ldd	r25, Z+3	; 0x03
    6846:	81 5d       	subi	r24, 0xD1	; 209
    6848:	9d 4f       	sbci	r25, 0xFD	; 253
    684a:	29 81       	ldd	r18, Y+1	; 0x01
    684c:	3a 81       	ldd	r19, Y+2	; 0x02
    684e:	b9 01       	movw	r22, r18
    6850:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
  pstr = strtok(NULL, ":");
    6854:	2a e4       	ldi	r18, 0x4A	; 74
    6856:	34 e0       	ldi	r19, 0x04	; 4
    6858:	80 e0       	ldi	r24, 0x00	; 0
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	b9 01       	movw	r22, r18
    685e:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    6862:	9a 83       	std	Y+2, r25	; 0x02
    6864:	89 83       	std	Y+1, r24	; 0x01
  if (pstr) {
    6866:	89 81       	ldd	r24, Y+1	; 0x01
    6868:	9a 81       	ldd	r25, Y+2	; 0x02
    686a:	00 97       	sbiw	r24, 0x00	; 0
    686c:	59 f0       	breq	.+22     	; 0x6884 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x1de>
    strcpy(modem->port, pstr);
    686e:	eb a1       	ldd	r30, Y+35	; 0x23
    6870:	fc a1       	ldd	r31, Y+36	; 0x24
    6872:	82 81       	ldd	r24, Z+2	; 0x02
    6874:	93 81       	ldd	r25, Z+3	; 0x03
    6876:	80 5b       	subi	r24, 0xB0	; 176
    6878:	9d 4f       	sbci	r25, 0xFD	; 253
    687a:	29 81       	ldd	r18, Y+1	; 0x01
    687c:	3a 81       	ldd	r19, Y+2	; 0x02
    687e:	b9 01       	movw	r22, r18
    6880:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
  }
  pstr = strtok(NULL, ":");
    6884:	2a e4       	ldi	r18, 0x4A	; 74
    6886:	34 e0       	ldi	r19, 0x04	; 4
    6888:	80 e0       	ldi	r24, 0x00	; 0
    688a:	90 e0       	ldi	r25, 0x00	; 0
    688c:	b9 01       	movw	r22, r18
    688e:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    6892:	9a 83       	std	Y+2, r25	; 0x02
    6894:	89 83       	std	Y+1, r24	; 0x01
  if (*pstr == '1') {
    6896:	e9 81       	ldd	r30, Y+1	; 0x01
    6898:	fa 81       	ldd	r31, Y+2	; 0x02
    689a:	80 81       	ld	r24, Z
    689c:	81 33       	cpi	r24, 0x31	; 49
    689e:	51 f4       	brne	.+20     	; 0x68b4 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x20e>
    modem->usedns = true;
    68a0:	eb a1       	ldd	r30, Y+35	; 0x23
    68a2:	fc a1       	ldd	r31, Y+36	; 0x24
    68a4:	82 81       	ldd	r24, Z+2	; 0x02
    68a6:	93 81       	ldd	r25, Z+3	; 0x03
    68a8:	fc 01       	movw	r30, r24
    68aa:	e1 5b       	subi	r30, 0xB1	; 177
    68ac:	fd 4f       	sbci	r31, 0xFD	; 253
    68ae:	81 e0       	ldi	r24, 0x01	; 1
    68b0:	80 83       	st	Z, r24
    68b2:	08 c0       	rjmp	.+16     	; 0x68c4 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer+0x21e>
  } else {
    modem->usedns = false;
    68b4:	eb a1       	ldd	r30, Y+35	; 0x23
    68b6:	fc a1       	ldd	r31, Y+36	; 0x24
    68b8:	82 81       	ldd	r24, Z+2	; 0x02
    68ba:	93 81       	ldd	r25, Z+3	; 0x03
    68bc:	fc 01       	movw	r30, r24
    68be:	e1 5b       	subi	r30, 0xB1	; 177
    68c0:	fd 4f       	sbci	r31, 0xFD	; 253
    68c2:	10 82       	st	Z, r1
  }
  modem->smstx_en = eeprom_read_byte(&EEsmsEnable);
    68c4:	eb a1       	ldd	r30, Y+35	; 0x23
    68c6:	fc a1       	ldd	r31, Y+36	; 0x24
    68c8:	02 81       	ldd	r16, Z+2	; 0x02
    68ca:	13 81       	ldd	r17, Z+3	; 0x03
    68cc:	89 e3       	ldi	r24, 0x39	; 57
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	0e 94 bd 5e 	call	0xbd7a	; 0xbd7a <__eerd_byte_m1280>
    68d4:	f8 01       	movw	r30, r16
    68d6:	ed 5c       	subi	r30, 0xCD	; 205
    68d8:	fc 4f       	sbci	r31, 0xFC	; 252
    68da:	80 83       	st	Z, r24

}
    68dc:	aa 96       	adiw	r28, 0x2a	; 42
    68de:	0f b6       	in	r0, 0x3f	; 63
    68e0:	f8 94       	cli
    68e2:	de bf       	out	0x3e, r29	; 62
    68e4:	0f be       	out	0x3f, r0	; 63
    68e6:	cd bf       	out	0x3d, r28	; 61
    68e8:	cf 91       	pop	r28
    68ea:	df 91       	pop	r29
    68ec:	1f 91       	pop	r17
    68ee:	0f 91       	pop	r16
    68f0:	08 95       	ret

000068f2 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer>:
#//define CULLINAN_PHONE2 "0836524564"

extern CUART DbgUart;
extern Crtc rtc;
/****************************************************************************************/
CController::CController(CRFID* _Rfid, CModem *_modem, CServer *_server) {
    68f2:	0f 93       	push	r16
    68f4:	1f 93       	push	r17
    68f6:	df 93       	push	r29
    68f8:	cf 93       	push	r28
    68fa:	cd b7       	in	r28, 0x3d	; 61
    68fc:	de b7       	in	r29, 0x3e	; 62
    68fe:	aa 97       	sbiw	r28, 0x2a	; 42
    6900:	0f b6       	in	r0, 0x3f	; 63
    6902:	f8 94       	cli
    6904:	de bf       	out	0x3e, r29	; 62
    6906:	0f be       	out	0x3f, r0	; 63
    6908:	cd bf       	out	0x3d, r28	; 61
    690a:	9c a3       	std	Y+36, r25	; 0x24
    690c:	8b a3       	std	Y+35, r24	; 0x23
    690e:	7e a3       	std	Y+38, r23	; 0x26
    6910:	6d a3       	std	Y+37, r22	; 0x25
    6912:	58 a7       	std	Y+40, r21	; 0x28
    6914:	4f a3       	std	Y+39, r20	; 0x27
    6916:	3a a7       	std	Y+42, r19	; 0x2a
    6918:	29 a7       	std	Y+41, r18	; 0x29
  c08 str[32];
  c08 *pstr;
  Rfid = _Rfid;
    691a:	eb a1       	ldd	r30, Y+35	; 0x23
    691c:	fc a1       	ldd	r31, Y+36	; 0x24
    691e:	8d a1       	ldd	r24, Y+37	; 0x25
    6920:	9e a1       	ldd	r25, Y+38	; 0x26
    6922:	92 87       	std	Z+10, r25	; 0x0a
    6924:	81 87       	std	Z+9, r24	; 0x09
  modem = _modem;
    6926:	eb a1       	ldd	r30, Y+35	; 0x23
    6928:	fc a1       	ldd	r31, Y+36	; 0x24
    692a:	8f a1       	ldd	r24, Y+39	; 0x27
    692c:	98 a5       	ldd	r25, Y+40	; 0x28
    692e:	93 83       	std	Z+3, r25	; 0x03
    6930:	82 83       	std	Z+2, r24	; 0x02
  server = _server;
    6932:	eb a1       	ldd	r30, Y+35	; 0x23
    6934:	fc a1       	ldd	r31, Y+36	; 0x24
    6936:	89 a5       	ldd	r24, Y+41	; 0x29
    6938:	9a a5       	ldd	r25, Y+42	; 0x2a
    693a:	95 83       	std	Z+5, r25	; 0x05
    693c:	84 83       	std	Z+4, r24	; 0x04
  smsCnt = 0;
    693e:	eb a1       	ldd	r30, Y+35	; 0x23
    6940:	fc a1       	ldd	r31, Y+36	; 0x24
    6942:	10 82       	st	Z, r1
  signal[TAGTABLE_SIGNAL].period = 10000000;
    6944:	eb a1       	ldd	r30, Y+35	; 0x23
    6946:	fc a1       	ldd	r31, Y+36	; 0x24
    6948:	80 e8       	ldi	r24, 0x80	; 128
    694a:	96 e9       	ldi	r25, 0x96	; 150
    694c:	a8 e9       	ldi	r26, 0x98	; 152
    694e:	b0 e0       	ldi	r27, 0x00	; 0
    6950:	83 87       	std	Z+11, r24	; 0x0b
    6952:	94 87       	std	Z+12, r25	; 0x0c
    6954:	a5 87       	std	Z+13, r26	; 0x0d
    6956:	b6 87       	std	Z+14, r27	; 0x0e
  signal[TAGTABLE_SIGNAL].timer = 0;
    6958:	eb a1       	ldd	r30, Y+35	; 0x23
    695a:	fc a1       	ldd	r31, Y+36	; 0x24
    695c:	17 86       	std	Z+15, r1	; 0x0f
    695e:	10 8a       	std	Z+16, r1	; 0x10
    6960:	11 8a       	std	Z+17, r1	; 0x11
    6962:	12 8a       	std	Z+18, r1	; 0x12
  signal[TAGTABLE_SIGNAL].state = SIG_RESET;
    6964:	eb a1       	ldd	r30, Y+35	; 0x23
    6966:	fc a1       	ldd	r31, Y+36	; 0x24
    6968:	83 e0       	ldi	r24, 0x03	; 3
    696a:	83 8b       	std	Z+19, r24	; 0x13
  signal[MODEM_SIGNAL].period = 2500000;
    696c:	eb a1       	ldd	r30, Y+35	; 0x23
    696e:	fc a1       	ldd	r31, Y+36	; 0x24
    6970:	80 ea       	ldi	r24, 0xA0	; 160
    6972:	95 e2       	ldi	r25, 0x25	; 37
    6974:	a6 e2       	ldi	r26, 0x26	; 38
    6976:	b0 e0       	ldi	r27, 0x00	; 0
    6978:	84 8b       	std	Z+20, r24	; 0x14
    697a:	95 8b       	std	Z+21, r25	; 0x15
    697c:	a6 8b       	std	Z+22, r26	; 0x16
    697e:	b7 8b       	std	Z+23, r27	; 0x17
  signal[MODEM_SIGNAL].timer = 0;
    6980:	eb a1       	ldd	r30, Y+35	; 0x23
    6982:	fc a1       	ldd	r31, Y+36	; 0x24
    6984:	10 8e       	std	Z+24, r1	; 0x18
    6986:	11 8e       	std	Z+25, r1	; 0x19
    6988:	12 8e       	std	Z+26, r1	; 0x1a
    698a:	13 8e       	std	Z+27, r1	; 0x1b
  signal[MODEM_SIGNAL].state = SIG_RESET;
    698c:	eb a1       	ldd	r30, Y+35	; 0x23
    698e:	fc a1       	ldd	r31, Y+36	; 0x24
    6990:	83 e0       	ldi	r24, 0x03	; 3
    6992:	84 8f       	std	Z+28, r24	; 0x1c
  nrValid = false;
    6994:	8b a1       	ldd	r24, Y+35	; 0x23
    6996:	9c a1       	ldd	r25, Y+36	; 0x24
    6998:	fc 01       	movw	r30, r24
    699a:	ef 5b       	subi	r30, 0xBF	; 191
    699c:	ff 4f       	sbci	r31, 0xFF	; 255
    699e:	10 82       	st	Z, r1
  ipValid = false;
    69a0:	eb a1       	ldd	r30, Y+35	; 0x23
    69a2:	fc a1       	ldd	r31, Y+36	; 0x24
    69a4:	10 86       	std	Z+8, r1	; 0x08
  idValid = false;
    69a6:	eb a1       	ldd	r30, Y+35	; 0x23
    69a8:	fc a1       	ldd	r31, Y+36	; 0x24
    69aa:	17 82       	std	Z+7, r1	; 0x07
  SiteID = eeprom_read_byte(&eeSiteID);
    69ac:	88 e1       	ldi	r24, 0x18	; 24
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	0e 94 bd 5e 	call	0xbd7a	; 0xbd7a <__eerd_byte_m1280>
    69b4:	eb a1       	ldd	r30, Y+35	; 0x23
    69b6:	fc a1       	ldd	r31, Y+36	; 0x24
    69b8:	86 83       	std	Z+6, r24	; 0x06
  if (SiteID > 0 && SiteID < 0xFF) {
    69ba:	eb a1       	ldd	r30, Y+35	; 0x23
    69bc:	fc a1       	ldd	r31, Y+36	; 0x24
    69be:	86 81       	ldd	r24, Z+6	; 0x06
    69c0:	88 23       	and	r24, r24
    69c2:	49 f0       	breq	.+18     	; 0x69d6 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0xe4>
    69c4:	eb a1       	ldd	r30, Y+35	; 0x23
    69c6:	fc a1       	ldd	r31, Y+36	; 0x24
    69c8:	86 81       	ldd	r24, Z+6	; 0x06
    69ca:	8f 3f       	cpi	r24, 0xFF	; 255
    69cc:	21 f0       	breq	.+8      	; 0x69d6 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0xe4>
    idValid = true;
    69ce:	eb a1       	ldd	r30, Y+35	; 0x23
    69d0:	fc a1       	ldd	r31, Y+36	; 0x24
    69d2:	81 e0       	ldi	r24, 0x01	; 1
    69d4:	87 83       	std	Z+7, r24	; 0x07
  }
  server->SetSiteNr(SiteID);
    69d6:	eb a1       	ldd	r30, Y+35	; 0x23
    69d8:	fc a1       	ldd	r31, Y+36	; 0x24
    69da:	84 81       	ldd	r24, Z+4	; 0x04
    69dc:	95 81       	ldd	r25, Z+5	; 0x05
    69de:	eb a1       	ldd	r30, Y+35	; 0x23
    69e0:	fc a1       	ldd	r31, Y+36	; 0x24
    69e2:	26 81       	ldd	r18, Z+6	; 0x06
    69e4:	62 2f       	mov	r22, r18
    69e6:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN7CServer9SetSiteNrEh>

  eeprom_read_block(PhoneNumbers, eePhoneNumbers, sizeof(eePhoneNumbers));
    69ea:	8b a1       	ldd	r24, Y+35	; 0x23
    69ec:	9c a1       	ldd	r25, Y+36	; 0x24
    69ee:	4d 96       	adiw	r24, 0x1d	; 29
    69f0:	20 e0       	ldi	r18, 0x00	; 0
    69f2:	30 e0       	ldi	r19, 0x00	; 0
    69f4:	b9 01       	movw	r22, r18
    69f6:	48 e1       	ldi	r20, 0x18	; 24
    69f8:	50 e0       	ldi	r21, 0x00	; 0
    69fa:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <__eerd_block_m1280>
  if (strcmp(PhoneNumbers[1], "\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0") == 0
    69fe:	8b a1       	ldd	r24, Y+35	; 0x23
    6a00:	9c a1       	ldd	r25, Y+36	; 0x24
    6a02:	89 96       	adiw	r24, 0x29	; 41
    6a04:	fc 01       	movw	r30, r24
    6a06:	80 81       	ld	r24, Z
    6a08:	88 23       	and	r24, r24
    6a0a:	51 f0       	breq	.+20     	; 0x6a20 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x12e>
    6a0c:	8b a1       	ldd	r24, Y+35	; 0x23
    6a0e:	9c a1       	ldd	r25, Y+36	; 0x24
    6a10:	89 96       	adiw	r24, 0x29	; 41
    6a12:	2b ec       	ldi	r18, 0xCB	; 203
    6a14:	34 e0       	ldi	r19, 0x04	; 4
    6a16:	b9 01       	movw	r22, r18
    6a18:	0e 94 b9 5b 	call	0xb772	; 0xb772 <strcmp>
    6a1c:	00 97       	sbiw	r24, 0x00	; 0
    6a1e:	39 f4       	brne	.+14     	; 0x6a2e <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x13c>
      || strcmp(PhoneNumbers[1], "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF") == 0) {
    nrValid = false;
    6a20:	8b a1       	ldd	r24, Y+35	; 0x23
    6a22:	9c a1       	ldd	r25, Y+36	; 0x24
    6a24:	fc 01       	movw	r30, r24
    6a26:	ef 5b       	subi	r30, 0xBF	; 191
    6a28:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2a:	10 82       	st	Z, r1
    6a2c:	07 c0       	rjmp	.+14     	; 0x6a3c <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x14a>
  } else {
    nrValid = true;
    6a2e:	8b a1       	ldd	r24, Y+35	; 0x23
    6a30:	9c a1       	ldd	r25, Y+36	; 0x24
    6a32:	fc 01       	movw	r30, r24
    6a34:	ef 5b       	subi	r30, 0xBF	; 191
    6a36:	ff 4f       	sbci	r31, 0xFF	; 255
    6a38:	81 e0       	ldi	r24, 0x01	; 1
    6a3a:	80 83       	st	Z, r24
  }
  memset(str, 0, 32);
    6a3c:	ce 01       	movw	r24, r28
    6a3e:	03 96       	adiw	r24, 0x03	; 3
    6a40:	60 e0       	ldi	r22, 0x00	; 0
    6a42:	70 e0       	ldi	r23, 0x00	; 0
    6a44:	40 e2       	ldi	r20, 0x20	; 32
    6a46:	50 e0       	ldi	r21, 0x00	; 0
    6a48:	0e 94 9c 5b 	call	0xb738	; 0xb738 <memset>
  eeprom_read_block(str, eeIP, sizeof(eeIP));
    6a4c:	ce 01       	movw	r24, r28
    6a4e:	03 96       	adiw	r24, 0x03	; 3
    6a50:	29 e1       	ldi	r18, 0x19	; 25
    6a52:	30 e0       	ldi	r19, 0x00	; 0
    6a54:	b9 01       	movw	r22, r18
    6a56:	40 e2       	ldi	r20, 0x20	; 32
    6a58:	50 e0       	ldi	r21, 0x00	; 0
    6a5a:	0e 94 ad 5e 	call	0xbd5a	; 0xbd5a <__eerd_block_m1280>
  str[31] = 0;
    6a5e:	1a a2       	std	Y+34, r1	; 0x22
  pstr = strtok(str, ":");
    6a60:	ce 01       	movw	r24, r28
    6a62:	03 96       	adiw	r24, 0x03	; 3
    6a64:	2a e4       	ldi	r18, 0x4A	; 74
    6a66:	34 e0       	ldi	r19, 0x04	; 4
    6a68:	b9 01       	movw	r22, r18
    6a6a:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    6a6e:	9a 83       	std	Y+2, r25	; 0x02
    6a70:	89 83       	std	Y+1, r24	; 0x01
  if (pstr) {
    6a72:	89 81       	ldd	r24, Y+1	; 0x01
    6a74:	9a 81       	ldd	r25, Y+2	; 0x02
    6a76:	00 97       	sbiw	r24, 0x00	; 0
    6a78:	29 f0       	breq	.+10     	; 0x6a84 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x192>
    ipValid = true;
    6a7a:	eb a1       	ldd	r30, Y+35	; 0x23
    6a7c:	fc a1       	ldd	r31, Y+36	; 0x24
    6a7e:	81 e0       	ldi	r24, 0x01	; 1
    6a80:	80 87       	std	Z+8, r24	; 0x08
    6a82:	03 c0       	rjmp	.+6      	; 0x6a8a <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x198>
  } else {
    ipValid = false;
    6a84:	eb a1       	ldd	r30, Y+35	; 0x23
    6a86:	fc a1       	ldd	r31, Y+36	; 0x24
    6a88:	10 86       	std	Z+8, r1	; 0x08
  }
  strcpy(modem->serverIP, pstr);
    6a8a:	eb a1       	ldd	r30, Y+35	; 0x23
    6a8c:	fc a1       	ldd	r31, Y+36	; 0x24
    6a8e:	82 81       	ldd	r24, Z+2	; 0x02
    6a90:	93 81       	ldd	r25, Z+3	; 0x03
    6a92:	81 5d       	subi	r24, 0xD1	; 209
    6a94:	9d 4f       	sbci	r25, 0xFD	; 253
    6a96:	29 81       	ldd	r18, Y+1	; 0x01
    6a98:	3a 81       	ldd	r19, Y+2	; 0x02
    6a9a:	b9 01       	movw	r22, r18
    6a9c:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
  pstr = strtok(NULL, ":");
    6aa0:	2a e4       	ldi	r18, 0x4A	; 74
    6aa2:	34 e0       	ldi	r19, 0x04	; 4
    6aa4:	80 e0       	ldi	r24, 0x00	; 0
    6aa6:	90 e0       	ldi	r25, 0x00	; 0
    6aa8:	b9 01       	movw	r22, r18
    6aaa:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    6aae:	9a 83       	std	Y+2, r25	; 0x02
    6ab0:	89 83       	std	Y+1, r24	; 0x01
  if (pstr) {
    6ab2:	89 81       	ldd	r24, Y+1	; 0x01
    6ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ab6:	00 97       	sbiw	r24, 0x00	; 0
    6ab8:	59 f0       	breq	.+22     	; 0x6ad0 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x1de>
    strcpy(modem->port, pstr);
    6aba:	eb a1       	ldd	r30, Y+35	; 0x23
    6abc:	fc a1       	ldd	r31, Y+36	; 0x24
    6abe:	82 81       	ldd	r24, Z+2	; 0x02
    6ac0:	93 81       	ldd	r25, Z+3	; 0x03
    6ac2:	80 5b       	subi	r24, 0xB0	; 176
    6ac4:	9d 4f       	sbci	r25, 0xFD	; 253
    6ac6:	29 81       	ldd	r18, Y+1	; 0x01
    6ac8:	3a 81       	ldd	r19, Y+2	; 0x02
    6aca:	b9 01       	movw	r22, r18
    6acc:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
  }
  pstr = strtok(NULL, ":");
    6ad0:	2a e4       	ldi	r18, 0x4A	; 74
    6ad2:	34 e0       	ldi	r19, 0x04	; 4
    6ad4:	80 e0       	ldi	r24, 0x00	; 0
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	b9 01       	movw	r22, r18
    6ada:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    6ade:	9a 83       	std	Y+2, r25	; 0x02
    6ae0:	89 83       	std	Y+1, r24	; 0x01
  if (*pstr == '1') {
    6ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    6ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    6ae6:	80 81       	ld	r24, Z
    6ae8:	81 33       	cpi	r24, 0x31	; 49
    6aea:	51 f4       	brne	.+20     	; 0x6b00 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x20e>
    modem->usedns = true;
    6aec:	eb a1       	ldd	r30, Y+35	; 0x23
    6aee:	fc a1       	ldd	r31, Y+36	; 0x24
    6af0:	82 81       	ldd	r24, Z+2	; 0x02
    6af2:	93 81       	ldd	r25, Z+3	; 0x03
    6af4:	fc 01       	movw	r30, r24
    6af6:	e1 5b       	subi	r30, 0xB1	; 177
    6af8:	fd 4f       	sbci	r31, 0xFD	; 253
    6afa:	81 e0       	ldi	r24, 0x01	; 1
    6afc:	80 83       	st	Z, r24
    6afe:	08 c0       	rjmp	.+16     	; 0x6b10 <_ZN11CCONTROLLER11CControllerC2EP5CRFIDP6CModemP7CServer+0x21e>
  } else {
    modem->usedns = false;
    6b00:	eb a1       	ldd	r30, Y+35	; 0x23
    6b02:	fc a1       	ldd	r31, Y+36	; 0x24
    6b04:	82 81       	ldd	r24, Z+2	; 0x02
    6b06:	93 81       	ldd	r25, Z+3	; 0x03
    6b08:	fc 01       	movw	r30, r24
    6b0a:	e1 5b       	subi	r30, 0xB1	; 177
    6b0c:	fd 4f       	sbci	r31, 0xFD	; 253
    6b0e:	10 82       	st	Z, r1
  }
  modem->smstx_en = eeprom_read_byte(&EEsmsEnable);
    6b10:	eb a1       	ldd	r30, Y+35	; 0x23
    6b12:	fc a1       	ldd	r31, Y+36	; 0x24
    6b14:	02 81       	ldd	r16, Z+2	; 0x02
    6b16:	13 81       	ldd	r17, Z+3	; 0x03
    6b18:	89 e3       	ldi	r24, 0x39	; 57
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	0e 94 bd 5e 	call	0xbd7a	; 0xbd7a <__eerd_byte_m1280>
    6b20:	f8 01       	movw	r30, r16
    6b22:	ed 5c       	subi	r30, 0xCD	; 205
    6b24:	fc 4f       	sbci	r31, 0xFC	; 252
    6b26:	80 83       	st	Z, r24

}
    6b28:	aa 96       	adiw	r28, 0x2a	; 42
    6b2a:	0f b6       	in	r0, 0x3f	; 63
    6b2c:	f8 94       	cli
    6b2e:	de bf       	out	0x3e, r29	; 62
    6b30:	0f be       	out	0x3f, r0	; 63
    6b32:	cd bf       	out	0x3d, r28	; 61
    6b34:	cf 91       	pop	r28
    6b36:	df 91       	pop	r29
    6b38:	1f 91       	pop	r17
    6b3a:	0f 91       	pop	r16
    6b3c:	08 95       	ret

00006b3e <_ZN11CCONTROLLER11CController5SetupEv>:
  DbgUart.sendStr_P((PSTR("\n\rv\t: Get Modem Time")));

}
/****************************************************************************************/

void CController::Setup(void) {
    6b3e:	cf 92       	push	r12
    6b40:	ef 92       	push	r14
    6b42:	0f 93       	push	r16
    6b44:	df 93       	push	r29
    6b46:	cf 93       	push	r28
    6b48:	cd b7       	in	r28, 0x3d	; 61
    6b4a:	de b7       	in	r29, 0x3e	; 62
    6b4c:	cb 54       	subi	r28, 0x4B	; 75
    6b4e:	d0 40       	sbci	r29, 0x00	; 0
    6b50:	0f b6       	in	r0, 0x3f	; 63
    6b52:	f8 94       	cli
    6b54:	de bf       	out	0x3e, r29	; 62
    6b56:	0f be       	out	0x3f, r0	; 63
    6b58:	cd bf       	out	0x3d, r28	; 61
    6b5a:	fe 01       	movw	r30, r28
    6b5c:	ee 5b       	subi	r30, 0xBE	; 190
    6b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b60:	91 83       	std	Z+1, r25	; 0x01
    6b62:	80 83       	st	Z, r24
  u08 cmd;
  c08 *pstr;
  c08 str[32];
  u08 i, j;
  u16 year = 0;
    6b64:	19 8e       	std	Y+25, r1	; 0x19
    6b66:	18 8e       	std	Y+24, r1	; 0x18
  u08 month = 0;
    6b68:	1f 8a       	std	Y+23, r1	; 0x17
  u08 day = 0;
    6b6a:	1e 8a       	std	Y+22, r1	; 0x16
  u08 wday = 0;
    6b6c:	1d 8a       	std	Y+21, r1	; 0x15
  u08 hour = 0;
    6b6e:	1c 8a       	std	Y+20, r1	; 0x14
  u08 min = 0;
    6b70:	1b 8a       	std	Y+19, r1	; 0x13
  u08 state;
  cmd = 0;
    6b72:	1e 8e       	std	Y+30, r1	; 0x1e

  DbgUart.sendStr_P(PSTR("\n\r === First Set Phone Number and Site ID === \n\r"));
    6b74:	28 e6       	ldi	r18, 0x68	; 104
    6b76:	37 e0       	ldi	r19, 0x07	; 7
    6b78:	89 ee       	ldi	r24, 0xE9	; 233
    6b7a:	94 e0       	ldi	r25, 0x04	; 4
    6b7c:	b9 01       	movw	r22, r18
    6b7e:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rg\t: Get SMS PhoneNumbers")));
    6b82:	2d e4       	ldi	r18, 0x4D	; 77
    6b84:	37 e0       	ldi	r19, 0x07	; 7
    6b86:	89 ee       	ldi	r24, 0xE9	; 233
    6b88:	94 e0       	ldi	r25, 0x04	; 4
    6b8a:	b9 01       	movw	r22, r18
    6b8c:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rn\t: Set SMS PhoneNumber")));
    6b90:	23 e3       	ldi	r18, 0x33	; 51
    6b92:	37 e0       	ldi	r19, 0x07	; 7
    6b94:	89 ee       	ldi	r24, 0xE9	; 233
    6b96:	94 e0       	ldi	r25, 0x04	; 4
    6b98:	b9 01       	movw	r22, r18
    6b9a:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rw\t: Get Site ID")));
    6b9e:	21 e2       	ldi	r18, 0x21	; 33
    6ba0:	37 e0       	ldi	r19, 0x07	; 7
    6ba2:	89 ee       	ldi	r24, 0xE9	; 233
    6ba4:	94 e0       	ldi	r25, 0x04	; 4
    6ba6:	b9 01       	movw	r22, r18
    6ba8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rW\t: Set Site ID")));
    6bac:	2f e0       	ldi	r18, 0x0F	; 15
    6bae:	37 e0       	ldi	r19, 0x07	; 7
    6bb0:	89 ee       	ldi	r24, 0xE9	; 233
    6bb2:	94 e0       	ldi	r25, 0x04	; 4
    6bb4:	b9 01       	movw	r22, r18
    6bb6:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\ra\t: Get Server IP Address")));
    6bba:	23 ef       	ldi	r18, 0xF3	; 243
    6bbc:	36 e0       	ldi	r19, 0x06	; 6
    6bbe:	89 ee       	ldi	r24, 0xE9	; 233
    6bc0:	94 e0       	ldi	r25, 0x04	; 4
    6bc2:	b9 01       	movw	r22, r18
    6bc4:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rA\t: Set Server IP Address")));
    6bc8:	27 ed       	ldi	r18, 0xD7	; 215
    6bca:	36 e0       	ldi	r19, 0x06	; 6
    6bcc:	89 ee       	ldi	r24, 0xE9	; 233
    6bce:	94 e0       	ldi	r25, 0x04	; 4
    6bd0:	b9 01       	movw	r22, r18
    6bd2:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rt\t: Get Time")));
    6bd6:	28 ec       	ldi	r18, 0xC8	; 200
    6bd8:	36 e0       	ldi	r19, 0x06	; 6
    6bda:	89 ee       	ldi	r24, 0xE9	; 233
    6bdc:	94 e0       	ldi	r25, 0x04	; 4
    6bde:	b9 01       	movw	r22, r18
    6be0:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P((PSTR("\n\rT\t: Set Time & Date")));
    6be4:	22 eb       	ldi	r18, 0xB2	; 178
    6be6:	36 e0       	ldi	r19, 0x06	; 6
    6be8:	89 ee       	ldi	r24, 0xE9	; 233
    6bea:	94 e0       	ldi	r25, 0x04	; 4
    6bec:	b9 01       	movw	r22, r18
    6bee:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>

  cmd = 0;
    6bf2:	1e 8e       	std	Y+30, r1	; 0x1e
  i=0;
    6bf4:	1b 8e       	std	Y+27, r1	; 0x1b
  DbgUart.sendStr_P((PSTR("\n\r\t Press key to setup Device - x to exit")));
    6bf6:	28 e8       	ldi	r18, 0x88	; 136
    6bf8:	36 e0       	ldi	r19, 0x06	; 6
    6bfa:	89 ee       	ldi	r24, 0xE9	; 233
    6bfc:	94 e0       	ldi	r25, 0x04	; 4
    6bfe:	b9 01       	movw	r22, r18
    6c00:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  while(1){
    DbgUart.receive(&cmd, 1);
    6c04:	89 ee       	ldi	r24, 0xE9	; 233
    6c06:	94 e0       	ldi	r25, 0x04	; 4
    6c08:	9e 01       	movw	r18, r28
    6c0a:	22 5e       	subi	r18, 0xE2	; 226
    6c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c0e:	b9 01       	movw	r22, r18
    6c10:	41 e0       	ldi	r20, 0x01	; 1
    6c12:	50 e0       	ldi	r21, 0x00	; 0
    6c14:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    6c18:	80 e0       	ldi	r24, 0x00	; 0
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	aa e7       	ldi	r26, 0x7A	; 122
    6c1e:	b4 e4       	ldi	r27, 0x44	; 68
    6c20:	8b 87       	std	Y+11, r24	; 0x0b
    6c22:	9c 87       	std	Y+12, r25	; 0x0c
    6c24:	ad 87       	std	Y+13, r26	; 0x0d
    6c26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c28:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c30:	26 e6       	ldi	r18, 0x66	; 102
    6c32:	36 e6       	ldi	r19, 0x66	; 102
    6c34:	46 e6       	ldi	r20, 0x66	; 102
    6c36:	55 e4       	ldi	r21, 0x45	; 69
    6c38:	0e 94 21 56 	call	0xac42	; 0xac42 <__mulsf3>
    6c3c:	dc 01       	movw	r26, r24
    6c3e:	cb 01       	movw	r24, r22
    6c40:	8f 83       	std	Y+7, r24	; 0x07
    6c42:	98 87       	std	Y+8, r25	; 0x08
    6c44:	a9 87       	std	Y+9, r26	; 0x09
    6c46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c48:	6f 81       	ldd	r22, Y+7	; 0x07
    6c4a:	78 85       	ldd	r23, Y+8	; 0x08
    6c4c:	89 85       	ldd	r24, Y+9	; 0x09
    6c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c50:	20 e0       	ldi	r18, 0x00	; 0
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	40 e8       	ldi	r20, 0x80	; 128
    6c56:	5f e3       	ldi	r21, 0x3F	; 63
    6c58:	0e 94 7b 57 	call	0xaef6	; 0xaef6 <__ltsf2>
    6c5c:	88 23       	and	r24, r24
    6c5e:	2c f4       	brge	.+10     	; 0x6c6a <_ZN11CCONTROLLER11CController5SetupEv+0x12c>
		__ticks = 1;
    6c60:	81 e0       	ldi	r24, 0x01	; 1
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	9e 83       	std	Y+6, r25	; 0x06
    6c66:	8d 83       	std	Y+5, r24	; 0x05
    6c68:	3f c0       	rjmp	.+126    	; 0x6ce8 <_ZN11CCONTROLLER11CController5SetupEv+0x1aa>
	else if (__tmp > 65535)
    6c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    6c6c:	78 85       	ldd	r23, Y+8	; 0x08
    6c6e:	89 85       	ldd	r24, Y+9	; 0x09
    6c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c72:	20 e0       	ldi	r18, 0x00	; 0
    6c74:	3f ef       	ldi	r19, 0xFF	; 255
    6c76:	4f e7       	ldi	r20, 0x7F	; 127
    6c78:	57 e4       	ldi	r21, 0x47	; 71
    6c7a:	0e 94 1b 57 	call	0xae36	; 0xae36 <__gtsf2>
    6c7e:	18 16       	cp	r1, r24
    6c80:	4c f5       	brge	.+82     	; 0x6cd4 <_ZN11CCONTROLLER11CController5SetupEv+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c82:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c84:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c86:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c88:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c8a:	20 e0       	ldi	r18, 0x00	; 0
    6c8c:	30 e0       	ldi	r19, 0x00	; 0
    6c8e:	40 e2       	ldi	r20, 0x20	; 32
    6c90:	51 e4       	ldi	r21, 0x41	; 65
    6c92:	0e 94 21 56 	call	0xac42	; 0xac42 <__mulsf3>
    6c96:	dc 01       	movw	r26, r24
    6c98:	cb 01       	movw	r24, r22
    6c9a:	bc 01       	movw	r22, r24
    6c9c:	cd 01       	movw	r24, r26
    6c9e:	0e 94 4b 54 	call	0xa896	; 0xa896 <__fixunssfsi>
    6ca2:	dc 01       	movw	r26, r24
    6ca4:	cb 01       	movw	r24, r22
    6ca6:	9e 83       	std	Y+6, r25	; 0x06
    6ca8:	8d 83       	std	Y+5, r24	; 0x05
    6caa:	0f c0       	rjmp	.+30     	; 0x6cca <_ZN11CCONTROLLER11CController5SetupEv+0x18c>
    6cac:	80 e7       	ldi	r24, 0x70	; 112
    6cae:	91 e0       	ldi	r25, 0x01	; 1
    6cb0:	9c 83       	std	Y+4, r25	; 0x04
    6cb2:	8b 83       	std	Y+3, r24	; 0x03
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    6cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    6cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    6cb8:	01 97       	sbiw	r24, 0x01	; 1
    6cba:	f1 f7       	brne	.-4      	; 0x6cb8 <_ZN11CCONTROLLER11CController5SetupEv+0x17a>
    6cbc:	9c 83       	std	Y+4, r25	; 0x04
    6cbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    6cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    6cc4:	01 97       	sbiw	r24, 0x01	; 1
    6cc6:	9e 83       	std	Y+6, r25	; 0x06
    6cc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6cca:	8d 81       	ldd	r24, Y+5	; 0x05
    6ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    6cce:	00 97       	sbiw	r24, 0x00	; 0
    6cd0:	69 f7       	brne	.-38     	; 0x6cac <_ZN11CCONTROLLER11CController5SetupEv+0x16e>
    6cd2:	14 c0       	rjmp	.+40     	; 0x6cfc <_ZN11CCONTROLLER11CController5SetupEv+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    6cd6:	78 85       	ldd	r23, Y+8	; 0x08
    6cd8:	89 85       	ldd	r24, Y+9	; 0x09
    6cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cdc:	0e 94 4b 54 	call	0xa896	; 0xa896 <__fixunssfsi>
    6ce0:	dc 01       	movw	r26, r24
    6ce2:	cb 01       	movw	r24, r22
    6ce4:	9e 83       	std	Y+6, r25	; 0x06
    6ce6:	8d 83       	std	Y+5, r24	; 0x05
    6ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    6cea:	9e 81       	ldd	r25, Y+6	; 0x06
    6cec:	9a 83       	std	Y+2, r25	; 0x02
    6cee:	89 83       	std	Y+1, r24	; 0x01
    6cf0:	89 81       	ldd	r24, Y+1	; 0x01
    6cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    6cf4:	01 97       	sbiw	r24, 0x01	; 1
    6cf6:	f1 f7       	brne	.-4      	; 0x6cf4 <_ZN11CCONTROLLER11CController5SetupEv+0x1b6>
    6cf8:	9a 83       	std	Y+2, r25	; 0x02
    6cfa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    i++;
    6cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cfe:	8f 5f       	subi	r24, 0xFF	; 255
    6d00:	8b 8f       	std	Y+27, r24	; 0x1b
    if(i>5 || cmd != 0){
    6d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d04:	86 30       	cpi	r24, 0x06	; 6
    6d06:	20 f4       	brcc	.+8      	; 0x6d10 <_ZN11CCONTROLLER11CController5SetupEv+0x1d2>
    6d08:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d0a:	88 23       	and	r24, r24
    6d0c:	09 f4       	brne	.+2      	; 0x6d10 <_ZN11CCONTROLLER11CController5SetupEv+0x1d2>
    6d0e:	7a cf       	rjmp	.-268    	; 0x6c04 <_ZN11CCONTROLLER11CController5SetupEv+0xc6>
      if(cmd=='x'){cmd=0;}
    6d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d12:	88 37       	cpi	r24, 0x78	; 120
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <_ZN11CCONTROLLER11CController5SetupEv+0x1da>
    6d16:	1e 8e       	std	Y+30, r1	; 0x1e
      break;
    };
  }
  if (nrValid == true && idValid == true && ipValid == true && cmd == 0) {
    6d18:	fe 01       	movw	r30, r28
    6d1a:	ee 5b       	subi	r30, 0xBE	; 190
    6d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d1e:	80 81       	ld	r24, Z
    6d20:	91 81       	ldd	r25, Z+1	; 0x01
    6d22:	fc 01       	movw	r30, r24
    6d24:	ef 5b       	subi	r30, 0xBF	; 191
    6d26:	ff 4f       	sbci	r31, 0xFF	; 255
    6d28:	80 81       	ld	r24, Z
    6d2a:	81 30       	cpi	r24, 0x01	; 1
    6d2c:	b1 f4       	brne	.+44     	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
  DbgUart.sendStr_P((PSTR("\n\rT\t: Set Time & Date")));

  cmd = 0;
  i=0;
  DbgUart.sendStr_P((PSTR("\n\r\t Press key to setup Device - x to exit")));
  while(1){
    6d2e:	fe 01       	movw	r30, r28
    6d30:	ee 5b       	subi	r30, 0xBE	; 190
    6d32:	ff 4f       	sbci	r31, 0xFF	; 255
    6d34:	01 90       	ld	r0, Z+
    6d36:	f0 81       	ld	r31, Z
    6d38:	e0 2d       	mov	r30, r0
    6d3a:	87 81       	ldd	r24, Z+7	; 0x07
    if(i>5 || cmd != 0){
      if(cmd=='x'){cmd=0;}
      break;
    };
  }
  if (nrValid == true && idValid == true && ipValid == true && cmd == 0) {
    6d3c:	81 30       	cpi	r24, 0x01	; 1
    6d3e:	69 f4       	brne	.+26     	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
    6d40:	fe 01       	movw	r30, r28
    6d42:	ee 5b       	subi	r30, 0xBE	; 190
    6d44:	ff 4f       	sbci	r31, 0xFF	; 255
    6d46:	01 90       	ld	r0, Z+
    6d48:	f0 81       	ld	r31, Z
    6d4a:	e0 2d       	mov	r30, r0
    6d4c:	80 85       	ldd	r24, Z+8	; 0x08
    6d4e:	81 30       	cpi	r24, 0x01	; 1
    6d50:	21 f4       	brne	.+8      	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
    6d52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d54:	88 23       	and	r24, r24
    6d56:	09 f4       	brne	.+2      	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
    6d58:	88 c5       	rjmp	.+2832   	; 0x786a <_ZN11CCONTROLLER11CController5SetupEv+0xd2c>
    return;
  }

  while (1) {
    cmd = 0;
    6d5a:	1e 8e       	std	Y+30, r1	; 0x1e
    DbgUart.receive(&cmd, 1);
    6d5c:	89 ee       	ldi	r24, 0xE9	; 233
    6d5e:	94 e0       	ldi	r25, 0x04	; 4
    6d60:	9e 01       	movw	r18, r28
    6d62:	22 5e       	subi	r18, 0xE2	; 226
    6d64:	3f 4f       	sbci	r19, 0xFF	; 255
    6d66:	b9 01       	movw	r22, r18
    6d68:	41 e0       	ldi	r20, 0x01	; 1
    6d6a:	50 e0       	ldi	r21, 0x00	; 0
    6d6c:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    switch (cmd) {
    6d70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6d72:	28 2f       	mov	r18, r24
    6d74:	30 e0       	ldi	r19, 0x00	; 0
    6d76:	2c 96       	adiw	r28, 0x0c	; 12
    6d78:	3f af       	std	Y+63, r19	; 0x3f
    6d7a:	2e af       	std	Y+62, r18	; 0x3e
    6d7c:	2c 97       	sbiw	r28, 0x0c	; 12
    6d7e:	2c 96       	adiw	r28, 0x0c	; 12
    6d80:	8e ad       	ldd	r24, Y+62	; 0x3e
    6d82:	9f ad       	ldd	r25, Y+63	; 0x3f
    6d84:	2c 97       	sbiw	r28, 0x0c	; 12
    6d86:	81 36       	cpi	r24, 0x61	; 97
    6d88:	91 05       	cpc	r25, r1
    6d8a:	09 f4       	brne	.+2      	; 0x6d8e <_ZN11CCONTROLLER11CController5SetupEv+0x250>
    6d8c:	ed c1       	rjmp	.+986    	; 0x7168 <_ZN11CCONTROLLER11CController5SetupEv+0x62a>
    6d8e:	2c 96       	adiw	r28, 0x0c	; 12
    6d90:	2e ad       	ldd	r18, Y+62	; 0x3e
    6d92:	3f ad       	ldd	r19, Y+63	; 0x3f
    6d94:	2c 97       	sbiw	r28, 0x0c	; 12
    6d96:	22 36       	cpi	r18, 0x62	; 98
    6d98:	31 05       	cpc	r19, r1
    6d9a:	8c f5       	brge	.+98     	; 0x6dfe <_ZN11CCONTROLLER11CController5SetupEv+0x2c0>
    6d9c:	2c 96       	adiw	r28, 0x0c	; 12
    6d9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6da0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6da2:	2c 97       	sbiw	r28, 0x0c	; 12
    6da4:	8e 34       	cpi	r24, 0x4E	; 78
    6da6:	91 05       	cpc	r25, r1
    6da8:	09 f4       	brne	.+2      	; 0x6dac <_ZN11CCONTROLLER11CController5SetupEv+0x26e>
    6daa:	06 c4       	rjmp	.+2060   	; 0x75b8 <_ZN11CCONTROLLER11CController5SetupEv+0xa7a>
    6dac:	2c 96       	adiw	r28, 0x0c	; 12
    6dae:	2e ad       	ldd	r18, Y+62	; 0x3e
    6db0:	3f ad       	ldd	r19, Y+63	; 0x3f
    6db2:	2c 97       	sbiw	r28, 0x0c	; 12
    6db4:	2f 34       	cpi	r18, 0x4F	; 79
    6db6:	31 05       	cpc	r19, r1
    6db8:	8c f4       	brge	.+34     	; 0x6ddc <_ZN11CCONTROLLER11CController5SetupEv+0x29e>
    6dba:	2c 96       	adiw	r28, 0x0c	; 12
    6dbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    6dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    6dc0:	2c 97       	sbiw	r28, 0x0c	; 12
    6dc2:	80 32       	cpi	r24, 0x20	; 32
    6dc4:	91 05       	cpc	r25, r1
    6dc6:	09 f4       	brne	.+2      	; 0x6dca <_ZN11CCONTROLLER11CController5SetupEv+0x28c>
    6dc8:	4b c0       	rjmp	.+150    	; 0x6e60 <_ZN11CCONTROLLER11CController5SetupEv+0x322>
    6dca:	2c 96       	adiw	r28, 0x0c	; 12
    6dcc:	2e ad       	ldd	r18, Y+62	; 0x3e
    6dce:	3f ad       	ldd	r19, Y+63	; 0x3f
    6dd0:	2c 97       	sbiw	r28, 0x0c	; 12
    6dd2:	21 34       	cpi	r18, 0x41	; 65
    6dd4:	31 05       	cpc	r19, r1
    6dd6:	09 f4       	brne	.+2      	; 0x6dda <_ZN11CCONTROLLER11CController5SetupEv+0x29c>
    6dd8:	f6 c1       	rjmp	.+1004   	; 0x71c6 <_ZN11CCONTROLLER11CController5SetupEv+0x688>
    6dda:	bf cf       	rjmp	.-130    	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
    6ddc:	2c 96       	adiw	r28, 0x0c	; 12
    6dde:	8e ad       	ldd	r24, Y+62	; 0x3e
    6de0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6de2:	2c 97       	sbiw	r28, 0x0c	; 12
    6de4:	84 35       	cpi	r24, 0x54	; 84
    6de6:	91 05       	cpc	r25, r1
    6de8:	09 f4       	brne	.+2      	; 0x6dec <_ZN11CCONTROLLER11CController5SetupEv+0x2ae>
    6dea:	85 c0       	rjmp	.+266    	; 0x6ef6 <_ZN11CCONTROLLER11CController5SetupEv+0x3b8>
    6dec:	2c 96       	adiw	r28, 0x0c	; 12
    6dee:	2e ad       	ldd	r18, Y+62	; 0x3e
    6df0:	3f ad       	ldd	r19, Y+63	; 0x3f
    6df2:	2c 97       	sbiw	r28, 0x0c	; 12
    6df4:	27 35       	cpi	r18, 0x57	; 87
    6df6:	31 05       	cpc	r19, r1
    6df8:	09 f4       	brne	.+2      	; 0x6dfc <_ZN11CCONTROLLER11CController5SetupEv+0x2be>
    6dfa:	2a c3       	rjmp	.+1620   	; 0x7450 <_ZN11CCONTROLLER11CController5SetupEv+0x912>
    6dfc:	ae cf       	rjmp	.-164    	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
    6dfe:	2c 96       	adiw	r28, 0x0c	; 12
    6e00:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e02:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e04:	2c 97       	sbiw	r28, 0x0c	; 12
    6e06:	84 37       	cpi	r24, 0x74	; 116
    6e08:	91 05       	cpc	r25, r1
    6e0a:	09 f4       	brne	.+2      	; 0x6e0e <_ZN11CCONTROLLER11CController5SetupEv+0x2d0>
    6e0c:	62 c0       	rjmp	.+196    	; 0x6ed2 <_ZN11CCONTROLLER11CController5SetupEv+0x394>
    6e0e:	2c 96       	adiw	r28, 0x0c	; 12
    6e10:	2e ad       	ldd	r18, Y+62	; 0x3e
    6e12:	3f ad       	ldd	r19, Y+63	; 0x3f
    6e14:	2c 97       	sbiw	r28, 0x0c	; 12
    6e16:	25 37       	cpi	r18, 0x75	; 117
    6e18:	31 05       	cpc	r19, r1
    6e1a:	8c f4       	brge	.+34     	; 0x6e3e <_ZN11CCONTROLLER11CController5SetupEv+0x300>
    6e1c:	2c 96       	adiw	r28, 0x0c	; 12
    6e1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e20:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e22:	2c 97       	sbiw	r28, 0x0c	; 12
    6e24:	87 36       	cpi	r24, 0x67	; 103
    6e26:	91 05       	cpc	r25, r1
    6e28:	09 f4       	brne	.+2      	; 0x6e2c <_ZN11CCONTROLLER11CController5SetupEv+0x2ee>
    6e2a:	d9 c4       	rjmp	.+2482   	; 0x77de <_ZN11CCONTROLLER11CController5SetupEv+0xca0>
    6e2c:	2c 96       	adiw	r28, 0x0c	; 12
    6e2e:	2e ad       	ldd	r18, Y+62	; 0x3e
    6e30:	3f ad       	ldd	r19, Y+63	; 0x3f
    6e32:	2c 97       	sbiw	r28, 0x0c	; 12
    6e34:	2e 36       	cpi	r18, 0x6E	; 110
    6e36:	31 05       	cpc	r19, r1
    6e38:	09 f4       	brne	.+2      	; 0x6e3c <_ZN11CCONTROLLER11CController5SetupEv+0x2fe>
    6e3a:	be c3       	rjmp	.+1916   	; 0x75b8 <_ZN11CCONTROLLER11CController5SetupEv+0xa7a>
    6e3c:	8e cf       	rjmp	.-228    	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
    6e3e:	2c 96       	adiw	r28, 0x0c	; 12
    6e40:	8e ad       	ldd	r24, Y+62	; 0x3e
    6e42:	9f ad       	ldd	r25, Y+63	; 0x3f
    6e44:	2c 97       	sbiw	r28, 0x0c	; 12
    6e46:	87 37       	cpi	r24, 0x77	; 119
    6e48:	91 05       	cpc	r25, r1
    6e4a:	09 f4       	brne	.+2      	; 0x6e4e <_ZN11CCONTROLLER11CController5SetupEv+0x310>
    6e4c:	dc c2       	rjmp	.+1464   	; 0x7406 <_ZN11CCONTROLLER11CController5SetupEv+0x8c8>
    6e4e:	2c 96       	adiw	r28, 0x0c	; 12
    6e50:	2e ad       	ldd	r18, Y+62	; 0x3e
    6e52:	3f ad       	ldd	r19, Y+63	; 0x3f
    6e54:	2c 97       	sbiw	r28, 0x0c	; 12
    6e56:	28 37       	cpi	r18, 0x78	; 120
    6e58:	31 05       	cpc	r19, r1
    6e5a:	09 f4       	brne	.+2      	; 0x6e5e <_ZN11CCONTROLLER11CController5SetupEv+0x320>
    6e5c:	06 c5       	rjmp	.+2572   	; 0x786a <_ZN11CCONTROLLER11CController5SetupEv+0xd2c>
    6e5e:	7d cf       	rjmp	.-262    	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
      case ' ':
        DbgUart.sendStr_P((PSTR("\n\rg\t: Get SMS PhoneNumbers")));
    6e60:	2d e6       	ldi	r18, 0x6D	; 109
    6e62:	36 e0       	ldi	r19, 0x06	; 6
    6e64:	89 ee       	ldi	r24, 0xE9	; 233
    6e66:	94 e0       	ldi	r25, 0x04	; 4
    6e68:	b9 01       	movw	r22, r18
    6e6a:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\rn\t: Set SMS PhoneNumber")));
    6e6e:	23 e5       	ldi	r18, 0x53	; 83
    6e70:	36 e0       	ldi	r19, 0x06	; 6
    6e72:	89 ee       	ldi	r24, 0xE9	; 233
    6e74:	94 e0       	ldi	r25, 0x04	; 4
    6e76:	b9 01       	movw	r22, r18
    6e78:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\rw\t: Get Site ID")));
    6e7c:	21 e4       	ldi	r18, 0x41	; 65
    6e7e:	36 e0       	ldi	r19, 0x06	; 6
    6e80:	89 ee       	ldi	r24, 0xE9	; 233
    6e82:	94 e0       	ldi	r25, 0x04	; 4
    6e84:	b9 01       	movw	r22, r18
    6e86:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\rW\t: Set Site ID")));
    6e8a:	2f e2       	ldi	r18, 0x2F	; 47
    6e8c:	36 e0       	ldi	r19, 0x06	; 6
    6e8e:	89 ee       	ldi	r24, 0xE9	; 233
    6e90:	94 e0       	ldi	r25, 0x04	; 4
    6e92:	b9 01       	movw	r22, r18
    6e94:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\ra\t: Get Server IP Address")));
    6e98:	23 e1       	ldi	r18, 0x13	; 19
    6e9a:	36 e0       	ldi	r19, 0x06	; 6
    6e9c:	89 ee       	ldi	r24, 0xE9	; 233
    6e9e:	94 e0       	ldi	r25, 0x04	; 4
    6ea0:	b9 01       	movw	r22, r18
    6ea2:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\rA\t: Set Server IP Address")));
    6ea6:	27 ef       	ldi	r18, 0xF7	; 247
    6ea8:	35 e0       	ldi	r19, 0x05	; 5
    6eaa:	89 ee       	ldi	r24, 0xE9	; 233
    6eac:	94 e0       	ldi	r25, 0x04	; 4
    6eae:	b9 01       	movw	r22, r18
    6eb0:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\rt\t: Get Time")));
    6eb4:	28 ee       	ldi	r18, 0xE8	; 232
    6eb6:	35 e0       	ldi	r19, 0x05	; 5
    6eb8:	89 ee       	ldi	r24, 0xE9	; 233
    6eba:	94 e0       	ldi	r25, 0x04	; 4
    6ebc:	b9 01       	movw	r22, r18
    6ebe:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr_P((PSTR("\n\rT\t: Set Time & Date")));
    6ec2:	22 ed       	ldi	r18, 0xD2	; 210
    6ec4:	35 e0       	ldi	r19, 0x05	; 5
    6ec6:	89 ee       	ldi	r24, 0xE9	; 233
    6ec8:	94 e0       	ldi	r25, 0x04	; 4
    6eca:	b9 01       	movw	r22, r18
    6ecc:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    6ed0:	44 cf       	rjmp	.-376    	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
        break;
      case 'x':
        return;
        break;
      case 't':
        DbgUart.sendStr_P((PSTR("\n\r")));
    6ed2:	2f ec       	ldi	r18, 0xCF	; 207
    6ed4:	35 e0       	ldi	r19, 0x05	; 5
    6ed6:	89 ee       	ldi	r24, 0xE9	; 233
    6ed8:	94 e0       	ldi	r25, 0x04	; 4
    6eda:	b9 01       	movw	r22, r18
    6edc:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr(rtc.getTimestamp());
    6ee0:	8c ea       	ldi	r24, 0xAC	; 172
    6ee2:	99 e0       	ldi	r25, 0x09	; 9
    6ee4:	0e 94 72 20 	call	0x40e4	; 0x40e4 <_ZN4Crtc12getTimestampEv>
    6ee8:	9c 01       	movw	r18, r24
    6eea:	89 ee       	ldi	r24, 0xE9	; 233
    6eec:	94 e0       	ldi	r25, 0x04	; 4
    6eee:	b9 01       	movw	r22, r18
    6ef0:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
    6ef4:	32 cf       	rjmp	.-412    	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
        break;
      case 'T':
        DbgUart.sendStr_P((PSTR("\n\rSet Time & Date")));
    6ef6:	2d eb       	ldi	r18, 0xBD	; 189
    6ef8:	35 e0       	ldi	r19, 0x05	; 5
    6efa:	89 ee       	ldi	r24, 0xE9	; 233
    6efc:	94 e0       	ldi	r25, 0x04	; 4
    6efe:	b9 01       	movw	r22, r18
    6f00:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        j = 0;
    6f04:	1a 8e       	std	Y+26, r1	; 0x1a
        state = 0;
    6f06:	1a 8a       	std	Y+18, r1	; 0x12
        DbgUart.sendStr_P((PSTR("\n\rSet Year")));
    6f08:	22 eb       	ldi	r18, 0xB2	; 178
    6f0a:	35 e0       	ldi	r19, 0x05	; 5
    6f0c:	89 ee       	ldi	r24, 0xE9	; 233
    6f0e:	94 e0       	ldi	r25, 0x04	; 4
    6f10:	b9 01       	movw	r22, r18
    6f12:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    6f16:	23 c1       	rjmp	.+582    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
        while (state < 6) {
          if (DbgUart.receive(&cmd, 1)) {
    6f18:	89 ee       	ldi	r24, 0xE9	; 233
    6f1a:	94 e0       	ldi	r25, 0x04	; 4
    6f1c:	9e 01       	movw	r18, r28
    6f1e:	22 5e       	subi	r18, 0xE2	; 226
    6f20:	3f 4f       	sbci	r19, 0xFF	; 255
    6f22:	b9 01       	movw	r22, r18
    6f24:	41 e0       	ldi	r20, 0x01	; 1
    6f26:	50 e0       	ldi	r21, 0x00	; 0
    6f28:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    6f2c:	2a 96       	adiw	r28, 0x0a	; 10
    6f2e:	1f ae       	std	Y+63, r1	; 0x3f
    6f30:	2a 97       	sbiw	r28, 0x0a	; 10
    6f32:	00 97       	sbiw	r24, 0x00	; 0
    6f34:	21 f0       	breq	.+8      	; 0x6f3e <_ZN11CCONTROLLER11CController5SetupEv+0x400>
    6f36:	31 e0       	ldi	r19, 0x01	; 1
    6f38:	2a 96       	adiw	r28, 0x0a	; 10
    6f3a:	3f af       	std	Y+63, r19	; 0x3f
    6f3c:	2a 97       	sbiw	r28, 0x0a	; 10
    6f3e:	2a 96       	adiw	r28, 0x0a	; 10
    6f40:	8f ad       	ldd	r24, Y+63	; 0x3f
    6f42:	2a 97       	sbiw	r28, 0x0a	; 10
    6f44:	88 23       	and	r24, r24
    6f46:	09 f4       	brne	.+2      	; 0x6f4a <_ZN11CCONTROLLER11CController5SetupEv+0x40c>
    6f48:	0a c1       	rjmp	.+532    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
            DbgUart.uprintf("%c", cmd);
    6f4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f4c:	28 2f       	mov	r18, r24
    6f4e:	30 e0       	ldi	r19, 0x00	; 0
    6f50:	00 d0       	rcall	.+0      	; 0x6f52 <_ZN11CCONTROLLER11CController5SetupEv+0x414>
    6f52:	00 d0       	rcall	.+0      	; 0x6f54 <_ZN11CCONTROLLER11CController5SetupEv+0x416>
    6f54:	00 d0       	rcall	.+0      	; 0x6f56 <_ZN11CCONTROLLER11CController5SetupEv+0x418>
    6f56:	ed b7       	in	r30, 0x3d	; 61
    6f58:	fe b7       	in	r31, 0x3e	; 62
    6f5a:	31 96       	adiw	r30, 0x01	; 1
    6f5c:	89 ee       	ldi	r24, 0xE9	; 233
    6f5e:	94 e0       	ldi	r25, 0x04	; 4
    6f60:	91 83       	std	Z+1, r25	; 0x01
    6f62:	80 83       	st	Z, r24
    6f64:	84 e3       	ldi	r24, 0x34	; 52
    6f66:	94 e0       	ldi	r25, 0x04	; 4
    6f68:	93 83       	std	Z+3, r25	; 0x03
    6f6a:	82 83       	std	Z+2, r24	; 0x02
    6f6c:	35 83       	std	Z+5, r19	; 0x05
    6f6e:	24 83       	std	Z+4, r18	; 0x04
    6f70:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    6f74:	2d b7       	in	r18, 0x3d	; 61
    6f76:	3e b7       	in	r19, 0x3e	; 62
    6f78:	2a 5f       	subi	r18, 0xFA	; 250
    6f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f7c:	0f b6       	in	r0, 0x3f	; 63
    6f7e:	f8 94       	cli
    6f80:	3e bf       	out	0x3e, r19	; 62
    6f82:	0f be       	out	0x3f, r0	; 63
    6f84:	2d bf       	out	0x3d, r18	; 61
            if (cmd == '\r' || cmd == '\n') {
    6f86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f88:	8d 30       	cpi	r24, 0x0D	; 13
    6f8a:	21 f0       	breq	.+8      	; 0x6f94 <_ZN11CCONTROLLER11CController5SetupEv+0x456>
    6f8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6f8e:	8a 30       	cpi	r24, 0x0A	; 10
    6f90:	09 f0       	breq	.+2      	; 0x6f94 <_ZN11CCONTROLLER11CController5SetupEv+0x456>
    6f92:	d8 c0       	rjmp	.+432    	; 0x7144 <_ZN11CCONTROLLER11CController5SetupEv+0x606>
              state++;
    6f94:	8a 89       	ldd	r24, Y+18	; 0x12
    6f96:	8f 5f       	subi	r24, 0xFF	; 255
    6f98:	8a 8b       	std	Y+18, r24	; 0x12

              switch (state) {
    6f9a:	8a 89       	ldd	r24, Y+18	; 0x12
    6f9c:	28 2f       	mov	r18, r24
    6f9e:	30 e0       	ldi	r19, 0x00	; 0
    6fa0:	29 96       	adiw	r28, 0x09	; 9
    6fa2:	3f af       	std	Y+63, r19	; 0x3f
    6fa4:	2e af       	std	Y+62, r18	; 0x3e
    6fa6:	29 97       	sbiw	r28, 0x09	; 9
    6fa8:	29 96       	adiw	r28, 0x09	; 9
    6faa:	8e ad       	ldd	r24, Y+62	; 0x3e
    6fac:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fae:	29 97       	sbiw	r28, 0x09	; 9
    6fb0:	83 30       	cpi	r24, 0x03	; 3
    6fb2:	91 05       	cpc	r25, r1
    6fb4:	09 f4       	brne	.+2      	; 0x6fb8 <_ZN11CCONTROLLER11CController5SetupEv+0x47a>
    6fb6:	5e c0       	rjmp	.+188    	; 0x7074 <_ZN11CCONTROLLER11CController5SetupEv+0x536>
    6fb8:	29 96       	adiw	r28, 0x09	; 9
    6fba:	2e ad       	ldd	r18, Y+62	; 0x3e
    6fbc:	3f ad       	ldd	r19, Y+63	; 0x3f
    6fbe:	29 97       	sbiw	r28, 0x09	; 9
    6fc0:	24 30       	cpi	r18, 0x04	; 4
    6fc2:	31 05       	cpc	r19, r1
    6fc4:	7c f4       	brge	.+30     	; 0x6fe4 <_ZN11CCONTROLLER11CController5SetupEv+0x4a6>
    6fc6:	29 96       	adiw	r28, 0x09	; 9
    6fc8:	8e ad       	ldd	r24, Y+62	; 0x3e
    6fca:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fcc:	29 97       	sbiw	r28, 0x09	; 9
    6fce:	81 30       	cpi	r24, 0x01	; 1
    6fd0:	91 05       	cpc	r25, r1
    6fd2:	09 f1       	breq	.+66     	; 0x7016 <_ZN11CCONTROLLER11CController5SetupEv+0x4d8>
    6fd4:	29 96       	adiw	r28, 0x09	; 9
    6fd6:	2e ad       	ldd	r18, Y+62	; 0x3e
    6fd8:	3f ad       	ldd	r19, Y+63	; 0x3f
    6fda:	29 97       	sbiw	r28, 0x09	; 9
    6fdc:	22 30       	cpi	r18, 0x02	; 2
    6fde:	31 05       	cpc	r19, r1
    6fe0:	91 f1       	breq	.+100    	; 0x7046 <_ZN11CCONTROLLER11CController5SetupEv+0x508>
    6fe2:	bd c0       	rjmp	.+378    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
    6fe4:	29 96       	adiw	r28, 0x09	; 9
    6fe6:	8e ad       	ldd	r24, Y+62	; 0x3e
    6fe8:	9f ad       	ldd	r25, Y+63	; 0x3f
    6fea:	29 97       	sbiw	r28, 0x09	; 9
    6fec:	85 30       	cpi	r24, 0x05	; 5
    6fee:	91 05       	cpc	r25, r1
    6ff0:	09 f4       	brne	.+2      	; 0x6ff4 <_ZN11CCONTROLLER11CController5SetupEv+0x4b6>
    6ff2:	6e c0       	rjmp	.+220    	; 0x70d0 <_ZN11CCONTROLLER11CController5SetupEv+0x592>
    6ff4:	29 96       	adiw	r28, 0x09	; 9
    6ff6:	2e ad       	ldd	r18, Y+62	; 0x3e
    6ff8:	3f ad       	ldd	r19, Y+63	; 0x3f
    6ffa:	29 97       	sbiw	r28, 0x09	; 9
    6ffc:	25 30       	cpi	r18, 0x05	; 5
    6ffe:	31 05       	cpc	r19, r1
    7000:	0c f4       	brge	.+2      	; 0x7004 <_ZN11CCONTROLLER11CController5SetupEv+0x4c6>
    7002:	4f c0       	rjmp	.+158    	; 0x70a2 <_ZN11CCONTROLLER11CController5SetupEv+0x564>
    7004:	29 96       	adiw	r28, 0x09	; 9
    7006:	8e ad       	ldd	r24, Y+62	; 0x3e
    7008:	9f ad       	ldd	r25, Y+63	; 0x3f
    700a:	29 97       	sbiw	r28, 0x09	; 9
    700c:	86 30       	cpi	r24, 0x06	; 6
    700e:	91 05       	cpc	r25, r1
    7010:	09 f4       	brne	.+2      	; 0x7014 <_ZN11CCONTROLLER11CController5SetupEv+0x4d6>
    7012:	75 c0       	rjmp	.+234    	; 0x70fe <_ZN11CCONTROLLER11CController5SetupEv+0x5c0>
    7014:	a4 c0       	rjmp	.+328    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                case 1:
                  str[j] = 0;
    7016:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7018:	28 2f       	mov	r18, r24
    701a:	30 e0       	ldi	r19, 0x00	; 0
    701c:	ce 01       	movw	r24, r28
    701e:	82 96       	adiw	r24, 0x22	; 34
    7020:	fc 01       	movw	r30, r24
    7022:	e2 0f       	add	r30, r18
    7024:	f3 1f       	adc	r31, r19
    7026:	10 82       	st	Z, r1
                  j = 0;
    7028:	1a 8e       	std	Y+26, r1	; 0x1a
                  year = atoi(str);
    702a:	ce 01       	movw	r24, r28
    702c:	82 96       	adiw	r24, 0x22	; 34
    702e:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    7032:	99 8f       	std	Y+25, r25	; 0x19
    7034:	88 8f       	std	Y+24, r24	; 0x18
                  DbgUart.sendStr_P((PSTR("\n\rSet Month")));
    7036:	26 ea       	ldi	r18, 0xA6	; 166
    7038:	35 e0       	ldi	r19, 0x05	; 5
    703a:	89 ee       	ldi	r24, 0xE9	; 233
    703c:	94 e0       	ldi	r25, 0x04	; 4
    703e:	b9 01       	movw	r22, r18
    7040:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    7044:	8c c0       	rjmp	.+280    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                  break;
                case 2:
                  str[j] = 0;
    7046:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7048:	28 2f       	mov	r18, r24
    704a:	30 e0       	ldi	r19, 0x00	; 0
    704c:	ce 01       	movw	r24, r28
    704e:	82 96       	adiw	r24, 0x22	; 34
    7050:	fc 01       	movw	r30, r24
    7052:	e2 0f       	add	r30, r18
    7054:	f3 1f       	adc	r31, r19
    7056:	10 82       	st	Z, r1
                  j = 0;
    7058:	1a 8e       	std	Y+26, r1	; 0x1a
                  month = atoi(str);
    705a:	ce 01       	movw	r24, r28
    705c:	82 96       	adiw	r24, 0x22	; 34
    705e:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    7062:	8f 8b       	std	Y+23, r24	; 0x17
                  DbgUart.sendStr_P((PSTR("\n\rSet Date")));
    7064:	2b e9       	ldi	r18, 0x9B	; 155
    7066:	35 e0       	ldi	r19, 0x05	; 5
    7068:	89 ee       	ldi	r24, 0xE9	; 233
    706a:	94 e0       	ldi	r25, 0x04	; 4
    706c:	b9 01       	movw	r22, r18
    706e:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    7072:	75 c0       	rjmp	.+234    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                  break;
                case 3:
                  str[j] = 0;
    7074:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7076:	28 2f       	mov	r18, r24
    7078:	30 e0       	ldi	r19, 0x00	; 0
    707a:	ce 01       	movw	r24, r28
    707c:	82 96       	adiw	r24, 0x22	; 34
    707e:	fc 01       	movw	r30, r24
    7080:	e2 0f       	add	r30, r18
    7082:	f3 1f       	adc	r31, r19
    7084:	10 82       	st	Z, r1
                  j = 0;
    7086:	1a 8e       	std	Y+26, r1	; 0x1a
                  day = atoi(str);
    7088:	ce 01       	movw	r24, r28
    708a:	82 96       	adiw	r24, 0x22	; 34
    708c:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    7090:	8e 8b       	std	Y+22, r24	; 0x16
                  DbgUart.sendStr_P((PSTR("\n\rSet Day [1-7]")));
    7092:	2b e8       	ldi	r18, 0x8B	; 139
    7094:	35 e0       	ldi	r19, 0x05	; 5
    7096:	89 ee       	ldi	r24, 0xE9	; 233
    7098:	94 e0       	ldi	r25, 0x04	; 4
    709a:	b9 01       	movw	r22, r18
    709c:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    70a0:	5e c0       	rjmp	.+188    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                  break;
                case 4:
                  str[j] = 0;
    70a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    70a4:	28 2f       	mov	r18, r24
    70a6:	30 e0       	ldi	r19, 0x00	; 0
    70a8:	ce 01       	movw	r24, r28
    70aa:	82 96       	adiw	r24, 0x22	; 34
    70ac:	fc 01       	movw	r30, r24
    70ae:	e2 0f       	add	r30, r18
    70b0:	f3 1f       	adc	r31, r19
    70b2:	10 82       	st	Z, r1
                  j = 0;
    70b4:	1a 8e       	std	Y+26, r1	; 0x1a
                  wday = atoi(str);
    70b6:	ce 01       	movw	r24, r28
    70b8:	82 96       	adiw	r24, 0x22	; 34
    70ba:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    70be:	8d 8b       	std	Y+21, r24	; 0x15
                  DbgUart.sendStr_P((PSTR("\n\rSet Hour")));
    70c0:	20 e8       	ldi	r18, 0x80	; 128
    70c2:	35 e0       	ldi	r19, 0x05	; 5
    70c4:	89 ee       	ldi	r24, 0xE9	; 233
    70c6:	94 e0       	ldi	r25, 0x04	; 4
    70c8:	b9 01       	movw	r22, r18
    70ca:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    70ce:	47 c0       	rjmp	.+142    	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                  break;
                case 5:
                  str[j] = 0;
    70d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    70d2:	28 2f       	mov	r18, r24
    70d4:	30 e0       	ldi	r19, 0x00	; 0
    70d6:	ce 01       	movw	r24, r28
    70d8:	82 96       	adiw	r24, 0x22	; 34
    70da:	fc 01       	movw	r30, r24
    70dc:	e2 0f       	add	r30, r18
    70de:	f3 1f       	adc	r31, r19
    70e0:	10 82       	st	Z, r1
                  j = 0;
    70e2:	1a 8e       	std	Y+26, r1	; 0x1a
                  hour = atoi(str);
    70e4:	ce 01       	movw	r24, r28
    70e6:	82 96       	adiw	r24, 0x22	; 34
    70e8:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    70ec:	8c 8b       	std	Y+20, r24	; 0x14
                  DbgUart.sendStr_P((PSTR("\n\rSet Minutes")));
    70ee:	22 e7       	ldi	r18, 0x72	; 114
    70f0:	35 e0       	ldi	r19, 0x05	; 5
    70f2:	89 ee       	ldi	r24, 0xE9	; 233
    70f4:	94 e0       	ldi	r25, 0x04	; 4
    70f6:	b9 01       	movw	r22, r18
    70f8:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
    70fc:	30 c0       	rjmp	.+96     	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                  break;
                case 6:
                  str[j] = 0;
    70fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7100:	28 2f       	mov	r18, r24
    7102:	30 e0       	ldi	r19, 0x00	; 0
    7104:	ce 01       	movw	r24, r28
    7106:	82 96       	adiw	r24, 0x22	; 34
    7108:	fc 01       	movw	r30, r24
    710a:	e2 0f       	add	r30, r18
    710c:	f3 1f       	adc	r31, r19
    710e:	10 82       	st	Z, r1
                  j = 0;
    7110:	1a 8e       	std	Y+26, r1	; 0x1a
                  min = atoi(str);
    7112:	ce 01       	movw	r24, r28
    7114:	82 96       	adiw	r24, 0x22	; 34
    7116:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    711a:	8b 8b       	std	Y+19, r24	; 0x13
                  DbgUart.sendStr_P((PSTR("\n\rFinished")));
    711c:	27 e6       	ldi	r18, 0x67	; 103
    711e:	35 e0       	ldi	r19, 0x05	; 5
    7120:	89 ee       	ldi	r24, 0xE9	; 233
    7122:	94 e0       	ldi	r25, 0x04	; 4
    7124:	b9 01       	movw	r22, r18
    7126:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
                  rtc.setDate(year, month, day, wday, hour, min);
    712a:	8c ea       	ldi	r24, 0xAC	; 172
    712c:	99 e0       	ldi	r25, 0x09	; 9
    712e:	28 8d       	ldd	r18, Y+24	; 0x18
    7130:	39 8d       	ldd	r19, Y+25	; 0x19
    7132:	b9 01       	movw	r22, r18
    7134:	4f 89       	ldd	r20, Y+23	; 0x17
    7136:	2e 89       	ldd	r18, Y+22	; 0x16
    7138:	0d 89       	ldd	r16, Y+21	; 0x15
    713a:	ec 88       	ldd	r14, Y+20	; 0x14
    713c:	cb 88       	ldd	r12, Y+19	; 0x13
    713e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <_ZN4Crtc7setDateEthhhhh>
    7142:	0d c0       	rjmp	.+26     	; 0x715e <_ZN11CCONTROLLER11CController5SetupEv+0x620>
                  break;
              }
            } else {
              str[j++] = cmd;
    7144:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7146:	28 2f       	mov	r18, r24
    7148:	30 e0       	ldi	r19, 0x00	; 0
    714a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    714c:	ce 01       	movw	r24, r28
    714e:	82 96       	adiw	r24, 0x22	; 34
    7150:	fc 01       	movw	r30, r24
    7152:	e2 0f       	add	r30, r18
    7154:	f3 1f       	adc	r31, r19
    7156:	40 83       	st	Z, r20
    7158:	8a 8d       	ldd	r24, Y+26	; 0x1a
    715a:	8f 5f       	subi	r24, 0xFF	; 255
    715c:	8a 8f       	std	Y+26, r24	; 0x1a
      case 'T':
        DbgUart.sendStr_P((PSTR("\n\rSet Time & Date")));
        j = 0;
        state = 0;
        DbgUart.sendStr_P((PSTR("\n\rSet Year")));
        while (state < 6) {
    715e:	8a 89       	ldd	r24, Y+18	; 0x12
    7160:	86 30       	cpi	r24, 0x06	; 6
    7162:	08 f4       	brcc	.+2      	; 0x7166 <_ZN11CCONTROLLER11CController5SetupEv+0x628>
    7164:	d9 ce       	rjmp	.-590    	; 0x6f18 <_ZN11CCONTROLLER11CController5SetupEv+0x3da>
    7166:	f9 cd       	rjmp	.-1038   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
        }

        break;

      case 'a':
        DbgUart.sendStr_P((PSTR("\n\rServer IP Address : ")));
    7168:	20 e5       	ldi	r18, 0x50	; 80
    716a:	35 e0       	ldi	r19, 0x05	; 5
    716c:	89 ee       	ldi	r24, 0xE9	; 233
    716e:	94 e0       	ldi	r25, 0x04	; 4
    7170:	b9 01       	movw	r22, r18
    7172:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        DbgUart.sendStr(modem->serverIP);
    7176:	fe 01       	movw	r30, r28
    7178:	ee 5b       	subi	r30, 0xBE	; 190
    717a:	ff 4f       	sbci	r31, 0xFF	; 255
    717c:	01 90       	ld	r0, Z+
    717e:	f0 81       	ld	r31, Z
    7180:	e0 2d       	mov	r30, r0
    7182:	82 81       	ldd	r24, Z+2	; 0x02
    7184:	93 81       	ldd	r25, Z+3	; 0x03
    7186:	9c 01       	movw	r18, r24
    7188:	21 5d       	subi	r18, 0xD1	; 209
    718a:	3d 4f       	sbci	r19, 0xFD	; 253
    718c:	89 ee       	ldi	r24, 0xE9	; 233
    718e:	94 e0       	ldi	r25, 0x04	; 4
    7190:	b9 01       	movw	r22, r18
    7192:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        DbgUart.sendStr(":");
    7196:	2a e4       	ldi	r18, 0x4A	; 74
    7198:	34 e0       	ldi	r19, 0x04	; 4
    719a:	89 ee       	ldi	r24, 0xE9	; 233
    719c:	94 e0       	ldi	r25, 0x04	; 4
    719e:	b9 01       	movw	r22, r18
    71a0:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
        DbgUart.sendStr(modem->port);
    71a4:	fe 01       	movw	r30, r28
    71a6:	ee 5b       	subi	r30, 0xBE	; 190
    71a8:	ff 4f       	sbci	r31, 0xFF	; 255
    71aa:	01 90       	ld	r0, Z+
    71ac:	f0 81       	ld	r31, Z
    71ae:	e0 2d       	mov	r30, r0
    71b0:	82 81       	ldd	r24, Z+2	; 0x02
    71b2:	93 81       	ldd	r25, Z+3	; 0x03
    71b4:	9c 01       	movw	r18, r24
    71b6:	20 5b       	subi	r18, 0xB0	; 176
    71b8:	3d 4f       	sbci	r19, 0xFD	; 253
    71ba:	89 ee       	ldi	r24, 0xE9	; 233
    71bc:	94 e0       	ldi	r25, 0x04	; 4
    71be:	b9 01       	movw	r22, r18
    71c0:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>
    71c4:	ca cd       	rjmp	.-1132   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
        break;
      case 'A':
        DbgUart.sendStr_P((PSTR("\n\rSet Server IP Address : xxx.yyy.zzz:port:dns\n\r")));
    71c6:	2f e1       	ldi	r18, 0x1F	; 31
    71c8:	35 e0       	ldi	r19, 0x05	; 5
    71ca:	89 ee       	ldi	r24, 0xE9	; 233
    71cc:	94 e0       	ldi	r25, 0x04	; 4
    71ce:	b9 01       	movw	r22, r18
    71d0:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
        j = 0;
    71d4:	1a 8e       	std	Y+26, r1	; 0x1a
        while (1) {
          if (DbgUart.receive(&cmd, 1)) {
    71d6:	89 ee       	ldi	r24, 0xE9	; 233
    71d8:	94 e0       	ldi	r25, 0x04	; 4
    71da:	9e 01       	movw	r18, r28
    71dc:	22 5e       	subi	r18, 0xE2	; 226
    71de:	3f 4f       	sbci	r19, 0xFF	; 255
    71e0:	b9 01       	movw	r22, r18
    71e2:	41 e0       	ldi	r20, 0x01	; 1
    71e4:	50 e0       	ldi	r21, 0x00	; 0
    71e6:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    71ea:	27 96       	adiw	r28, 0x07	; 7
    71ec:	1f ae       	std	Y+63, r1	; 0x3f
    71ee:	27 97       	sbiw	r28, 0x07	; 7
    71f0:	00 97       	sbiw	r24, 0x00	; 0
    71f2:	21 f0       	breq	.+8      	; 0x71fc <_ZN11CCONTROLLER11CController5SetupEv+0x6be>
    71f4:	91 e0       	ldi	r25, 0x01	; 1
    71f6:	27 96       	adiw	r28, 0x07	; 7
    71f8:	9f af       	std	Y+63, r25	; 0x3f
    71fa:	27 97       	sbiw	r28, 0x07	; 7
    71fc:	27 96       	adiw	r28, 0x07	; 7
    71fe:	2f ad       	ldd	r18, Y+63	; 0x3f
    7200:	27 97       	sbiw	r28, 0x07	; 7
    7202:	22 23       	and	r18, r18
    7204:	41 f3       	breq	.-48     	; 0x71d6 <_ZN11CCONTROLLER11CController5SetupEv+0x698>
            DbgUart.uprintf("%c", cmd);
    7206:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7208:	28 2f       	mov	r18, r24
    720a:	30 e0       	ldi	r19, 0x00	; 0
    720c:	00 d0       	rcall	.+0      	; 0x720e <_ZN11CCONTROLLER11CController5SetupEv+0x6d0>
    720e:	00 d0       	rcall	.+0      	; 0x7210 <_ZN11CCONTROLLER11CController5SetupEv+0x6d2>
    7210:	00 d0       	rcall	.+0      	; 0x7212 <_ZN11CCONTROLLER11CController5SetupEv+0x6d4>
    7212:	ed b7       	in	r30, 0x3d	; 61
    7214:	fe b7       	in	r31, 0x3e	; 62
    7216:	31 96       	adiw	r30, 0x01	; 1
    7218:	89 ee       	ldi	r24, 0xE9	; 233
    721a:	94 e0       	ldi	r25, 0x04	; 4
    721c:	91 83       	std	Z+1, r25	; 0x01
    721e:	80 83       	st	Z, r24
    7220:	84 e3       	ldi	r24, 0x34	; 52
    7222:	94 e0       	ldi	r25, 0x04	; 4
    7224:	93 83       	std	Z+3, r25	; 0x03
    7226:	82 83       	std	Z+2, r24	; 0x02
    7228:	35 83       	std	Z+5, r19	; 0x05
    722a:	24 83       	std	Z+4, r18	; 0x04
    722c:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    7230:	8d b7       	in	r24, 0x3d	; 61
    7232:	9e b7       	in	r25, 0x3e	; 62
    7234:	06 96       	adiw	r24, 0x06	; 6
    7236:	0f b6       	in	r0, 0x3f	; 63
    7238:	f8 94       	cli
    723a:	9e bf       	out	0x3e, r25	; 62
    723c:	0f be       	out	0x3f, r0	; 63
    723e:	8d bf       	out	0x3d, r24	; 61
            if (j >= 24) {
    7240:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7242:	88 31       	cpi	r24, 0x18	; 24
    7244:	a0 f0       	brcs	.+40     	; 0x726e <_ZN11CCONTROLLER11CController5SetupEv+0x730>
              DbgUart.uprintf("\n\rInvalid format");
    7246:	00 d0       	rcall	.+0      	; 0x7248 <_ZN11CCONTROLLER11CController5SetupEv+0x70a>
    7248:	00 d0       	rcall	.+0      	; 0x724a <_ZN11CCONTROLLER11CController5SetupEv+0x70c>
    724a:	ed b7       	in	r30, 0x3d	; 61
    724c:	fe b7       	in	r31, 0x3e	; 62
    724e:	31 96       	adiw	r30, 0x01	; 1
    7250:	89 ee       	ldi	r24, 0xE9	; 233
    7252:	94 e0       	ldi	r25, 0x04	; 4
    7254:	91 83       	std	Z+1, r25	; 0x01
    7256:	80 83       	st	Z, r24
    7258:	8c e4       	ldi	r24, 0x4C	; 76
    725a:	94 e0       	ldi	r25, 0x04	; 4
    725c:	93 83       	std	Z+3, r25	; 0x03
    725e:	82 83       	std	Z+2, r24	; 0x02
    7260:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    7264:	0f 90       	pop	r0
    7266:	0f 90       	pop	r0
    7268:	0f 90       	pop	r0
    726a:	0f 90       	pop	r0
    726c:	76 cd       	rjmp	.-1300   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
              break;
            }
            if (cmd == '\r' || cmd == '\n') {
    726e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7270:	8d 30       	cpi	r24, 0x0D	; 13
    7272:	21 f0       	breq	.+8      	; 0x727c <_ZN11CCONTROLLER11CController5SetupEv+0x73e>
    7274:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7276:	8a 30       	cpi	r24, 0x0A	; 10
    7278:	09 f0       	breq	.+2      	; 0x727c <_ZN11CCONTROLLER11CController5SetupEv+0x73e>
    727a:	b7 c0       	rjmp	.+366    	; 0x73ea <_ZN11CCONTROLLER11CController5SetupEv+0x8ac>
              str[j] = ':';
    727c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    727e:	28 2f       	mov	r18, r24
    7280:	30 e0       	ldi	r19, 0x00	; 0
    7282:	ce 01       	movw	r24, r28
    7284:	82 96       	adiw	r24, 0x22	; 34
    7286:	fc 01       	movw	r30, r24
    7288:	e2 0f       	add	r30, r18
    728a:	f3 1f       	adc	r31, r19
    728c:	8a e3       	ldi	r24, 0x3A	; 58
    728e:	80 83       	st	Z, r24
              str[j + 1] = 0;
    7290:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7292:	88 2f       	mov	r24, r24
    7294:	90 e0       	ldi	r25, 0x00	; 0
    7296:	9c 01       	movw	r18, r24
    7298:	2f 5f       	subi	r18, 0xFF	; 255
    729a:	3f 4f       	sbci	r19, 0xFF	; 255
    729c:	ce 01       	movw	r24, r28
    729e:	82 96       	adiw	r24, 0x22	; 34
    72a0:	fc 01       	movw	r30, r24
    72a2:	e2 0f       	add	r30, r18
    72a4:	f3 1f       	adc	r31, r19
    72a6:	10 82       	st	Z, r1
              ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    72a8:	ef e5       	ldi	r30, 0x5F	; 95
    72aa:	f0 e0       	ldi	r31, 0x00	; 0
    72ac:	80 81       	ld	r24, Z
    72ae:	8f 8f       	std	Y+31, r24	; 0x1f
    72b0:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    72b4:	89 8b       	std	Y+17, r24	; 0x11
    72b6:	0a c0       	rjmp	.+20     	; 0x72cc <_ZN11CCONTROLLER11CController5SetupEv+0x78e>
                eeprom_write_block(str, eeIP, sizeof(eeIP));
    72b8:	ce 01       	movw	r24, r28
    72ba:	82 96       	adiw	r24, 0x22	; 34
    72bc:	29 e1       	ldi	r18, 0x19	; 25
    72be:	30 e0       	ldi	r19, 0x00	; 0
    72c0:	b9 01       	movw	r22, r18
    72c2:	40 e2       	ldi	r20, 0x20	; 32
    72c4:	50 e0       	ldi	r21, 0x00	; 0
    72c6:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
              break;
            }
            if (cmd == '\r' || cmd == '\n') {
              str[j] = ':';
              str[j + 1] = 0;
              ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    72ca:	19 8a       	std	Y+17, r1	; 0x11
    72cc:	89 89       	ldd	r24, Y+17	; 0x11
    72ce:	88 23       	and	r24, r24
    72d0:	99 f7       	brne	.-26     	; 0x72b8 <_ZN11CCONTROLLER11CController5SetupEv+0x77a>
                eeprom_write_block(str, eeIP, sizeof(eeIP));
              }
    72d2:	ce 01       	movw	r24, r28
    72d4:	4f 96       	adiw	r24, 0x1f	; 31
    72d6:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
              pstr = strtok(str, ":");
    72da:	ce 01       	movw	r24, r28
    72dc:	82 96       	adiw	r24, 0x22	; 34
    72de:	2a e4       	ldi	r18, 0x4A	; 74
    72e0:	34 e0       	ldi	r19, 0x04	; 4
    72e2:	b9 01       	movw	r22, r18
    72e4:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    72e8:	9d 8f       	std	Y+29, r25	; 0x1d
    72ea:	8c 8f       	std	Y+28, r24	; 0x1c
              if (pstr) {
    72ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    72ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    72f0:	00 97       	sbiw	r24, 0x00	; 0
    72f2:	49 f0       	breq	.+18     	; 0x7306 <_ZN11CCONTROLLER11CController5SetupEv+0x7c8>
                ipValid = true;
    72f4:	fe 01       	movw	r30, r28
    72f6:	ee 5b       	subi	r30, 0xBE	; 190
    72f8:	ff 4f       	sbci	r31, 0xFF	; 255
    72fa:	01 90       	ld	r0, Z+
    72fc:	f0 81       	ld	r31, Z
    72fe:	e0 2d       	mov	r30, r0
    7300:	81 e0       	ldi	r24, 0x01	; 1
    7302:	80 87       	std	Z+8, r24	; 0x08
    7304:	07 c0       	rjmp	.+14     	; 0x7314 <_ZN11CCONTROLLER11CController5SetupEv+0x7d6>
              } else {
                ipValid = false;
    7306:	fe 01       	movw	r30, r28
    7308:	ee 5b       	subi	r30, 0xBE	; 190
    730a:	ff 4f       	sbci	r31, 0xFF	; 255
    730c:	01 90       	ld	r0, Z+
    730e:	f0 81       	ld	r31, Z
    7310:	e0 2d       	mov	r30, r0
    7312:	10 86       	std	Z+8, r1	; 0x08
              }
              strcpy(modem->serverIP, pstr);
    7314:	fe 01       	movw	r30, r28
    7316:	ee 5b       	subi	r30, 0xBE	; 190
    7318:	ff 4f       	sbci	r31, 0xFF	; 255
    731a:	01 90       	ld	r0, Z+
    731c:	f0 81       	ld	r31, Z
    731e:	e0 2d       	mov	r30, r0
    7320:	82 81       	ldd	r24, Z+2	; 0x02
    7322:	93 81       	ldd	r25, Z+3	; 0x03
    7324:	81 5d       	subi	r24, 0xD1	; 209
    7326:	9d 4f       	sbci	r25, 0xFD	; 253
    7328:	2c 8d       	ldd	r18, Y+28	; 0x1c
    732a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    732c:	b9 01       	movw	r22, r18
    732e:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
              pstr = strtok(NULL, ":");
    7332:	2a e4       	ldi	r18, 0x4A	; 74
    7334:	34 e0       	ldi	r19, 0x04	; 4
    7336:	80 e0       	ldi	r24, 0x00	; 0
    7338:	90 e0       	ldi	r25, 0x00	; 0
    733a:	b9 01       	movw	r22, r18
    733c:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    7340:	9d 8f       	std	Y+29, r25	; 0x1d
    7342:	8c 8f       	std	Y+28, r24	; 0x1c
              strcpy(modem->port, pstr);
    7344:	fe 01       	movw	r30, r28
    7346:	ee 5b       	subi	r30, 0xBE	; 190
    7348:	ff 4f       	sbci	r31, 0xFF	; 255
    734a:	01 90       	ld	r0, Z+
    734c:	f0 81       	ld	r31, Z
    734e:	e0 2d       	mov	r30, r0
    7350:	82 81       	ldd	r24, Z+2	; 0x02
    7352:	93 81       	ldd	r25, Z+3	; 0x03
    7354:	80 5b       	subi	r24, 0xB0	; 176
    7356:	9d 4f       	sbci	r25, 0xFD	; 253
    7358:	2c 8d       	ldd	r18, Y+28	; 0x1c
    735a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    735c:	b9 01       	movw	r22, r18
    735e:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
              pstr = strtok(NULL, ":");
    7362:	2a e4       	ldi	r18, 0x4A	; 74
    7364:	34 e0       	ldi	r19, 0x04	; 4
    7366:	80 e0       	ldi	r24, 0x00	; 0
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	b9 01       	movw	r22, r18
    736c:	0e 94 8e 5b 	call	0xb71c	; 0xb71c <strtok>
    7370:	9d 8f       	std	Y+29, r25	; 0x1d
    7372:	8c 8f       	std	Y+28, r24	; 0x1c
              if (*pstr == '1') {
    7374:	ec 8d       	ldd	r30, Y+28	; 0x1c
    7376:	fd 8d       	ldd	r31, Y+29	; 0x1d
    7378:	80 81       	ld	r24, Z
    737a:	81 33       	cpi	r24, 0x31	; 49
    737c:	71 f4       	brne	.+28     	; 0x739a <_ZN11CCONTROLLER11CController5SetupEv+0x85c>
                modem->usedns = true;
    737e:	fe 01       	movw	r30, r28
    7380:	ee 5b       	subi	r30, 0xBE	; 190
    7382:	ff 4f       	sbci	r31, 0xFF	; 255
    7384:	01 90       	ld	r0, Z+
    7386:	f0 81       	ld	r31, Z
    7388:	e0 2d       	mov	r30, r0
    738a:	82 81       	ldd	r24, Z+2	; 0x02
    738c:	93 81       	ldd	r25, Z+3	; 0x03
    738e:	fc 01       	movw	r30, r24
    7390:	e1 5b       	subi	r30, 0xB1	; 177
    7392:	fd 4f       	sbci	r31, 0xFD	; 253
    7394:	81 e0       	ldi	r24, 0x01	; 1
    7396:	80 83       	st	Z, r24
    7398:	0c c0       	rjmp	.+24     	; 0x73b2 <_ZN11CCONTROLLER11CController5SetupEv+0x874>
              } else {
                modem->usedns = false;
    739a:	fe 01       	movw	r30, r28
    739c:	ee 5b       	subi	r30, 0xBE	; 190
    739e:	ff 4f       	sbci	r31, 0xFF	; 255
    73a0:	01 90       	ld	r0, Z+
    73a2:	f0 81       	ld	r31, Z
    73a4:	e0 2d       	mov	r30, r0
    73a6:	82 81       	ldd	r24, Z+2	; 0x02
    73a8:	93 81       	ldd	r25, Z+3	; 0x03
    73aa:	fc 01       	movw	r30, r24
    73ac:	e1 5b       	subi	r30, 0xB1	; 177
    73ae:	fd 4f       	sbci	r31, 0xFD	; 253
    73b0:	10 82       	st	Z, r1
              }
              DbgUart.uprintf("\n\rServer IP is set OK");
    73b2:	00 d0       	rcall	.+0      	; 0x73b4 <_ZN11CCONTROLLER11CController5SetupEv+0x876>
    73b4:	00 d0       	rcall	.+0      	; 0x73b6 <_ZN11CCONTROLLER11CController5SetupEv+0x878>
    73b6:	ed b7       	in	r30, 0x3d	; 61
    73b8:	fe b7       	in	r31, 0x3e	; 62
    73ba:	31 96       	adiw	r30, 0x01	; 1
    73bc:	89 ee       	ldi	r24, 0xE9	; 233
    73be:	94 e0       	ldi	r25, 0x04	; 4
    73c0:	91 83       	std	Z+1, r25	; 0x01
    73c2:	80 83       	st	Z, r24
    73c4:	8d e5       	ldi	r24, 0x5D	; 93
    73c6:	94 e0       	ldi	r25, 0x04	; 4
    73c8:	93 83       	std	Z+3, r25	; 0x03
    73ca:	82 83       	std	Z+2, r24	; 0x02
    73cc:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    73d0:	0f 90       	pop	r0
    73d2:	0f 90       	pop	r0
    73d4:	0f 90       	pop	r0
    73d6:	0f 90       	pop	r0
              ipValid = true;
    73d8:	fe 01       	movw	r30, r28
    73da:	ee 5b       	subi	r30, 0xBE	; 190
    73dc:	ff 4f       	sbci	r31, 0xFF	; 255
    73de:	01 90       	ld	r0, Z+
    73e0:	f0 81       	ld	r31, Z
    73e2:	e0 2d       	mov	r30, r0
    73e4:	81 e0       	ldi	r24, 0x01	; 1
    73e6:	80 87       	std	Z+8, r24	; 0x08
    73e8:	b8 cc       	rjmp	.-1680   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
              break;
            } else {
              str[j++] = cmd;
    73ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    73ec:	28 2f       	mov	r18, r24
    73ee:	30 e0       	ldi	r19, 0x00	; 0
    73f0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    73f2:	ce 01       	movw	r24, r28
    73f4:	82 96       	adiw	r24, 0x22	; 34
    73f6:	fc 01       	movw	r30, r24
    73f8:	e2 0f       	add	r30, r18
    73fa:	f3 1f       	adc	r31, r19
    73fc:	40 83       	st	Z, r20
    73fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7400:	8f 5f       	subi	r24, 0xFF	; 255
    7402:	8a 8f       	std	Y+26, r24	; 0x1a
    7404:	e8 ce       	rjmp	.-560    	; 0x71d6 <_ZN11CCONTROLLER11CController5SetupEv+0x698>
            }
          }
        }
        break;
      case 'w':
        DbgUart.uprintf("\n\rSITE ID : %d", SiteID);
    7406:	fe 01       	movw	r30, r28
    7408:	ee 5b       	subi	r30, 0xBE	; 190
    740a:	ff 4f       	sbci	r31, 0xFF	; 255
    740c:	01 90       	ld	r0, Z+
    740e:	f0 81       	ld	r31, Z
    7410:	e0 2d       	mov	r30, r0
    7412:	86 81       	ldd	r24, Z+6	; 0x06
    7414:	28 2f       	mov	r18, r24
    7416:	30 e0       	ldi	r19, 0x00	; 0
    7418:	00 d0       	rcall	.+0      	; 0x741a <_ZN11CCONTROLLER11CController5SetupEv+0x8dc>
    741a:	00 d0       	rcall	.+0      	; 0x741c <_ZN11CCONTROLLER11CController5SetupEv+0x8de>
    741c:	00 d0       	rcall	.+0      	; 0x741e <_ZN11CCONTROLLER11CController5SetupEv+0x8e0>
    741e:	ed b7       	in	r30, 0x3d	; 61
    7420:	fe b7       	in	r31, 0x3e	; 62
    7422:	31 96       	adiw	r30, 0x01	; 1
    7424:	89 ee       	ldi	r24, 0xE9	; 233
    7426:	94 e0       	ldi	r25, 0x04	; 4
    7428:	91 83       	std	Z+1, r25	; 0x01
    742a:	80 83       	st	Z, r24
    742c:	8b e0       	ldi	r24, 0x0B	; 11
    742e:	94 e0       	ldi	r25, 0x04	; 4
    7430:	93 83       	std	Z+3, r25	; 0x03
    7432:	82 83       	std	Z+2, r24	; 0x02
    7434:	35 83       	std	Z+5, r19	; 0x05
    7436:	24 83       	std	Z+4, r18	; 0x04
    7438:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    743c:	2d b7       	in	r18, 0x3d	; 61
    743e:	3e b7       	in	r19, 0x3e	; 62
    7440:	2a 5f       	subi	r18, 0xFA	; 250
    7442:	3f 4f       	sbci	r19, 0xFF	; 255
    7444:	0f b6       	in	r0, 0x3f	; 63
    7446:	f8 94       	cli
    7448:	3e bf       	out	0x3e, r19	; 62
    744a:	0f be       	out	0x3f, r0	; 63
    744c:	2d bf       	out	0x3d, r18	; 61
    744e:	85 cc       	rjmp	.-1782   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
        break;
      case 'W':
        DbgUart.uprintf("\n\r0 < SET SITE ID < 255\n\r");
    7450:	00 d0       	rcall	.+0      	; 0x7452 <_ZN11CCONTROLLER11CController5SetupEv+0x914>
    7452:	00 d0       	rcall	.+0      	; 0x7454 <_ZN11CCONTROLLER11CController5SetupEv+0x916>
    7454:	ed b7       	in	r30, 0x3d	; 61
    7456:	fe b7       	in	r31, 0x3e	; 62
    7458:	31 96       	adiw	r30, 0x01	; 1
    745a:	89 ee       	ldi	r24, 0xE9	; 233
    745c:	94 e0       	ldi	r25, 0x04	; 4
    745e:	91 83       	std	Z+1, r25	; 0x01
    7460:	80 83       	st	Z, r24
    7462:	8a e1       	ldi	r24, 0x1A	; 26
    7464:	94 e0       	ldi	r25, 0x04	; 4
    7466:	93 83       	std	Z+3, r25	; 0x03
    7468:	82 83       	std	Z+2, r24	; 0x02
    746a:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    746e:	0f 90       	pop	r0
    7470:	0f 90       	pop	r0
    7472:	0f 90       	pop	r0
    7474:	0f 90       	pop	r0
        j = 0;
    7476:	1a 8e       	std	Y+26, r1	; 0x1a
        while (1) {
          if (DbgUart.receive(&cmd, 1)) {
    7478:	89 ee       	ldi	r24, 0xE9	; 233
    747a:	94 e0       	ldi	r25, 0x04	; 4
    747c:	9e 01       	movw	r18, r28
    747e:	22 5e       	subi	r18, 0xE2	; 226
    7480:	3f 4f       	sbci	r19, 0xFF	; 255
    7482:	b9 01       	movw	r22, r18
    7484:	41 e0       	ldi	r20, 0x01	; 1
    7486:	50 e0       	ldi	r21, 0x00	; 0
    7488:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    748c:	26 96       	adiw	r28, 0x06	; 6
    748e:	1f ae       	std	Y+63, r1	; 0x3f
    7490:	26 97       	sbiw	r28, 0x06	; 6
    7492:	00 97       	sbiw	r24, 0x00	; 0
    7494:	21 f0       	breq	.+8      	; 0x749e <_ZN11CCONTROLLER11CController5SetupEv+0x960>
    7496:	31 e0       	ldi	r19, 0x01	; 1
    7498:	26 96       	adiw	r28, 0x06	; 6
    749a:	3f af       	std	Y+63, r19	; 0x3f
    749c:	26 97       	sbiw	r28, 0x06	; 6
    749e:	26 96       	adiw	r28, 0x06	; 6
    74a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    74a2:	26 97       	sbiw	r28, 0x06	; 6
    74a4:	88 23       	and	r24, r24
    74a6:	41 f3       	breq	.-48     	; 0x7478 <_ZN11CCONTROLLER11CController5SetupEv+0x93a>
            DbgUart.uprintf("%c", cmd);
    74a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    74aa:	28 2f       	mov	r18, r24
    74ac:	30 e0       	ldi	r19, 0x00	; 0
    74ae:	00 d0       	rcall	.+0      	; 0x74b0 <_ZN11CCONTROLLER11CController5SetupEv+0x972>
    74b0:	00 d0       	rcall	.+0      	; 0x74b2 <_ZN11CCONTROLLER11CController5SetupEv+0x974>
    74b2:	00 d0       	rcall	.+0      	; 0x74b4 <_ZN11CCONTROLLER11CController5SetupEv+0x976>
    74b4:	ed b7       	in	r30, 0x3d	; 61
    74b6:	fe b7       	in	r31, 0x3e	; 62
    74b8:	31 96       	adiw	r30, 0x01	; 1
    74ba:	89 ee       	ldi	r24, 0xE9	; 233
    74bc:	94 e0       	ldi	r25, 0x04	; 4
    74be:	91 83       	std	Z+1, r25	; 0x01
    74c0:	80 83       	st	Z, r24
    74c2:	84 e3       	ldi	r24, 0x34	; 52
    74c4:	94 e0       	ldi	r25, 0x04	; 4
    74c6:	93 83       	std	Z+3, r25	; 0x03
    74c8:	82 83       	std	Z+2, r24	; 0x02
    74ca:	35 83       	std	Z+5, r19	; 0x05
    74cc:	24 83       	std	Z+4, r18	; 0x04
    74ce:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    74d2:	2d b7       	in	r18, 0x3d	; 61
    74d4:	3e b7       	in	r19, 0x3e	; 62
    74d6:	2a 5f       	subi	r18, 0xFA	; 250
    74d8:	3f 4f       	sbci	r19, 0xFF	; 255
    74da:	0f b6       	in	r0, 0x3f	; 63
    74dc:	f8 94       	cli
    74de:	3e bf       	out	0x3e, r19	; 62
    74e0:	0f be       	out	0x3f, r0	; 63
    74e2:	2d bf       	out	0x3d, r18	; 61
            if (cmd == '\r' || j >= 3 || cmd == '\n') {
    74e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    74e6:	8d 30       	cpi	r24, 0x0D	; 13
    74e8:	39 f0       	breq	.+14     	; 0x74f8 <_ZN11CCONTROLLER11CController5SetupEv+0x9ba>
    74ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    74ec:	83 30       	cpi	r24, 0x03	; 3
    74ee:	20 f4       	brcc	.+8      	; 0x74f8 <_ZN11CCONTROLLER11CController5SetupEv+0x9ba>
    74f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    74f2:	8a 30       	cpi	r24, 0x0A	; 10
    74f4:	09 f0       	breq	.+2      	; 0x74f8 <_ZN11CCONTROLLER11CController5SetupEv+0x9ba>
    74f6:	52 c0       	rjmp	.+164    	; 0x759c <_ZN11CCONTROLLER11CController5SetupEv+0xa5e>
              str[j] = 0;
    74f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    74fa:	28 2f       	mov	r18, r24
    74fc:	30 e0       	ldi	r19, 0x00	; 0
    74fe:	ce 01       	movw	r24, r28
    7500:	82 96       	adiw	r24, 0x22	; 34
    7502:	fc 01       	movw	r30, r24
    7504:	e2 0f       	add	r30, r18
    7506:	f3 1f       	adc	r31, r19
    7508:	10 82       	st	Z, r1
              i = atoi(str);
    750a:	ce 01       	movw	r24, r28
    750c:	82 96       	adiw	r24, 0x22	; 34
    750e:	0e 94 44 5b 	call	0xb688	; 0xb688 <atoi>
    7512:	8b 8f       	std	Y+27, r24	; 0x1b
              ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7514:	ef e5       	ldi	r30, 0x5F	; 95
    7516:	f0 e0       	ldi	r31, 0x00	; 0
    7518:	80 81       	ld	r24, Z
    751a:	88 a3       	std	Y+32, r24	; 0x20
    751c:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    7520:	88 8b       	std	Y+16, r24	; 0x10
    7522:	06 c0       	rjmp	.+12     	; 0x7530 <_ZN11CCONTROLLER11CController5SetupEv+0x9f2>
                eeprom_write_byte(&eeSiteID, i);
    7524:	88 e1       	ldi	r24, 0x18	; 24
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	6b 8d       	ldd	r22, Y+27	; 0x1b
    752a:	0e 94 cf 5e 	call	0xbd9e	; 0xbd9e <__eewr_byte_m1280>
          if (DbgUart.receive(&cmd, 1)) {
            DbgUart.uprintf("%c", cmd);
            if (cmd == '\r' || j >= 3 || cmd == '\n') {
              str[j] = 0;
              i = atoi(str);
              ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    752e:	18 8a       	std	Y+16, r1	; 0x10
    7530:	88 89       	ldd	r24, Y+16	; 0x10
    7532:	88 23       	and	r24, r24
    7534:	b9 f7       	brne	.-18     	; 0x7524 <_ZN11CCONTROLLER11CController5SetupEv+0x9e6>
                eeprom_write_byte(&eeSiteID, i);
              }
    7536:	ce 01       	movw	r24, r28
    7538:	80 96       	adiw	r24, 0x20	; 32
    753a:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
              SiteID = i;
    753e:	fe 01       	movw	r30, r28
    7540:	ee 5b       	subi	r30, 0xBE	; 190
    7542:	ff 4f       	sbci	r31, 0xFF	; 255
    7544:	01 90       	ld	r0, Z+
    7546:	f0 81       	ld	r31, Z
    7548:	e0 2d       	mov	r30, r0
    754a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    754c:	86 83       	std	Z+6, r24	; 0x06
              server->SetSiteNr(i);
    754e:	fe 01       	movw	r30, r28
    7550:	ee 5b       	subi	r30, 0xBE	; 190
    7552:	ff 4f       	sbci	r31, 0xFF	; 255
    7554:	01 90       	ld	r0, Z+
    7556:	f0 81       	ld	r31, Z
    7558:	e0 2d       	mov	r30, r0
    755a:	84 81       	ldd	r24, Z+4	; 0x04
    755c:	95 81       	ldd	r25, Z+5	; 0x05
    755e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    7560:	0e 94 10 22 	call	0x4420	; 0x4420 <_ZN7CServer9SetSiteNrEh>
              DbgUart.uprintf("\n\rSiteID is set OK");
    7564:	00 d0       	rcall	.+0      	; 0x7566 <_ZN11CCONTROLLER11CController5SetupEv+0xa28>
    7566:	00 d0       	rcall	.+0      	; 0x7568 <_ZN11CCONTROLLER11CController5SetupEv+0xa2a>
    7568:	ed b7       	in	r30, 0x3d	; 61
    756a:	fe b7       	in	r31, 0x3e	; 62
    756c:	31 96       	adiw	r30, 0x01	; 1
    756e:	89 ee       	ldi	r24, 0xE9	; 233
    7570:	94 e0       	ldi	r25, 0x04	; 4
    7572:	91 83       	std	Z+1, r25	; 0x01
    7574:	80 83       	st	Z, r24
    7576:	87 e3       	ldi	r24, 0x37	; 55
    7578:	94 e0       	ldi	r25, 0x04	; 4
    757a:	93 83       	std	Z+3, r25	; 0x03
    757c:	82 83       	std	Z+2, r24	; 0x02
    757e:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    7582:	0f 90       	pop	r0
    7584:	0f 90       	pop	r0
    7586:	0f 90       	pop	r0
    7588:	0f 90       	pop	r0
              idValid = true;
    758a:	fe 01       	movw	r30, r28
    758c:	ee 5b       	subi	r30, 0xBE	; 190
    758e:	ff 4f       	sbci	r31, 0xFF	; 255
    7590:	01 90       	ld	r0, Z+
    7592:	f0 81       	ld	r31, Z
    7594:	e0 2d       	mov	r30, r0
    7596:	81 e0       	ldi	r24, 0x01	; 1
    7598:	87 83       	std	Z+7, r24	; 0x07
    759a:	df cb       	rjmp	.-2114   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
              break;
            } else {
              str[j++] = cmd;
    759c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    759e:	28 2f       	mov	r18, r24
    75a0:	30 e0       	ldi	r19, 0x00	; 0
    75a2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    75a4:	ce 01       	movw	r24, r28
    75a6:	82 96       	adiw	r24, 0x22	; 34
    75a8:	fc 01       	movw	r30, r24
    75aa:	e2 0f       	add	r30, r18
    75ac:	f3 1f       	adc	r31, r19
    75ae:	40 83       	st	Z, r20
    75b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    75b2:	8f 5f       	subi	r24, 0xFF	; 255
    75b4:	8a 8f       	std	Y+26, r24	; 0x1a
    75b6:	60 cf       	rjmp	.-320    	; 0x7478 <_ZN11CCONTROLLER11CController5SetupEv+0x93a>
          }
        }
        break;
      case 'n':
      case 'N':
        j = 0;
    75b8:	1a 8e       	std	Y+26, r1	; 0x1a
        i = 0;
    75ba:	1b 8e       	std	Y+27, r1	; 0x1b
        DbgUart.uprintf("\n\rSet %d SMS Phone Numbers\n\r", MAX_SMS_PHONENUMBERS);
    75bc:	00 d0       	rcall	.+0      	; 0x75be <_ZN11CCONTROLLER11CController5SetupEv+0xa80>
    75be:	00 d0       	rcall	.+0      	; 0x75c0 <_ZN11CCONTROLLER11CController5SetupEv+0xa82>
    75c0:	00 d0       	rcall	.+0      	; 0x75c2 <_ZN11CCONTROLLER11CController5SetupEv+0xa84>
    75c2:	ed b7       	in	r30, 0x3d	; 61
    75c4:	fe b7       	in	r31, 0x3e	; 62
    75c6:	31 96       	adiw	r30, 0x01	; 1
    75c8:	89 ee       	ldi	r24, 0xE9	; 233
    75ca:	94 e0       	ldi	r25, 0x04	; 4
    75cc:	91 83       	std	Z+1, r25	; 0x01
    75ce:	80 83       	st	Z, r24
    75d0:	83 e7       	ldi	r24, 0x73	; 115
    75d2:	94 e0       	ldi	r25, 0x04	; 4
    75d4:	93 83       	std	Z+3, r25	; 0x03
    75d6:	82 83       	std	Z+2, r24	; 0x02
    75d8:	82 e0       	ldi	r24, 0x02	; 2
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	95 83       	std	Z+5, r25	; 0x05
    75de:	84 83       	std	Z+4, r24	; 0x04
    75e0:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    75e4:	8d b7       	in	r24, 0x3d	; 61
    75e6:	9e b7       	in	r25, 0x3e	; 62
    75e8:	06 96       	adiw	r24, 0x06	; 6
    75ea:	0f b6       	in	r0, 0x3f	; 63
    75ec:	f8 94       	cli
    75ee:	9e bf       	out	0x3e, r25	; 62
    75f0:	0f be       	out	0x3f, r0	; 63
    75f2:	8d bf       	out	0x3d, r24	; 61
        while (1) {
          if (DbgUart.receive(&cmd, 1)) {
    75f4:	89 ee       	ldi	r24, 0xE9	; 233
    75f6:	94 e0       	ldi	r25, 0x04	; 4
    75f8:	9e 01       	movw	r18, r28
    75fa:	22 5e       	subi	r18, 0xE2	; 226
    75fc:	3f 4f       	sbci	r19, 0xFF	; 255
    75fe:	b9 01       	movw	r22, r18
    7600:	41 e0       	ldi	r20, 0x01	; 1
    7602:	50 e0       	ldi	r21, 0x00	; 0
    7604:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <_ZN5CUART7receiveEPht>
    7608:	25 96       	adiw	r28, 0x05	; 5
    760a:	1f ae       	std	Y+63, r1	; 0x3f
    760c:	25 97       	sbiw	r28, 0x05	; 5
    760e:	00 97       	sbiw	r24, 0x00	; 0
    7610:	21 f0       	breq	.+8      	; 0x761a <_ZN11CCONTROLLER11CController5SetupEv+0xadc>
    7612:	91 e0       	ldi	r25, 0x01	; 1
    7614:	25 96       	adiw	r28, 0x05	; 5
    7616:	9f af       	std	Y+63, r25	; 0x3f
    7618:	25 97       	sbiw	r28, 0x05	; 5
    761a:	25 96       	adiw	r28, 0x05	; 5
    761c:	2f ad       	ldd	r18, Y+63	; 0x3f
    761e:	25 97       	sbiw	r28, 0x05	; 5
    7620:	22 23       	and	r18, r18
    7622:	41 f3       	breq	.-48     	; 0x75f4 <_ZN11CCONTROLLER11CController5SetupEv+0xab6>
            DbgUart.uprintf("%c", cmd);
    7624:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7626:	28 2f       	mov	r18, r24
    7628:	30 e0       	ldi	r19, 0x00	; 0
    762a:	00 d0       	rcall	.+0      	; 0x762c <_ZN11CCONTROLLER11CController5SetupEv+0xaee>
    762c:	00 d0       	rcall	.+0      	; 0x762e <_ZN11CCONTROLLER11CController5SetupEv+0xaf0>
    762e:	00 d0       	rcall	.+0      	; 0x7630 <_ZN11CCONTROLLER11CController5SetupEv+0xaf2>
    7630:	ed b7       	in	r30, 0x3d	; 61
    7632:	fe b7       	in	r31, 0x3e	; 62
    7634:	31 96       	adiw	r30, 0x01	; 1
    7636:	89 ee       	ldi	r24, 0xE9	; 233
    7638:	94 e0       	ldi	r25, 0x04	; 4
    763a:	91 83       	std	Z+1, r25	; 0x01
    763c:	80 83       	st	Z, r24
    763e:	84 e3       	ldi	r24, 0x34	; 52
    7640:	94 e0       	ldi	r25, 0x04	; 4
    7642:	93 83       	std	Z+3, r25	; 0x03
    7644:	82 83       	std	Z+2, r24	; 0x02
    7646:	35 83       	std	Z+5, r19	; 0x05
    7648:	24 83       	std	Z+4, r18	; 0x04
    764a:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    764e:	8d b7       	in	r24, 0x3d	; 61
    7650:	9e b7       	in	r25, 0x3e	; 62
    7652:	06 96       	adiw	r24, 0x06	; 6
    7654:	0f b6       	in	r0, 0x3f	; 63
    7656:	f8 94       	cli
    7658:	9e bf       	out	0x3e, r25	; 62
    765a:	0f be       	out	0x3f, r0	; 63
    765c:	8d bf       	out	0x3d, r24	; 61
            if (cmd == '\r' || j >= 10 || cmd == '\n') {
    765e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7660:	8d 30       	cpi	r24, 0x0D	; 13
    7662:	39 f0       	breq	.+14     	; 0x7672 <_ZN11CCONTROLLER11CController5SetupEv+0xb34>
    7664:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7666:	8a 30       	cpi	r24, 0x0A	; 10
    7668:	20 f4       	brcc	.+8      	; 0x7672 <_ZN11CCONTROLLER11CController5SetupEv+0xb34>
    766a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    766c:	8a 30       	cpi	r24, 0x0A	; 10
    766e:	09 f0       	breq	.+2      	; 0x7672 <_ZN11CCONTROLLER11CController5SetupEv+0xb34>
    7670:	a8 c0       	rjmp	.+336    	; 0x77c2 <_ZN11CCONTROLLER11CController5SetupEv+0xc84>
              str[j] = 0;
    7672:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7674:	28 2f       	mov	r18, r24
    7676:	30 e0       	ldi	r19, 0x00	; 0
    7678:	ce 01       	movw	r24, r28
    767a:	82 96       	adiw	r24, 0x22	; 34
    767c:	fc 01       	movw	r30, r24
    767e:	e2 0f       	add	r30, r18
    7680:	f3 1f       	adc	r31, r19
    7682:	10 82       	st	Z, r1
              strcpy(PhoneNumbers[i], str);
    7684:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7686:	28 2f       	mov	r18, r24
    7688:	30 e0       	ldi	r19, 0x00	; 0
    768a:	fe 01       	movw	r30, r28
    768c:	ee 5b       	subi	r30, 0xBE	; 190
    768e:	ff 4f       	sbci	r31, 0xFF	; 255
    7690:	c9 01       	movw	r24, r18
    7692:	88 0f       	add	r24, r24
    7694:	99 1f       	adc	r25, r25
    7696:	82 0f       	add	r24, r18
    7698:	93 1f       	adc	r25, r19
    769a:	88 0f       	add	r24, r24
    769c:	99 1f       	adc	r25, r25
    769e:	88 0f       	add	r24, r24
    76a0:	99 1f       	adc	r25, r25
    76a2:	9c 01       	movw	r18, r24
    76a4:	23 5e       	subi	r18, 0xE3	; 227
    76a6:	3f 4f       	sbci	r19, 0xFF	; 255
    76a8:	80 81       	ld	r24, Z
    76aa:	91 81       	ldd	r25, Z+1	; 0x01
    76ac:	82 0f       	add	r24, r18
    76ae:	93 1f       	adc	r25, r19
    76b0:	9e 01       	movw	r18, r28
    76b2:	2e 5d       	subi	r18, 0xDE	; 222
    76b4:	3f 4f       	sbci	r19, 0xFF	; 255
    76b6:	b9 01       	movw	r22, r18
    76b8:	0e 94 c2 5b 	call	0xb784	; 0xb784 <strcpy>
              DbgUart.uprintf("\n\rNumber[%d]=%s Set %d of %d\n\r", i, str, i + 1,
                              MAX_SMS_PHONENUMBERS);
    76bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    76be:	28 2f       	mov	r18, r24
    76c0:	30 e0       	ldi	r19, 0x00	; 0
    76c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    76c4:	88 2f       	mov	r24, r24
    76c6:	90 e0       	ldi	r25, 0x00	; 0
    76c8:	ac 01       	movw	r20, r24
    76ca:	4f 5f       	subi	r20, 0xFF	; 255
    76cc:	5f 4f       	sbci	r21, 0xFF	; 255
    76ce:	8d b7       	in	r24, 0x3d	; 61
    76d0:	9e b7       	in	r25, 0x3e	; 62
    76d2:	0c 97       	sbiw	r24, 0x0c	; 12
    76d4:	0f b6       	in	r0, 0x3f	; 63
    76d6:	f8 94       	cli
    76d8:	9e bf       	out	0x3e, r25	; 62
    76da:	0f be       	out	0x3f, r0	; 63
    76dc:	8d bf       	out	0x3d, r24	; 61
    76de:	ed b7       	in	r30, 0x3d	; 61
    76e0:	fe b7       	in	r31, 0x3e	; 62
    76e2:	31 96       	adiw	r30, 0x01	; 1
    76e4:	89 ee       	ldi	r24, 0xE9	; 233
    76e6:	94 e0       	ldi	r25, 0x04	; 4
    76e8:	91 83       	std	Z+1, r25	; 0x01
    76ea:	80 83       	st	Z, r24
    76ec:	80 e9       	ldi	r24, 0x90	; 144
    76ee:	94 e0       	ldi	r25, 0x04	; 4
    76f0:	93 83       	std	Z+3, r25	; 0x03
    76f2:	82 83       	std	Z+2, r24	; 0x02
    76f4:	35 83       	std	Z+5, r19	; 0x05
    76f6:	24 83       	std	Z+4, r18	; 0x04
    76f8:	ce 01       	movw	r24, r28
    76fa:	82 96       	adiw	r24, 0x22	; 34
    76fc:	97 83       	std	Z+7, r25	; 0x07
    76fe:	86 83       	std	Z+6, r24	; 0x06
    7700:	51 87       	std	Z+9, r21	; 0x09
    7702:	40 87       	std	Z+8, r20	; 0x08
    7704:	82 e0       	ldi	r24, 0x02	; 2
    7706:	90 e0       	ldi	r25, 0x00	; 0
    7708:	93 87       	std	Z+11, r25	; 0x0b
    770a:	82 87       	std	Z+10, r24	; 0x0a
    770c:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    7710:	2d b7       	in	r18, 0x3d	; 61
    7712:	3e b7       	in	r19, 0x3e	; 62
    7714:	24 5f       	subi	r18, 0xF4	; 244
    7716:	3f 4f       	sbci	r19, 0xFF	; 255
    7718:	0f b6       	in	r0, 0x3f	; 63
    771a:	f8 94       	cli
    771c:	3e bf       	out	0x3e, r19	; 62
    771e:	0f be       	out	0x3f, r0	; 63
    7720:	2d bf       	out	0x3d, r18	; 61
              ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    7722:	ef e5       	ldi	r30, 0x5F	; 95
    7724:	f0 e0       	ldi	r31, 0x00	; 0
    7726:	80 81       	ld	r24, Z
    7728:	89 a3       	std	Y+33, r24	; 0x21
    772a:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZL12__iCliRetValv>
    772e:	8f 87       	std	Y+15, r24	; 0x0f
    7730:	2d c0       	rjmp	.+90     	; 0x778c <_ZN11CCONTROLLER11CController5SetupEv+0xc4e>
                eeprom_write_block(PhoneNumbers[i], eePhoneNumbers[i],
                                   sizeof(eePhoneNumbers[0]));
    7732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7734:	28 2f       	mov	r18, r24
    7736:	30 e0       	ldi	r19, 0x00	; 0
    7738:	fe 01       	movw	r30, r28
    773a:	ee 5b       	subi	r30, 0xBE	; 190
    773c:	ff 4f       	sbci	r31, 0xFF	; 255
    773e:	c9 01       	movw	r24, r18
    7740:	88 0f       	add	r24, r24
    7742:	99 1f       	adc	r25, r25
    7744:	82 0f       	add	r24, r18
    7746:	93 1f       	adc	r25, r19
    7748:	88 0f       	add	r24, r24
    774a:	99 1f       	adc	r25, r25
    774c:	88 0f       	add	r24, r24
    774e:	99 1f       	adc	r25, r25
    7750:	9c 01       	movw	r18, r24
    7752:	23 5e       	subi	r18, 0xE3	; 227
    7754:	3f 4f       	sbci	r19, 0xFF	; 255
    7756:	80 81       	ld	r24, Z
    7758:	91 81       	ldd	r25, Z+1	; 0x01
    775a:	82 0f       	add	r24, r18
    775c:	93 1f       	adc	r25, r19
    775e:	ac 01       	movw	r20, r24
    7760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7762:	28 2f       	mov	r18, r24
    7764:	30 e0       	ldi	r19, 0x00	; 0
    7766:	c9 01       	movw	r24, r18
    7768:	88 0f       	add	r24, r24
    776a:	99 1f       	adc	r25, r25
    776c:	82 0f       	add	r24, r18
    776e:	93 1f       	adc	r25, r19
    7770:	88 0f       	add	r24, r24
    7772:	99 1f       	adc	r25, r25
    7774:	88 0f       	add	r24, r24
    7776:	99 1f       	adc	r25, r25
    7778:	80 50       	subi	r24, 0x00	; 0
    777a:	90 40       	sbci	r25, 0x00	; 0
    777c:	9c 01       	movw	r18, r24
    777e:	ca 01       	movw	r24, r20
    7780:	b9 01       	movw	r22, r18
    7782:	4c e0       	ldi	r20, 0x0C	; 12
    7784:	50 e0       	ldi	r21, 0x00	; 0
    7786:	0e 94 c5 5e 	call	0xbd8a	; 0xbd8a <__eewr_block_m1280>
            if (cmd == '\r' || j >= 10 || cmd == '\n') {
              str[j] = 0;
              strcpy(PhoneNumbers[i], str);
              DbgUart.uprintf("\n\rNumber[%d]=%s Set %d of %d\n\r", i, str, i + 1,
                              MAX_SMS_PHONENUMBERS);
              ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    778a:	1f 86       	std	Y+15, r1	; 0x0f
    778c:	8f 85       	ldd	r24, Y+15	; 0x0f
    778e:	88 23       	and	r24, r24
    7790:	81 f6       	brne	.-96     	; 0x7732 <_ZN11CCONTROLLER11CController5SetupEv+0xbf4>
                eeprom_write_block(PhoneNumbers[i], eePhoneNumbers[i],
                                   sizeof(eePhoneNumbers[0]));
              }
    7792:	ce 01       	movw	r24, r28
    7794:	81 96       	adiw	r24, 0x21	; 33
    7796:	0e 94 09 24 	call	0x4812	; 0x4812 <_ZL10__iRestorePKh>
              j = 0;
    779a:	1a 8e       	std	Y+26, r1	; 0x1a
              i++;
    779c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    779e:	8f 5f       	subi	r24, 0xFF	; 255
    77a0:	8b 8f       	std	Y+27, r24	; 0x1b
              if (i == MAX_SMS_PHONENUMBERS) {
    77a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77a4:	82 30       	cpi	r24, 0x02	; 2
    77a6:	09 f0       	breq	.+2      	; 0x77aa <_ZN11CCONTROLLER11CController5SetupEv+0xc6c>
    77a8:	25 cf       	rjmp	.-438    	; 0x75f4 <_ZN11CCONTROLLER11CController5SetupEv+0xab6>
                nrValid = true;
    77aa:	fe 01       	movw	r30, r28
    77ac:	ee 5b       	subi	r30, 0xBE	; 190
    77ae:	ff 4f       	sbci	r31, 0xFF	; 255
    77b0:	80 81       	ld	r24, Z
    77b2:	91 81       	ldd	r25, Z+1	; 0x01
    77b4:	fc 01       	movw	r30, r24
    77b6:	ef 5b       	subi	r30, 0xBF	; 191
    77b8:	ff 4f       	sbci	r31, 0xFF	; 255
    77ba:	81 e0       	ldi	r24, 0x01	; 1
    77bc:	80 83       	st	Z, r24
            } else {
              str[j++] = cmd;
            }
          }
        }
        cmd = 0;
    77be:	1e 8e       	std	Y+30, r1	; 0x1e
    77c0:	cc ca       	rjmp	.-2664   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
              if (i == MAX_SMS_PHONENUMBERS) {
                nrValid = true;
                break;
              }
            } else {
              str[j++] = cmd;
    77c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    77c4:	28 2f       	mov	r18, r24
    77c6:	30 e0       	ldi	r19, 0x00	; 0
    77c8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    77ca:	ce 01       	movw	r24, r28
    77cc:	82 96       	adiw	r24, 0x22	; 34
    77ce:	fc 01       	movw	r30, r24
    77d0:	e2 0f       	add	r30, r18
    77d2:	f3 1f       	adc	r31, r19
    77d4:	40 83       	st	Z, r20
    77d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    77d8:	8f 5f       	subi	r24, 0xFF	; 255
    77da:	8a 8f       	std	Y+26, r24	; 0x1a
    77dc:	0b cf       	rjmp	.-490    	; 0x75f4 <_ZN11CCONTROLLER11CController5SetupEv+0xab6>
          }
        }
        cmd = 0;
        break;
      case 'g':
        for (i = 0; i < MAX_SMS_PHONENUMBERS; i++) {
    77de:	1b 8e       	std	Y+27, r1	; 0x1b
    77e0:	3f c0       	rjmp	.+126    	; 0x7860 <_ZN11CCONTROLLER11CController5SetupEv+0xd22>
          DbgUart.uprintf("\n\rPhoneNumber[%d]:\t%s", i, PhoneNumbers[i]);
    77e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77e4:	48 2f       	mov	r20, r24
    77e6:	50 e0       	ldi	r21, 0x00	; 0
    77e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77ea:	28 2f       	mov	r18, r24
    77ec:	30 e0       	ldi	r19, 0x00	; 0
    77ee:	fe 01       	movw	r30, r28
    77f0:	ee 5b       	subi	r30, 0xBE	; 190
    77f2:	ff 4f       	sbci	r31, 0xFF	; 255
    77f4:	c9 01       	movw	r24, r18
    77f6:	88 0f       	add	r24, r24
    77f8:	99 1f       	adc	r25, r25
    77fa:	82 0f       	add	r24, r18
    77fc:	93 1f       	adc	r25, r19
    77fe:	88 0f       	add	r24, r24
    7800:	99 1f       	adc	r25, r25
    7802:	88 0f       	add	r24, r24
    7804:	99 1f       	adc	r25, r25
    7806:	9c 01       	movw	r18, r24
    7808:	23 5e       	subi	r18, 0xE3	; 227
    780a:	3f 4f       	sbci	r19, 0xFF	; 255
    780c:	80 81       	ld	r24, Z
    780e:	91 81       	ldd	r25, Z+1	; 0x01
    7810:	82 0f       	add	r24, r18
    7812:	93 1f       	adc	r25, r19
    7814:	9c 01       	movw	r18, r24
    7816:	8d b7       	in	r24, 0x3d	; 61
    7818:	9e b7       	in	r25, 0x3e	; 62
    781a:	08 97       	sbiw	r24, 0x08	; 8
    781c:	0f b6       	in	r0, 0x3f	; 63
    781e:	f8 94       	cli
    7820:	9e bf       	out	0x3e, r25	; 62
    7822:	0f be       	out	0x3f, r0	; 63
    7824:	8d bf       	out	0x3d, r24	; 61
    7826:	ed b7       	in	r30, 0x3d	; 61
    7828:	fe b7       	in	r31, 0x3e	; 62
    782a:	31 96       	adiw	r30, 0x01	; 1
    782c:	89 ee       	ldi	r24, 0xE9	; 233
    782e:	94 e0       	ldi	r25, 0x04	; 4
    7830:	91 83       	std	Z+1, r25	; 0x01
    7832:	80 83       	st	Z, r24
    7834:	85 ef       	ldi	r24, 0xF5	; 245
    7836:	93 e0       	ldi	r25, 0x03	; 3
    7838:	93 83       	std	Z+3, r25	; 0x03
    783a:	82 83       	std	Z+2, r24	; 0x02
    783c:	55 83       	std	Z+5, r21	; 0x05
    783e:	44 83       	std	Z+4, r20	; 0x04
    7840:	37 83       	std	Z+7, r19	; 0x07
    7842:	26 83       	std	Z+6, r18	; 0x06
    7844:	0e 94 81 50 	call	0xa102	; 0xa102 <_ZN5CUART7uprintfEPKcz>
    7848:	2d b7       	in	r18, 0x3d	; 61
    784a:	3e b7       	in	r19, 0x3e	; 62
    784c:	28 5f       	subi	r18, 0xF8	; 248
    784e:	3f 4f       	sbci	r19, 0xFF	; 255
    7850:	0f b6       	in	r0, 0x3f	; 63
    7852:	f8 94       	cli
    7854:	3e bf       	out	0x3e, r19	; 62
    7856:	0f be       	out	0x3f, r0	; 63
    7858:	2d bf       	out	0x3d, r18	; 61
          }
        }
        cmd = 0;
        break;
      case 'g':
        for (i = 0; i < MAX_SMS_PHONENUMBERS; i++) {
    785a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    785c:	8f 5f       	subi	r24, 0xFF	; 255
    785e:	8b 8f       	std	Y+27, r24	; 0x1b
    7860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7862:	82 30       	cpi	r24, 0x02	; 2
    7864:	08 f4       	brcc	.+2      	; 0x7868 <_ZN11CCONTROLLER11CController5SetupEv+0xd2a>
    7866:	bd cf       	rjmp	.-134    	; 0x77e2 <_ZN11CCONTROLLER11CController5SetupEv+0xca4>
    7868:	78 ca       	rjmp	.-2832   	; 0x6d5a <_ZN11CCONTROLLER11CController5SetupEv+0x21c>
        break;
      default:
        break;
    }
  }
}
    786a:	c5 5b       	subi	r28, 0xB5	; 181
    786c:	df 4f       	sbci	r29, 0xFF	; 255
    786e:	0f b6       	in	r0, 0x3f	; 63
    7870:	f8 94       	cli
    7872:	de bf       	out	0x3e, r29	; 62
    7874:	0f be       	out	0x3f, r0	; 63
    7876:	cd bf       	out	0x3d, r28	; 61
    7878:	cf 91       	pop	r28
    787a:	df 91       	pop	r29
    787c:	0f 91       	pop	r16
    787e:	ef 90       	pop	r14
    7880:	cf 90       	pop	r12
    7882:	08 95       	ret

00007884 <_Z10InitIOPinsv>:
#include "avrlibdefs.h"
#include "common.h"
/****************************************************************************************/
#include "iopins.h"
/****************************************************************************************/
void InitIOPins(void)
    7884:	df 93       	push	r29
    7886:	cf 93       	push	r28
    7888:	cd b7       	in	r28, 0x3d	; 61
    788a:	de b7       	in	r29, 0x3e	; 62
{
  //====================SET ADDRESS BUS TO INPUTS=======================
  DDRA = 0x00;
    788c:	e1 e2       	ldi	r30, 0x21	; 33
    788e:	f0 e0       	ldi	r31, 0x00	; 0
    7890:	10 82       	st	Z, r1
  PORTA = 0x00;
    7892:	e2 e2       	ldi	r30, 0x22	; 34
    7894:	f0 e0       	ldi	r31, 0x00	; 0
    7896:	10 82       	st	Z, r1

  DDRC = 0x00;
    7898:	e7 e2       	ldi	r30, 0x27	; 39
    789a:	f0 e0       	ldi	r31, 0x00	; 0
    789c:	10 82       	st	Z, r1
  PORTC = 0x00;
    789e:	e8 e2       	ldi	r30, 0x28	; 40
    78a0:	f0 e0       	ldi	r31, 0x00	; 0
    78a2:	10 82       	st	Z, r1

  //====================SET TO INPUTS=======================
  BIT_SET_LO(OPTO_0_DDR, OPTO_0_PIN); /* INPUT*/
    78a4:	a4 e2       	ldi	r26, 0x24	; 36
    78a6:	b0 e0       	ldi	r27, 0x00	; 0
    78a8:	e4 e2       	ldi	r30, 0x24	; 36
    78aa:	f0 e0       	ldi	r31, 0x00	; 0
    78ac:	80 81       	ld	r24, Z
    78ae:	8f 7e       	andi	r24, 0xEF	; 239
    78b0:	8c 93       	st	X, r24
  BIT_SET_LO(OPTO_1_DDR, OPTO_1_PIN); /* INPUT*/
    78b2:	a4 e2       	ldi	r26, 0x24	; 36
    78b4:	b0 e0       	ldi	r27, 0x00	; 0
    78b6:	e4 e2       	ldi	r30, 0x24	; 36
    78b8:	f0 e0       	ldi	r31, 0x00	; 0
    78ba:	80 81       	ld	r24, Z
    78bc:	8f 7d       	andi	r24, 0xDF	; 223
    78be:	8c 93       	st	X, r24
  BIT_SET_LO(POWERFAIL_DDR, POWERFAIL_PIN); /* INPUT*/
    78c0:	a0 e3       	ldi	r26, 0x30	; 48
    78c2:	b0 e0       	ldi	r27, 0x00	; 0
    78c4:	e0 e3       	ldi	r30, 0x30	; 48
    78c6:	f0 e0       	ldi	r31, 0x00	; 0
    78c8:	80 81       	ld	r24, Z
    78ca:	8e 7f       	andi	r24, 0xFE	; 254
    78cc:	8c 93       	st	X, r24

  BIT_SET_HI(OPTO_0_DDR, OPTO_0_PIN); /* INPUT*/
    78ce:	a4 e2       	ldi	r26, 0x24	; 36
    78d0:	b0 e0       	ldi	r27, 0x00	; 0
    78d2:	e4 e2       	ldi	r30, 0x24	; 36
    78d4:	f0 e0       	ldi	r31, 0x00	; 0
    78d6:	80 81       	ld	r24, Z
    78d8:	80 61       	ori	r24, 0x10	; 16
    78da:	8c 93       	st	X, r24
  BIT_SET_HI(OPTO_1_DDR, OPTO_1_PIN); /* INPUT*/
    78dc:	a4 e2       	ldi	r26, 0x24	; 36
    78de:	b0 e0       	ldi	r27, 0x00	; 0
    78e0:	e4 e2       	ldi	r30, 0x24	; 36
    78e2:	f0 e0       	ldi	r31, 0x00	; 0
    78e4:	80 81       	ld	r24, Z
    78e6:	80 62       	ori	r24, 0x20	; 32
    78e8:	8c 93       	st	X, r24
  BIT_SET_HI(POWERFAIL_DDR, POWERFAIL_PIN); /* INPUT*/
    78ea:	a0 e3       	ldi	r26, 0x30	; 48
    78ec:	b0 e0       	ldi	r27, 0x00	; 0
    78ee:	e0 e3       	ldi	r30, 0x30	; 48
    78f0:	f0 e0       	ldi	r31, 0x00	; 0
    78f2:	80 81       	ld	r24, Z
    78f4:	81 60       	ori	r24, 0x01	; 1
    78f6:	8c 93       	st	X, r24

  BIT_SET_HI(MDM_DTR_DDR, MDM_DTR_PIN); /* OUTPUT FROM MICRO TO MDM */
    78f8:	a1 e0       	ldi	r26, 0x01	; 1
    78fa:	b1 e0       	ldi	r27, 0x01	; 1
    78fc:	e1 e0       	ldi	r30, 0x01	; 1
    78fe:	f1 e0       	ldi	r31, 0x01	; 1
    7900:	80 81       	ld	r24, Z
    7902:	80 61       	ori	r24, 0x10	; 16
    7904:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_DTR_PORT, MDM_DTR_PIN);
    7906:	a2 e0       	ldi	r26, 0x02	; 2
    7908:	b1 e0       	ldi	r27, 0x01	; 1
    790a:	e2 e0       	ldi	r30, 0x02	; 2
    790c:	f1 e0       	ldi	r31, 0x01	; 1
    790e:	80 81       	ld	r24, Z
    7910:	80 61       	ori	r24, 0x10	; 16
    7912:	8c 93       	st	X, r24

  BIT_SET_LO(MDM_DCD_DDR, MDM_DCD_PIN); /* INPUT TO MICRO*/
    7914:	a1 e0       	ldi	r26, 0x01	; 1
    7916:	b1 e0       	ldi	r27, 0x01	; 1
    7918:	e1 e0       	ldi	r30, 0x01	; 1
    791a:	f1 e0       	ldi	r31, 0x01	; 1
    791c:	80 81       	ld	r24, Z
    791e:	8f 7b       	andi	r24, 0xBF	; 191
    7920:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_DCD_PORT, MDM_DCD_PIN);
    7922:	a2 e0       	ldi	r26, 0x02	; 2
    7924:	b1 e0       	ldi	r27, 0x01	; 1
    7926:	e2 e0       	ldi	r30, 0x02	; 2
    7928:	f1 e0       	ldi	r31, 0x01	; 1
    792a:	80 81       	ld	r24, Z
    792c:	80 64       	ori	r24, 0x40	; 64
    792e:	8c 93       	st	X, r24

  BIT_SET_HI(MDM_RTS_DDR, MDM_RTS_PIN); /* OUTPUT FROM MICRO TO MDM */
    7930:	a1 e0       	ldi	r26, 0x01	; 1
    7932:	b1 e0       	ldi	r27, 0x01	; 1
    7934:	e1 e0       	ldi	r30, 0x01	; 1
    7936:	f1 e0       	ldi	r31, 0x01	; 1
    7938:	80 81       	ld	r24, Z
    793a:	88 60       	ori	r24, 0x08	; 8
    793c:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_RTS_PORT, MDM_RTS_PIN);
    793e:	a2 e0       	ldi	r26, 0x02	; 2
    7940:	b1 e0       	ldi	r27, 0x01	; 1
    7942:	e2 e0       	ldi	r30, 0x02	; 2
    7944:	f1 e0       	ldi	r31, 0x01	; 1
    7946:	80 81       	ld	r24, Z
    7948:	88 60       	ori	r24, 0x08	; 8
    794a:	8c 93       	st	X, r24

  BIT_SET_LO(MDM_CTS_DDR, MDM_CTS_PIN); /* INPUT TO MICRO*/
    794c:	a1 e0       	ldi	r26, 0x01	; 1
    794e:	b1 e0       	ldi	r27, 0x01	; 1
    7950:	e1 e0       	ldi	r30, 0x01	; 1
    7952:	f1 e0       	ldi	r31, 0x01	; 1
    7954:	80 81       	ld	r24, Z
    7956:	8b 7f       	andi	r24, 0xFB	; 251
    7958:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_CTS_PORT, MDM_CTS_PIN);
    795a:	a2 e0       	ldi	r26, 0x02	; 2
    795c:	b1 e0       	ldi	r27, 0x01	; 1
    795e:	e2 e0       	ldi	r30, 0x02	; 2
    7960:	f1 e0       	ldi	r31, 0x01	; 1
    7962:	80 81       	ld	r24, Z
    7964:	84 60       	ori	r24, 0x04	; 4
    7966:	8c 93       	st	X, r24

  BIT_SET_LO(SIMPRES_CTRL_DDR,SIMPRES_CTRL_PIN);
    7968:	aa e0       	ldi	r26, 0x0A	; 10
    796a:	b1 e0       	ldi	r27, 0x01	; 1
    796c:	ea e0       	ldi	r30, 0x0A	; 10
    796e:	f1 e0       	ldi	r31, 0x01	; 1
    7970:	80 81       	ld	r24, Z
    7972:	8d 7f       	andi	r24, 0xFD	; 253
    7974:	8c 93       	st	X, r24
  BIT_SET_LO(SIMPRES_CTRL_PORT,SIMPRES_CTRL_PIN);
    7976:	ab e0       	ldi	r26, 0x0B	; 11
    7978:	b1 e0       	ldi	r27, 0x01	; 1
    797a:	eb e0       	ldi	r30, 0x0B	; 11
    797c:	f1 e0       	ldi	r31, 0x01	; 1
    797e:	80 81       	ld	r24, Z
    7980:	8d 7f       	andi	r24, 0xFD	; 253
    7982:	8c 93       	st	X, r24

  //====================SET TO OUTPUTS =======================


  BIT_SET_HI(SIMSEL_CTRL_DDR, SIMSEL_CTRL_PIN); /* SET OUTPUT*/
    7984:	aa e0       	ldi	r26, 0x0A	; 10
    7986:	b1 e0       	ldi	r27, 0x01	; 1
    7988:	ea e0       	ldi	r30, 0x0A	; 10
    798a:	f1 e0       	ldi	r31, 0x01	; 1
    798c:	80 81       	ld	r24, Z
    798e:	88 60       	ori	r24, 0x08	; 8
    7990:	8c 93       	st	X, r24
  BIT_SET_HI(SIMSEL_CTRL_PORT, SIMSEL_CTRL_PIN); /* DEFAULT OFF */
    7992:	ab e0       	ldi	r26, 0x0B	; 11
    7994:	b1 e0       	ldi	r27, 0x01	; 1
    7996:	eb e0       	ldi	r30, 0x0B	; 11
    7998:	f1 e0       	ldi	r31, 0x01	; 1
    799a:	80 81       	ld	r24, Z
    799c:	88 60       	ori	r24, 0x08	; 8
    799e:	8c 93       	st	X, r24


  BIT_SET_HI(MDM_VCC_CTRL_DDR, MDM_VCC_CTRL_PIN); /* SET OUTPUT*/
    79a0:	a1 e0       	ldi	r26, 0x01	; 1
    79a2:	b1 e0       	ldi	r27, 0x01	; 1
    79a4:	e1 e0       	ldi	r30, 0x01	; 1
    79a6:	f1 e0       	ldi	r31, 0x01	; 1
    79a8:	80 81       	ld	r24, Z
    79aa:	80 68       	ori	r24, 0x80	; 128
    79ac:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_VCC_CTRL_PORT, MDM_VCC_CTRL_PIN); /* DEFAULT OFF */
    79ae:	a2 e0       	ldi	r26, 0x02	; 2
    79b0:	b1 e0       	ldi	r27, 0x01	; 1
    79b2:	e2 e0       	ldi	r30, 0x02	; 2
    79b4:	f1 e0       	ldi	r31, 0x01	; 1
    79b6:	80 81       	ld	r24, Z
    79b8:	80 68       	ori	r24, 0x80	; 128
    79ba:	8c 93       	st	X, r24

  BIT_SET_HI(MDM_PWR_KEY_DDR, MDM_PWR_KEY_PIN); /* OUTPUT*/
    79bc:	aa e0       	ldi	r26, 0x0A	; 10
    79be:	b1 e0       	ldi	r27, 0x01	; 1
    79c0:	ea e0       	ldi	r30, 0x0A	; 10
    79c2:	f1 e0       	ldi	r31, 0x01	; 1
    79c4:	80 81       	ld	r24, Z
    79c6:	84 60       	ori	r24, 0x04	; 4
    79c8:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_PWR_KEY_PORT, MDM_PWR_KEY_PIN); /* DEFAULT OFF BIT_SET_HI is off for P-CHANNEL FET*/
    79ca:	ab e0       	ldi	r26, 0x0B	; 11
    79cc:	b1 e0       	ldi	r27, 0x01	; 1
    79ce:	eb e0       	ldi	r30, 0x0B	; 11
    79d0:	f1 e0       	ldi	r31, 0x01	; 1
    79d2:	80 81       	ld	r24, Z
    79d4:	84 60       	ori	r24, 0x04	; 4
    79d6:	8c 93       	st	X, r24

  BIT_SET_HI(MDM_CTS_DDR, MDM_CTS_PIN);
    79d8:	a1 e0       	ldi	r26, 0x01	; 1
    79da:	b1 e0       	ldi	r27, 0x01	; 1
    79dc:	e1 e0       	ldi	r30, 0x01	; 1
    79de:	f1 e0       	ldi	r31, 0x01	; 1
    79e0:	80 81       	ld	r24, Z
    79e2:	84 60       	ori	r24, 0x04	; 4
    79e4:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_CTS_PORT, MDM_CTS_PIN);
    79e6:	a2 e0       	ldi	r26, 0x02	; 2
    79e8:	b1 e0       	ldi	r27, 0x01	; 1
    79ea:	e2 e0       	ldi	r30, 0x02	; 2
    79ec:	f1 e0       	ldi	r31, 0x01	; 1
    79ee:	80 81       	ld	r24, Z
    79f0:	84 60       	ori	r24, 0x04	; 4
    79f2:	8c 93       	st	X, r24

  BIT_SET_HI(MDM_RTS_DDR, MDM_RTS_PIN);
    79f4:	a1 e0       	ldi	r26, 0x01	; 1
    79f6:	b1 e0       	ldi	r27, 0x01	; 1
    79f8:	e1 e0       	ldi	r30, 0x01	; 1
    79fa:	f1 e0       	ldi	r31, 0x01	; 1
    79fc:	80 81       	ld	r24, Z
    79fe:	88 60       	ori	r24, 0x08	; 8
    7a00:	8c 93       	st	X, r24
  BIT_SET_HI(MDM_RTS_PORT, MDM_RTS_PIN);
    7a02:	a2 e0       	ldi	r26, 0x02	; 2
    7a04:	b1 e0       	ldi	r27, 0x01	; 1
    7a06:	e2 e0       	ldi	r30, 0x02	; 2
    7a08:	f1 e0       	ldi	r31, 0x01	; 1
    7a0a:	80 81       	ld	r24, Z
    7a0c:	88 60       	ori	r24, 0x08	; 8
    7a0e:	8c 93       	st	X, r24

  BIT_SET_HI(LED_0_DDR, LED_0_PIN); /* OUTPUT*/
    7a10:	aa e0       	ldi	r26, 0x0A	; 10
    7a12:	b1 e0       	ldi	r27, 0x01	; 1
    7a14:	ea e0       	ldi	r30, 0x0A	; 10
    7a16:	f1 e0       	ldi	r31, 0x01	; 1
    7a18:	80 81       	ld	r24, Z
    7a1a:	80 61       	ori	r24, 0x10	; 16
    7a1c:	8c 93       	st	X, r24
  BIT_SET_HI(LED_0_PORT, LED_0_PIN); /* DEFAULT OFF */
    7a1e:	ab e0       	ldi	r26, 0x0B	; 11
    7a20:	b1 e0       	ldi	r27, 0x01	; 1
    7a22:	eb e0       	ldi	r30, 0x0B	; 11
    7a24:	f1 e0       	ldi	r31, 0x01	; 1
    7a26:	80 81       	ld	r24, Z
    7a28:	80 61       	ori	r24, 0x10	; 16
    7a2a:	8c 93       	st	X, r24

  BIT_SET_HI(LED_1_DDR, LED_1_PIN); /* OUTPUT*/
    7a2c:	aa e0       	ldi	r26, 0x0A	; 10
    7a2e:	b1 e0       	ldi	r27, 0x01	; 1
    7a30:	ea e0       	ldi	r30, 0x0A	; 10
    7a32:	f1 e0       	ldi	r31, 0x01	; 1
    7a34:	80 81       	ld	r24, Z
    7a36:	80 62       	ori	r24, 0x20	; 32
    7a38:	8c 93       	st	X, r24
  BIT_SET_HI(LED_1_PORT, LED_1_PIN); /* DEFAULT OFF */
    7a3a:	ab e0       	ldi	r26, 0x0B	; 11
    7a3c:	b1 e0       	ldi	r27, 0x01	; 1
    7a3e:	eb e0       	ldi	r30, 0x0B	; 11
    7a40:	f1 e0       	ldi	r31, 0x01	; 1
    7a42:	80 81       	ld	r24, Z
    7a44:	80 62       	ori	r24, 0x20	; 32
    7a46:	8c 93       	st	X, r24

  BIT_SET_HI(LED_2_DDR, LED_2_PIN); /* OUTPUT*/
    7a48:	aa e0       	ldi	r26, 0x0A	; 10
    7a4a:	b1 e0       	ldi	r27, 0x01	; 1
    7a4c:	ea e0       	ldi	r30, 0x0A	; 10
    7a4e:	f1 e0       	ldi	r31, 0x01	; 1
    7a50:	80 81       	ld	r24, Z
    7a52:	80 64       	ori	r24, 0x40	; 64
    7a54:	8c 93       	st	X, r24
  BIT_SET_HI(LED_2_PORT, LED_2_PIN); /* DEFAULT OFF */
    7a56:	ab e0       	ldi	r26, 0x0B	; 11
    7a58:	b1 e0       	ldi	r27, 0x01	; 1
    7a5a:	eb e0       	ldi	r30, 0x0B	; 11
    7a5c:	f1 e0       	ldi	r31, 0x01	; 1
    7a5e:	80 81       	ld	r24, Z
    7a60:	80 64       	ori	r24, 0x40	; 64
    7a62:	8c 93       	st	X, r24

  BIT_SET_HI(LED_3_DDR, LED_3_PIN); /* OUTPUT*/
    7a64:	aa e0       	ldi	r26, 0x0A	; 10
    7a66:	b1 e0       	ldi	r27, 0x01	; 1
    7a68:	ea e0       	ldi	r30, 0x0A	; 10
    7a6a:	f1 e0       	ldi	r31, 0x01	; 1
    7a6c:	80 81       	ld	r24, Z
    7a6e:	80 68       	ori	r24, 0x80	; 128
    7a70:	8c 93       	st	X, r24
  BIT_SET_HI(LED_3_PORT, LED_3_PIN); /* DEFAULT OFF */
    7a72:	ab e0       	ldi	r26, 0x0B	; 11
    7a74:	b1 e0       	ldi	r27, 0x01	; 1
    7a76:	eb e0       	ldi	r30, 0x0B	; 11
    7a78:	f1 e0       	ldi	r31, 0x01	; 1
    7a7a:	80 81       	ld	r24, Z
    7a7c:	80 68       	ori	r24, 0x80	; 128
    7a7e:	8c 93       	st	X, r24

  BIT_SET_HI(DATAFLASH_CS_DDR, DATAFLASH_CS_PIN); /* OUTPUT*/
    7a80:	a4 e2       	ldi	r26, 0x24	; 36
    7a82:	b0 e0       	ldi	r27, 0x00	; 0
    7a84:	e4 e2       	ldi	r30, 0x24	; 36
    7a86:	f0 e0       	ldi	r31, 0x00	; 0
    7a88:	80 81       	ld	r24, Z
    7a8a:	81 60       	ori	r24, 0x01	; 1
    7a8c:	8c 93       	st	X, r24
  BIT_SET_HI(DATAFLASH_CS_PORT, DATAFLASH_CS_PIN); /* DEFAULT OFF */
    7a8e:	a5 e2       	ldi	r26, 0x25	; 37
    7a90:	b0 e0       	ldi	r27, 0x00	; 0
    7a92:	e5 e2       	ldi	r30, 0x25	; 37
    7a94:	f0 e0       	ldi	r31, 0x00	; 0
    7a96:	80 81       	ld	r24, Z
    7a98:	81 60       	ori	r24, 0x01	; 1
    7a9a:	8c 93       	st	X, r24
}
    7a9c:	cf 91       	pop	r28
    7a9e:	df 91       	pop	r29
    7aa0:	08 95       	ret

00007aa2 <_ZL12__iCliRetValv>:
{
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
    7aa2:	df 93       	push	r29
    7aa4:	cf 93       	push	r28
    7aa6:	cd b7       	in	r28, 0x3d	; 61
    7aa8:	de b7       	in	r29, 0x3e	; 62
{
    cli();
    7aaa:	f8 94       	cli
    return 1;
    7aac:	81 e0       	ldi	r24, 0x01	; 1
}
    7aae:	cf 91       	pop	r28
    7ab0:	df 91       	pop	r29
    7ab2:	08 95       	ret

00007ab4 <_ZL10__iRestorePKh>:
    cli();
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
    7ab4:	df 93       	push	r29
    7ab6:	cf 93       	push	r28
    7ab8:	00 d0       	rcall	.+0      	; 0x7aba <_ZL10__iRestorePKh+0x6>
    7aba:	cd b7       	in	r28, 0x3d	; 61
    7abc:	de b7       	in	r29, 0x3e	; 62
    7abe:	9a 83       	std	Y+2, r25	; 0x02
    7ac0:	89 83       	std	Y+1, r24	; 0x01
{
    SREG = *__s;
    7ac2:	ef e5       	ldi	r30, 0x5F	; 95
    7ac4:	f0 e0       	ldi	r31, 0x00	; 0
    7ac6:	a9 81       	ldd	r26, Y+1	; 0x01
    7ac8:	ba 81       	ldd	r27, Y+2	; 0x02
    7aca:	8c 91       	ld	r24, X
    7acc:	80 83       	st	Z, r24
    __asm__ volatile ("" ::: "memory");
}
    7ace:	0f 90       	pop	r0
    7ad0:	0f 90       	pop	r0
    7ad2:	cf 91       	pop	r28
    7ad4:	df 91       	pop	r29
    7ad6:	08 95       	ret

00007ad8 <_Z10TimeTickerv>:
    }
  }
  return 0;
}

void TimeTicker(void) {
    7ad8:	df 93       	push	r29
    7ada:	cf 93       	push	r28
    7adc:	cd b7       	in	r28, 0x3d	; 61
    7ade:	de b7       	in	r29, 0x3e	; 62
  Rfid.timer += TICKER_PERIOD;
    7ae0:	80 91 ff 09 	lds	r24, 0x09FF
    7ae4:	90 91 00 0a 	lds	r25, 0x0A00
    7ae8:	a0 91 01 0a 	lds	r26, 0x0A01
    7aec:	b0 91 02 0a 	lds	r27, 0x0A02
    7af0:	85 57       	subi	r24, 0x75	; 117
    7af2:	9f 4f       	sbci	r25, 0xFF	; 255
    7af4:	af 4f       	sbci	r26, 0xFF	; 255
    7af6:	bf 4f       	sbci	r27, 0xFF	; 255
    7af8:	80 93 ff 09 	sts	0x09FF, r24
    7afc:	90 93 00 0a 	sts	0x0A00, r25
    7b00:	a0 93 01 0a 	sts	0x0A01, r26
    7b04:	b0 93 02 0a 	sts	0x0A02, r27
  isr_time += TICKER_PERIOD;
    7b08:	80 91 51 0a 	lds	r24, 0x0A51
    7b0c:	90 91 52 0a 	lds	r25, 0x0A52
    7b10:	a0 91 53 0a 	lds	r26, 0x0A53
    7b14:	b0 91 54 0a 	lds	r27, 0x0A54
    7b18:	85 57       	subi	r24, 0x75	; 117
    7b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b1c:	af 4f       	sbci	r26, 0xFF	; 255
    7b1e:	bf 4f       	sbci	r27, 0xFF	; 255
    7b20:	80 93 51 0a 	sts	0x0A51, r24
    7b24:	90 93 52 0a 	sts	0x0A52, r25
    7b28:	a0 93 53 0a 	sts	0x0A53, r26
    7b2c:	b0 93 54 0a 	sts	0x0A54, r27
  Modem.isr_timer += TICKER_PERIOD;
    7b30:	80 91 a7 07 	lds	r24, 0x07A7
    7b34:	90 91 a8 07 	lds	r25, 0x07A8
    7b38:	a0 91 a9 07 	lds	r26, 0x07A9
    7b3c:	b0 91 aa 07 	lds	r27, 0x07AA
    7b40:	85 57       	subi	r24, 0x75	; 117
    7b42:	9f 4f       	sbci	r25, 0xFF	; 255
    7b44:	af 4f       	sbci	r26, 0xFF	; 255
    7b46:	bf 4f       	sbci	r27, 0xFF	; 255
    7b48:	80 93 a7 07 	sts	0x07A7, r24
    7b4c:	90 93 a8 07 	sts	0x07A8, r25
    7b50:	a0 93 a9 07 	sts	0x07A9, r26
    7b54:	b0 93 aa 07 	sts	0x07AA, r27
  Controller.timer += TICKER_PERIOD;
    7b58:	80 91 46 0a 	lds	r24, 0x0A46
    7b5c:	90 91 47 0a 	lds	r25, 0x0A47
    7b60:	a0 91 48 0a 	lds	r26, 0x0A48
    7b64:	b0 91 49 0a 	lds	r27, 0x0A49
    7b68:	85 57       	subi	r24, 0x75	; 117
    7b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b6c:	af 4f       	sbci	r26, 0xFF	; 255
    7b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    7b70:	80 93 46 0a 	sts	0x0A46, r24
    7b74:	90 93 47 0a 	sts	0x0A47, r25
    7b78:	a0 93 48 0a 	sts	0x0A48, r26
    7b7c:	b0 93 49 0a 	sts	0x0A49, r27
}
    7b80:	cf 91       	pop	r28
    7b82:	df 91       	pop	r29
    7b84:	08 95       	ret

00007b86 <__cxa_pure_virtual>:
/****************************************************************************************
 C++ work around
 ****************************************************************************************/
extern "C" void __cxa_pure_virtual(void)
    7b86:	df 93       	push	r29
    7b88:	cf 93       	push	r28
    7b8a:	cd b7       	in	r28, 0x3d	; 61
    7b8c:	de b7       	in	r29, 0x3e	; 62
    7b8e:	ff cf       	rjmp	.-2      	; 0x7b8e <__cxa_pure_virtual+0x8>

00007b90 <_Z41__static_initialization_and_destruction_0ii>:
{
  // call to a pure virtual function happened ... wow, should never happen ... stop
  while (1)
  ;
}
    7b90:	0f 93       	push	r16
    7b92:	1f 93       	push	r17
    7b94:	df 93       	push	r29
    7b96:	cf 93       	push	r28
    7b98:	00 d0       	rcall	.+0      	; 0x7b9a <_Z41__static_initialization_and_destruction_0ii+0xa>
    7b9a:	00 d0       	rcall	.+0      	; 0x7b9c <_Z41__static_initialization_and_destruction_0ii+0xc>
    7b9c:	cd b7       	in	r28, 0x3d	; 61
    7b9e:	de b7       	in	r29, 0x3e	; 62
    7ba0:	9a 83       	std	Y+2, r25	; 0x02
    7ba2:	89 83       	std	Y+1, r24	; 0x01
    7ba4:	7c 83       	std	Y+4, r23	; 0x04
    7ba6:	6b 83       	std	Y+3, r22	; 0x03
    7ba8:	89 81       	ldd	r24, Y+1	; 0x01
    7baa:	9a 81       	ldd	r25, Y+2	; 0x02
    7bac:	81 30       	cpi	r24, 0x01	; 1
    7bae:	91 05       	cpc	r25, r1
    7bb0:	09 f0       	breq	.+2      	; 0x7bb4 <_Z41__static_initialization_and_destruction_0ii+0x24>
    7bb2:	5f c0       	rjmp	.+190    	; 0x7c72 <_Z41__static_initialization_and_destruction_0ii+0xe2>
    7bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    7bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    7bb8:	2f ef       	ldi	r18, 0xFF	; 255
    7bba:	8f 3f       	cpi	r24, 0xFF	; 255
    7bbc:	92 07       	cpc	r25, r18
    7bbe:	09 f0       	breq	.+2      	; 0x7bc2 <_Z41__static_initialization_and_destruction_0ii+0x32>
    7bc0:	58 c0       	rjmp	.+176    	; 0x7c72 <_Z41__static_initialization_and_destruction_0ii+0xe2>
/****************************************************************************************/
void TimeTicker(void);


/****************************************************************************************/
CTimer Timer(0, TIMER_CLK_DIV8);
    7bc2:	86 ee       	ldi	r24, 0xE6	; 230
    7bc4:	94 e0       	ldi	r25, 0x04	; 4
    7bc6:	60 e0       	ldi	r22, 0x00	; 0
    7bc8:	42 e0       	ldi	r20, 0x02	; 2
    7bca:	0e 94 ff 47 	call	0x8ffe	; 0x8ffe <_ZN6CTimerC1Ehh>
CUART DbgUart(0,115200, 255);
    7bce:	89 ee       	ldi	r24, 0xE9	; 233
    7bd0:	94 e0       	ldi	r25, 0x04	; 4
    7bd2:	60 e0       	ldi	r22, 0x00	; 0
    7bd4:	20 e0       	ldi	r18, 0x00	; 0
    7bd6:	32 ec       	ldi	r19, 0xC2	; 194
    7bd8:	41 e0       	ldi	r20, 0x01	; 1
    7bda:	50 e0       	ldi	r21, 0x00	; 0
    7bdc:	0f ef       	ldi	r16, 0xFF	; 255
    7bde:	10 e0       	ldi	r17, 0x00	; 0
    7be0:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <_ZN5CUARTC1Ehmt>
CUART RfidUart(1,57600, 64);
    7be4:	8b e0       	ldi	r24, 0x0B	; 11
    7be6:	95 e0       	ldi	r25, 0x05	; 5
    7be8:	61 e0       	ldi	r22, 0x01	; 1
    7bea:	20 e0       	ldi	r18, 0x00	; 0
    7bec:	31 ee       	ldi	r19, 0xE1	; 225
    7bee:	40 e0       	ldi	r20, 0x00	; 0
    7bf0:	50 e0       	ldi	r21, 0x00	; 0
    7bf2:	00 e4       	ldi	r16, 0x40	; 64
    7bf4:	10 e0       	ldi	r17, 0x00	; 0
    7bf6:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <_ZN5CUARTC1Ehmt>
CUART ModemUart(2,115200, 1024);
    7bfa:	8d e2       	ldi	r24, 0x2D	; 45
    7bfc:	95 e0       	ldi	r25, 0x05	; 5
    7bfe:	62 e0       	ldi	r22, 0x02	; 2
    7c00:	20 e0       	ldi	r18, 0x00	; 0
    7c02:	32 ec       	ldi	r19, 0xC2	; 194
    7c04:	41 e0       	ldi	r20, 0x01	; 1
    7c06:	50 e0       	ldi	r21, 0x00	; 0
    7c08:	00 e0       	ldi	r16, 0x00	; 0
    7c0a:	14 e0       	ldi	r17, 0x04	; 4
    7c0c:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <_ZN5CUARTC1Ehmt>
//CModem Modem(&ModemUart,"cloete.vm.bytemark.co.uk","55555");
CModem Modem(&ModemUart);
    7c10:	8f e4       	ldi	r24, 0x4F	; 79
    7c12:	95 e0       	ldi	r25, 0x05	; 5
    7c14:	2d e2       	ldi	r18, 0x2D	; 45
    7c16:	35 e0       	ldi	r19, 0x05	; 5
    7c18:	b9 01       	movw	r22, r18
    7c1a:	0e 94 13 09 	call	0x1226	; 0x1226 <_ZN6CModemC1EP5CUART>
//CModem Modem(&ModemUart,"xdm.dyndns.org","55555",true);
//CModem Modem(&ModemUart,"www.google.com","80");
//CModem Modem(&ModemUart,"41.125.130.119","80",false);
CI2C i2c;
    7c1e:	82 e8       	ldi	r24, 0x82	; 130
    7c20:	99 e0       	ldi	r25, 0x09	; 9
    7c22:	0e 94 ad 42 	call	0x855a	; 0x855a <_ZN3I2C4CI2CC1Ev>
Crtc rtc(&i2c, 0xD0);
    7c26:	8c ea       	ldi	r24, 0xAC	; 172
    7c28:	99 e0       	ldi	r25, 0x09	; 9
    7c2a:	22 e8       	ldi	r18, 0x82	; 130
    7c2c:	39 e0       	ldi	r19, 0x09	; 9
    7c2e:	b9 01       	movw	r22, r18
    7c30:	40 ed       	ldi	r20, 0xD0	; 208
    7c32:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <_ZN4CrtcC1EPN3I2C4CI2CEh>
CServer Server(&Modem);
    7c36:	8f ea       	ldi	r24, 0xAF	; 175
    7c38:	99 e0       	ldi	r25, 0x09	; 9
    7c3a:	2f e4       	ldi	r18, 0x4F	; 79
    7c3c:	35 e0       	ldi	r19, 0x05	; 5
    7c3e:	b9 01       	movw	r22, r18
    7c40:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <_ZN7CServerC1EP6CModem>

CRFID Rfid(&RfidUart,16,&Server);
    7c44:	82 eb       	ldi	r24, 0xB2	; 178
    7c46:	99 e0       	ldi	r25, 0x09	; 9
    7c48:	2b e0       	ldi	r18, 0x0B	; 11
    7c4a:	35 e0       	ldi	r19, 0x05	; 5
    7c4c:	ef ea       	ldi	r30, 0xAF	; 175
    7c4e:	f9 e0       	ldi	r31, 0x09	; 9
    7c50:	b9 01       	movw	r22, r18
    7c52:	40 e1       	ldi	r20, 0x10	; 16
    7c54:	9f 01       	movw	r18, r30
    7c56:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <_ZN5CRFIDC1EP5CUARThP7CServer>
CController Controller(&Rfid,&Modem,&Server);
    7c5a:	83 e0       	ldi	r24, 0x03	; 3
    7c5c:	9a e0       	ldi	r25, 0x0A	; 10
    7c5e:	22 eb       	ldi	r18, 0xB2	; 178
    7c60:	39 e0       	ldi	r19, 0x09	; 9
    7c62:	4f e4       	ldi	r20, 0x4F	; 79
    7c64:	55 e0       	ldi	r21, 0x05	; 5
    7c66:	ef ea       	ldi	r30, 0xAF	; 175
    7c68:	f9 e0       	ldi	r31, 0x09	; 9
    7c6a:	b9 01       	movw	r22, r18
    7c6c:	9f 01       	movw	r18, r30
    7c6e:	0e 94 53 33 	call	0x66a6	; 0x66a6 <_ZN11CCONTROLLER11CControllerC1EP5CRFIDP6CModemP7CServer>
extern "C" void __cxa_pure_virtual(void)
{
  // call to a pure virtual function happened ... wow, should never happen ... stop
  while (1)
  ;
}
    7c72:	0f 90       	pop	r0
    7c74:	0f 90       	pop	r0
    7c76:	0f 90       	pop	r0
    7c78:	0f 90       	pop	r0
    7c7a:	cf 91       	pop	r28
    7c7c:	df 91       	pop	r29
    7c7e:	1f 91       	pop	r17
    7c80:	0f 91       	pop	r16
    7c82:	08 95       	ret

00007c84 <_GLOBAL__I_Timer>:
    7c84:	df 93       	push	r29
    7c86:	cf 93       	push	r28
    7c88:	cd b7       	in	r28, 0x3d	; 61
    7c8a:	de b7       	in	r29, 0x3e	; 62
    7c8c:	81 e0       	ldi	r24, 0x01	; 1
    7c8e:	90 e0       	ldi	r25, 0x00	; 0
    7c90:	6f ef       	ldi	r22, 0xFF	; 255
    7c92:	7f ef       	ldi	r23, 0xFF	; 255
    7c94:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <_Z41__static_initialization_and_destruction_0ii>
    7c98:	cf 91       	pop	r28
    7c9a:	df 91       	pop	r29
    7c9c:	08 95       	ret

00007c9e <main>:
CController Controller(&Rfid,&Modem,&Server);
sTimeDate rtc_time;


/****************************************************************************************/
int main(void) {
    7c9e:	df 93       	push	r29
    7ca0:	cf 93       	push	r28
    7ca2:	cd b7       	in	r28, 0x3d	; 61
    7ca4:	de b7       	in	r29, 0x3e	; 62
    7ca6:	29 97       	sbiw	r28, 0x09	; 9
    7ca8:	0f b6       	in	r0, 0x3f	; 63
    7caa:	f8 94       	cli
    7cac:	de bf       	out	0x3e, r29	; 62
    7cae:	0f be       	out	0x3f, r0	; 63
    7cb0:	cd bf       	out	0x3d, r28	; 61
  //=== Enable the External RAM
  //BIT_SET_HI(XMCRA, SRE);
  InitIOPins();
    7cb2:	0e 94 42 3c 	call	0x7884	; 0x7884 <_Z10InitIOPinsv>
  WDTCSR = 0x00;// Disable Watchdog for now
    7cb6:	e0 e6       	ldi	r30, 0x60	; 96
    7cb8:	f0 e0       	ldi	r31, 0x00	; 0
    7cba:	10 82       	st	Z, r1
  Timer.attach(TimeTicker);
    7cbc:	86 ee       	ldi	r24, 0xE6	; 230
    7cbe:	94 e0       	ldi	r25, 0x04	; 4
    7cc0:	2c e6       	ldi	r18, 0x6C	; 108
    7cc2:	3d e3       	ldi	r19, 0x3D	; 61
    7cc4:	b9 01       	movw	r22, r18
    7cc6:	0e 94 8c 48 	call	0x9118	; 0x9118 <_ZN6CTimer6attachEPFvvE>
  sei();
    7cca:	78 94       	sei
  DbgUart.sendStr_P(PSTR("\x1B[2J"));//Clear Screen
    7ccc:	22 e9       	ldi	r18, 0x92	; 146
    7cce:	39 e0       	ldi	r19, 0x09	; 9
    7cd0:	89 ee       	ldi	r24, 0xE9	; 233
    7cd2:	94 e0       	ldi	r25, 0x04	; 4
    7cd4:	b9 01       	movw	r22, r18
    7cd6:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P(PSTR("\x1B[0;0H"));//Position Cursor
    7cda:	2b e8       	ldi	r18, 0x8B	; 139
    7cdc:	39 e0       	ldi	r19, 0x09	; 9
    7cde:	89 ee       	ldi	r24, 0xE9	; 233
    7ce0:	94 e0       	ldi	r25, 0x04	; 4
    7ce2:	b9 01       	movw	r22, r18
    7ce4:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr_P(PSTR("\n\r  ===== CULLINAN RFID MANAGER V1.5 DEMO ===== \n\r"));
    7ce8:	28 e5       	ldi	r18, 0x58	; 88
    7cea:	39 e0       	ldi	r19, 0x09	; 9
    7cec:	89 ee       	ldi	r24, 0xE9	; 233
    7cee:	94 e0       	ldi	r25, 0x04	; 4
    7cf0:	b9 01       	movw	r22, r18
    7cf2:	0e 94 21 4d 	call	0x9a42	; 0x9a42 <_ZN5CUART9sendStr_PEPKc>
  DbgUart.sendStr(rtc.getTimestamp());
    7cf6:	8c ea       	ldi	r24, 0xAC	; 172
    7cf8:	99 e0       	ldi	r25, 0x09	; 9
    7cfa:	0e 94 72 20 	call	0x40e4	; 0x40e4 <_ZN4Crtc12getTimestampEv>
    7cfe:	9c 01       	movw	r18, r24
    7d00:	89 ee       	ldi	r24, 0xE9	; 233
    7d02:	94 e0       	ldi	r25, 0x04	; 4
    7d04:	b9 01       	movw	r22, r18
    7d06:	0e 94 b9 50 	call	0xa172	; 0xa172 <_ZN5CUART7sendStrEPc>

  Controller.Setup();
    7d0a:	83 e0       	ldi	r24, 0x03	; 3
    7d0c:	9a e0       	ldi	r25, 0x0A	; 10
    7d0e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <_ZN11CCONTROLLER11CController5SetupEv>

  while (1) {
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {time = isr_time;}
    7d12:	ef e5       	ldi	r30, 0x5F	; 95
    7d14:	f0 e0       	ldi	r31, 0x00	; 0
    7d16:	80 81       	ld	r24, Z
    7d18:	8b 83       	std	Y+3, r24	; 0x03
    7d1a:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZL12__iCliRetValv>
    7d1e:	8a 83       	std	Y+2, r24	; 0x02
    7d20:	11 c0       	rjmp	.+34     	; 0x7d44 <main+0xa6>
    7d22:	80 91 51 0a 	lds	r24, 0x0A51
    7d26:	90 91 52 0a 	lds	r25, 0x0A52
    7d2a:	a0 91 53 0a 	lds	r26, 0x0A53
    7d2e:	b0 91 54 0a 	lds	r27, 0x0A54
    7d32:	80 93 55 0a 	sts	0x0A55, r24
    7d36:	90 93 56 0a 	sts	0x0A56, r25
    7d3a:	a0 93 57 0a 	sts	0x0A57, r26
    7d3e:	b0 93 58 0a 	sts	0x0A58, r27
    7d42:	1a 82       	std	Y+2, r1	; 0x02
    7d44:	8a 81       	ldd	r24, Y+2	; 0x02
    7d46:	88 23       	and	r24, r24
    7d48:	61 f7       	brne	.-40     	; 0x7d22 <main+0x84>
    7d4a:	ce 01       	movw	r24, r28
    7d4c:	03 96       	adiw	r24, 0x03	; 3
    7d4e:	0e 94 5a 3d 	call	0x7ab4	; 0x7ab4 <_ZL10__iRestorePKh>
    Rfid.Service();
    7d52:	82 eb       	ldi	r24, 0xB2	; 178
    7d54:	99 e0       	ldi	r25, 0x09	; 9
    7d56:	0e 94 35 1b 	call	0x366a	; 0x366a <_ZN5CRFID7ServiceEv>
    Controller.Service();
    7d5a:	83 e0       	ldi	r24, 0x03	; 3
    7d5c:	9a e0       	ldi	r25, 0x0A	; 10
    7d5e:	0e 94 35 33 	call	0x666a	; 0x666a <_ZN11CCONTROLLER11CController7ServiceEv>
    if (time > 200000) {
    7d62:	80 91 55 0a 	lds	r24, 0x0A55
    7d66:	90 91 56 0a 	lds	r25, 0x0A56
    7d6a:	a0 91 57 0a 	lds	r26, 0x0A57
    7d6e:	b0 91 58 0a 	lds	r27, 0x0A58
    7d72:	19 86       	std	Y+9, r1	; 0x09
    7d74:	81 34       	cpi	r24, 0x41	; 65
    7d76:	2d e0       	ldi	r18, 0x0D	; 13
    7d78:	92 07       	cpc	r25, r18
    7d7a:	23 e0       	ldi	r18, 0x03	; 3
    7d7c:	a2 07       	cpc	r26, r18
    7d7e:	20 e0       	ldi	r18, 0x00	; 0
    7d80:	b2 07       	cpc	r27, r18
    7d82:	10 f0       	brcs	.+4      	; 0x7d88 <main+0xea>
    7d84:	81 e0       	ldi	r24, 0x01	; 1
    7d86:	89 87       	std	Y+9, r24	; 0x09
    7d88:	29 85       	ldd	r18, Y+9	; 0x09
    7d8a:	22 23       	and	r18, r18
    7d8c:	11 f2       	breq	.-124    	; 0x7d12 <main+0x74>
      time = 0;
    7d8e:	10 92 55 0a 	sts	0x0A55, r1
    7d92:	10 92 56 0a 	sts	0x0A56, r1
    7d96:	10 92 57 0a 	sts	0x0A57, r1
    7d9a:	10 92 58 0a 	sts	0x0A58, r1

      ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {isr_time = 0;}
    7d9e:	ef e5       	ldi	r30, 0x5F	; 95
    7da0:	f0 e0       	ldi	r31, 0x00	; 0
    7da2:	80 81       	ld	r24, Z
    7da4:	8c 83       	std	Y+4, r24	; 0x04
    7da6:	0e 94 51 3d 	call	0x7aa2	; 0x7aa2 <_ZL12__iCliRetValv>
    7daa:	89 83       	std	Y+1, r24	; 0x01
    7dac:	09 c0       	rjmp	.+18     	; 0x7dc0 <main+0x122>
    7dae:	10 92 51 0a 	sts	0x0A51, r1
    7db2:	10 92 52 0a 	sts	0x0A52, r1
    7db6:	10 92 53 0a 	sts	0x0A53, r1
    7dba:	10 92 54 0a 	sts	0x0A54, r1
    7dbe:	19 82       	std	Y+1, r1	; 0x01
    7dc0:	89 81       	ldd	r24, Y+1	; 0x01
    7dc2:	88 23       	and	r24, r24
    7dc4:	a1 f7       	brne	.-24     	; 0x7dae <main+0x110>
    7dc6:	ce 01       	movw	r24, r28
    7dc8:	04 96       	adiw	r24, 0x04	; 4
    7dca:	0e 94 5a 3d 	call	0x7ab4	; 0x7ab4 <_ZL10__iRestorePKh>
      LED_3_TOGGLE();
    7dce:	eb e0       	ldi	r30, 0x0B	; 11
    7dd0:	f1 e0       	ldi	r31, 0x01	; 1
    7dd2:	80 81       	ld	r24, Z
    7dd4:	18 86       	std	Y+8, r1	; 0x08
    7dd6:	88 23       	and	r24, r24
    7dd8:	14 f4       	brge	.+4      	; 0x7dde <main+0x140>
    7dda:	81 e0       	ldi	r24, 0x01	; 1
    7ddc:	88 87       	std	Y+8, r24	; 0x08
    7dde:	28 85       	ldd	r18, Y+8	; 0x08
    7de0:	22 23       	and	r18, r18
    7de2:	41 f0       	breq	.+16     	; 0x7df4 <main+0x156>
    7de4:	ab e0       	ldi	r26, 0x0B	; 11
    7de6:	b1 e0       	ldi	r27, 0x01	; 1
    7de8:	eb e0       	ldi	r30, 0x0B	; 11
    7dea:	f1 e0       	ldi	r31, 0x01	; 1
    7dec:	80 81       	ld	r24, Z
    7dee:	8f 77       	andi	r24, 0x7F	; 127
    7df0:	8c 93       	st	X, r24
    7df2:	07 c0       	rjmp	.+14     	; 0x7e02 <main+0x164>
    7df4:	ab e0       	ldi	r26, 0x0B	; 11
    7df6:	b1 e0       	ldi	r27, 0x01	; 1
    7df8:	eb e0       	ldi	r30, 0x0B	; 11
    7dfa:	f1 e0       	ldi	r31, 0x01	; 1
    7dfc:	80 81       	ld	r24, Z
    7dfe:	80 68       	ori	r24, 0x80	; 128
    7e00:	8c 93       	st	X, r24
      if(Modem.simcard_ok){
    7e02:	80 91 7a 07 	lds	r24, 0x077A
    7e06:	88 23       	and	r24, r24
    7e08:	f9 f0       	breq	.+62     	; 0x7e48 <main+0x1aa>
        LED_0_TOGGLE();
    7e0a:	eb e0       	ldi	r30, 0x0B	; 11
    7e0c:	f1 e0       	ldi	r31, 0x01	; 1
    7e0e:	80 81       	ld	r24, Z
    7e10:	88 2f       	mov	r24, r24
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	80 71       	andi	r24, 0x10	; 16
    7e16:	90 70       	andi	r25, 0x00	; 0
    7e18:	1f 82       	std	Y+7, r1	; 0x07
    7e1a:	00 97       	sbiw	r24, 0x00	; 0
    7e1c:	11 f0       	breq	.+4      	; 0x7e22 <main+0x184>
    7e1e:	81 e0       	ldi	r24, 0x01	; 1
    7e20:	8f 83       	std	Y+7, r24	; 0x07
    7e22:	2f 81       	ldd	r18, Y+7	; 0x07
    7e24:	22 23       	and	r18, r18
    7e26:	41 f0       	breq	.+16     	; 0x7e38 <main+0x19a>
    7e28:	ab e0       	ldi	r26, 0x0B	; 11
    7e2a:	b1 e0       	ldi	r27, 0x01	; 1
    7e2c:	eb e0       	ldi	r30, 0x0B	; 11
    7e2e:	f1 e0       	ldi	r31, 0x01	; 1
    7e30:	80 81       	ld	r24, Z
    7e32:	8f 7e       	andi	r24, 0xEF	; 239
    7e34:	8c 93       	st	X, r24
    7e36:	0f c0       	rjmp	.+30     	; 0x7e56 <main+0x1b8>
    7e38:	ab e0       	ldi	r26, 0x0B	; 11
    7e3a:	b1 e0       	ldi	r27, 0x01	; 1
    7e3c:	eb e0       	ldi	r30, 0x0B	; 11
    7e3e:	f1 e0       	ldi	r31, 0x01	; 1
    7e40:	80 81       	ld	r24, Z
    7e42:	80 61       	ori	r24, 0x10	; 16
    7e44:	8c 93       	st	X, r24
    7e46:	07 c0       	rjmp	.+14     	; 0x7e56 <main+0x1b8>
      }else{
        LED_0_OFF();
    7e48:	ab e0       	ldi	r26, 0x0B	; 11
    7e4a:	b1 e0       	ldi	r27, 0x01	; 1
    7e4c:	eb e0       	ldi	r30, 0x0B	; 11
    7e4e:	f1 e0       	ldi	r31, 0x01	; 1
    7e50:	80 81       	ld	r24, Z
    7e52:	80 61       	ori	r24, 0x10	; 16
    7e54:	8c 93       	st	X, r24
      }
      if(Modem.signal_ok){
    7e56:	80 91 7b 07 	lds	r24, 0x077B
    7e5a:	88 23       	and	r24, r24
    7e5c:	f9 f0       	breq	.+62     	; 0x7e9c <main+0x1fe>
        LED_1_TOGGLE();
    7e5e:	eb e0       	ldi	r30, 0x0B	; 11
    7e60:	f1 e0       	ldi	r31, 0x01	; 1
    7e62:	80 81       	ld	r24, Z
    7e64:	88 2f       	mov	r24, r24
    7e66:	90 e0       	ldi	r25, 0x00	; 0
    7e68:	80 72       	andi	r24, 0x20	; 32
    7e6a:	90 70       	andi	r25, 0x00	; 0
    7e6c:	1e 82       	std	Y+6, r1	; 0x06
    7e6e:	00 97       	sbiw	r24, 0x00	; 0
    7e70:	11 f0       	breq	.+4      	; 0x7e76 <main+0x1d8>
    7e72:	81 e0       	ldi	r24, 0x01	; 1
    7e74:	8e 83       	std	Y+6, r24	; 0x06
    7e76:	2e 81       	ldd	r18, Y+6	; 0x06
    7e78:	22 23       	and	r18, r18
    7e7a:	41 f0       	breq	.+16     	; 0x7e8c <main+0x1ee>
    7e7c:	ab e0       	ldi	r26, 0x0B	; 11
    7e7e:	b1 e0       	ldi	r27, 0x01	; 1
    7e80:	eb e0       	ldi	r30, 0x0B	; 11
    7e82:	f1 e0       	ldi	r31, 0x01	; 1
    7e84:	80 81       	ld	r24, Z
    7e86:	8f 7d       	andi	r24, 0xDF	; 223
    7e88:	8c 93       	st	X, r24
    7e8a:	0f c0       	rjmp	.+30     	; 0x7eaa <main+0x20c>
    7e8c:	ab e0       	ldi	r26, 0x0B	; 11
    7e8e:	b1 e0       	ldi	r27, 0x01	; 1
    7e90:	eb e0       	ldi	r30, 0x0B	; 11
    7e92:	f1 e0       	ldi	r31, 0x01	; 1
    7e94:	80 81       	ld	r24, Z
    7e96:	80 62       	ori	r24, 0x20	; 32
    7e98:	8c 93       	st	X, r24
    7e9a:	07 c0       	rjmp	.+14     	; 0x7eaa <main+0x20c>
      }else{
        LED_1_OFF();
    7e9c:	ab e0       	ldi	r26, 0x0B	; 11
    7e9e:	b1 e0       	ldi	r27, 0x01	; 1
    7ea0:	eb e0       	ldi	r30, 0x0B	; 11
    7ea2:	f1 e0       	ldi	r31, 0x01	; 1
    7ea4:	80 81       	ld	r24, Z
    7ea6:	80 62       	ori	r24, 0x20	; 32
    7ea8:	8c 93       	st	X, r24
      }
      if(Modem.connect_ok){
    7eaa:	80 91 7c 07 	lds	r24, 0x077C
    7eae:	88 23       	and	r24, r24
    7eb0:	f9 f0       	breq	.+62     	; 0x7ef0 <main+0x252>
        LED_2_TOGGLE();
    7eb2:	eb e0       	ldi	r30, 0x0B	; 11
    7eb4:	f1 e0       	ldi	r31, 0x01	; 1
    7eb6:	80 81       	ld	r24, Z
    7eb8:	88 2f       	mov	r24, r24
    7eba:	90 e0       	ldi	r25, 0x00	; 0
    7ebc:	80 74       	andi	r24, 0x40	; 64
    7ebe:	90 70       	andi	r25, 0x00	; 0
    7ec0:	1d 82       	std	Y+5, r1	; 0x05
    7ec2:	00 97       	sbiw	r24, 0x00	; 0
    7ec4:	11 f0       	breq	.+4      	; 0x7eca <main+0x22c>
    7ec6:	81 e0       	ldi	r24, 0x01	; 1
    7ec8:	8d 83       	std	Y+5, r24	; 0x05
    7eca:	2d 81       	ldd	r18, Y+5	; 0x05
    7ecc:	22 23       	and	r18, r18
    7ece:	41 f0       	breq	.+16     	; 0x7ee0 <main+0x242>
    7ed0:	ab e0       	ldi	r26, 0x0B	; 11
    7ed2:	b1 e0       	ldi	r27, 0x01	; 1
    7ed4:	eb e0       	ldi	r30, 0x0B	; 11
    7ed6:	f1 e0       	ldi	r31, 0x01	; 1
    7ed8:	80 81       	ld	r24, Z
    7eda:	8f 7b       	andi	r24, 0xBF	; 191
    7edc:	8c 93       	st	X, r24
    7ede:	19 cf       	rjmp	.-462    	; 0x7d12 <main+0x74>
    7ee0:	ab e0       	ldi	r26, 0x0B	; 11
    7ee2:	b1 e0       	ldi	r27, 0x01	; 1
    7ee4:	eb e0       	ldi	r30, 0x0B	; 11
    7ee6:	f1 e0       	ldi	r31, 0x01	; 1
    7ee8:	80 81       	ld	r24, Z
    7eea:	80 64       	ori	r24, 0x40	; 64
    7eec:	8c 93       	st	X, r24
    7eee:	11 cf       	rjmp	.-478    	; 0x7d12 <main+0x74>
      } else {
        LED_2_OFF();
    7ef0:	ab e0       	ldi	r26, 0x0B	; 11
    7ef2:	b1 e0       	ldi	r27, 0x01	; 1
    7ef4:	eb e0       	ldi	r30, 0x0B	; 11
    7ef6:	f1 e0       	ldi	r31, 0x01	; 1
    7ef8:	80 81       	ld	r24, Z
    7efa:	80 64       	ori	r24, 0x40	; 64
    7efc:	8c 93       	st	X, r24
    7efe:	09 cf       	rjmp	.-494    	; 0x7d12 <main+0x74>

00007f00 <_ZN5CFIFOC2Ev>:
 *      Author: Wouter
 */
#include <stdlib.h>
#include "CFIFO.h"

CFIFO::CFIFO(void) {
    7f00:	df 93       	push	r29
    7f02:	cf 93       	push	r28
    7f04:	00 d0       	rcall	.+0      	; 0x7f06 <_ZN5CFIFOC2Ev+0x6>
    7f06:	cd b7       	in	r28, 0x3d	; 61
    7f08:	de b7       	in	r29, 0x3e	; 62
    7f0a:	9a 83       	std	Y+2, r25	; 0x02
    7f0c:	89 83       	std	Y+1, r24	; 0x01
  size = 0;
    7f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f10:	fa 81       	ldd	r31, Y+2	; 0x02
    7f12:	17 82       	std	Z+7, r1	; 0x07
    7f14:	16 82       	std	Z+6, r1	; 0x06
  headIndex = 0;
    7f16:	e9 81       	ldd	r30, Y+1	; 0x01
    7f18:	fa 81       	ldd	r31, Y+2	; 0x02
    7f1a:	11 82       	std	Z+1, r1	; 0x01
    7f1c:	10 82       	st	Z, r1
  tailIndex = 0;
    7f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f20:	fa 81       	ldd	r31, Y+2	; 0x02
    7f22:	13 82       	std	Z+3, r1	; 0x03
    7f24:	12 82       	std	Z+2, r1	; 0x02
  healthy = true;
    7f26:	e9 81       	ldd	r30, Y+1	; 0x01
    7f28:	fa 81       	ldd	r31, Y+2	; 0x02
    7f2a:	81 e0       	ldi	r24, 0x01	; 1
    7f2c:	80 87       	std	Z+8, r24	; 0x08
  buffer = 0;
    7f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f30:	fa 81       	ldd	r31, Y+2	; 0x02
    7f32:	15 82       	std	Z+5, r1	; 0x05
    7f34:	14 82       	std	Z+4, r1	; 0x04
}
    7f36:	0f 90       	pop	r0
    7f38:	0f 90       	pop	r0
    7f3a:	cf 91       	pop	r28
    7f3c:	df 91       	pop	r29
    7f3e:	08 95       	ret

00007f40 <_ZN5CFIFOC1Ev>:
 *      Author: Wouter
 */
#include <stdlib.h>
#include "CFIFO.h"

CFIFO::CFIFO(void) {
    7f40:	df 93       	push	r29
    7f42:	cf 93       	push	r28
    7f44:	00 d0       	rcall	.+0      	; 0x7f46 <_ZN5CFIFOC1Ev+0x6>
    7f46:	cd b7       	in	r28, 0x3d	; 61
    7f48:	de b7       	in	r29, 0x3e	; 62
    7f4a:	9a 83       	std	Y+2, r25	; 0x02
    7f4c:	89 83       	std	Y+1, r24	; 0x01
  size = 0;
    7f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f50:	fa 81       	ldd	r31, Y+2	; 0x02
    7f52:	17 82       	std	Z+7, r1	; 0x07
    7f54:	16 82       	std	Z+6, r1	; 0x06
  headIndex = 0;
    7f56:	e9 81       	ldd	r30, Y+1	; 0x01
    7f58:	fa 81       	ldd	r31, Y+2	; 0x02
    7f5a:	11 82       	std	Z+1, r1	; 0x01
    7f5c:	10 82       	st	Z, r1
  tailIndex = 0;
    7f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f60:	fa 81       	ldd	r31, Y+2	; 0x02
    7f62:	13 82       	std	Z+3, r1	; 0x03
    7f64:	12 82       	std	Z+2, r1	; 0x02
  healthy = true;
    7f66:	e9 81       	ldd	r30, Y+1	; 0x01
    7f68:	fa 81       	ldd	r31, Y+2	; 0x02
    7f6a:	81 e0       	ldi	r24, 0x01	; 1
    7f6c:	80 87       	std	Z+8, r24	; 0x08
  buffer = 0;
    7f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    7f70:	fa 81       	ldd	r31, Y+2	; 0x02
    7f72:	15 82       	std	Z+5, r1	; 0x05
    7f74:	14 82       	std	Z+4, r1	; 0x04
}
    7f76:	0f 90       	pop	r0
    7f78:	0f 90       	pop	r0
    7f7a:	cf 91       	pop	r28
    7f7c:	df 91       	pop	r29
    7f7e:	08 95       	ret

00007f80 <_ZN5CFIFO5spaceEv>:
  }
  size = _size;
  return true;
}

u16 CFIFO::space(void) {
    7f80:	df 93       	push	r29
    7f82:	cf 93       	push	r28
    7f84:	00 d0       	rcall	.+0      	; 0x7f86 <_ZN5CFIFO5spaceEv+0x6>
    7f86:	00 d0       	rcall	.+0      	; 0x7f88 <_ZN5CFIFO5spaceEv+0x8>
    7f88:	0f 92       	push	r0
    7f8a:	cd b7       	in	r28, 0x3d	; 61
    7f8c:	de b7       	in	r29, 0x3e	; 62
    7f8e:	9c 83       	std	Y+4, r25	; 0x04
    7f90:	8b 83       	std	Y+3, r24	; 0x03
  u16 used = 0;
    7f92:	1a 82       	std	Y+2, r1	; 0x02
    7f94:	19 82       	std	Y+1, r1	; 0x01
  if (headIndex >= tailIndex)
    7f96:	eb 81       	ldd	r30, Y+3	; 0x03
    7f98:	fc 81       	ldd	r31, Y+4	; 0x04
    7f9a:	20 81       	ld	r18, Z
    7f9c:	31 81       	ldd	r19, Z+1	; 0x01
    7f9e:	eb 81       	ldd	r30, Y+3	; 0x03
    7fa0:	fc 81       	ldd	r31, Y+4	; 0x04
    7fa2:	82 81       	ldd	r24, Z+2	; 0x02
    7fa4:	93 81       	ldd	r25, Z+3	; 0x03
    7fa6:	1d 82       	std	Y+5, r1	; 0x05
    7fa8:	28 17       	cp	r18, r24
    7faa:	39 07       	cpc	r19, r25
    7fac:	10 f0       	brcs	.+4      	; 0x7fb2 <_ZN5CFIFO5spaceEv+0x32>
    7fae:	41 e0       	ldi	r20, 0x01	; 1
    7fb0:	4d 83       	std	Y+5, r20	; 0x05
    7fb2:	5d 81       	ldd	r21, Y+5	; 0x05
    7fb4:	55 23       	and	r21, r21
    7fb6:	79 f0       	breq	.+30     	; 0x7fd6 <_ZN5CFIFO5spaceEv+0x56>
    used = headIndex - tailIndex;
    7fb8:	eb 81       	ldd	r30, Y+3	; 0x03
    7fba:	fc 81       	ldd	r31, Y+4	; 0x04
    7fbc:	20 81       	ld	r18, Z
    7fbe:	31 81       	ldd	r19, Z+1	; 0x01
    7fc0:	eb 81       	ldd	r30, Y+3	; 0x03
    7fc2:	fc 81       	ldd	r31, Y+4	; 0x04
    7fc4:	82 81       	ldd	r24, Z+2	; 0x02
    7fc6:	93 81       	ldd	r25, Z+3	; 0x03
    7fc8:	a9 01       	movw	r20, r18
    7fca:	48 1b       	sub	r20, r24
    7fcc:	59 0b       	sbc	r21, r25
    7fce:	ca 01       	movw	r24, r20
    7fd0:	9a 83       	std	Y+2, r25	; 0x02
    7fd2:	89 83       	std	Y+1, r24	; 0x01
    7fd4:	14 c0       	rjmp	.+40     	; 0x7ffe <_ZN5CFIFO5spaceEv+0x7e>
  else
    used = size + headIndex - tailIndex;
    7fd6:	eb 81       	ldd	r30, Y+3	; 0x03
    7fd8:	fc 81       	ldd	r31, Y+4	; 0x04
    7fda:	26 81       	ldd	r18, Z+6	; 0x06
    7fdc:	37 81       	ldd	r19, Z+7	; 0x07
    7fde:	eb 81       	ldd	r30, Y+3	; 0x03
    7fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    7fe2:	80 81       	ld	r24, Z
    7fe4:	91 81       	ldd	r25, Z+1	; 0x01
    7fe6:	28 0f       	add	r18, r24
    7fe8:	39 1f       	adc	r19, r25
    7fea:	eb 81       	ldd	r30, Y+3	; 0x03
    7fec:	fc 81       	ldd	r31, Y+4	; 0x04
    7fee:	82 81       	ldd	r24, Z+2	; 0x02
    7ff0:	93 81       	ldd	r25, Z+3	; 0x03
    7ff2:	a9 01       	movw	r20, r18
    7ff4:	48 1b       	sub	r20, r24
    7ff6:	59 0b       	sbc	r21, r25
    7ff8:	ca 01       	movw	r24, r20
    7ffa:	9a 83       	std	Y+2, r25	; 0x02
    7ffc:	89 83       	std	Y+1, r24	; 0x01
  return (size-used-1);
    7ffe:	eb 81       	ldd	r30, Y+3	; 0x03
    8000:	fc 81       	ldd	r31, Y+4	; 0x04
    8002:	26 81       	ldd	r18, Z+6	; 0x06
    8004:	37 81       	ldd	r19, Z+7	; 0x07
    8006:	89 81       	ldd	r24, Y+1	; 0x01
    8008:	9a 81       	ldd	r25, Y+2	; 0x02
    800a:	a9 01       	movw	r20, r18
    800c:	48 1b       	sub	r20, r24
    800e:	59 0b       	sbc	r21, r25
    8010:	ca 01       	movw	r24, r20
    8012:	01 97       	sbiw	r24, 0x01	; 1
}
    8014:	0f 90       	pop	r0
    8016:	0f 90       	pop	r0
    8018:	0f 90       	pop	r0
    801a:	0f 90       	pop	r0
    801c:	0f 90       	pop	r0
    801e:	cf 91       	pop	r28
    8020:	df 91       	pop	r29
    8022:	08 95       	ret

00008024 <_ZN5CFIFO8receivedEv>:

u16 CFIFO::received(void) {
    8024:	df 93       	push	r29
    8026:	cf 93       	push	r28
    8028:	00 d0       	rcall	.+0      	; 0x802a <_ZN5CFIFO8receivedEv+0x6>
    802a:	00 d0       	rcall	.+0      	; 0x802c <_ZN5CFIFO8receivedEv+0x8>
    802c:	0f 92       	push	r0
    802e:	cd b7       	in	r28, 0x3d	; 61
    8030:	de b7       	in	r29, 0x3e	; 62
    8032:	9c 83       	std	Y+4, r25	; 0x04
    8034:	8b 83       	std	Y+3, r24	; 0x03
  u16 used = 0;
    8036:	1a 82       	std	Y+2, r1	; 0x02
    8038:	19 82       	std	Y+1, r1	; 0x01
  if (headIndex >= tailIndex)
    803a:	eb 81       	ldd	r30, Y+3	; 0x03
    803c:	fc 81       	ldd	r31, Y+4	; 0x04
    803e:	20 81       	ld	r18, Z
    8040:	31 81       	ldd	r19, Z+1	; 0x01
    8042:	eb 81       	ldd	r30, Y+3	; 0x03
    8044:	fc 81       	ldd	r31, Y+4	; 0x04
    8046:	82 81       	ldd	r24, Z+2	; 0x02
    8048:	93 81       	ldd	r25, Z+3	; 0x03
    804a:	1d 82       	std	Y+5, r1	; 0x05
    804c:	28 17       	cp	r18, r24
    804e:	39 07       	cpc	r19, r25
    8050:	10 f0       	brcs	.+4      	; 0x8056 <_ZN5CFIFO8receivedEv+0x32>
    8052:	41 e0       	ldi	r20, 0x01	; 1
    8054:	4d 83       	std	Y+5, r20	; 0x05
    8056:	5d 81       	ldd	r21, Y+5	; 0x05
    8058:	55 23       	and	r21, r21
    805a:	79 f0       	breq	.+30     	; 0x807a <_ZN5CFIFO8receivedEv+0x56>
    used = headIndex - tailIndex;
    805c:	eb 81       	ldd	r30, Y+3	; 0x03
    805e:	fc 81       	ldd	r31, Y+4	; 0x04
    8060:	20 81       	ld	r18, Z
    8062:	31 81       	ldd	r19, Z+1	; 0x01
    8064:	eb 81       	ldd	r30, Y+3	; 0x03
    8066:	fc 81       	ldd	r31, Y+4	; 0x04
    8068:	82 81       	ldd	r24, Z+2	; 0x02
    806a:	93 81       	ldd	r25, Z+3	; 0x03
    806c:	a9 01       	movw	r20, r18
    806e:	48 1b       	sub	r20, r24
    8070:	59 0b       	sbc	r21, r25
    8072:	ca 01       	movw	r24, r20
    8074:	9a 83       	std	Y+2, r25	; 0x02
    8076:	89 83       	std	Y+1, r24	; 0x01
    8078:	14 c0       	rjmp	.+40     	; 0x80a2 <_ZN5CFIFO8receivedEv+0x7e>
  else
    used = size + headIndex - tailIndex;
    807a:	eb 81       	ldd	r30, Y+3	; 0x03
    807c:	fc 81       	ldd	r31, Y+4	; 0x04
    807e:	26 81       	ldd	r18, Z+6	; 0x06
    8080:	37 81       	ldd	r19, Z+7	; 0x07
    8082:	eb 81       	ldd	r30, Y+3	; 0x03
    8084:	fc 81       	ldd	r31, Y+4	; 0x04
    8086:	80 81       	ld	r24, Z
    8088:	91 81       	ldd	r25, Z+1	; 0x01
    808a:	28 0f       	add	r18, r24
    808c:	39 1f       	adc	r19, r25
    808e:	eb 81       	ldd	r30, Y+3	; 0x03
    8090:	fc 81       	ldd	r31, Y+4	; 0x04
    8092:	82 81       	ldd	r24, Z+2	; 0x02
    8094:	93 81       	ldd	r25, Z+3	; 0x03
    8096:	a9 01       	movw	r20, r18
    8098:	48 1b       	sub	r20, r24
    809a:	59 0b       	sbc	r21, r25
    809c:	ca 01       	movw	r24, r20
    809e:	9a 83       	std	Y+2, r25	; 0x02
    80a0:	89 83       	std	Y+1, r24	; 0x01
  return (used);
    80a2:	89 81       	ldd	r24, Y+1	; 0x01
    80a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    80a6:	0f 90       	pop	r0
    80a8:	0f 90       	pop	r0
    80aa:	0f 90       	pop	r0
    80ac:	0f 90       	pop	r0
    80ae:	0f 90       	pop	r0
    80b0:	cf 91       	pop	r28
    80b2:	df 91       	pop	r29
    80b4:	08 95       	ret

000080b6 <_ZN5CFIFO3addEPht>:

u16 CFIFO::add(u08 *src, u16 numBytes) {
    80b6:	df 93       	push	r29
    80b8:	cf 93       	push	r28
    80ba:	cd b7       	in	r28, 0x3d	; 61
    80bc:	de b7       	in	r29, 0x3e	; 62
    80be:	2b 97       	sbiw	r28, 0x0b	; 11
    80c0:	0f b6       	in	r0, 0x3f	; 63
    80c2:	f8 94       	cli
    80c4:	de bf       	out	0x3e, r29	; 62
    80c6:	0f be       	out	0x3f, r0	; 63
    80c8:	cd bf       	out	0x3d, r28	; 61
    80ca:	9e 83       	std	Y+6, r25	; 0x06
    80cc:	8d 83       	std	Y+5, r24	; 0x05
    80ce:	78 87       	std	Y+8, r23	; 0x08
    80d0:	6f 83       	std	Y+7, r22	; 0x07
    80d2:	5a 87       	std	Y+10, r21	; 0x0a
    80d4:	49 87       	std	Y+9, r20	; 0x09
  u16 cnt = 0;
    80d6:	1c 82       	std	Y+4, r1	; 0x04
    80d8:	1b 82       	std	Y+3, r1	; 0x03
  u16 used = 0;
    80da:	1a 82       	std	Y+2, r1	; 0x02
    80dc:	19 82       	std	Y+1, r1	; 0x01
  if (headIndex >= tailIndex)
    80de:	ed 81       	ldd	r30, Y+5	; 0x05
    80e0:	fe 81       	ldd	r31, Y+6	; 0x06
    80e2:	20 81       	ld	r18, Z
    80e4:	31 81       	ldd	r19, Z+1	; 0x01
    80e6:	ed 81       	ldd	r30, Y+5	; 0x05
    80e8:	fe 81       	ldd	r31, Y+6	; 0x06
    80ea:	82 81       	ldd	r24, Z+2	; 0x02
    80ec:	93 81       	ldd	r25, Z+3	; 0x03
    80ee:	1b 86       	std	Y+11, r1	; 0x0b
    80f0:	28 17       	cp	r18, r24
    80f2:	39 07       	cpc	r19, r25
    80f4:	10 f0       	brcs	.+4      	; 0x80fa <_ZN5CFIFO3addEPht+0x44>
    80f6:	41 e0       	ldi	r20, 0x01	; 1
    80f8:	4b 87       	std	Y+11, r20	; 0x0b
    80fa:	5b 85       	ldd	r21, Y+11	; 0x0b
    80fc:	55 23       	and	r21, r21
    80fe:	79 f0       	breq	.+30     	; 0x811e <_ZN5CFIFO3addEPht+0x68>
    used = headIndex - tailIndex;
    8100:	ed 81       	ldd	r30, Y+5	; 0x05
    8102:	fe 81       	ldd	r31, Y+6	; 0x06
    8104:	20 81       	ld	r18, Z
    8106:	31 81       	ldd	r19, Z+1	; 0x01
    8108:	ed 81       	ldd	r30, Y+5	; 0x05
    810a:	fe 81       	ldd	r31, Y+6	; 0x06
    810c:	82 81       	ldd	r24, Z+2	; 0x02
    810e:	93 81       	ldd	r25, Z+3	; 0x03
    8110:	a9 01       	movw	r20, r18
    8112:	48 1b       	sub	r20, r24
    8114:	59 0b       	sbc	r21, r25
    8116:	ca 01       	movw	r24, r20
    8118:	9a 83       	std	Y+2, r25	; 0x02
    811a:	89 83       	std	Y+1, r24	; 0x01
    811c:	43 c0       	rjmp	.+134    	; 0x81a4 <_ZN5CFIFO3addEPht+0xee>
  else
    used = size + headIndex - tailIndex;
    811e:	ed 81       	ldd	r30, Y+5	; 0x05
    8120:	fe 81       	ldd	r31, Y+6	; 0x06
    8122:	26 81       	ldd	r18, Z+6	; 0x06
    8124:	37 81       	ldd	r19, Z+7	; 0x07
    8126:	ed 81       	ldd	r30, Y+5	; 0x05
    8128:	fe 81       	ldd	r31, Y+6	; 0x06
    812a:	80 81       	ld	r24, Z
    812c:	91 81       	ldd	r25, Z+1	; 0x01
    812e:	28 0f       	add	r18, r24
    8130:	39 1f       	adc	r19, r25
    8132:	ed 81       	ldd	r30, Y+5	; 0x05
    8134:	fe 81       	ldd	r31, Y+6	; 0x06
    8136:	82 81       	ldd	r24, Z+2	; 0x02
    8138:	93 81       	ldd	r25, Z+3	; 0x03
    813a:	a9 01       	movw	r20, r18
    813c:	48 1b       	sub	r20, r24
    813e:	59 0b       	sbc	r21, r25
    8140:	ca 01       	movw	r24, r20
    8142:	9a 83       	std	Y+2, r25	; 0x02
    8144:	89 83       	std	Y+1, r24	; 0x01
    8146:	2e c0       	rjmp	.+92     	; 0x81a4 <_ZN5CFIFO3addEPht+0xee>
  while (cnt < numBytes && used < (size - 1)) {
    buffer[headIndex] = *src;
    8148:	ed 81       	ldd	r30, Y+5	; 0x05
    814a:	fe 81       	ldd	r31, Y+6	; 0x06
    814c:	24 81       	ldd	r18, Z+4	; 0x04
    814e:	35 81       	ldd	r19, Z+5	; 0x05
    8150:	ed 81       	ldd	r30, Y+5	; 0x05
    8152:	fe 81       	ldd	r31, Y+6	; 0x06
    8154:	80 81       	ld	r24, Z
    8156:	91 81       	ldd	r25, Z+1	; 0x01
    8158:	d9 01       	movw	r26, r18
    815a:	a8 0f       	add	r26, r24
    815c:	b9 1f       	adc	r27, r25
    815e:	ef 81       	ldd	r30, Y+7	; 0x07
    8160:	f8 85       	ldd	r31, Y+8	; 0x08
    8162:	80 81       	ld	r24, Z
    8164:	8c 93       	st	X, r24
    headIndex = (headIndex + 1) % size;
    8166:	ed 81       	ldd	r30, Y+5	; 0x05
    8168:	fe 81       	ldd	r31, Y+6	; 0x06
    816a:	80 81       	ld	r24, Z
    816c:	91 81       	ldd	r25, Z+1	; 0x01
    816e:	01 96       	adiw	r24, 0x01	; 1
    8170:	ed 81       	ldd	r30, Y+5	; 0x05
    8172:	fe 81       	ldd	r31, Y+6	; 0x06
    8174:	26 81       	ldd	r18, Z+6	; 0x06
    8176:	37 81       	ldd	r19, Z+7	; 0x07
    8178:	b9 01       	movw	r22, r18
    817a:	0e 94 b1 59 	call	0xb362	; 0xb362 <__udivmodhi4>
    817e:	ed 81       	ldd	r30, Y+5	; 0x05
    8180:	fe 81       	ldd	r31, Y+6	; 0x06
    8182:	91 83       	std	Z+1, r25	; 0x01
    8184:	80 83       	st	Z, r24
    src++;
    8186:	8f 81       	ldd	r24, Y+7	; 0x07
    8188:	98 85       	ldd	r25, Y+8	; 0x08
    818a:	01 96       	adiw	r24, 0x01	; 1
    818c:	98 87       	std	Y+8, r25	; 0x08
    818e:	8f 83       	std	Y+7, r24	; 0x07
    used++;
    8190:	89 81       	ldd	r24, Y+1	; 0x01
    8192:	9a 81       	ldd	r25, Y+2	; 0x02
    8194:	01 96       	adiw	r24, 0x01	; 1
    8196:	9a 83       	std	Y+2, r25	; 0x02
    8198:	89 83       	std	Y+1, r24	; 0x01
    cnt++;
    819a:	8b 81       	ldd	r24, Y+3	; 0x03
    819c:	9c 81       	ldd	r25, Y+4	; 0x04
    819e:	01 96       	adiw	r24, 0x01	; 1
    81a0:	9c 83       	std	Y+4, r25	; 0x04
    81a2:	8b 83       	std	Y+3, r24	; 0x03
  u16 used = 0;
  if (headIndex >= tailIndex)
    used = headIndex - tailIndex;
  else
    used = size + headIndex - tailIndex;
  while (cnt < numBytes && used < (size - 1)) {
    81a4:	2b 81       	ldd	r18, Y+3	; 0x03
    81a6:	3c 81       	ldd	r19, Y+4	; 0x04
    81a8:	89 85       	ldd	r24, Y+9	; 0x09
    81aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    81ac:	28 17       	cp	r18, r24
    81ae:	39 07       	cpc	r19, r25
    81b0:	68 f4       	brcc	.+26     	; 0x81cc <_ZN5CFIFO3addEPht+0x116>
    81b2:	ed 81       	ldd	r30, Y+5	; 0x05
    81b4:	fe 81       	ldd	r31, Y+6	; 0x06
    81b6:	86 81       	ldd	r24, Z+6	; 0x06
    81b8:	97 81       	ldd	r25, Z+7	; 0x07
    81ba:	9c 01       	movw	r18, r24
    81bc:	21 50       	subi	r18, 0x01	; 1
    81be:	30 40       	sbci	r19, 0x00	; 0
    81c0:	89 81       	ldd	r24, Y+1	; 0x01
    81c2:	9a 81       	ldd	r25, Y+2	; 0x02
    81c4:	82 17       	cp	r24, r18
    81c6:	93 07       	cpc	r25, r19
    81c8:	08 f4       	brcc	.+2      	; 0x81cc <_ZN5CFIFO3addEPht+0x116>
    81ca:	be cf       	rjmp	.-132    	; 0x8148 <_ZN5CFIFO3addEPht+0x92>
    headIndex = (headIndex + 1) % size;
    src++;
    used++;
    cnt++;
  }
  return cnt;
    81cc:	8b 81       	ldd	r24, Y+3	; 0x03
    81ce:	9c 81       	ldd	r25, Y+4	; 0x04
}
    81d0:	2b 96       	adiw	r28, 0x0b	; 11
    81d2:	0f b6       	in	r0, 0x3f	; 63
    81d4:	f8 94       	cli
    81d6:	de bf       	out	0x3e, r29	; 62
    81d8:	0f be       	out	0x3f, r0	; 63
    81da:	cd bf       	out	0x3d, r28	; 61
    81dc:	cf 91       	pop	r28
    81de:	df 91       	pop	r29
    81e0:	08 95       	ret

000081e2 <_ZN5CFIFO5emptyEv>:

u08 CFIFO::empty(void){
    81e2:	df 93       	push	r29
    81e4:	cf 93       	push	r28
    81e6:	00 d0       	rcall	.+0      	; 0x81e8 <_ZN5CFIFO5emptyEv+0x6>
    81e8:	0f 92       	push	r0
    81ea:	cd b7       	in	r28, 0x3d	; 61
    81ec:	de b7       	in	r29, 0x3e	; 62
    81ee:	9a 83       	std	Y+2, r25	; 0x02
    81f0:	89 83       	std	Y+1, r24	; 0x01
  return (space() == (size-1));
    81f2:	89 81       	ldd	r24, Y+1	; 0x01
    81f4:	9a 81       	ldd	r25, Y+2	; 0x02
    81f6:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <_ZN5CFIFO5spaceEv>
    81fa:	9c 01       	movw	r18, r24
    81fc:	e9 81       	ldd	r30, Y+1	; 0x01
    81fe:	fa 81       	ldd	r31, Y+2	; 0x02
    8200:	86 81       	ldd	r24, Z+6	; 0x06
    8202:	97 81       	ldd	r25, Z+7	; 0x07
    8204:	01 97       	sbiw	r24, 0x01	; 1
    8206:	1b 82       	std	Y+3, r1	; 0x03
    8208:	28 17       	cp	r18, r24
    820a:	39 07       	cpc	r19, r25
    820c:	11 f4       	brne	.+4      	; 0x8212 <_ZN5CFIFO5emptyEv+0x30>
    820e:	81 e0       	ldi	r24, 0x01	; 1
    8210:	8b 83       	std	Y+3, r24	; 0x03
    8212:	8b 81       	ldd	r24, Y+3	; 0x03
}
    8214:	0f 90       	pop	r0
    8216:	0f 90       	pop	r0
    8218:	0f 90       	pop	r0
    821a:	cf 91       	pop	r28
    821c:	df 91       	pop	r29
    821e:	08 95       	ret

00008220 <_ZN5CFIFO5clearEv>:

void CFIFO::clear(void){
    8220:	df 93       	push	r29
    8222:	cf 93       	push	r28
    8224:	00 d0       	rcall	.+0      	; 0x8226 <_ZN5CFIFO5clearEv+0x6>
    8226:	cd b7       	in	r28, 0x3d	; 61
    8228:	de b7       	in	r29, 0x3e	; 62
    822a:	9a 83       	std	Y+2, r25	; 0x02
    822c:	89 83       	std	Y+1, r24	; 0x01
	tailIndex = 0;
    822e:	e9 81       	ldd	r30, Y+1	; 0x01
    8230:	fa 81       	ldd	r31, Y+2	; 0x02
    8232:	13 82       	std	Z+3, r1	; 0x03
    8234:	12 82       	std	Z+2, r1	; 0x02
	headIndex = 0;
    8236:	e9 81       	ldd	r30, Y+1	; 0x01
    8238:	fa 81       	ldd	r31, Y+2	; 0x02
    823a:	11 82       	std	Z+1, r1	; 0x01
    823c:	10 82       	st	Z, r1
}
    823e:	0f 90       	pop	r0
    8240:	0f 90       	pop	r0
    8242:	cf 91       	pop	r28
    8244:	df 91       	pop	r29
    8246:	08 95       	ret

00008248 <_ZN5CFIFO6removeEPht>:


u16 CFIFO::remove(u08 *dst, u16 numBytes) {
    8248:	df 93       	push	r29
    824a:	cf 93       	push	r28
    824c:	cd b7       	in	r28, 0x3d	; 61
    824e:	de b7       	in	r29, 0x3e	; 62
    8250:	2b 97       	sbiw	r28, 0x0b	; 11
    8252:	0f b6       	in	r0, 0x3f	; 63
    8254:	f8 94       	cli
    8256:	de bf       	out	0x3e, r29	; 62
    8258:	0f be       	out	0x3f, r0	; 63
    825a:	cd bf       	out	0x3d, r28	; 61
    825c:	9e 83       	std	Y+6, r25	; 0x06
    825e:	8d 83       	std	Y+5, r24	; 0x05
    8260:	78 87       	std	Y+8, r23	; 0x08
    8262:	6f 83       	std	Y+7, r22	; 0x07
    8264:	5a 87       	std	Y+10, r21	; 0x0a
    8266:	49 87       	std	Y+9, r20	; 0x09
  u16 cnt = 0;
    8268:	1c 82       	std	Y+4, r1	; 0x04
    826a:	1b 82       	std	Y+3, r1	; 0x03
  u16 used = 0;
    826c:	1a 82       	std	Y+2, r1	; 0x02
    826e:	19 82       	std	Y+1, r1	; 0x01
  if (headIndex >= tailIndex)
    8270:	ed 81       	ldd	r30, Y+5	; 0x05
    8272:	fe 81       	ldd	r31, Y+6	; 0x06
    8274:	20 81       	ld	r18, Z
    8276:	31 81       	ldd	r19, Z+1	; 0x01
    8278:	ed 81       	ldd	r30, Y+5	; 0x05
    827a:	fe 81       	ldd	r31, Y+6	; 0x06
    827c:	82 81       	ldd	r24, Z+2	; 0x02
    827e:	93 81       	ldd	r25, Z+3	; 0x03
    8280:	1b 86       	std	Y+11, r1	; 0x0b
    8282:	28 17       	cp	r18, r24
    8284:	39 07       	cpc	r19, r25
    8286:	10 f0       	brcs	.+4      	; 0x828c <_ZN5CFIFO6removeEPht+0x44>
    8288:	41 e0       	ldi	r20, 0x01	; 1
    828a:	4b 87       	std	Y+11, r20	; 0x0b
    828c:	5b 85       	ldd	r21, Y+11	; 0x0b
    828e:	55 23       	and	r21, r21
    8290:	79 f0       	breq	.+30     	; 0x82b0 <_ZN5CFIFO6removeEPht+0x68>
    used = headIndex - tailIndex;
    8292:	ed 81       	ldd	r30, Y+5	; 0x05
    8294:	fe 81       	ldd	r31, Y+6	; 0x06
    8296:	20 81       	ld	r18, Z
    8298:	31 81       	ldd	r19, Z+1	; 0x01
    829a:	ed 81       	ldd	r30, Y+5	; 0x05
    829c:	fe 81       	ldd	r31, Y+6	; 0x06
    829e:	82 81       	ldd	r24, Z+2	; 0x02
    82a0:	93 81       	ldd	r25, Z+3	; 0x03
    82a2:	a9 01       	movw	r20, r18
    82a4:	48 1b       	sub	r20, r24
    82a6:	59 0b       	sbc	r21, r25
    82a8:	ca 01       	movw	r24, r20
    82aa:	9a 83       	std	Y+2, r25	; 0x02
    82ac:	89 83       	std	Y+1, r24	; 0x01
    82ae:	43 c0       	rjmp	.+134    	; 0x8336 <_ZN5CFIFO6removeEPht+0xee>
  else
    used = size + headIndex - tailIndex;
    82b0:	ed 81       	ldd	r30, Y+5	; 0x05
    82b2:	fe 81       	ldd	r31, Y+6	; 0x06
    82b4:	26 81       	ldd	r18, Z+6	; 0x06
    82b6:	37 81       	ldd	r19, Z+7	; 0x07
    82b8:	ed 81       	ldd	r30, Y+5	; 0x05
    82ba:	fe 81       	ldd	r31, Y+6	; 0x06
    82bc:	80 81       	ld	r24, Z
    82be:	91 81       	ldd	r25, Z+1	; 0x01
    82c0:	28 0f       	add	r18, r24
    82c2:	39 1f       	adc	r19, r25
    82c4:	ed 81       	ldd	r30, Y+5	; 0x05
    82c6:	fe 81       	ldd	r31, Y+6	; 0x06
    82c8:	82 81       	ldd	r24, Z+2	; 0x02
    82ca:	93 81       	ldd	r25, Z+3	; 0x03
    82cc:	a9 01       	movw	r20, r18
    82ce:	48 1b       	sub	r20, r24
    82d0:	59 0b       	sbc	r21, r25
    82d2:	ca 01       	movw	r24, r20
    82d4:	9a 83       	std	Y+2, r25	; 0x02
    82d6:	89 83       	std	Y+1, r24	; 0x01
    82d8:	2e c0       	rjmp	.+92     	; 0x8336 <_ZN5CFIFO6removeEPht+0xee>
  while (cnt < numBytes && used > 0) {
    *dst = buffer[tailIndex];
    82da:	ed 81       	ldd	r30, Y+5	; 0x05
    82dc:	fe 81       	ldd	r31, Y+6	; 0x06
    82de:	24 81       	ldd	r18, Z+4	; 0x04
    82e0:	35 81       	ldd	r19, Z+5	; 0x05
    82e2:	ed 81       	ldd	r30, Y+5	; 0x05
    82e4:	fe 81       	ldd	r31, Y+6	; 0x06
    82e6:	82 81       	ldd	r24, Z+2	; 0x02
    82e8:	93 81       	ldd	r25, Z+3	; 0x03
    82ea:	f9 01       	movw	r30, r18
    82ec:	e8 0f       	add	r30, r24
    82ee:	f9 1f       	adc	r31, r25
    82f0:	80 81       	ld	r24, Z
    82f2:	ef 81       	ldd	r30, Y+7	; 0x07
    82f4:	f8 85       	ldd	r31, Y+8	; 0x08
    82f6:	80 83       	st	Z, r24
    tailIndex = (tailIndex + 1) % size;
    82f8:	ed 81       	ldd	r30, Y+5	; 0x05
    82fa:	fe 81       	ldd	r31, Y+6	; 0x06
    82fc:	82 81       	ldd	r24, Z+2	; 0x02
    82fe:	93 81       	ldd	r25, Z+3	; 0x03
    8300:	01 96       	adiw	r24, 0x01	; 1
    8302:	ed 81       	ldd	r30, Y+5	; 0x05
    8304:	fe 81       	ldd	r31, Y+6	; 0x06
    8306:	26 81       	ldd	r18, Z+6	; 0x06
    8308:	37 81       	ldd	r19, Z+7	; 0x07
    830a:	b9 01       	movw	r22, r18
    830c:	0e 94 b1 59 	call	0xb362	; 0xb362 <__udivmodhi4>
    8310:	ed 81       	ldd	r30, Y+5	; 0x05
    8312:	fe 81       	ldd	r31, Y+6	; 0x06
    8314:	93 83       	std	Z+3, r25	; 0x03
    8316:	82 83       	std	Z+2, r24	; 0x02
    dst++;
    8318:	8f 81       	ldd	r24, Y+7	; 0x07
    831a:	98 85       	ldd	r25, Y+8	; 0x08
    831c:	01 96       	adiw	r24, 0x01	; 1
    831e:	98 87       	std	Y+8, r25	; 0x08
    8320:	8f 83       	std	Y+7, r24	; 0x07
    used--;
    8322:	89 81       	ldd	r24, Y+1	; 0x01
    8324:	9a 81       	ldd	r25, Y+2	; 0x02
    8326:	01 97       	sbiw	r24, 0x01	; 1
    8328:	9a 83       	std	Y+2, r25	; 0x02
    832a:	89 83       	std	Y+1, r24	; 0x01
    cnt++;
    832c:	8b 81       	ldd	r24, Y+3	; 0x03
    832e:	9c 81       	ldd	r25, Y+4	; 0x04
    8330:	01 96       	adiw	r24, 0x01	; 1
    8332:	9c 83       	std	Y+4, r25	; 0x04
    8334:	8b 83       	std	Y+3, r24	; 0x03
  u16 used = 0;
  if (headIndex >= tailIndex)
    used = headIndex - tailIndex;
  else
    used = size + headIndex - tailIndex;
  while (cnt < numBytes && used > 0) {
    8336:	2b 81       	ldd	r18, Y+3	; 0x03
    8338:	3c 81       	ldd	r19, Y+4	; 0x04
    833a:	89 85       	ldd	r24, Y+9	; 0x09
    833c:	9a 85       	ldd	r25, Y+10	; 0x0a
    833e:	28 17       	cp	r18, r24
    8340:	39 07       	cpc	r19, r25
    8342:	20 f4       	brcc	.+8      	; 0x834c <_ZN5CFIFO6removeEPht+0x104>
    8344:	89 81       	ldd	r24, Y+1	; 0x01
    8346:	9a 81       	ldd	r25, Y+2	; 0x02
    8348:	00 97       	sbiw	r24, 0x00	; 0
    834a:	39 f6       	brne	.-114    	; 0x82da <_ZN5CFIFO6removeEPht+0x92>
    tailIndex = (tailIndex + 1) % size;
    dst++;
    used--;
    cnt++;
  }
  return cnt;
    834c:	8b 81       	ldd	r24, Y+3	; 0x03
    834e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    8350:	2b 96       	adiw	r28, 0x0b	; 11
    8352:	0f b6       	in	r0, 0x3f	; 63
    8354:	f8 94       	cli
    8356:	de bf       	out	0x3e, r29	; 62
    8358:	0f be       	out	0x3f, r0	; 63
    835a:	cd bf       	out	0x3d, r28	; 61
    835c:	cf 91       	pop	r28
    835e:	df 91       	pop	r29
    8360:	08 95       	ret

00008362 <_ZN5CFIFO4peekEPc>:

u16 CFIFO::peek(c08 *dst) {
    8362:	df 93       	push	r29
    8364:	cf 93       	push	r28
    8366:	cd b7       	in	r28, 0x3d	; 61
    8368:	de b7       	in	r29, 0x3e	; 62
    836a:	2b 97       	sbiw	r28, 0x0b	; 11
    836c:	0f b6       	in	r0, 0x3f	; 63
    836e:	f8 94       	cli
    8370:	de bf       	out	0x3e, r29	; 62
    8372:	0f be       	out	0x3f, r0	; 63
    8374:	cd bf       	out	0x3d, r28	; 61
    8376:	98 87       	std	Y+8, r25	; 0x08
    8378:	8f 83       	std	Y+7, r24	; 0x07
    837a:	7a 87       	std	Y+10, r23	; 0x0a
    837c:	69 87       	std	Y+9, r22	; 0x09
  u16 cnt = 0;
    837e:	1e 82       	std	Y+6, r1	; 0x06
    8380:	1d 82       	std	Y+5, r1	; 0x05
  u16 used = 0;
    8382:	1c 82       	std	Y+4, r1	; 0x04
    8384:	1b 82       	std	Y+3, r1	; 0x03
  u16 tail;
  if (headIndex >= tailIndex)
    8386:	ef 81       	ldd	r30, Y+7	; 0x07
    8388:	f8 85       	ldd	r31, Y+8	; 0x08
    838a:	20 81       	ld	r18, Z
    838c:	31 81       	ldd	r19, Z+1	; 0x01
    838e:	ef 81       	ldd	r30, Y+7	; 0x07
    8390:	f8 85       	ldd	r31, Y+8	; 0x08
    8392:	82 81       	ldd	r24, Z+2	; 0x02
    8394:	93 81       	ldd	r25, Z+3	; 0x03
    8396:	1b 86       	std	Y+11, r1	; 0x0b
    8398:	28 17       	cp	r18, r24
    839a:	39 07       	cpc	r19, r25
    839c:	10 f0       	brcs	.+4      	; 0x83a2 <_ZN5CFIFO4peekEPc+0x40>
    839e:	41 e0       	ldi	r20, 0x01	; 1
    83a0:	4b 87       	std	Y+11, r20	; 0x0b
    83a2:	5b 85       	ldd	r21, Y+11	; 0x0b
    83a4:	55 23       	and	r21, r21
    83a6:	79 f0       	breq	.+30     	; 0x83c6 <_ZN5CFIFO4peekEPc+0x64>
    used = headIndex - tailIndex;
    83a8:	ef 81       	ldd	r30, Y+7	; 0x07
    83aa:	f8 85       	ldd	r31, Y+8	; 0x08
    83ac:	20 81       	ld	r18, Z
    83ae:	31 81       	ldd	r19, Z+1	; 0x01
    83b0:	ef 81       	ldd	r30, Y+7	; 0x07
    83b2:	f8 85       	ldd	r31, Y+8	; 0x08
    83b4:	82 81       	ldd	r24, Z+2	; 0x02
    83b6:	93 81       	ldd	r25, Z+3	; 0x03
    83b8:	a9 01       	movw	r20, r18
    83ba:	48 1b       	sub	r20, r24
    83bc:	59 0b       	sbc	r21, r25
    83be:	ca 01       	movw	r24, r20
    83c0:	9c 83       	std	Y+4, r25	; 0x04
    83c2:	8b 83       	std	Y+3, r24	; 0x03
    83c4:	14 c0       	rjmp	.+40     	; 0x83ee <_ZN5CFIFO4peekEPc+0x8c>
  else
    used = size + headIndex - tailIndex;
    83c6:	ef 81       	ldd	r30, Y+7	; 0x07
    83c8:	f8 85       	ldd	r31, Y+8	; 0x08
    83ca:	26 81       	ldd	r18, Z+6	; 0x06
    83cc:	37 81       	ldd	r19, Z+7	; 0x07
    83ce:	ef 81       	ldd	r30, Y+7	; 0x07
    83d0:	f8 85       	ldd	r31, Y+8	; 0x08
    83d2:	80 81       	ld	r24, Z
    83d4:	91 81       	ldd	r25, Z+1	; 0x01
    83d6:	28 0f       	add	r18, r24
    83d8:	39 1f       	adc	r19, r25
    83da:	ef 81       	ldd	r30, Y+7	; 0x07
    83dc:	f8 85       	ldd	r31, Y+8	; 0x08
    83de:	82 81       	ldd	r24, Z+2	; 0x02
    83e0:	93 81       	ldd	r25, Z+3	; 0x03
    83e2:	a9 01       	movw	r20, r18
    83e4:	48 1b       	sub	r20, r24
    83e6:	59 0b       	sbc	r21, r25
    83e8:	ca 01       	movw	r24, r20
    83ea:	9c 83       	std	Y+4, r25	; 0x04
    83ec:	8b 83       	std	Y+3, r24	; 0x03

  tail = tailIndex;
    83ee:	ef 81       	ldd	r30, Y+7	; 0x07
    83f0:	f8 85       	ldd	r31, Y+8	; 0x08
    83f2:	82 81       	ldd	r24, Z+2	; 0x02
    83f4:	93 81       	ldd	r25, Z+3	; 0x03
    83f6:	9a 83       	std	Y+2, r25	; 0x02
    83f8:	89 83       	std	Y+1, r24	; 0x01
    83fa:	21 c0       	rjmp	.+66     	; 0x843e <_ZN5CFIFO4peekEPc+0xdc>

  while (used > 0) {
    *dst = buffer[tail++];
    83fc:	ef 81       	ldd	r30, Y+7	; 0x07
    83fe:	f8 85       	ldd	r31, Y+8	; 0x08
    8400:	24 81       	ldd	r18, Z+4	; 0x04
    8402:	35 81       	ldd	r19, Z+5	; 0x05
    8404:	89 81       	ldd	r24, Y+1	; 0x01
    8406:	9a 81       	ldd	r25, Y+2	; 0x02
    8408:	f9 01       	movw	r30, r18
    840a:	e8 0f       	add	r30, r24
    840c:	f9 1f       	adc	r31, r25
    840e:	80 81       	ld	r24, Z
    8410:	e9 85       	ldd	r30, Y+9	; 0x09
    8412:	fa 85       	ldd	r31, Y+10	; 0x0a
    8414:	80 83       	st	Z, r24
    8416:	89 81       	ldd	r24, Y+1	; 0x01
    8418:	9a 81       	ldd	r25, Y+2	; 0x02
    841a:	01 96       	adiw	r24, 0x01	; 1
    841c:	9a 83       	std	Y+2, r25	; 0x02
    841e:	89 83       	std	Y+1, r24	; 0x01
    dst++;
    8420:	89 85       	ldd	r24, Y+9	; 0x09
    8422:	9a 85       	ldd	r25, Y+10	; 0x0a
    8424:	01 96       	adiw	r24, 0x01	; 1
    8426:	9a 87       	std	Y+10, r25	; 0x0a
    8428:	89 87       	std	Y+9, r24	; 0x09
    used--;
    842a:	8b 81       	ldd	r24, Y+3	; 0x03
    842c:	9c 81       	ldd	r25, Y+4	; 0x04
    842e:	01 97       	sbiw	r24, 0x01	; 1
    8430:	9c 83       	std	Y+4, r25	; 0x04
    8432:	8b 83       	std	Y+3, r24	; 0x03
    cnt++;
    8434:	8d 81       	ldd	r24, Y+5	; 0x05
    8436:	9e 81       	ldd	r25, Y+6	; 0x06
    8438:	01 96       	adiw	r24, 0x01	; 1
    843a:	9e 83       	std	Y+6, r25	; 0x06
    843c:	8d 83       	std	Y+5, r24	; 0x05
  else
    used = size + headIndex - tailIndex;

  tail = tailIndex;

  while (used > 0) {
    843e:	8b 81       	ldd	r24, Y+3	; 0x03
    8440:	9c 81       	ldd	r25, Y+4	; 0x04
    8442:	00 97       	sbiw	r24, 0x00	; 0
    8444:	d9 f6       	brne	.-74     	; 0x83fc <_ZN5CFIFO4peekEPc+0x9a>
    *dst = buffer[tail++];
    dst++;
    used--;
    cnt++;
  }
  return cnt;
    8446:	8d 81       	ldd	r24, Y+5	; 0x05
    8448:	9e 81       	ldd	r25, Y+6	; 0x06
}
    844a:	2b 96       	adiw	r28, 0x0b	; 11
    844c:	0f b6       	in	r0, 0x3f	; 63
    844e:	f8 94       	cli
    8450:	de bf       	out	0x3e, r29	; 62
    8452:	0f be       	out	0x3f, r0	; 63
    8454:	cd bf       	out	0x3d, r28	; 61
    8456:	cf 91       	pop	r28
    8458:	df 91       	pop	r29
    845a:	08 95       	ret

0000845c <_ZN5CFIFO10setBufSizeEt>:
  tailIndex = 0;
  healthy = true;
  buffer = 0;
}

u08 CFIFO::setBufSize(u16 _size) {
    845c:	df 93       	push	r29
    845e:	cf 93       	push	r28
    8460:	00 d0       	rcall	.+0      	; 0x8462 <_ZN5CFIFO10setBufSizeEt+0x6>
    8462:	00 d0       	rcall	.+0      	; 0x8464 <_ZN5CFIFO10setBufSizeEt+0x8>
    8464:	0f 92       	push	r0
    8466:	cd b7       	in	r28, 0x3d	; 61
    8468:	de b7       	in	r29, 0x3e	; 62
    846a:	9a 83       	std	Y+2, r25	; 0x02
    846c:	89 83       	std	Y+1, r24	; 0x01
    846e:	7c 83       	std	Y+4, r23	; 0x04
    8470:	6b 83       	std	Y+3, r22	; 0x03
  buffer = (u08*) malloc(_size);
    8472:	8b 81       	ldd	r24, Y+3	; 0x03
    8474:	9c 81       	ldd	r25, Y+4	; 0x04
    8476:	0e 94 3f 5a 	call	0xb47e	; 0xb47e <malloc>
    847a:	e9 81       	ldd	r30, Y+1	; 0x01
    847c:	fa 81       	ldd	r31, Y+2	; 0x02
    847e:	95 83       	std	Z+5, r25	; 0x05
    8480:	84 83       	std	Z+4, r24	; 0x04
  if (buffer == NULL) {
    8482:	e9 81       	ldd	r30, Y+1	; 0x01
    8484:	fa 81       	ldd	r31, Y+2	; 0x02
    8486:	84 81       	ldd	r24, Z+4	; 0x04
    8488:	95 81       	ldd	r25, Z+5	; 0x05
    848a:	00 97       	sbiw	r24, 0x00	; 0
    848c:	29 f4       	brne	.+10     	; 0x8498 <_ZN5CFIFO10setBufSizeEt+0x3c>
    healthy = false;
    848e:	e9 81       	ldd	r30, Y+1	; 0x01
    8490:	fa 81       	ldd	r31, Y+2	; 0x02
    8492:	10 86       	std	Z+8, r1	; 0x08
    return false;
    8494:	1d 82       	std	Y+5, r1	; 0x05
    8496:	08 c0       	rjmp	.+16     	; 0x84a8 <_ZN5CFIFO10setBufSizeEt+0x4c>
  }
  size = _size;
    8498:	e9 81       	ldd	r30, Y+1	; 0x01
    849a:	fa 81       	ldd	r31, Y+2	; 0x02
    849c:	8b 81       	ldd	r24, Y+3	; 0x03
    849e:	9c 81       	ldd	r25, Y+4	; 0x04
    84a0:	97 83       	std	Z+7, r25	; 0x07
    84a2:	86 83       	std	Z+6, r24	; 0x06
  return true;
    84a4:	81 e0       	ldi	r24, 0x01	; 1
    84a6:	8d 83       	std	Y+5, r24	; 0x05
    84a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    84aa:	0f 90       	pop	r0
    84ac:	0f 90       	pop	r0
    84ae:	0f 90       	pop	r0
    84b0:	0f 90       	pop	r0
    84b2:	0f 90       	pop	r0
    84b4:	cf 91       	pop	r28
    84b6:	df 91       	pop	r29
    84b8:	08 95       	ret

000084ba <_ZN3I2C4CI2C10setBitrateEt>:
  BIT_SET_HI(TWCR, TWEA);
  //outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
  devices[0] = this;
}

void CI2C::setBitrate(u16 bitrateKHz) {
    84ba:	df 93       	push	r29
    84bc:	cf 93       	push	r28
    84be:	cd b7       	in	r28, 0x3d	; 61
    84c0:	de b7       	in	r29, 0x3e	; 62
    84c2:	27 97       	sbiw	r28, 0x07	; 7
    84c4:	0f b6       	in	r0, 0x3f	; 63
    84c6:	f8 94       	cli
    84c8:	de bf       	out	0x3e, r29	; 62
    84ca:	0f be       	out	0x3f, r0	; 63
    84cc:	cd bf       	out	0x3d, r28	; 61
    84ce:	9b 83       	std	Y+3, r25	; 0x03
    84d0:	8a 83       	std	Y+2, r24	; 0x02
    84d2:	7d 83       	std	Y+5, r23	; 0x05
    84d4:	6c 83       	std	Y+4, r22	; 0x04
  // SCL freq = F_CPU/(16+2*TWBR))
#ifdef TWPS0
  // for processors with additional bitrate division (mega128)
  // SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
  // set TWPS to zero
  BIT_SET_LO(TWSR, TWPS0);
    84d6:	a9 eb       	ldi	r26, 0xB9	; 185
    84d8:	b0 e0       	ldi	r27, 0x00	; 0
    84da:	e9 eb       	ldi	r30, 0xB9	; 185
    84dc:	f0 e0       	ldi	r31, 0x00	; 0
    84de:	80 81       	ld	r24, Z
    84e0:	8e 7f       	andi	r24, 0xFE	; 254
    84e2:	8c 93       	st	X, r24
  BIT_SET_LO(TWSR, TWPS1);
    84e4:	a9 eb       	ldi	r26, 0xB9	; 185
    84e6:	b0 e0       	ldi	r27, 0x00	; 0
    84e8:	e9 eb       	ldi	r30, 0xB9	; 185
    84ea:	f0 e0       	ldi	r31, 0x00	; 0
    84ec:	80 81       	ld	r24, Z
    84ee:	8d 7f       	andi	r24, 0xFD	; 253
    84f0:	8c 93       	st	X, r24
#endif
  // calculate bitrate division
  bitrate_div = ((F_CPU/1000l) / bitrateKHz);
    84f2:	8c 81       	ldd	r24, Y+4	; 0x04
    84f4:	9d 81       	ldd	r25, Y+5	; 0x05
    84f6:	9c 01       	movw	r18, r24
    84f8:	40 e0       	ldi	r20, 0x00	; 0
    84fa:	50 e0       	ldi	r21, 0x00	; 0
    84fc:	89 e9       	ldi	r24, 0x99	; 153
    84fe:	99 e3       	ldi	r25, 0x39	; 57
    8500:	a0 e0       	ldi	r26, 0x00	; 0
    8502:	b0 e0       	ldi	r27, 0x00	; 0
    8504:	bc 01       	movw	r22, r24
    8506:	cd 01       	movw	r24, r26
    8508:	0e 94 c5 59 	call	0xb38a	; 0xb38a <__udivmodsi4>
    850c:	da 01       	movw	r26, r20
    850e:	c9 01       	movw	r24, r18
    8510:	89 83       	std	Y+1, r24	; 0x01
  if (bitrate_div >= 16)
    8512:	89 81       	ldd	r24, Y+1	; 0x01
    8514:	80 31       	cpi	r24, 0x10	; 16
    8516:	a0 f0       	brcs	.+40     	; 0x8540 <_ZN3I2C4CI2C10setBitrateEt+0x86>
    bitrate_div = (bitrate_div - 16) / 2;
    8518:	89 81       	ldd	r24, Y+1	; 0x01
    851a:	88 2f       	mov	r24, r24
    851c:	90 e0       	ldi	r25, 0x00	; 0
    851e:	40 97       	sbiw	r24, 0x10	; 16
    8520:	9f 83       	std	Y+7, r25	; 0x07
    8522:	8e 83       	std	Y+6, r24	; 0x06
    8524:	8e 81       	ldd	r24, Y+6	; 0x06
    8526:	9f 81       	ldd	r25, Y+7	; 0x07
    8528:	99 23       	and	r25, r25
    852a:	2c f4       	brge	.+10     	; 0x8536 <_ZN3I2C4CI2C10setBitrateEt+0x7c>
    852c:	8e 81       	ldd	r24, Y+6	; 0x06
    852e:	9f 81       	ldd	r25, Y+7	; 0x07
    8530:	01 96       	adiw	r24, 0x01	; 1
    8532:	9f 83       	std	Y+7, r25	; 0x07
    8534:	8e 83       	std	Y+6, r24	; 0x06
    8536:	8e 81       	ldd	r24, Y+6	; 0x06
    8538:	9f 81       	ldd	r25, Y+7	; 0x07
    853a:	95 95       	asr	r25
    853c:	87 95       	ror	r24
    853e:	89 83       	std	Y+1, r24	; 0x01
  TWBR = bitrate_div;
    8540:	e8 eb       	ldi	r30, 0xB8	; 184
    8542:	f0 e0       	ldi	r31, 0x00	; 0
    8544:	89 81       	ldd	r24, Y+1	; 0x01
    8546:	80 83       	st	Z, r24
}
    8548:	27 96       	adiw	r28, 0x07	; 7
    854a:	0f b6       	in	r0, 0x3f	; 63
    854c:	f8 94       	cli
    854e:	de bf       	out	0x3e, r29	; 62
    8550:	0f be       	out	0x3f, r0	; 63
    8552:	cd bf       	out	0x3d, r28	; 61
    8554:	cf 91       	pop	r28
    8556:	df 91       	pop	r29
    8558:	08 95       	ret

0000855a <_ZN3I2C4CI2CC1Ev>:

#undef I2C_DEBUG

static CI2C* devices[4];

CI2C::CI2C(void) {
    855a:	df 93       	push	r29
    855c:	cf 93       	push	r28
    855e:	00 d0       	rcall	.+0      	; 0x8560 <_ZN3I2C4CI2CC1Ev+0x6>
    8560:	cd b7       	in	r28, 0x3d	; 61
    8562:	de b7       	in	r29, 0x3e	; 62
    8564:	9a 83       	std	Y+2, r25	; 0x02
    8566:	89 83       	std	Y+1, r24	; 0x01
  BIT_SET_LO(DDRC, 1); // i2c SDA on ATmega163,323,16,32,etc
  BIT_SET_HI(PORTC, 0); // i2c SCL on ATmega163,323,16,32,etc
  BIT_SET_HI(PORTC, 1); // i2c SDA on ATmega163,323,16,32,etc
*/
#warning I2C ONLY FOR ATmega1280
  BIT_SET_LO(DDRD, 0);	// i2c SCL on ATmega128,64
    8568:	aa e2       	ldi	r26, 0x2A	; 42
    856a:	b0 e0       	ldi	r27, 0x00	; 0
    856c:	ea e2       	ldi	r30, 0x2A	; 42
    856e:	f0 e0       	ldi	r31, 0x00	; 0
    8570:	80 81       	ld	r24, Z
    8572:	8e 7f       	andi	r24, 0xFE	; 254
    8574:	8c 93       	st	X, r24
  BIT_SET_LO(DDRD, 1);	// i2c SDA on ATmega128,64
    8576:	aa e2       	ldi	r26, 0x2A	; 42
    8578:	b0 e0       	ldi	r27, 0x00	; 0
    857a:	ea e2       	ldi	r30, 0x2A	; 42
    857c:	f0 e0       	ldi	r31, 0x00	; 0
    857e:	80 81       	ld	r24, Z
    8580:	8d 7f       	andi	r24, 0xFD	; 253
    8582:	8c 93       	st	X, r24
  BIT_SET_HI(PORTD, 0);	// i2c SCL on ATmega128,64
    8584:	ab e2       	ldi	r26, 0x2B	; 43
    8586:	b0 e0       	ldi	r27, 0x00	; 0
    8588:	eb e2       	ldi	r30, 0x2B	; 43
    858a:	f0 e0       	ldi	r31, 0x00	; 0
    858c:	80 81       	ld	r24, Z
    858e:	81 60       	ori	r24, 0x01	; 1
    8590:	8c 93       	st	X, r24
  BIT_SET_HI(PORTD, 1);	// i2c SDA on ATmega128,64
    8592:	ab e2       	ldi	r26, 0x2B	; 43
    8594:	b0 e0       	ldi	r27, 0x00	; 0
    8596:	eb e2       	ldi	r30, 0x2B	; 43
    8598:	f0 e0       	ldi	r31, 0x00	; 0
    859a:	80 81       	ld	r24, Z
    859c:	82 60       	ori	r24, 0x02	; 2
    859e:	8c 93       	st	X, r24

  // clear SlaveReceive and SlaveTransmit handler to null
  slaveReceive = 0;
    85a0:	e9 81       	ldd	r30, Y+1	; 0x01
    85a2:	fa 81       	ldd	r31, Y+2	; 0x02
    85a4:	16 a2       	std	Z+38, r1	; 0x26
    85a6:	15 a2       	std	Z+37, r1	; 0x25
  slaveTransmit = 0;
    85a8:	e9 81       	ldd	r30, Y+1	; 0x01
    85aa:	fa 81       	ldd	r31, Y+2	; 0x02
    85ac:	10 a6       	std	Z+40, r1	; 0x28
    85ae:	17 a2       	std	Z+39, r1	; 0x27
  // set i2c bit rate to 400KHz
  setBitrate(400);
    85b0:	89 81       	ldd	r24, Y+1	; 0x01
    85b2:	9a 81       	ldd	r25, Y+2	; 0x02
    85b4:	60 e9       	ldi	r22, 0x90	; 144
    85b6:	71 e0       	ldi	r23, 0x01	; 1
    85b8:	0e 94 5d 42 	call	0x84ba	; 0x84ba <_ZN3I2C4CI2C10setBitrateEt>
  // enable TWI (two-wire interface)
  BIT_SET_HI(TWCR, TWEN);
    85bc:	ac eb       	ldi	r26, 0xBC	; 188
    85be:	b0 e0       	ldi	r27, 0x00	; 0
    85c0:	ec eb       	ldi	r30, 0xBC	; 188
    85c2:	f0 e0       	ldi	r31, 0x00	; 0
    85c4:	80 81       	ld	r24, Z
    85c6:	84 60       	ori	r24, 0x04	; 4
    85c8:	8c 93       	st	X, r24
  // set state
  state = IDLE;
    85ca:	e9 81       	ldd	r30, Y+1	; 0x01
    85cc:	fa 81       	ldd	r31, Y+2	; 0x02
    85ce:	10 82       	st	Z, r1

  // enable TWI interrupt and slave address ACK
  BIT_SET_HI(TWCR, TWIE);
    85d0:	ac eb       	ldi	r26, 0xBC	; 188
    85d2:	b0 e0       	ldi	r27, 0x00	; 0
    85d4:	ec eb       	ldi	r30, 0xBC	; 188
    85d6:	f0 e0       	ldi	r31, 0x00	; 0
    85d8:	80 81       	ld	r24, Z
    85da:	81 60       	ori	r24, 0x01	; 1
    85dc:	8c 93       	st	X, r24
  BIT_SET_HI(TWCR, TWEA);
    85de:	ac eb       	ldi	r26, 0xBC	; 188
    85e0:	b0 e0       	ldi	r27, 0x00	; 0
    85e2:	ec eb       	ldi	r30, 0xBC	; 188
    85e4:	f0 e0       	ldi	r31, 0x00	; 0
    85e6:	80 81       	ld	r24, Z
    85e8:	80 64       	ori	r24, 0x40	; 64
    85ea:	8c 93       	st	X, r24
  //outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
  devices[0] = this;
    85ec:	89 81       	ldd	r24, Y+1	; 0x01
    85ee:	9a 81       	ldd	r25, Y+2	; 0x02
    85f0:	90 93 5a 0a 	sts	0x0A5A, r25
    85f4:	80 93 59 0a 	sts	0x0A59, r24
}
    85f8:	0f 90       	pop	r0
    85fa:	0f 90       	pop	r0
    85fc:	cf 91       	pop	r28
    85fe:	df 91       	pop	r29
    8600:	08 95       	ret

00008602 <_ZN3I2C4CI2CC2Ev>:

#undef I2C_DEBUG

static CI2C* devices[4];

CI2C::CI2C(void) {
    8602:	df 93       	push	r29
    8604:	cf 93       	push	r28
    8606:	00 d0       	rcall	.+0      	; 0x8608 <_ZN3I2C4CI2CC2Ev+0x6>
    8608:	cd b7       	in	r28, 0x3d	; 61
    860a:	de b7       	in	r29, 0x3e	; 62
    860c:	9a 83       	std	Y+2, r25	; 0x02
    860e:	89 83       	std	Y+1, r24	; 0x01
  BIT_SET_LO(DDRC, 1); // i2c SDA on ATmega163,323,16,32,etc
  BIT_SET_HI(PORTC, 0); // i2c SCL on ATmega163,323,16,32,etc
  BIT_SET_HI(PORTC, 1); // i2c SDA on ATmega163,323,16,32,etc
*/
#warning I2C ONLY FOR ATmega1280
  BIT_SET_LO(DDRD, 0);	// i2c SCL on ATmega128,64
    8610:	aa e2       	ldi	r26, 0x2A	; 42
    8612:	b0 e0       	ldi	r27, 0x00	; 0
    8614:	ea e2       	ldi	r30, 0x2A	; 42
    8616:	f0 e0       	ldi	r31, 0x00	; 0
    8618:	80 81       	ld	r24, Z
    861a:	8e 7f       	andi	r24, 0xFE	; 254
    861c:	8c 93       	st	X, r24
  BIT_SET_LO(DDRD, 1);	// i2c SDA on ATmega128,64
    861e:	aa e2       	ldi	r26, 0x2A	; 42
    8620:	b0 e0       	ldi	r27, 0x00	; 0
    8622:	ea e2       	ldi	r30, 0x2A	; 42
    8624:	f0 e0       	ldi	r31, 0x00	; 0
    8626:	80 81       	ld	r24, Z
    8628:	8d 7f       	andi	r24, 0xFD	; 253
    862a:	8c 93       	st	X, r24
  BIT_SET_HI(PORTD, 0);	// i2c SCL on ATmega128,64
    862c:	ab e2       	ldi	r26, 0x2B	; 43
    862e:	b0 e0       	ldi	r27, 0x00	; 0
    8630:	eb e2       	ldi	r30, 0x2B	; 43
    8632:	f0 e0       	ldi	r31, 0x00	; 0
    8634:	80 81       	ld	r24, Z
    8636:	81 60       	ori	r24, 0x01	; 1
    8638:	8c 93       	st	X, r24
  BIT_SET_HI(PORTD, 1);	// i2c SDA on ATmega128,64
    863a:	ab e2       	ldi	r26, 0x2B	; 43
    863c:	b0 e0       	ldi	r27, 0x00	; 0
    863e:	eb e2       	ldi	r30, 0x2B	; 43
    8640:	f0 e0       	ldi	r31, 0x00	; 0
    8642:	80 81       	ld	r24, Z
    8644:	82 60       	ori	r24, 0x02	; 2
    8646:	8c 93       	st	X, r24

  // clear SlaveReceive and SlaveTransmit handler to null
  slaveReceive = 0;
    8648:	e9 81       	ldd	r30, Y+1	; 0x01
    864a:	fa 81       	ldd	r31, Y+2	; 0x02
    864c:	16 a2       	std	Z+38, r1	; 0x26
    864e:	15 a2       	std	Z+37, r1	; 0x25
  slaveTransmit = 0;
    8650:	e9 81       	ldd	r30, Y+1	; 0x01
    8652:	fa 81       	ldd	r31, Y+2	; 0x02
    8654:	10 a6       	std	Z+40, r1	; 0x28
    8656:	17 a2       	std	Z+39, r1	; 0x27
  // set i2c bit rate to 400KHz
  setBitrate(400);
    8658:	89 81       	ldd	r24, Y+1	; 0x01
    865a:	9a 81       	ldd	r25, Y+2	; 0x02
    865c:	60 e9       	ldi	r22, 0x90	; 144
    865e:	71 e0       	ldi	r23, 0x01	; 1
    8660:	0e 94 5d 42 	call	0x84ba	; 0x84ba <_ZN3I2C4CI2C10setBitrateEt>
  // enable TWI (two-wire interface)
  BIT_SET_HI(TWCR, TWEN);
    8664:	ac eb       	ldi	r26, 0xBC	; 188
    8666:	b0 e0       	ldi	r27, 0x00	; 0
    8668:	ec eb       	ldi	r30, 0xBC	; 188
    866a:	f0 e0       	ldi	r31, 0x00	; 0
    866c:	80 81       	ld	r24, Z
    866e:	84 60       	ori	r24, 0x04	; 4
    8670:	8c 93       	st	X, r24
  // set state
  state = IDLE;
    8672:	e9 81       	ldd	r30, Y+1	; 0x01
    8674:	fa 81       	ldd	r31, Y+2	; 0x02
    8676:	10 82       	st	Z, r1

  // enable TWI interrupt and slave address ACK
  BIT_SET_HI(TWCR, TWIE);
    8678:	ac eb       	ldi	r26, 0xBC	; 188
    867a:	b0 e0       	ldi	r27, 0x00	; 0
    867c:	ec eb       	ldi	r30, 0xBC	; 188
    867e:	f0 e0       	ldi	r31, 0x00	; 0
    8680:	80 81       	ld	r24, Z
    8682:	81 60       	ori	r24, 0x01	; 1
    8684:	8c 93       	st	X, r24
  BIT_SET_HI(TWCR, TWEA);
    8686:	ac eb       	ldi	r26, 0xBC	; 188
    8688:	b0 e0       	ldi	r27, 0x00	; 0
    868a:	ec eb       	ldi	r30, 0xBC	; 188
    868c:	f0 e0       	ldi	r31, 0x00	; 0
    868e:	80 81       	ld	r24, Z
    8690:	80 64       	ori	r24, 0x40	; 64
    8692:	8c 93       	st	X, r24
  //outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
  devices[0] = this;
    8694:	89 81       	ldd	r24, Y+1	; 0x01
    8696:	9a 81       	ldd	r25, Y+2	; 0x02
    8698:	90 93 5a 0a 	sts	0x0A5A, r25
    869c:	80 93 59 0a 	sts	0x0A59, r24
}
    86a0:	0f 90       	pop	r0
    86a2:	0f 90       	pop	r0
    86a4:	cf 91       	pop	r28
    86a6:	df 91       	pop	r29
    86a8:	08 95       	ret

000086aa <_ZN3I2C4CI2C18setLocalDeviceAddrEhh>:
  if (bitrate_div >= 16)
    bitrate_div = (bitrate_div - 16) / 2;
  TWBR = bitrate_div;
}

void CI2C::setLocalDeviceAddr(u08 deviceAddr, u08 genCallEn) {
    86aa:	df 93       	push	r29
    86ac:	cf 93       	push	r28
    86ae:	cd b7       	in	r28, 0x3d	; 61
    86b0:	de b7       	in	r29, 0x3e	; 62
    86b2:	28 97       	sbiw	r28, 0x08	; 8
    86b4:	0f b6       	in	r0, 0x3f	; 63
    86b6:	f8 94       	cli
    86b8:	de bf       	out	0x3e, r29	; 62
    86ba:	0f be       	out	0x3f, r0	; 63
    86bc:	cd bf       	out	0x3d, r28	; 61
    86be:	9a 83       	std	Y+2, r25	; 0x02
    86c0:	89 83       	std	Y+1, r24	; 0x01
    86c2:	6b 83       	std	Y+3, r22	; 0x03
    86c4:	4c 83       	std	Y+4, r20	; 0x04
  // set local device address (used in slave mode only)
  TWAR = ((deviceAddr & 0xFE) | (genCallEn ? 1 : 0));
    86c6:	8a eb       	ldi	r24, 0xBA	; 186
    86c8:	90 e0       	ldi	r25, 0x00	; 0
    86ca:	98 87       	std	Y+8, r25	; 0x08
    86cc:	8f 83       	std	Y+7, r24	; 0x07
    86ce:	8b 81       	ldd	r24, Y+3	; 0x03
    86d0:	98 2f       	mov	r25, r24
    86d2:	9e 7f       	andi	r25, 0xFE	; 254
    86d4:	9e 83       	std	Y+6, r25	; 0x06
    86d6:	8c 81       	ldd	r24, Y+4	; 0x04
    86d8:	88 23       	and	r24, r24
    86da:	19 f0       	breq	.+6      	; 0x86e2 <_ZN3I2C4CI2C18setLocalDeviceAddrEhh+0x38>
    86dc:	e1 e0       	ldi	r30, 0x01	; 1
    86de:	ed 83       	std	Y+5, r30	; 0x05
    86e0:	01 c0       	rjmp	.+2      	; 0x86e4 <_ZN3I2C4CI2C18setLocalDeviceAddrEhh+0x3a>
    86e2:	1d 82       	std	Y+5, r1	; 0x05
    86e4:	8e 81       	ldd	r24, Y+6	; 0x06
    86e6:	fd 81       	ldd	r31, Y+5	; 0x05
    86e8:	8f 2b       	or	r24, r31
    86ea:	ef 81       	ldd	r30, Y+7	; 0x07
    86ec:	f8 85       	ldd	r31, Y+8	; 0x08
    86ee:	80 83       	st	Z, r24
}
    86f0:	28 96       	adiw	r28, 0x08	; 8
    86f2:	0f b6       	in	r0, 0x3f	; 63
    86f4:	f8 94       	cli
    86f6:	de bf       	out	0x3e, r29	; 62
    86f8:	0f be       	out	0x3f, r0	; 63
    86fa:	cd bf       	out	0x3d, r28	; 61
    86fc:	cf 91       	pop	r28
    86fe:	df 91       	pop	r29
    8700:	08 95       	ret

00008702 <_ZN3I2C4CI2C22setSlaveReceiveHandlerEPFvhPhE>:

void CI2C::setSlaveReceiveHandler(void(*slaveRx_func)(u08 receiveDataLength,
    u08* recieveData)) {
    8702:	df 93       	push	r29
    8704:	cf 93       	push	r28
    8706:	00 d0       	rcall	.+0      	; 0x8708 <_ZN3I2C4CI2C22setSlaveReceiveHandlerEPFvhPhE+0x6>
    8708:	00 d0       	rcall	.+0      	; 0x870a <_ZN3I2C4CI2C22setSlaveReceiveHandlerEPFvhPhE+0x8>
    870a:	cd b7       	in	r28, 0x3d	; 61
    870c:	de b7       	in	r29, 0x3e	; 62
    870e:	9a 83       	std	Y+2, r25	; 0x02
    8710:	89 83       	std	Y+1, r24	; 0x01
    8712:	7c 83       	std	Y+4, r23	; 0x04
    8714:	6b 83       	std	Y+3, r22	; 0x03
  slaveReceive = slaveRx_func;
    8716:	e9 81       	ldd	r30, Y+1	; 0x01
    8718:	fa 81       	ldd	r31, Y+2	; 0x02
    871a:	8b 81       	ldd	r24, Y+3	; 0x03
    871c:	9c 81       	ldd	r25, Y+4	; 0x04
    871e:	96 a3       	std	Z+38, r25	; 0x26
    8720:	85 a3       	std	Z+37, r24	; 0x25
}
    8722:	0f 90       	pop	r0
    8724:	0f 90       	pop	r0
    8726:	0f 90       	pop	r0
    8728:	0f 90       	pop	r0
    872a:	cf 91       	pop	r28
    872c:	df 91       	pop	r29
    872e:	08 95       	ret

00008730 <_ZN3I2C4CI2C23setSlaveTransmitHandlerEPFhhPhE>:

void CI2C::setSlaveTransmitHandler(u08(*slaveTx_func)(
    u08 transmitDataLengthMax, u08* transmitData)) {
    8730:	df 93       	push	r29
    8732:	cf 93       	push	r28
    8734:	00 d0       	rcall	.+0      	; 0x8736 <_ZN3I2C4CI2C23setSlaveTransmitHandlerEPFhhPhE+0x6>
    8736:	00 d0       	rcall	.+0      	; 0x8738 <_ZN3I2C4CI2C23setSlaveTransmitHandlerEPFhhPhE+0x8>
    8738:	cd b7       	in	r28, 0x3d	; 61
    873a:	de b7       	in	r29, 0x3e	; 62
    873c:	9a 83       	std	Y+2, r25	; 0x02
    873e:	89 83       	std	Y+1, r24	; 0x01
    8740:	7c 83       	std	Y+4, r23	; 0x04
    8742:	6b 83       	std	Y+3, r22	; 0x03
  slaveTransmit = slaveTx_func;
    8744:	e9 81       	ldd	r30, Y+1	; 0x01
    8746:	fa 81       	ldd	r31, Y+2	; 0x02
    8748:	8b 81       	ldd	r24, Y+3	; 0x03
    874a:	9c 81       	ldd	r25, Y+4	; 0x04
    874c:	90 a7       	std	Z+40, r25	; 0x28
    874e:	87 a3       	std	Z+39, r24	; 0x27
}
    8750:	0f 90       	pop	r0
    8752:	0f 90       	pop	r0
    8754:	0f 90       	pop	r0
    8756:	0f 90       	pop	r0
    8758:	cf 91       	pop	r28
    875a:	df 91       	pop	r29
    875c:	08 95       	ret

0000875e <_ZN3I2C4CI2C9sendStartEv>:

void CI2C::sendStart(void) {
    875e:	df 93       	push	r29
    8760:	cf 93       	push	r28
    8762:	00 d0       	rcall	.+0      	; 0x8764 <_ZN3I2C4CI2C9sendStartEv+0x6>
    8764:	cd b7       	in	r28, 0x3d	; 61
    8766:	de b7       	in	r29, 0x3e	; 62
    8768:	9a 83       	std	Y+2, r25	; 0x02
    876a:	89 83       	std	Y+1, r24	; 0x01
  // send start condition
  //outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTA));
  TWCR = (TWCR & TWCR_CMD_MASK) | BV(TWINT) | BV(TWSTA);
    876c:	ac eb       	ldi	r26, 0xBC	; 188
    876e:	b0 e0       	ldi	r27, 0x00	; 0
    8770:	ec eb       	ldi	r30, 0xBC	; 188
    8772:	f0 e0       	ldi	r31, 0x00	; 0
    8774:	80 81       	ld	r24, Z
    8776:	8f 70       	andi	r24, 0x0F	; 15
    8778:	80 6a       	ori	r24, 0xA0	; 160
    877a:	8c 93       	st	X, r24
}
    877c:	0f 90       	pop	r0
    877e:	0f 90       	pop	r0
    8780:	cf 91       	pop	r28
    8782:	df 91       	pop	r29
    8784:	08 95       	ret

00008786 <_ZN3I2C4CI2C8sendStopEv>:

void CI2C::sendStop(void) {
    8786:	df 93       	push	r29
    8788:	cf 93       	push	r28
    878a:	00 d0       	rcall	.+0      	; 0x878c <_ZN3I2C4CI2C8sendStopEv+0x6>
    878c:	cd b7       	in	r28, 0x3d	; 61
    878e:	de b7       	in	r29, 0x3e	; 62
    8790:	9a 83       	std	Y+2, r25	; 0x02
    8792:	89 83       	std	Y+1, r24	; 0x01
  // transmit stop condition
  // leave with TWEA on for slave receiving
  outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA)|BV(TWSTO));
    8794:	ac eb       	ldi	r26, 0xBC	; 188
    8796:	b0 e0       	ldi	r27, 0x00	; 0
    8798:	ec eb       	ldi	r30, 0xBC	; 188
    879a:	f0 e0       	ldi	r31, 0x00	; 0
    879c:	80 81       	ld	r24, Z
    879e:	8f 70       	andi	r24, 0x0F	; 15
    87a0:	80 6d       	ori	r24, 0xD0	; 208
    87a2:	8c 93       	st	X, r24
}
    87a4:	0f 90       	pop	r0
    87a6:	0f 90       	pop	r0
    87a8:	cf 91       	pop	r28
    87aa:	df 91       	pop	r29
    87ac:	08 95       	ret

000087ae <_ZN3I2C4CI2C15waitForCompleteEv>:

void CI2C::waitForComplete(void) {
    87ae:	df 93       	push	r29
    87b0:	cf 93       	push	r28
    87b2:	00 d0       	rcall	.+0      	; 0x87b4 <_ZN3I2C4CI2C15waitForCompleteEv+0x6>
    87b4:	0f 92       	push	r0
    87b6:	cd b7       	in	r28, 0x3d	; 61
    87b8:	de b7       	in	r29, 0x3e	; 62
    87ba:	9a 83       	std	Y+2, r25	; 0x02
    87bc:	89 83       	std	Y+1, r24	; 0x01
  // wait for i2c interface to complete operation
  while (!(inb(TWCR)& BV(TWINT)) );
    87be:	ec eb       	ldi	r30, 0xBC	; 188
    87c0:	f0 e0       	ldi	r31, 0x00	; 0
    87c2:	80 81       	ld	r24, Z
    87c4:	1b 82       	std	Y+3, r1	; 0x03
    87c6:	88 23       	and	r24, r24
    87c8:	14 f0       	brlt	.+4      	; 0x87ce <_ZN3I2C4CI2C15waitForCompleteEv+0x20>
    87ca:	81 e0       	ldi	r24, 0x01	; 1
    87cc:	8b 83       	std	Y+3, r24	; 0x03
    87ce:	8b 81       	ldd	r24, Y+3	; 0x03
    87d0:	88 23       	and	r24, r24
    87d2:	a9 f7       	brne	.-22     	; 0x87be <_ZN3I2C4CI2C15waitForCompleteEv+0x10>
}
    87d4:	0f 90       	pop	r0
    87d6:	0f 90       	pop	r0
    87d8:	0f 90       	pop	r0
    87da:	cf 91       	pop	r28
    87dc:	df 91       	pop	r29
    87de:	08 95       	ret

000087e0 <_ZN3I2C4CI2C8sendByteEh>:

void CI2C::sendByte(u08 data) {
    87e0:	df 93       	push	r29
    87e2:	cf 93       	push	r28
    87e4:	00 d0       	rcall	.+0      	; 0x87e6 <_ZN3I2C4CI2C8sendByteEh+0x6>
    87e6:	0f 92       	push	r0
    87e8:	cd b7       	in	r28, 0x3d	; 61
    87ea:	de b7       	in	r29, 0x3e	; 62
    87ec:	9a 83       	std	Y+2, r25	; 0x02
    87ee:	89 83       	std	Y+1, r24	; 0x01
    87f0:	6b 83       	std	Y+3, r22	; 0x03
  // save data to the TWDR
  outb(TWDR, data);
    87f2:	eb eb       	ldi	r30, 0xBB	; 187
    87f4:	f0 e0       	ldi	r31, 0x00	; 0
    87f6:	8b 81       	ldd	r24, Y+3	; 0x03
    87f8:	80 83       	st	Z, r24
  // begin send
  outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    87fa:	ac eb       	ldi	r26, 0xBC	; 188
    87fc:	b0 e0       	ldi	r27, 0x00	; 0
    87fe:	ec eb       	ldi	r30, 0xBC	; 188
    8800:	f0 e0       	ldi	r31, 0x00	; 0
    8802:	80 81       	ld	r24, Z
    8804:	8f 70       	andi	r24, 0x0F	; 15
    8806:	80 68       	ori	r24, 0x80	; 128
    8808:	8c 93       	st	X, r24
}
    880a:	0f 90       	pop	r0
    880c:	0f 90       	pop	r0
    880e:	0f 90       	pop	r0
    8810:	cf 91       	pop	r28
    8812:	df 91       	pop	r29
    8814:	08 95       	ret

00008816 <_ZN3I2C4CI2C11receiveByteEh>:

void CI2C::receiveByte(u08 ackFlag) {
    8816:	df 93       	push	r29
    8818:	cf 93       	push	r28
    881a:	00 d0       	rcall	.+0      	; 0x881c <_ZN3I2C4CI2C11receiveByteEh+0x6>
    881c:	0f 92       	push	r0
    881e:	cd b7       	in	r28, 0x3d	; 61
    8820:	de b7       	in	r29, 0x3e	; 62
    8822:	9a 83       	std	Y+2, r25	; 0x02
    8824:	89 83       	std	Y+1, r24	; 0x01
    8826:	6b 83       	std	Y+3, r22	; 0x03
  // begin receive over i2c
  if (ackFlag) {
    8828:	8b 81       	ldd	r24, Y+3	; 0x03
    882a:	88 23       	and	r24, r24
    882c:	49 f0       	breq	.+18     	; 0x8840 <_ZN3I2C4CI2C11receiveByteEh+0x2a>
    // ackFlag = TRUE: ACK the recevied data
    outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    882e:	ac eb       	ldi	r26, 0xBC	; 188
    8830:	b0 e0       	ldi	r27, 0x00	; 0
    8832:	ec eb       	ldi	r30, 0xBC	; 188
    8834:	f0 e0       	ldi	r31, 0x00	; 0
    8836:	80 81       	ld	r24, Z
    8838:	8f 70       	andi	r24, 0x0F	; 15
    883a:	80 6c       	ori	r24, 0xC0	; 192
    883c:	8c 93       	st	X, r24
    883e:	08 c0       	rjmp	.+16     	; 0x8850 <_ZN3I2C4CI2C11receiveByteEh+0x3a>
  } else {
    // ackFlag = FALSE: NACK the recevied data
    outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    8840:	ac eb       	ldi	r26, 0xBC	; 188
    8842:	b0 e0       	ldi	r27, 0x00	; 0
    8844:	ec eb       	ldi	r30, 0xBC	; 188
    8846:	f0 e0       	ldi	r31, 0x00	; 0
    8848:	80 81       	ld	r24, Z
    884a:	8f 70       	andi	r24, 0x0F	; 15
    884c:	80 68       	ori	r24, 0x80	; 128
    884e:	8c 93       	st	X, r24
  }
}
    8850:	0f 90       	pop	r0
    8852:	0f 90       	pop	r0
    8854:	0f 90       	pop	r0
    8856:	cf 91       	pop	r28
    8858:	df 91       	pop	r29
    885a:	08 95       	ret

0000885c <_ZN3I2C4CI2C15getReceivedByteEv>:

u08 CI2C::getReceivedByte(void) {
    885c:	df 93       	push	r29
    885e:	cf 93       	push	r28
    8860:	00 d0       	rcall	.+0      	; 0x8862 <_ZN3I2C4CI2C15getReceivedByteEv+0x6>
    8862:	cd b7       	in	r28, 0x3d	; 61
    8864:	de b7       	in	r29, 0x3e	; 62
    8866:	9a 83       	std	Y+2, r25	; 0x02
    8868:	89 83       	std	Y+1, r24	; 0x01
  // retieve received data byte from i2c TWDR
  return (inb(TWDR));
    886a:	eb eb       	ldi	r30, 0xBB	; 187
    886c:	f0 e0       	ldi	r31, 0x00	; 0
    886e:	80 81       	ld	r24, Z
}
    8870:	0f 90       	pop	r0
    8872:	0f 90       	pop	r0
    8874:	cf 91       	pop	r28
    8876:	df 91       	pop	r29
    8878:	08 95       	ret

0000887a <_ZN3I2C4CI2C9getStatusEv>:

u08 CI2C::getStatus(void) {
    887a:	df 93       	push	r29
    887c:	cf 93       	push	r28
    887e:	00 d0       	rcall	.+0      	; 0x8880 <_ZN3I2C4CI2C9getStatusEv+0x6>
    8880:	cd b7       	in	r28, 0x3d	; 61
    8882:	de b7       	in	r29, 0x3e	; 62
    8884:	9a 83       	std	Y+2, r25	; 0x02
    8886:	89 83       	std	Y+1, r24	; 0x01
  // retieve current i2c status from i2c TWSR
  return (inb(TWSR));
    8888:	e9 eb       	ldi	r30, 0xB9	; 185
    888a:	f0 e0       	ldi	r31, 0x00	; 0
    888c:	80 81       	ld	r24, Z
}
    888e:	0f 90       	pop	r0
    8890:	0f 90       	pop	r0
    8892:	cf 91       	pop	r28
    8894:	df 91       	pop	r29
    8896:	08 95       	ret

00008898 <_ZN3I2C4CI2C10masterSendEhhPh>:

void CI2C::masterSend(u08 deviceAddr, u08 length, u08* data) {
    8898:	df 93       	push	r29
    889a:	cf 93       	push	r28
    889c:	cd b7       	in	r28, 0x3d	; 61
    889e:	de b7       	in	r29, 0x3e	; 62
    88a0:	28 97       	sbiw	r28, 0x08	; 8
    88a2:	0f b6       	in	r0, 0x3f	; 63
    88a4:	f8 94       	cli
    88a6:	de bf       	out	0x3e, r29	; 62
    88a8:	0f be       	out	0x3f, r0	; 63
    88aa:	cd bf       	out	0x3d, r28	; 61
    88ac:	9b 83       	std	Y+3, r25	; 0x03
    88ae:	8a 83       	std	Y+2, r24	; 0x02
    88b0:	6c 83       	std	Y+4, r22	; 0x04
    88b2:	4d 83       	std	Y+5, r20	; 0x05
    88b4:	3f 83       	std	Y+7, r19	; 0x07
    88b6:	2e 83       	std	Y+6, r18	; 0x06
  u08 i;
  // wait for interface to be ready
  while (state)
    88b8:	ea 81       	ldd	r30, Y+2	; 0x02
    88ba:	fb 81       	ldd	r31, Y+3	; 0x03
    88bc:	80 81       	ld	r24, Z
    88be:	88 87       	std	Y+8, r24	; 0x08
    88c0:	88 85       	ldd	r24, Y+8	; 0x08
    88c2:	88 23       	and	r24, r24
    88c4:	11 f0       	breq	.+4      	; 0x88ca <_ZN3I2C4CI2C10masterSendEhhPh+0x32>
    88c6:	81 e0       	ldi	r24, 0x01	; 1
    88c8:	88 87       	std	Y+8, r24	; 0x08
    88ca:	88 85       	ldd	r24, Y+8	; 0x08
    88cc:	88 23       	and	r24, r24
    88ce:	a1 f7       	brne	.-24     	; 0x88b8 <_ZN3I2C4CI2C10masterSendEhhPh+0x20>
    ;
  // set state
  state = MASTER_TX;
    88d0:	ea 81       	ldd	r30, Y+2	; 0x02
    88d2:	fb 81       	ldd	r31, Y+3	; 0x03
    88d4:	82 e0       	ldi	r24, 0x02	; 2
    88d6:	80 83       	st	Z, r24
  // save data
  deviceAddrRW = (deviceAddr & 0xFE); // RW cleared: write operation
    88d8:	8c 81       	ldd	r24, Y+4	; 0x04
    88da:	8e 7f       	andi	r24, 0xFE	; 254
    88dc:	ea 81       	ldd	r30, Y+2	; 0x02
    88de:	fb 81       	ldd	r31, Y+3	; 0x03
    88e0:	81 a7       	std	Z+41, r24	; 0x29
  for (i = 0; i < length; i++)
    88e2:	19 82       	std	Y+1, r1	; 0x01
    88e4:	15 c0       	rjmp	.+42     	; 0x8910 <_ZN3I2C4CI2C10masterSendEhhPh+0x78>
    sendData[i] = *data++;
    88e6:	89 81       	ldd	r24, Y+1	; 0x01
    88e8:	28 2f       	mov	r18, r24
    88ea:	30 e0       	ldi	r19, 0x00	; 0
    88ec:	ee 81       	ldd	r30, Y+6	; 0x06
    88ee:	ff 81       	ldd	r31, Y+7	; 0x07
    88f0:	40 81       	ld	r20, Z
    88f2:	8a 81       	ldd	r24, Y+2	; 0x02
    88f4:	9b 81       	ldd	r25, Y+3	; 0x03
    88f6:	82 0f       	add	r24, r18
    88f8:	93 1f       	adc	r25, r19
    88fa:	fc 01       	movw	r30, r24
    88fc:	31 96       	adiw	r30, 0x01	; 1
    88fe:	40 83       	st	Z, r20
    8900:	8e 81       	ldd	r24, Y+6	; 0x06
    8902:	9f 81       	ldd	r25, Y+7	; 0x07
    8904:	01 96       	adiw	r24, 0x01	; 1
    8906:	9f 83       	std	Y+7, r25	; 0x07
    8908:	8e 83       	std	Y+6, r24	; 0x06
    ;
  // set state
  state = MASTER_TX;
  // save data
  deviceAddrRW = (deviceAddr & 0xFE); // RW cleared: write operation
  for (i = 0; i < length; i++)
    890a:	89 81       	ldd	r24, Y+1	; 0x01
    890c:	8f 5f       	subi	r24, 0xFF	; 255
    890e:	89 83       	std	Y+1, r24	; 0x01
    8910:	99 81       	ldd	r25, Y+1	; 0x01
    8912:	8d 81       	ldd	r24, Y+5	; 0x05
    8914:	98 17       	cp	r25, r24
    8916:	38 f3       	brcs	.-50     	; 0x88e6 <_ZN3I2C4CI2C10masterSendEhhPh+0x4e>
    sendData[i] = *data++;
  sendDataIndex = 0;
    8918:	ea 81       	ldd	r30, Y+2	; 0x02
    891a:	fb 81       	ldd	r31, Y+3	; 0x03
    891c:	11 8a       	std	Z+17, r1	; 0x11
  sendDataLength = length;
    891e:	ea 81       	ldd	r30, Y+2	; 0x02
    8920:	fb 81       	ldd	r31, Y+3	; 0x03
    8922:	8d 81       	ldd	r24, Y+5	; 0x05
    8924:	82 8b       	std	Z+18, r24	; 0x12
  // send start condition
  sendStart();
    8926:	8a 81       	ldd	r24, Y+2	; 0x02
    8928:	9b 81       	ldd	r25, Y+3	; 0x03
    892a:	0e 94 af 43 	call	0x875e	; 0x875e <_ZN3I2C4CI2C9sendStartEv>
}
    892e:	28 96       	adiw	r28, 0x08	; 8
    8930:	0f b6       	in	r0, 0x3f	; 63
    8932:	f8 94       	cli
    8934:	de bf       	out	0x3e, r29	; 62
    8936:	0f be       	out	0x3f, r0	; 63
    8938:	cd bf       	out	0x3d, r28	; 61
    893a:	cf 91       	pop	r28
    893c:	df 91       	pop	r29
    893e:	08 95       	ret

00008940 <_ZN3I2C4CI2C13masterReceiveEhhPh>:

void CI2C::masterReceive(u08 deviceAddr, u08 length, u08* data) {
    8940:	df 93       	push	r29
    8942:	cf 93       	push	r28
    8944:	cd b7       	in	r28, 0x3d	; 61
    8946:	de b7       	in	r29, 0x3e	; 62
    8948:	29 97       	sbiw	r28, 0x09	; 9
    894a:	0f b6       	in	r0, 0x3f	; 63
    894c:	f8 94       	cli
    894e:	de bf       	out	0x3e, r29	; 62
    8950:	0f be       	out	0x3f, r0	; 63
    8952:	cd bf       	out	0x3d, r28	; 61
    8954:	9b 83       	std	Y+3, r25	; 0x03
    8956:	8a 83       	std	Y+2, r24	; 0x02
    8958:	6c 83       	std	Y+4, r22	; 0x04
    895a:	4d 83       	std	Y+5, r20	; 0x05
    895c:	3f 83       	std	Y+7, r19	; 0x07
    895e:	2e 83       	std	Y+6, r18	; 0x06
  u08 i;
  // wait for interface to be ready
  while (state)
    8960:	ea 81       	ldd	r30, Y+2	; 0x02
    8962:	fb 81       	ldd	r31, Y+3	; 0x03
    8964:	80 81       	ld	r24, Z
    8966:	88 87       	std	Y+8, r24	; 0x08
    8968:	88 85       	ldd	r24, Y+8	; 0x08
    896a:	88 23       	and	r24, r24
    896c:	11 f0       	breq	.+4      	; 0x8972 <_ZN3I2C4CI2C13masterReceiveEhhPh+0x32>
    896e:	81 e0       	ldi	r24, 0x01	; 1
    8970:	88 87       	std	Y+8, r24	; 0x08
    8972:	88 85       	ldd	r24, Y+8	; 0x08
    8974:	88 23       	and	r24, r24
    8976:	a1 f7       	brne	.-24     	; 0x8960 <_ZN3I2C4CI2C13masterReceiveEhhPh+0x20>
    ;
  // set state
  state = MASTER_RX;
    8978:	ea 81       	ldd	r30, Y+2	; 0x02
    897a:	fb 81       	ldd	r31, Y+3	; 0x03
    897c:	83 e0       	ldi	r24, 0x03	; 3
    897e:	80 83       	st	Z, r24
  // save data
  deviceAddrRW = (deviceAddr | 0x01); // RW set: read operation
    8980:	8c 81       	ldd	r24, Y+4	; 0x04
    8982:	81 60       	ori	r24, 0x01	; 1
    8984:	ea 81       	ldd	r30, Y+2	; 0x02
    8986:	fb 81       	ldd	r31, Y+3	; 0x03
    8988:	81 a7       	std	Z+41, r24	; 0x29
  receiveDataIndex = 0;
    898a:	ea 81       	ldd	r30, Y+2	; 0x02
    898c:	fb 81       	ldd	r31, Y+3	; 0x03
    898e:	13 a2       	std	Z+35, r1	; 0x23
  receiveDataLength = length;
    8990:	ea 81       	ldd	r30, Y+2	; 0x02
    8992:	fb 81       	ldd	r31, Y+3	; 0x03
    8994:	8d 81       	ldd	r24, Y+5	; 0x05
    8996:	84 a3       	std	Z+36, r24	; 0x24
  // send start condition
  sendStart();
    8998:	8a 81       	ldd	r24, Y+2	; 0x02
    899a:	9b 81       	ldd	r25, Y+3	; 0x03
    899c:	0e 94 af 43 	call	0x875e	; 0x875e <_ZN3I2C4CI2C9sendStartEv>
  // wait for data
  while (state)
    89a0:	ea 81       	ldd	r30, Y+2	; 0x02
    89a2:	fb 81       	ldd	r31, Y+3	; 0x03
    89a4:	80 81       	ld	r24, Z
    89a6:	89 87       	std	Y+9, r24	; 0x09
    89a8:	89 85       	ldd	r24, Y+9	; 0x09
    89aa:	88 23       	and	r24, r24
    89ac:	11 f0       	breq	.+4      	; 0x89b2 <_ZN3I2C4CI2C13masterReceiveEhhPh+0x72>
    89ae:	81 e0       	ldi	r24, 0x01	; 1
    89b0:	89 87       	std	Y+9, r24	; 0x09
    89b2:	89 85       	ldd	r24, Y+9	; 0x09
    89b4:	88 23       	and	r24, r24
    89b6:	a1 f7       	brne	.-24     	; 0x89a0 <_ZN3I2C4CI2C13masterReceiveEhhPh+0x60>
    ;
  // return data
  for (i = 0; i < length; i++)
    89b8:	19 82       	std	Y+1, r1	; 0x01
    89ba:	15 c0       	rjmp	.+42     	; 0x89e6 <_ZN3I2C4CI2C13masterReceiveEhhPh+0xa6>
    *data++ = receiveData[i];
    89bc:	89 81       	ldd	r24, Y+1	; 0x01
    89be:	28 2f       	mov	r18, r24
    89c0:	30 e0       	ldi	r19, 0x00	; 0
    89c2:	8a 81       	ldd	r24, Y+2	; 0x02
    89c4:	9b 81       	ldd	r25, Y+3	; 0x03
    89c6:	82 0f       	add	r24, r18
    89c8:	93 1f       	adc	r25, r19
    89ca:	fc 01       	movw	r30, r24
    89cc:	73 96       	adiw	r30, 0x13	; 19
    89ce:	80 81       	ld	r24, Z
    89d0:	ee 81       	ldd	r30, Y+6	; 0x06
    89d2:	ff 81       	ldd	r31, Y+7	; 0x07
    89d4:	80 83       	st	Z, r24
    89d6:	8e 81       	ldd	r24, Y+6	; 0x06
    89d8:	9f 81       	ldd	r25, Y+7	; 0x07
    89da:	01 96       	adiw	r24, 0x01	; 1
    89dc:	9f 83       	std	Y+7, r25	; 0x07
    89de:	8e 83       	std	Y+6, r24	; 0x06
  sendStart();
  // wait for data
  while (state)
    ;
  // return data
  for (i = 0; i < length; i++)
    89e0:	89 81       	ldd	r24, Y+1	; 0x01
    89e2:	8f 5f       	subi	r24, 0xFF	; 255
    89e4:	89 83       	std	Y+1, r24	; 0x01
    89e6:	99 81       	ldd	r25, Y+1	; 0x01
    89e8:	8d 81       	ldd	r24, Y+5	; 0x05
    89ea:	98 17       	cp	r25, r24
    89ec:	38 f3       	brcs	.-50     	; 0x89bc <_ZN3I2C4CI2C13masterReceiveEhhPh+0x7c>
    *data++ = receiveData[i];
}
    89ee:	29 96       	adiw	r28, 0x09	; 9
    89f0:	0f b6       	in	r0, 0x3f	; 63
    89f2:	f8 94       	cli
    89f4:	de bf       	out	0x3e, r29	; 62
    89f6:	0f be       	out	0x3f, r0	; 63
    89f8:	cd bf       	out	0x3d, r28	; 61
    89fa:	cf 91       	pop	r28
    89fc:	df 91       	pop	r29
    89fe:	08 95       	ret

00008a00 <_ZN3I2C4CI2C7serviceEv>:

  return retval;
}
#endif

void CI2C::service() {
    8a00:	df 93       	push	r29
    8a02:	cf 93       	push	r28
    8a04:	00 d0       	rcall	.+0      	; 0x8a06 <_ZN3I2C4CI2C7serviceEv+0x6>
    8a06:	00 d0       	rcall	.+0      	; 0x8a08 <_ZN3I2C4CI2C7serviceEv+0x8>
    8a08:	0f 92       	push	r0
    8a0a:	cd b7       	in	r28, 0x3d	; 61
    8a0c:	de b7       	in	r29, 0x3e	; 62
    8a0e:	9b 83       	std	Y+3, r25	; 0x03
    8a10:	8a 83       	std	Y+2, r24	; 0x02
  // read status bits
  u08 status = inb(TWSR) & TWSR_STATUS_MASK;
    8a12:	e9 eb       	ldi	r30, 0xB9	; 185
    8a14:	f0 e0       	ldi	r31, 0x00	; 0
    8a16:	80 81       	ld	r24, Z
    8a18:	88 7f       	andi	r24, 0xF8	; 248
    8a1a:	89 83       	std	Y+1, r24	; 0x01

  switch (status) {
    8a1c:	89 81       	ldd	r24, Y+1	; 0x01
    8a1e:	28 2f       	mov	r18, r24
    8a20:	30 e0       	ldi	r19, 0x00	; 0
    8a22:	3d 83       	std	Y+5, r19	; 0x05
    8a24:	2c 83       	std	Y+4, r18	; 0x04
    8a26:	8c 81       	ldd	r24, Y+4	; 0x04
    8a28:	9d 81       	ldd	r25, Y+5	; 0x05
    8a2a:	88 36       	cpi	r24, 0x68	; 104
    8a2c:	91 05       	cpc	r25, r1
    8a2e:	09 f4       	brne	.+2      	; 0x8a32 <_ZN3I2C4CI2C7serviceEv+0x32>
    8a30:	4f c1       	rjmp	.+670    	; 0x8cd0 <_ZN3I2C4CI2C7serviceEv+0x2d0>
    8a32:	2c 81       	ldd	r18, Y+4	; 0x04
    8a34:	3d 81       	ldd	r19, Y+5	; 0x05
    8a36:	29 36       	cpi	r18, 0x69	; 105
    8a38:	31 05       	cpc	r19, r1
    8a3a:	0c f0       	brlt	.+2      	; 0x8a3e <_ZN3I2C4CI2C7serviceEv+0x3e>
    8a3c:	60 c0       	rjmp	.+192    	; 0x8afe <_ZN3I2C4CI2C7serviceEv+0xfe>
    8a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    8a40:	9d 81       	ldd	r25, Y+5	; 0x05
    8a42:	80 33       	cpi	r24, 0x30	; 48
    8a44:	91 05       	cpc	r25, r1
    8a46:	09 f4       	brne	.+2      	; 0x8a4a <_ZN3I2C4CI2C7serviceEv+0x4a>
    8a48:	ff c0       	rjmp	.+510    	; 0x8c48 <_ZN3I2C4CI2C7serviceEv+0x248>
    8a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    8a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    8a4e:	21 33       	cpi	r18, 0x31	; 49
    8a50:	31 05       	cpc	r19, r1
    8a52:	54 f5       	brge	.+84     	; 0x8aa8 <_ZN3I2C4CI2C7serviceEv+0xa8>
    8a54:	8c 81       	ldd	r24, Y+4	; 0x04
    8a56:	9d 81       	ldd	r25, Y+5	; 0x05
    8a58:	80 31       	cpi	r24, 0x10	; 16
    8a5a:	91 05       	cpc	r25, r1
    8a5c:	09 f4       	brne	.+2      	; 0x8a60 <_ZN3I2C4CI2C7serviceEv+0x60>
    8a5e:	b0 c0       	rjmp	.+352    	; 0x8bc0 <_ZN3I2C4CI2C7serviceEv+0x1c0>
    8a60:	2c 81       	ldd	r18, Y+4	; 0x04
    8a62:	3d 81       	ldd	r19, Y+5	; 0x05
    8a64:	21 31       	cpi	r18, 0x11	; 17
    8a66:	31 05       	cpc	r19, r1
    8a68:	64 f4       	brge	.+24     	; 0x8a82 <_ZN3I2C4CI2C7serviceEv+0x82>
    8a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    8a6c:	9d 81       	ldd	r25, Y+5	; 0x05
    8a6e:	00 97       	sbiw	r24, 0x00	; 0
    8a70:	09 f4       	brne	.+2      	; 0x8a74 <_ZN3I2C4CI2C7serviceEv+0x74>
    8a72:	e2 c1       	rjmp	.+964    	; 0x8e38 <_ZN3I2C4CI2C7serviceEv+0x438>
    8a74:	2c 81       	ldd	r18, Y+4	; 0x04
    8a76:	3d 81       	ldd	r19, Y+5	; 0x05
    8a78:	28 30       	cpi	r18, 0x08	; 8
    8a7a:	31 05       	cpc	r19, r1
    8a7c:	09 f4       	brne	.+2      	; 0x8a80 <_ZN3I2C4CI2C7serviceEv+0x80>
    8a7e:	a0 c0       	rjmp	.+320    	; 0x8bc0 <_ZN3I2C4CI2C7serviceEv+0x1c0>
    8a80:	e6 c1       	rjmp	.+972    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8a82:	8c 81       	ldd	r24, Y+4	; 0x04
    8a84:	9d 81       	ldd	r25, Y+5	; 0x05
    8a86:	80 32       	cpi	r24, 0x20	; 32
    8a88:	91 05       	cpc	r25, r1
    8a8a:	09 f4       	brne	.+2      	; 0x8a8e <_ZN3I2C4CI2C7serviceEv+0x8e>
    8a8c:	dd c0       	rjmp	.+442    	; 0x8c48 <_ZN3I2C4CI2C7serviceEv+0x248>
    8a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    8a90:	3d 81       	ldd	r19, Y+5	; 0x05
    8a92:	28 32       	cpi	r18, 0x28	; 40
    8a94:	31 05       	cpc	r19, r1
    8a96:	09 f4       	brne	.+2      	; 0x8a9a <_ZN3I2C4CI2C7serviceEv+0x9a>
    8a98:	9c c0       	rjmp	.+312    	; 0x8bd2 <_ZN3I2C4CI2C7serviceEv+0x1d2>
    8a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    8a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    8a9e:	88 31       	cpi	r24, 0x18	; 24
    8aa0:	91 05       	cpc	r25, r1
    8aa2:	09 f4       	brne	.+2      	; 0x8aa6 <_ZN3I2C4CI2C7serviceEv+0xa6>
    8aa4:	96 c0       	rjmp	.+300    	; 0x8bd2 <_ZN3I2C4CI2C7serviceEv+0x1d2>
    8aa6:	d3 c1       	rjmp	.+934    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    8aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    8aac:	28 34       	cpi	r18, 0x48	; 72
    8aae:	31 05       	cpc	r19, r1
    8ab0:	09 f4       	brne	.+2      	; 0x8ab4 <_ZN3I2C4CI2C7serviceEv+0xb4>
    8ab2:	ca c0       	rjmp	.+404    	; 0x8c48 <_ZN3I2C4CI2C7serviceEv+0x248>
    8ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    8ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    8ab8:	89 34       	cpi	r24, 0x49	; 73
    8aba:	91 05       	cpc	r25, r1
    8abc:	6c f4       	brge	.+26     	; 0x8ad8 <_ZN3I2C4CI2C7serviceEv+0xd8>
    8abe:	2c 81       	ldd	r18, Y+4	; 0x04
    8ac0:	3d 81       	ldd	r19, Y+5	; 0x05
    8ac2:	28 33       	cpi	r18, 0x38	; 56
    8ac4:	31 05       	cpc	r19, r1
    8ac6:	09 f4       	brne	.+2      	; 0x8aca <_ZN3I2C4CI2C7serviceEv+0xca>
    8ac8:	c9 c0       	rjmp	.+402    	; 0x8c5c <_ZN3I2C4CI2C7serviceEv+0x25c>
    8aca:	8c 81       	ldd	r24, Y+4	; 0x04
    8acc:	9d 81       	ldd	r25, Y+5	; 0x05
    8ace:	80 34       	cpi	r24, 0x40	; 64
    8ad0:	91 05       	cpc	r25, r1
    8ad2:	09 f4       	brne	.+2      	; 0x8ad6 <_ZN3I2C4CI2C7serviceEv+0xd6>
    8ad4:	e3 c0       	rjmp	.+454    	; 0x8c9c <_ZN3I2C4CI2C7serviceEv+0x29c>
    8ad6:	bb c1       	rjmp	.+886    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    8ada:	3d 81       	ldd	r19, Y+5	; 0x05
    8adc:	28 35       	cpi	r18, 0x58	; 88
    8ade:	31 05       	cpc	r19, r1
    8ae0:	09 f4       	brne	.+2      	; 0x8ae4 <_ZN3I2C4CI2C7serviceEv+0xe4>
    8ae2:	9e c0       	rjmp	.+316    	; 0x8c20 <_ZN3I2C4CI2C7serviceEv+0x220>
    8ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    8ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    8ae8:	80 36       	cpi	r24, 0x60	; 96
    8aea:	91 05       	cpc	r25, r1
    8aec:	09 f4       	brne	.+2      	; 0x8af0 <_ZN3I2C4CI2C7serviceEv+0xf0>
    8aee:	f0 c0       	rjmp	.+480    	; 0x8cd0 <_ZN3I2C4CI2C7serviceEv+0x2d0>
    8af0:	2c 81       	ldd	r18, Y+4	; 0x04
    8af2:	3d 81       	ldd	r19, Y+5	; 0x05
    8af4:	20 35       	cpi	r18, 0x50	; 80
    8af6:	31 05       	cpc	r19, r1
    8af8:	09 f4       	brne	.+2      	; 0x8afc <_ZN3I2C4CI2C7serviceEv+0xfc>
    8afa:	bc c0       	rjmp	.+376    	; 0x8c74 <_ZN3I2C4CI2C7serviceEv+0x274>
    8afc:	a8 c1       	rjmp	.+848    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8afe:	8c 81       	ldd	r24, Y+4	; 0x04
    8b00:	9d 81       	ldd	r25, Y+5	; 0x05
    8b02:	80 3a       	cpi	r24, 0xA0	; 160
    8b04:	91 05       	cpc	r25, r1
    8b06:	09 f4       	brne	.+2      	; 0x8b0a <_ZN3I2C4CI2C7serviceEv+0x10a>
    8b08:	1e c1       	rjmp	.+572    	; 0x8d46 <_ZN3I2C4CI2C7serviceEv+0x346>
    8b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    8b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    8b0e:	21 3a       	cpi	r18, 0xA1	; 161
    8b10:	31 05       	cpc	r19, r1
    8b12:	5c f5       	brge	.+86     	; 0x8b6a <_ZN3I2C4CI2C7serviceEv+0x16a>
    8b14:	8c 81       	ldd	r24, Y+4	; 0x04
    8b16:	9d 81       	ldd	r25, Y+5	; 0x05
    8b18:	80 38       	cpi	r24, 0x80	; 128
    8b1a:	91 05       	cpc	r25, r1
    8b1c:	09 f4       	brne	.+2      	; 0x8b20 <_ZN3I2C4CI2C7serviceEv+0x120>
    8b1e:	e8 c0       	rjmp	.+464    	; 0x8cf0 <_ZN3I2C4CI2C7serviceEv+0x2f0>
    8b20:	2c 81       	ldd	r18, Y+4	; 0x04
    8b22:	3d 81       	ldd	r19, Y+5	; 0x05
    8b24:	21 38       	cpi	r18, 0x81	; 129
    8b26:	31 05       	cpc	r19, r1
    8b28:	6c f4       	brge	.+26     	; 0x8b44 <_ZN3I2C4CI2C7serviceEv+0x144>
    8b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    8b2c:	9d 81       	ldd	r25, Y+5	; 0x05
    8b2e:	80 37       	cpi	r24, 0x70	; 112
    8b30:	91 05       	cpc	r25, r1
    8b32:	09 f4       	brne	.+2      	; 0x8b36 <_ZN3I2C4CI2C7serviceEv+0x136>
    8b34:	cd c0       	rjmp	.+410    	; 0x8cd0 <_ZN3I2C4CI2C7serviceEv+0x2d0>
    8b36:	2c 81       	ldd	r18, Y+4	; 0x04
    8b38:	3d 81       	ldd	r19, Y+5	; 0x05
    8b3a:	28 37       	cpi	r18, 0x78	; 120
    8b3c:	31 05       	cpc	r19, r1
    8b3e:	09 f4       	brne	.+2      	; 0x8b42 <_ZN3I2C4CI2C7serviceEv+0x142>
    8b40:	c7 c0       	rjmp	.+398    	; 0x8cd0 <_ZN3I2C4CI2C7serviceEv+0x2d0>
    8b42:	85 c1       	rjmp	.+778    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8b44:	8c 81       	ldd	r24, Y+4	; 0x04
    8b46:	9d 81       	ldd	r25, Y+5	; 0x05
    8b48:	80 39       	cpi	r24, 0x90	; 144
    8b4a:	91 05       	cpc	r25, r1
    8b4c:	09 f4       	brne	.+2      	; 0x8b50 <_ZN3I2C4CI2C7serviceEv+0x150>
    8b4e:	d0 c0       	rjmp	.+416    	; 0x8cf0 <_ZN3I2C4CI2C7serviceEv+0x2f0>
    8b50:	2c 81       	ldd	r18, Y+4	; 0x04
    8b52:	3d 81       	ldd	r19, Y+5	; 0x05
    8b54:	28 39       	cpi	r18, 0x98	; 152
    8b56:	31 05       	cpc	r19, r1
    8b58:	09 f4       	brne	.+2      	; 0x8b5c <_ZN3I2C4CI2C7serviceEv+0x15c>
    8b5a:	ef c0       	rjmp	.+478    	; 0x8d3a <_ZN3I2C4CI2C7serviceEv+0x33a>
    8b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    8b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    8b60:	88 38       	cpi	r24, 0x88	; 136
    8b62:	91 05       	cpc	r25, r1
    8b64:	09 f4       	brne	.+2      	; 0x8b68 <_ZN3I2C4CI2C7serviceEv+0x168>
    8b66:	e9 c0       	rjmp	.+466    	; 0x8d3a <_ZN3I2C4CI2C7serviceEv+0x33a>
    8b68:	72 c1       	rjmp	.+740    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8b6a:	2c 81       	ldd	r18, Y+4	; 0x04
    8b6c:	3d 81       	ldd	r19, Y+5	; 0x05
    8b6e:	28 3b       	cpi	r18, 0xB8	; 184
    8b70:	31 05       	cpc	r19, r1
    8b72:	09 f4       	brne	.+2      	; 0x8b76 <_ZN3I2C4CI2C7serviceEv+0x176>
    8b74:	27 c1       	rjmp	.+590    	; 0x8dc4 <_ZN3I2C4CI2C7serviceEv+0x3c4>
    8b76:	8c 81       	ldd	r24, Y+4	; 0x04
    8b78:	9d 81       	ldd	r25, Y+5	; 0x05
    8b7a:	89 3b       	cpi	r24, 0xB9	; 185
    8b7c:	91 05       	cpc	r25, r1
    8b7e:	6c f4       	brge	.+26     	; 0x8b9a <_ZN3I2C4CI2C7serviceEv+0x19a>
    8b80:	2c 81       	ldd	r18, Y+4	; 0x04
    8b82:	3d 81       	ldd	r19, Y+5	; 0x05
    8b84:	28 3a       	cpi	r18, 0xA8	; 168
    8b86:	31 05       	cpc	r19, r1
    8b88:	09 f4       	brne	.+2      	; 0x8b8c <_ZN3I2C4CI2C7serviceEv+0x18c>
    8b8a:	ff c0       	rjmp	.+510    	; 0x8d8a <_ZN3I2C4CI2C7serviceEv+0x38a>
    8b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    8b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    8b90:	80 3b       	cpi	r24, 0xB0	; 176
    8b92:	91 05       	cpc	r25, r1
    8b94:	09 f4       	brne	.+2      	; 0x8b98 <_ZN3I2C4CI2C7serviceEv+0x198>
    8b96:	f9 c0       	rjmp	.+498    	; 0x8d8a <_ZN3I2C4CI2C7serviceEv+0x38a>
    8b98:	5a c1       	rjmp	.+692    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    8b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    8b9e:	28 3c       	cpi	r18, 0xC8	; 200
    8ba0:	31 05       	cpc	r19, r1
    8ba2:	09 f4       	brne	.+2      	; 0x8ba6 <_ZN3I2C4CI2C7serviceEv+0x1a6>
    8ba4:	3d c1       	rjmp	.+634    	; 0x8e20 <_ZN3I2C4CI2C7serviceEv+0x420>
    8ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    8ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    8baa:	88 3f       	cpi	r24, 0xF8	; 248
    8bac:	91 05       	cpc	r25, r1
    8bae:	09 f4       	brne	.+2      	; 0x8bb2 <_ZN3I2C4CI2C7serviceEv+0x1b2>
    8bb0:	4e c1       	rjmp	.+668    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
    8bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    8bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    8bb6:	20 3c       	cpi	r18, 0xC0	; 192
    8bb8:	31 05       	cpc	r19, r1
    8bba:	09 f4       	brne	.+2      	; 0x8bbe <_ZN3I2C4CI2C7serviceEv+0x1be>
    8bbc:	31 c1       	rjmp	.+610    	; 0x8e20 <_ZN3I2C4CI2C7serviceEv+0x420>
    8bbe:	47 c1       	rjmp	.+654    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      ////rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: M->START\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // send device address
      sendByte(deviceAddrRW);
    8bc0:	ea 81       	ldd	r30, Y+2	; 0x02
    8bc2:	fb 81       	ldd	r31, Y+3	; 0x03
    8bc4:	21 a5       	ldd	r18, Z+41	; 0x29
    8bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    8bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    8bca:	62 2f       	mov	r22, r18
    8bcc:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <_ZN3I2C4CI2C8sendByteEh>
    8bd0:	3e c1       	rjmp	.+636    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
#ifdef I2C_DEBUG
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: MT->SLA_ACK or DATA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      if (sendDataIndex < sendDataLength) {
    8bd2:	ea 81       	ldd	r30, Y+2	; 0x02
    8bd4:	fb 81       	ldd	r31, Y+3	; 0x03
    8bd6:	91 89       	ldd	r25, Z+17	; 0x11
    8bd8:	ea 81       	ldd	r30, Y+2	; 0x02
    8bda:	fb 81       	ldd	r31, Y+3	; 0x03
    8bdc:	82 89       	ldd	r24, Z+18	; 0x12
    8bde:	98 17       	cp	r25, r24
    8be0:	b8 f4       	brcc	.+46     	; 0x8c10 <_ZN3I2C4CI2C7serviceEv+0x210>
        // send data
        sendByte(sendData[sendDataIndex++]);
    8be2:	ea 81       	ldd	r30, Y+2	; 0x02
    8be4:	fb 81       	ldd	r31, Y+3	; 0x03
    8be6:	41 89       	ldd	r20, Z+17	; 0x11
    8be8:	24 2f       	mov	r18, r20
    8bea:	30 e0       	ldi	r19, 0x00	; 0
    8bec:	8a 81       	ldd	r24, Y+2	; 0x02
    8bee:	9b 81       	ldd	r25, Y+3	; 0x03
    8bf0:	82 0f       	add	r24, r18
    8bf2:	93 1f       	adc	r25, r19
    8bf4:	fc 01       	movw	r30, r24
    8bf6:	31 96       	adiw	r30, 0x01	; 1
    8bf8:	20 81       	ld	r18, Z
    8bfa:	84 2f       	mov	r24, r20
    8bfc:	8f 5f       	subi	r24, 0xFF	; 255
    8bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    8c00:	fb 81       	ldd	r31, Y+3	; 0x03
    8c02:	81 8b       	std	Z+17, r24	; 0x11
    8c04:	8a 81       	ldd	r24, Y+2	; 0x02
    8c06:	9b 81       	ldd	r25, Y+3	; 0x03
    8c08:	62 2f       	mov	r22, r18
    8c0a:	0e 94 f0 43 	call	0x87e0	; 0x87e0 <_ZN3I2C4CI2C8sendByteEh>
    8c0e:	1f c1       	rjmp	.+574    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      } else {
        // transmit stop condition, enable SLA ACK
        sendStop();
    8c10:	8a 81       	ldd	r24, Y+2	; 0x02
    8c12:	9b 81       	ldd	r25, Y+3	; 0x03
    8c14:	0e 94 c3 43 	call	0x8786	; 0x8786 <_ZN3I2C4CI2C8sendStopEv>
        // set state
        state = IDLE;
    8c18:	ea 81       	ldd	r30, Y+2	; 0x02
    8c1a:	fb 81       	ldd	r31, Y+3	; 0x03
    8c1c:	10 82       	st	Z, r1
    8c1e:	17 c1       	rjmp	.+558    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: MR->DATA_NACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // store final received data byte
      receiveData[receiveDataIndex++] = inb(TWDR);
    8c20:	ea 81       	ldd	r30, Y+2	; 0x02
    8c22:	fb 81       	ldd	r31, Y+3	; 0x03
    8c24:	53 a1       	ldd	r21, Z+35	; 0x23
    8c26:	25 2f       	mov	r18, r21
    8c28:	30 e0       	ldi	r19, 0x00	; 0
    8c2a:	eb eb       	ldi	r30, 0xBB	; 187
    8c2c:	f0 e0       	ldi	r31, 0x00	; 0
    8c2e:	40 81       	ld	r20, Z
    8c30:	8a 81       	ldd	r24, Y+2	; 0x02
    8c32:	9b 81       	ldd	r25, Y+3	; 0x03
    8c34:	82 0f       	add	r24, r18
    8c36:	93 1f       	adc	r25, r19
    8c38:	fc 01       	movw	r30, r24
    8c3a:	73 96       	adiw	r30, 0x13	; 19
    8c3c:	40 83       	st	Z, r20
    8c3e:	85 2f       	mov	r24, r21
    8c40:	8f 5f       	subi	r24, 0xFF	; 255
    8c42:	ea 81       	ldd	r30, Y+2	; 0x02
    8c44:	fb 81       	ldd	r31, Y+3	; 0x03
    8c46:	83 a3       	std	Z+35, r24	; 0x23
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: MTR->SLA_NACK or MT->DATA_NACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // transmit stop condition, enable SLA ACK
      devices[0]->sendStop();
    8c48:	80 91 59 0a 	lds	r24, 0x0A59
    8c4c:	90 91 5a 0a 	lds	r25, 0x0A5A
    8c50:	0e 94 c3 43 	call	0x8786	; 0x8786 <_ZN3I2C4CI2C8sendStopEv>
      // set state
      state = IDLE;
    8c54:	ea 81       	ldd	r30, Y+2	; 0x02
    8c56:	fb 81       	ldd	r31, Y+3	; 0x03
    8c58:	10 82       	st	Z, r1
    8c5a:	f9 c0       	rjmp	.+498    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: MT->ARB_LOST\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // release bus
      outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    8c5c:	ac eb       	ldi	r26, 0xBC	; 188
    8c5e:	b0 e0       	ldi	r27, 0x00	; 0
    8c60:	ec eb       	ldi	r30, 0xBC	; 188
    8c62:	f0 e0       	ldi	r31, 0x00	; 0
    8c64:	80 81       	ld	r24, Z
    8c66:	8f 70       	andi	r24, 0x0F	; 15
    8c68:	80 68       	ori	r24, 0x80	; 128
    8c6a:	8c 93       	st	X, r24
      // set state
      state = IDLE;
    8c6c:	ea 81       	ldd	r30, Y+2	; 0x02
    8c6e:	fb 81       	ldd	r31, Y+3	; 0x03
    8c70:	10 82       	st	Z, r1
    8c72:	ed c0       	rjmp	.+474    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: MR->DATA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // store received data byte
      receiveData[receiveDataIndex++] = inb(TWDR);
    8c74:	ea 81       	ldd	r30, Y+2	; 0x02
    8c76:	fb 81       	ldd	r31, Y+3	; 0x03
    8c78:	53 a1       	ldd	r21, Z+35	; 0x23
    8c7a:	25 2f       	mov	r18, r21
    8c7c:	30 e0       	ldi	r19, 0x00	; 0
    8c7e:	eb eb       	ldi	r30, 0xBB	; 187
    8c80:	f0 e0       	ldi	r31, 0x00	; 0
    8c82:	40 81       	ld	r20, Z
    8c84:	8a 81       	ldd	r24, Y+2	; 0x02
    8c86:	9b 81       	ldd	r25, Y+3	; 0x03
    8c88:	82 0f       	add	r24, r18
    8c8a:	93 1f       	adc	r25, r19
    8c8c:	fc 01       	movw	r30, r24
    8c8e:	73 96       	adiw	r30, 0x13	; 19
    8c90:	40 83       	st	Z, r20
    8c92:	85 2f       	mov	r24, r21
    8c94:	8f 5f       	subi	r24, 0xFF	; 255
    8c96:	ea 81       	ldd	r30, Y+2	; 0x02
    8c98:	fb 81       	ldd	r31, Y+3	; 0x03
    8c9a:	83 a3       	std	Z+35, r24	; 0x23
#ifdef I2C_DEBUG
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: MR->SLA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      if (receiveDataIndex < (receiveDataLength - 1))
    8c9c:	ea 81       	ldd	r30, Y+2	; 0x02
    8c9e:	fb 81       	ldd	r31, Y+3	; 0x03
    8ca0:	83 a1       	ldd	r24, Z+35	; 0x23
    8ca2:	28 2f       	mov	r18, r24
    8ca4:	30 e0       	ldi	r19, 0x00	; 0
    8ca6:	ea 81       	ldd	r30, Y+2	; 0x02
    8ca8:	fb 81       	ldd	r31, Y+3	; 0x03
    8caa:	84 a1       	ldd	r24, Z+36	; 0x24
    8cac:	88 2f       	mov	r24, r24
    8cae:	90 e0       	ldi	r25, 0x00	; 0
    8cb0:	01 97       	sbiw	r24, 0x01	; 1
    8cb2:	28 17       	cp	r18, r24
    8cb4:	39 07       	cpc	r19, r25
    8cb6:	34 f4       	brge	.+12     	; 0x8cc4 <_ZN3I2C4CI2C7serviceEv+0x2c4>
        // data byte will be received, reply with ACK (more bytes in transfer)
        receiveByte(TRUE);
    8cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    8cba:	9b 81       	ldd	r25, Y+3	; 0x03
    8cbc:	61 e0       	ldi	r22, 0x01	; 1
    8cbe:	0e 94 0b 44 	call	0x8816	; 0x8816 <_ZN3I2C4CI2C11receiveByteEh>
    8cc2:	c5 c0       	rjmp	.+394    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      else
        // data byte will be received, reply with NACK (final byte in transfer)
        receiveByte(FALSE);
    8cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    8cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    8cc8:	60 e0       	ldi	r22, 0x00	; 0
    8cca:	0e 94 0b 44 	call	0x8816	; 0x8816 <_ZN3I2C4CI2C11receiveByteEh>
    8cce:	bf c0       	rjmp	.+382    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //PRINTF("I2C: SR->SLA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // we are being addressed as slave for writing (data will be received from master)
      // set state
      state = SLAVE_RX;
    8cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    8cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    8cd4:	85 e0       	ldi	r24, 0x05	; 5
    8cd6:	80 83       	st	Z, r24
      // prepare buffer
      receiveDataIndex = 0;
    8cd8:	ea 81       	ldd	r30, Y+2	; 0x02
    8cda:	fb 81       	ldd	r31, Y+3	; 0x03
    8cdc:	13 a2       	std	Z+35, r1	; 0x23
      // receive data byte and return ACK
      outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    8cde:	ac eb       	ldi	r26, 0xBC	; 188
    8ce0:	b0 e0       	ldi	r27, 0x00	; 0
    8ce2:	ec eb       	ldi	r30, 0xBC	; 188
    8ce4:	f0 e0       	ldi	r31, 0x00	; 0
    8ce6:	80 81       	ld	r24, Z
    8ce8:	8f 70       	andi	r24, 0x0F	; 15
    8cea:	80 6c       	ori	r24, 0xC0	; 192
    8cec:	8c 93       	st	X, r24
    8cee:	af c0       	rjmp	.+350    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: SR->DATA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // get previously received data byte
      receiveData[receiveDataIndex++] = inb(TWDR);
    8cf0:	ea 81       	ldd	r30, Y+2	; 0x02
    8cf2:	fb 81       	ldd	r31, Y+3	; 0x03
    8cf4:	53 a1       	ldd	r21, Z+35	; 0x23
    8cf6:	25 2f       	mov	r18, r21
    8cf8:	30 e0       	ldi	r19, 0x00	; 0
    8cfa:	eb eb       	ldi	r30, 0xBB	; 187
    8cfc:	f0 e0       	ldi	r31, 0x00	; 0
    8cfe:	40 81       	ld	r20, Z
    8d00:	8a 81       	ldd	r24, Y+2	; 0x02
    8d02:	9b 81       	ldd	r25, Y+3	; 0x03
    8d04:	82 0f       	add	r24, r18
    8d06:	93 1f       	adc	r25, r19
    8d08:	fc 01       	movw	r30, r24
    8d0a:	73 96       	adiw	r30, 0x13	; 19
    8d0c:	40 83       	st	Z, r20
    8d0e:	85 2f       	mov	r24, r21
    8d10:	8f 5f       	subi	r24, 0xFF	; 255
    8d12:	ea 81       	ldd	r30, Y+2	; 0x02
    8d14:	fb 81       	ldd	r31, Y+3	; 0x03
    8d16:	83 a3       	std	Z+35, r24	; 0x23
      // check receive buffer status
      if (receiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE) {
    8d18:	ea 81       	ldd	r30, Y+2	; 0x02
    8d1a:	fb 81       	ldd	r31, Y+3	; 0x03
    8d1c:	83 a1       	ldd	r24, Z+35	; 0x23
    8d1e:	80 31       	cpi	r24, 0x10	; 16
    8d20:	30 f4       	brcc	.+12     	; 0x8d2e <_ZN3I2C4CI2C7serviceEv+0x32e>
        // receive data byte and return ACK
        receiveByte(TRUE);
    8d22:	8a 81       	ldd	r24, Y+2	; 0x02
    8d24:	9b 81       	ldd	r25, Y+3	; 0x03
    8d26:	61 e0       	ldi	r22, 0x01	; 1
    8d28:	0e 94 0b 44 	call	0x8816	; 0x8816 <_ZN3I2C4CI2C11receiveByteEh>
    8d2c:	90 c0       	rjmp	.+288    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
        //outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
      } else {
        // receive data byte and return NACK
        receiveByte(FALSE);
    8d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    8d30:	9b 81       	ldd	r25, Y+3	; 0x03
    8d32:	60 e0       	ldi	r22, 0x00	; 0
    8d34:	0e 94 0b 44 	call	0x8816	; 0x8816 <_ZN3I2C4CI2C11receiveByteEh>
    8d38:	8a c0       	rjmp	.+276    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: SR->DATA_NACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // receive data byte and return NACK
      receiveByte(FALSE);
    8d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    8d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    8d3e:	60 e0       	ldi	r22, 0x00	; 0
    8d40:	0e 94 0b 44 	call	0x8816	; 0x8816 <_ZN3I2C4CI2C11receiveByteEh>
    8d44:	84 c0       	rjmp	.+264    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: SR->SR_STOP\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // switch to SR mode with SLA ACK
      outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    8d46:	ac eb       	ldi	r26, 0xBC	; 188
    8d48:	b0 e0       	ldi	r27, 0x00	; 0
    8d4a:	ec eb       	ldi	r30, 0xBC	; 188
    8d4c:	f0 e0       	ldi	r31, 0x00	; 0
    8d4e:	80 81       	ld	r24, Z
    8d50:	8f 70       	andi	r24, 0x0F	; 15
    8d52:	80 6c       	ori	r24, 0xC0	; 192
    8d54:	8c 93       	st	X, r24
      // i2c receive is complete, call CI2C::slaveReceive
      if (slaveReceive)
    8d56:	ea 81       	ldd	r30, Y+2	; 0x02
    8d58:	fb 81       	ldd	r31, Y+3	; 0x03
    8d5a:	85 a1       	ldd	r24, Z+37	; 0x25
    8d5c:	96 a1       	ldd	r25, Z+38	; 0x26
    8d5e:	00 97       	sbiw	r24, 0x00	; 0
    8d60:	81 f0       	breq	.+32     	; 0x8d82 <_ZN3I2C4CI2C7serviceEv+0x382>
        slaveReceive(receiveDataIndex, receiveData);
    8d62:	ea 81       	ldd	r30, Y+2	; 0x02
    8d64:	fb 81       	ldd	r31, Y+3	; 0x03
    8d66:	a5 a1       	ldd	r26, Z+37	; 0x25
    8d68:	b6 a1       	ldd	r27, Z+38	; 0x26
    8d6a:	ea 81       	ldd	r30, Y+2	; 0x02
    8d6c:	fb 81       	ldd	r31, Y+3	; 0x03
    8d6e:	43 a1       	ldd	r20, Z+35	; 0x23
    8d70:	8a 81       	ldd	r24, Y+2	; 0x02
    8d72:	9b 81       	ldd	r25, Y+3	; 0x03
    8d74:	9c 01       	movw	r18, r24
    8d76:	2d 5e       	subi	r18, 0xED	; 237
    8d78:	3f 4f       	sbci	r19, 0xFF	; 255
    8d7a:	84 2f       	mov	r24, r20
    8d7c:	b9 01       	movw	r22, r18
    8d7e:	fd 01       	movw	r30, r26
    8d80:	09 95       	icall
      // set state
      state = IDLE;
    8d82:	ea 81       	ldd	r30, Y+2	; 0x02
    8d84:	fb 81       	ldd	r31, Y+3	; 0x03
    8d86:	10 82       	st	Z, r1
    8d88:	62 c0       	rjmp	.+196    	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //PRINTF("I2C: ST->SLA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // we are being addressed as slave for reading (data must be transmitted back to master)
      // set state
      state = SLAVE_TX;
    8d8a:	ea 81       	ldd	r30, Y+2	; 0x02
    8d8c:	fb 81       	ldd	r31, Y+3	; 0x03
    8d8e:	84 e0       	ldi	r24, 0x04	; 4
    8d90:	80 83       	st	Z, r24
      // request data from application
      if (slaveTransmit)
    8d92:	ea 81       	ldd	r30, Y+2	; 0x02
    8d94:	fb 81       	ldd	r31, Y+3	; 0x03
    8d96:	87 a1       	ldd	r24, Z+39	; 0x27
    8d98:	90 a5       	ldd	r25, Z+40	; 0x28
    8d9a:	00 97       	sbiw	r24, 0x00	; 0
    8d9c:	81 f0       	breq	.+32     	; 0x8dbe <_ZN3I2C4CI2C7serviceEv+0x3be>
        sendDataLength = slaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, sendData);
    8d9e:	ea 81       	ldd	r30, Y+2	; 0x02
    8da0:	fb 81       	ldd	r31, Y+3	; 0x03
    8da2:	07 a0       	ldd	r0, Z+39	; 0x27
    8da4:	f0 a5       	ldd	r31, Z+40	; 0x28
    8da6:	e0 2d       	mov	r30, r0
    8da8:	8a 81       	ldd	r24, Y+2	; 0x02
    8daa:	9b 81       	ldd	r25, Y+3	; 0x03
    8dac:	9c 01       	movw	r18, r24
    8dae:	2f 5f       	subi	r18, 0xFF	; 255
    8db0:	3f 4f       	sbci	r19, 0xFF	; 255
    8db2:	80 e1       	ldi	r24, 0x10	; 16
    8db4:	b9 01       	movw	r22, r18
    8db6:	09 95       	icall
    8db8:	ea 81       	ldd	r30, Y+2	; 0x02
    8dba:	fb 81       	ldd	r31, Y+3	; 0x03
    8dbc:	82 8b       	std	Z+18, r24	; 0x12
      // reset data index
      sendDataIndex = 0;
    8dbe:	ea 81       	ldd	r30, Y+2	; 0x02
    8dc0:	fb 81       	ldd	r31, Y+3	; 0x03
    8dc2:	11 8a       	std	Z+17, r1	; 0x11
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: ST->DATA_ACK\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // transmit data byte
      outb(TWDR, sendData[sendDataIndex++]);
    8dc4:	ab eb       	ldi	r26, 0xBB	; 187
    8dc6:	b0 e0       	ldi	r27, 0x00	; 0
    8dc8:	ea 81       	ldd	r30, Y+2	; 0x02
    8dca:	fb 81       	ldd	r31, Y+3	; 0x03
    8dcc:	41 89       	ldd	r20, Z+17	; 0x11
    8dce:	24 2f       	mov	r18, r20
    8dd0:	30 e0       	ldi	r19, 0x00	; 0
    8dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    8dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    8dd6:	82 0f       	add	r24, r18
    8dd8:	93 1f       	adc	r25, r19
    8dda:	fc 01       	movw	r30, r24
    8ddc:	31 96       	adiw	r30, 0x01	; 1
    8dde:	80 81       	ld	r24, Z
    8de0:	8c 93       	st	X, r24
    8de2:	84 2f       	mov	r24, r20
    8de4:	8f 5f       	subi	r24, 0xFF	; 255
    8de6:	ea 81       	ldd	r30, Y+2	; 0x02
    8de8:	fb 81       	ldd	r31, Y+3	; 0x03
    8dea:	81 8b       	std	Z+17, r24	; 0x11
      if (sendDataIndex < sendDataLength)
    8dec:	ea 81       	ldd	r30, Y+2	; 0x02
    8dee:	fb 81       	ldd	r31, Y+3	; 0x03
    8df0:	91 89       	ldd	r25, Z+17	; 0x11
    8df2:	ea 81       	ldd	r30, Y+2	; 0x02
    8df4:	fb 81       	ldd	r31, Y+3	; 0x03
    8df6:	82 89       	ldd	r24, Z+18	; 0x12
    8df8:	98 17       	cp	r25, r24
    8dfa:	48 f4       	brcc	.+18     	; 0x8e0e <_ZN3I2C4CI2C7serviceEv+0x40e>
        // expect ACK to data byte
        outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    8dfc:	ac eb       	ldi	r26, 0xBC	; 188
    8dfe:	b0 e0       	ldi	r27, 0x00	; 0
    8e00:	ec eb       	ldi	r30, 0xBC	; 188
    8e02:	f0 e0       	ldi	r31, 0x00	; 0
    8e04:	80 81       	ld	r24, Z
    8e06:	8f 70       	andi	r24, 0x0F	; 15
    8e08:	80 6c       	ori	r24, 0xC0	; 192
    8e0a:	8c 93       	st	X, r24
    8e0c:	20 c0       	rjmp	.+64     	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      else
        // expect NACK to data byte
        outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
    8e0e:	ac eb       	ldi	r26, 0xBC	; 188
    8e10:	b0 e0       	ldi	r27, 0x00	; 0
    8e12:	ec eb       	ldi	r30, 0xBC	; 188
    8e14:	f0 e0       	ldi	r31, 0x00	; 0
    8e16:	80 81       	ld	r24, Z
    8e18:	8f 70       	andi	r24, 0x0F	; 15
    8e1a:	80 68       	ori	r24, 0x80	; 128
    8e1c:	8c 93       	st	X, r24
    8e1e:	17 c0       	rjmp	.+46     	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //PRINTF("I2C: ST->DATA_NACK or LAST_DATA\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // all done
      // switch to open slave
      outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
    8e20:	ac eb       	ldi	r26, 0xBC	; 188
    8e22:	b0 e0       	ldi	r27, 0x00	; 0
    8e24:	ec eb       	ldi	r30, 0xBC	; 188
    8e26:	f0 e0       	ldi	r31, 0x00	; 0
    8e28:	80 81       	ld	r24, Z
    8e2a:	8f 70       	andi	r24, 0x0F	; 15
    8e2c:	80 6c       	ori	r24, 0xC0	; 192
    8e2e:	8c 93       	st	X, r24
      // set state
      state = IDLE;
    8e30:	ea 81       	ldd	r30, Y+2	; 0x02
    8e32:	fb 81       	ldd	r31, Y+3	; 0x03
    8e34:	10 82       	st	Z, r1
    8e36:	0b c0       	rjmp	.+22     	; 0x8e4e <_ZN3I2C4CI2C7serviceEv+0x44e>
      //rprintfInit(uart1AddToTxBuffer);
      //PRINTF("I2C: BUS_ERROR\r\n");
      //rprintfInit(uart1SendByte);
#endif
      // reset internal hardware and release bus
      outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWSTO)|BV(TWEA));
    8e38:	ac eb       	ldi	r26, 0xBC	; 188
    8e3a:	b0 e0       	ldi	r27, 0x00	; 0
    8e3c:	ec eb       	ldi	r30, 0xBC	; 188
    8e3e:	f0 e0       	ldi	r31, 0x00	; 0
    8e40:	80 81       	ld	r24, Z
    8e42:	8f 70       	andi	r24, 0x0F	; 15
    8e44:	80 6d       	ori	r24, 0xD0	; 208
    8e46:	8c 93       	st	X, r24
      // set state
      state = IDLE;
    8e48:	ea 81       	ldd	r30, Y+2	; 0x02
    8e4a:	fb 81       	ldd	r31, Y+3	; 0x03
    8e4c:	10 82       	st	Z, r1
      break;
  }
}
    8e4e:	0f 90       	pop	r0
    8e50:	0f 90       	pop	r0
    8e52:	0f 90       	pop	r0
    8e54:	0f 90       	pop	r0
    8e56:	0f 90       	pop	r0
    8e58:	cf 91       	pop	r28
    8e5a:	df 91       	pop	r29
    8e5c:	08 95       	ret

00008e5e <__vector_39>:

//! I2C (TWI) interrupt service routine
SIGNAL(SIG_2WIRE_SERIAL)
    8e5e:	1f 92       	push	r1
    8e60:	0f 92       	push	r0
    8e62:	0f b6       	in	r0, 0x3f	; 63
    8e64:	0f 92       	push	r0
    8e66:	00 90 5b 00 	lds	r0, 0x005B
    8e6a:	0f 92       	push	r0
    8e6c:	11 24       	eor	r1, r1
    8e6e:	2f 93       	push	r18
    8e70:	3f 93       	push	r19
    8e72:	4f 93       	push	r20
    8e74:	5f 93       	push	r21
    8e76:	6f 93       	push	r22
    8e78:	7f 93       	push	r23
    8e7a:	8f 93       	push	r24
    8e7c:	9f 93       	push	r25
    8e7e:	af 93       	push	r26
    8e80:	bf 93       	push	r27
    8e82:	ef 93       	push	r30
    8e84:	ff 93       	push	r31
    8e86:	df 93       	push	r29
    8e88:	cf 93       	push	r28
    8e8a:	cd b7       	in	r28, 0x3d	; 61
    8e8c:	de b7       	in	r29, 0x3e	; 62
{
  devices[0]->service();
    8e8e:	80 91 59 0a 	lds	r24, 0x0A59
    8e92:	90 91 5a 0a 	lds	r25, 0x0A5A
    8e96:	0e 94 00 45 	call	0x8a00	; 0x8a00 <_ZN3I2C4CI2C7serviceEv>
}
    8e9a:	cf 91       	pop	r28
    8e9c:	df 91       	pop	r29
    8e9e:	ff 91       	pop	r31
    8ea0:	ef 91       	pop	r30
    8ea2:	bf 91       	pop	r27
    8ea4:	af 91       	pop	r26
    8ea6:	9f 91       	pop	r25
    8ea8:	8f 91       	pop	r24
    8eaa:	7f 91       	pop	r23
    8eac:	6f 91       	pop	r22
    8eae:	5f 91       	pop	r21
    8eb0:	4f 91       	pop	r20
    8eb2:	3f 91       	pop	r19
    8eb4:	2f 91       	pop	r18
    8eb6:	0f 90       	pop	r0
    8eb8:	00 92 5b 00 	sts	0x005B, r0
    8ebc:	0f 90       	pop	r0
    8ebe:	0f be       	out	0x3f, r0	; 63
    8ec0:	0f 90       	pop	r0
    8ec2:	1f 90       	pop	r1
    8ec4:	18 95       	reti

00008ec6 <_ZN3I2C4CI2C8getStateEv>:

eState CI2C::getState(void) {
    8ec6:	df 93       	push	r29
    8ec8:	cf 93       	push	r28
    8eca:	00 d0       	rcall	.+0      	; 0x8ecc <_ZN3I2C4CI2C8getStateEv+0x6>
    8ecc:	cd b7       	in	r28, 0x3d	; 61
    8ece:	de b7       	in	r29, 0x3e	; 62
    8ed0:	9a 83       	std	Y+2, r25	; 0x02
    8ed2:	89 83       	std	Y+1, r24	; 0x01
  return state;
    8ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    8ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    8ed8:	80 81       	ld	r24, Z
}
    8eda:	0f 90       	pop	r0
    8edc:	0f 90       	pop	r0
    8ede:	cf 91       	pop	r28
    8ee0:	df 91       	pop	r29
    8ee2:	08 95       	ret

00008ee4 <_ZN6CTimerC2Ehh>:
#define TIMSK1 TIMSK
#endif

static CTimer* timers[4]= {0,0,0,0};

CTimer::CTimer(u08 devNum, u08 prescale) {
    8ee4:	df 93       	push	r29
    8ee6:	cf 93       	push	r28
    8ee8:	00 d0       	rcall	.+0      	; 0x8eea <_ZN6CTimerC2Ehh+0x6>
    8eea:	00 d0       	rcall	.+0      	; 0x8eec <_ZN6CTimerC2Ehh+0x8>
    8eec:	00 d0       	rcall	.+0      	; 0x8eee <_ZN6CTimerC2Ehh+0xa>
    8eee:	cd b7       	in	r28, 0x3d	; 61
    8ef0:	de b7       	in	r29, 0x3e	; 62
    8ef2:	9a 83       	std	Y+2, r25	; 0x02
    8ef4:	89 83       	std	Y+1, r24	; 0x01
    8ef6:	6b 83       	std	Y+3, r22	; 0x03
    8ef8:	4c 83       	std	Y+4, r20	; 0x04
  this->devNum = devNum;
    8efa:	e9 81       	ldd	r30, Y+1	; 0x01
    8efc:	fa 81       	ldd	r31, Y+2	; 0x02
    8efe:	8b 81       	ldd	r24, Y+3	; 0x03
    8f00:	80 83       	st	Z, r24
  switch(devNum) {
    8f02:	8b 81       	ldd	r24, Y+3	; 0x03
    8f04:	28 2f       	mov	r18, r24
    8f06:	30 e0       	ldi	r19, 0x00	; 0
    8f08:	3e 83       	std	Y+6, r19	; 0x06
    8f0a:	2d 83       	std	Y+5, r18	; 0x05
    8f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    8f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    8f10:	81 30       	cpi	r24, 0x01	; 1
    8f12:	91 05       	cpc	r25, r1
    8f14:	59 f1       	breq	.+86     	; 0x8f6c <_ZN6CTimerC2Ehh+0x88>
    8f16:	2d 81       	ldd	r18, Y+5	; 0x05
    8f18:	3e 81       	ldd	r19, Y+6	; 0x06
    8f1a:	22 30       	cpi	r18, 0x02	; 2
    8f1c:	31 05       	cpc	r19, r1
    8f1e:	2c f4       	brge	.+10     	; 0x8f2a <_ZN6CTimerC2Ehh+0x46>
    8f20:	8d 81       	ldd	r24, Y+5	; 0x05
    8f22:	9e 81       	ldd	r25, Y+6	; 0x06
    8f24:	00 97       	sbiw	r24, 0x00	; 0
    8f26:	69 f0       	breq	.+26     	; 0x8f42 <_ZN6CTimerC2Ehh+0x5e>
    8f28:	61 c0       	rjmp	.+194    	; 0x8fec <_ZN6CTimerC2Ehh+0x108>
    8f2a:	2d 81       	ldd	r18, Y+5	; 0x05
    8f2c:	3e 81       	ldd	r19, Y+6	; 0x06
    8f2e:	22 30       	cpi	r18, 0x02	; 2
    8f30:	31 05       	cpc	r19, r1
    8f32:	91 f1       	breq	.+100    	; 0x8f98 <_ZN6CTimerC2Ehh+0xb4>
    8f34:	8d 81       	ldd	r24, Y+5	; 0x05
    8f36:	9e 81       	ldd	r25, Y+6	; 0x06
    8f38:	83 30       	cpi	r24, 0x03	; 3
    8f3a:	91 05       	cpc	r25, r1
    8f3c:	09 f4       	brne	.+2      	; 0x8f40 <_ZN6CTimerC2Ehh+0x5c>
    8f3e:	41 c0       	rjmp	.+130    	; 0x8fc2 <_ZN6CTimerC2Ehh+0xde>
    8f40:	55 c0       	rjmp	.+170    	; 0x8fec <_ZN6CTimerC2Ehh+0x108>
    case 0:
      TCCR0B = ((TCCR0B & ~TIMER_PRESCALE_MASK) | prescale);
    8f42:	a5 e4       	ldi	r26, 0x45	; 69
    8f44:	b0 e0       	ldi	r27, 0x00	; 0
    8f46:	e5 e4       	ldi	r30, 0x45	; 69
    8f48:	f0 e0       	ldi	r31, 0x00	; 0
    8f4a:	80 81       	ld	r24, Z
    8f4c:	98 2f       	mov	r25, r24
    8f4e:	98 7f       	andi	r25, 0xF8	; 248
    8f50:	8c 81       	ldd	r24, Y+4	; 0x04
    8f52:	89 2b       	or	r24, r25
    8f54:	8c 93       	st	X, r24
      TCNT0 = 0;
    8f56:	e6 e4       	ldi	r30, 0x46	; 70
    8f58:	f0 e0       	ldi	r31, 0x00	; 0
    8f5a:	10 82       	st	Z, r1
      sbi(TIMSK0, TOIE0);
    8f5c:	ae e6       	ldi	r26, 0x6E	; 110
    8f5e:	b0 e0       	ldi	r27, 0x00	; 0
    8f60:	ee e6       	ldi	r30, 0x6E	; 110
    8f62:	f0 e0       	ldi	r31, 0x00	; 0
    8f64:	80 81       	ld	r24, Z
    8f66:	81 60       	ori	r24, 0x01	; 1
    8f68:	8c 93       	st	X, r24
    8f6a:	40 c0       	rjmp	.+128    	; 0x8fec <_ZN6CTimerC2Ehh+0x108>
      break;
#ifdef TCCR1B
    case 1:
      TCCR1B = ((TCCR1B & ~TIMER_PRESCALE_MASK) | prescale);
    8f6c:	a1 e8       	ldi	r26, 0x81	; 129
    8f6e:	b0 e0       	ldi	r27, 0x00	; 0
    8f70:	e1 e8       	ldi	r30, 0x81	; 129
    8f72:	f0 e0       	ldi	r31, 0x00	; 0
    8f74:	80 81       	ld	r24, Z
    8f76:	98 2f       	mov	r25, r24
    8f78:	98 7f       	andi	r25, 0xF8	; 248
    8f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    8f7c:	89 2b       	or	r24, r25
    8f7e:	8c 93       	st	X, r24
      TCNT1 = 0;
    8f80:	e4 e8       	ldi	r30, 0x84	; 132
    8f82:	f0 e0       	ldi	r31, 0x00	; 0
    8f84:	11 82       	std	Z+1, r1	; 0x01
    8f86:	10 82       	st	Z, r1
      sbi(TIMSK1, TOIE1);
    8f88:	af e6       	ldi	r26, 0x6F	; 111
    8f8a:	b0 e0       	ldi	r27, 0x00	; 0
    8f8c:	ef e6       	ldi	r30, 0x6F	; 111
    8f8e:	f0 e0       	ldi	r31, 0x00	; 0
    8f90:	80 81       	ld	r24, Z
    8f92:	81 60       	ori	r24, 0x01	; 1
    8f94:	8c 93       	st	X, r24
    8f96:	2a c0       	rjmp	.+84     	; 0x8fec <_ZN6CTimerC2Ehh+0x108>
      break;
#endif
#ifdef TCCR2B
    case 2:
      TCCR2B = ((TCCR2B & ~TIMER_PRESCALE_MASK) | prescale);
    8f98:	a1 eb       	ldi	r26, 0xB1	; 177
    8f9a:	b0 e0       	ldi	r27, 0x00	; 0
    8f9c:	e1 eb       	ldi	r30, 0xB1	; 177
    8f9e:	f0 e0       	ldi	r31, 0x00	; 0
    8fa0:	80 81       	ld	r24, Z
    8fa2:	98 2f       	mov	r25, r24
    8fa4:	98 7f       	andi	r25, 0xF8	; 248
    8fa6:	8c 81       	ldd	r24, Y+4	; 0x04
    8fa8:	89 2b       	or	r24, r25
    8faa:	8c 93       	st	X, r24
      TCNT2 = 0;
    8fac:	e2 eb       	ldi	r30, 0xB2	; 178
    8fae:	f0 e0       	ldi	r31, 0x00	; 0
    8fb0:	10 82       	st	Z, r1
      sbi(TIMSK2, TOIE2);
    8fb2:	a0 e7       	ldi	r26, 0x70	; 112
    8fb4:	b0 e0       	ldi	r27, 0x00	; 0
    8fb6:	e0 e7       	ldi	r30, 0x70	; 112
    8fb8:	f0 e0       	ldi	r31, 0x00	; 0
    8fba:	80 81       	ld	r24, Z
    8fbc:	81 60       	ori	r24, 0x01	; 1
    8fbe:	8c 93       	st	X, r24
    8fc0:	15 c0       	rjmp	.+42     	; 0x8fec <_ZN6CTimerC2Ehh+0x108>
      break;
#endif
#ifdef TCCR3B
    case 3:
      TCCR3B = ((TCCR3B & ~TIMER_PRESCALE_MASK) | prescale);
    8fc2:	a1 e9       	ldi	r26, 0x91	; 145
    8fc4:	b0 e0       	ldi	r27, 0x00	; 0
    8fc6:	e1 e9       	ldi	r30, 0x91	; 145
    8fc8:	f0 e0       	ldi	r31, 0x00	; 0
    8fca:	80 81       	ld	r24, Z
    8fcc:	98 2f       	mov	r25, r24
    8fce:	98 7f       	andi	r25, 0xF8	; 248
    8fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    8fd2:	89 2b       	or	r24, r25
    8fd4:	8c 93       	st	X, r24
      TCNT3 = 0;
    8fd6:	e4 e9       	ldi	r30, 0x94	; 148
    8fd8:	f0 e0       	ldi	r31, 0x00	; 0
    8fda:	11 82       	std	Z+1, r1	; 0x01
    8fdc:	10 82       	st	Z, r1
      sbi(TIMSK3, TOIE3);
    8fde:	a1 e7       	ldi	r26, 0x71	; 113
    8fe0:	b0 e0       	ldi	r27, 0x00	; 0
    8fe2:	e1 e7       	ldi	r30, 0x71	; 113
    8fe4:	f0 e0       	ldi	r31, 0x00	; 0
    8fe6:	80 81       	ld	r24, Z
    8fe8:	81 60       	ori	r24, 0x01	; 1
    8fea:	8c 93       	st	X, r24
      break;
#endif
  }
}
    8fec:	26 96       	adiw	r28, 0x06	; 6
    8fee:	0f b6       	in	r0, 0x3f	; 63
    8ff0:	f8 94       	cli
    8ff2:	de bf       	out	0x3e, r29	; 62
    8ff4:	0f be       	out	0x3f, r0	; 63
    8ff6:	cd bf       	out	0x3d, r28	; 61
    8ff8:	cf 91       	pop	r28
    8ffa:	df 91       	pop	r29
    8ffc:	08 95       	ret

00008ffe <_ZN6CTimerC1Ehh>:
#define TIMSK1 TIMSK
#endif

static CTimer* timers[4]= {0,0,0,0};

CTimer::CTimer(u08 devNum, u08 prescale) {
    8ffe:	df 93       	push	r29
    9000:	cf 93       	push	r28
    9002:	00 d0       	rcall	.+0      	; 0x9004 <_ZN6CTimerC1Ehh+0x6>
    9004:	00 d0       	rcall	.+0      	; 0x9006 <_ZN6CTimerC1Ehh+0x8>
    9006:	00 d0       	rcall	.+0      	; 0x9008 <_ZN6CTimerC1Ehh+0xa>
    9008:	cd b7       	in	r28, 0x3d	; 61
    900a:	de b7       	in	r29, 0x3e	; 62
    900c:	9a 83       	std	Y+2, r25	; 0x02
    900e:	89 83       	std	Y+1, r24	; 0x01
    9010:	6b 83       	std	Y+3, r22	; 0x03
    9012:	4c 83       	std	Y+4, r20	; 0x04
  this->devNum = devNum;
    9014:	e9 81       	ldd	r30, Y+1	; 0x01
    9016:	fa 81       	ldd	r31, Y+2	; 0x02
    9018:	8b 81       	ldd	r24, Y+3	; 0x03
    901a:	80 83       	st	Z, r24
  switch(devNum) {
    901c:	8b 81       	ldd	r24, Y+3	; 0x03
    901e:	28 2f       	mov	r18, r24
    9020:	30 e0       	ldi	r19, 0x00	; 0
    9022:	3e 83       	std	Y+6, r19	; 0x06
    9024:	2d 83       	std	Y+5, r18	; 0x05
    9026:	8d 81       	ldd	r24, Y+5	; 0x05
    9028:	9e 81       	ldd	r25, Y+6	; 0x06
    902a:	81 30       	cpi	r24, 0x01	; 1
    902c:	91 05       	cpc	r25, r1
    902e:	59 f1       	breq	.+86     	; 0x9086 <_ZN6CTimerC1Ehh+0x88>
    9030:	2d 81       	ldd	r18, Y+5	; 0x05
    9032:	3e 81       	ldd	r19, Y+6	; 0x06
    9034:	22 30       	cpi	r18, 0x02	; 2
    9036:	31 05       	cpc	r19, r1
    9038:	2c f4       	brge	.+10     	; 0x9044 <_ZN6CTimerC1Ehh+0x46>
    903a:	8d 81       	ldd	r24, Y+5	; 0x05
    903c:	9e 81       	ldd	r25, Y+6	; 0x06
    903e:	00 97       	sbiw	r24, 0x00	; 0
    9040:	69 f0       	breq	.+26     	; 0x905c <_ZN6CTimerC1Ehh+0x5e>
    9042:	61 c0       	rjmp	.+194    	; 0x9106 <_ZN6CTimerC1Ehh+0x108>
    9044:	2d 81       	ldd	r18, Y+5	; 0x05
    9046:	3e 81       	ldd	r19, Y+6	; 0x06
    9048:	22 30       	cpi	r18, 0x02	; 2
    904a:	31 05       	cpc	r19, r1
    904c:	91 f1       	breq	.+100    	; 0x90b2 <_ZN6CTimerC1Ehh+0xb4>
    904e:	8d 81       	ldd	r24, Y+5	; 0x05
    9050:	9e 81       	ldd	r25, Y+6	; 0x06
    9052:	83 30       	cpi	r24, 0x03	; 3
    9054:	91 05       	cpc	r25, r1
    9056:	09 f4       	brne	.+2      	; 0x905a <_ZN6CTimerC1Ehh+0x5c>
    9058:	41 c0       	rjmp	.+130    	; 0x90dc <_ZN6CTimerC1Ehh+0xde>
    905a:	55 c0       	rjmp	.+170    	; 0x9106 <_ZN6CTimerC1Ehh+0x108>
    case 0:
      TCCR0B = ((TCCR0B & ~TIMER_PRESCALE_MASK) | prescale);
    905c:	a5 e4       	ldi	r26, 0x45	; 69
    905e:	b0 e0       	ldi	r27, 0x00	; 0
    9060:	e5 e4       	ldi	r30, 0x45	; 69
    9062:	f0 e0       	ldi	r31, 0x00	; 0
    9064:	80 81       	ld	r24, Z
    9066:	98 2f       	mov	r25, r24
    9068:	98 7f       	andi	r25, 0xF8	; 248
    906a:	8c 81       	ldd	r24, Y+4	; 0x04
    906c:	89 2b       	or	r24, r25
    906e:	8c 93       	st	X, r24
      TCNT0 = 0;
    9070:	e6 e4       	ldi	r30, 0x46	; 70
    9072:	f0 e0       	ldi	r31, 0x00	; 0
    9074:	10 82       	st	Z, r1
      sbi(TIMSK0, TOIE0);
    9076:	ae e6       	ldi	r26, 0x6E	; 110
    9078:	b0 e0       	ldi	r27, 0x00	; 0
    907a:	ee e6       	ldi	r30, 0x6E	; 110
    907c:	f0 e0       	ldi	r31, 0x00	; 0
    907e:	80 81       	ld	r24, Z
    9080:	81 60       	ori	r24, 0x01	; 1
    9082:	8c 93       	st	X, r24
    9084:	40 c0       	rjmp	.+128    	; 0x9106 <_ZN6CTimerC1Ehh+0x108>
      break;
#ifdef TCCR1B
    case 1:
      TCCR1B = ((TCCR1B & ~TIMER_PRESCALE_MASK) | prescale);
    9086:	a1 e8       	ldi	r26, 0x81	; 129
    9088:	b0 e0       	ldi	r27, 0x00	; 0
    908a:	e1 e8       	ldi	r30, 0x81	; 129
    908c:	f0 e0       	ldi	r31, 0x00	; 0
    908e:	80 81       	ld	r24, Z
    9090:	98 2f       	mov	r25, r24
    9092:	98 7f       	andi	r25, 0xF8	; 248
    9094:	8c 81       	ldd	r24, Y+4	; 0x04
    9096:	89 2b       	or	r24, r25
    9098:	8c 93       	st	X, r24
      TCNT1 = 0;
    909a:	e4 e8       	ldi	r30, 0x84	; 132
    909c:	f0 e0       	ldi	r31, 0x00	; 0
    909e:	11 82       	std	Z+1, r1	; 0x01
    90a0:	10 82       	st	Z, r1
      sbi(TIMSK1, TOIE1);
    90a2:	af e6       	ldi	r26, 0x6F	; 111
    90a4:	b0 e0       	ldi	r27, 0x00	; 0
    90a6:	ef e6       	ldi	r30, 0x6F	; 111
    90a8:	f0 e0       	ldi	r31, 0x00	; 0
    90aa:	80 81       	ld	r24, Z
    90ac:	81 60       	ori	r24, 0x01	; 1
    90ae:	8c 93       	st	X, r24
    90b0:	2a c0       	rjmp	.+84     	; 0x9106 <_ZN6CTimerC1Ehh+0x108>
      break;
#endif
#ifdef TCCR2B
    case 2:
      TCCR2B = ((TCCR2B & ~TIMER_PRESCALE_MASK) | prescale);
    90b2:	a1 eb       	ldi	r26, 0xB1	; 177
    90b4:	b0 e0       	ldi	r27, 0x00	; 0
    90b6:	e1 eb       	ldi	r30, 0xB1	; 177
    90b8:	f0 e0       	ldi	r31, 0x00	; 0
    90ba:	80 81       	ld	r24, Z
    90bc:	98 2f       	mov	r25, r24
    90be:	98 7f       	andi	r25, 0xF8	; 248
    90c0:	8c 81       	ldd	r24, Y+4	; 0x04
    90c2:	89 2b       	or	r24, r25
    90c4:	8c 93       	st	X, r24
      TCNT2 = 0;
    90c6:	e2 eb       	ldi	r30, 0xB2	; 178
    90c8:	f0 e0       	ldi	r31, 0x00	; 0
    90ca:	10 82       	st	Z, r1
      sbi(TIMSK2, TOIE2);
    90cc:	a0 e7       	ldi	r26, 0x70	; 112
    90ce:	b0 e0       	ldi	r27, 0x00	; 0
    90d0:	e0 e7       	ldi	r30, 0x70	; 112
    90d2:	f0 e0       	ldi	r31, 0x00	; 0
    90d4:	80 81       	ld	r24, Z
    90d6:	81 60       	ori	r24, 0x01	; 1
    90d8:	8c 93       	st	X, r24
    90da:	15 c0       	rjmp	.+42     	; 0x9106 <_ZN6CTimerC1Ehh+0x108>
      break;
#endif
#ifdef TCCR3B
    case 3:
      TCCR3B = ((TCCR3B & ~TIMER_PRESCALE_MASK) | prescale);
    90dc:	a1 e9       	ldi	r26, 0x91	; 145
    90de:	b0 e0       	ldi	r27, 0x00	; 0
    90e0:	e1 e9       	ldi	r30, 0x91	; 145
    90e2:	f0 e0       	ldi	r31, 0x00	; 0
    90e4:	80 81       	ld	r24, Z
    90e6:	98 2f       	mov	r25, r24
    90e8:	98 7f       	andi	r25, 0xF8	; 248
    90ea:	8c 81       	ldd	r24, Y+4	; 0x04
    90ec:	89 2b       	or	r24, r25
    90ee:	8c 93       	st	X, r24
      TCNT3 = 0;
    90f0:	e4 e9       	ldi	r30, 0x94	; 148
    90f2:	f0 e0       	ldi	r31, 0x00	; 0
    90f4:	11 82       	std	Z+1, r1	; 0x01
    90f6:	10 82       	st	Z, r1
      sbi(TIMSK3, TOIE3);
    90f8:	a1 e7       	ldi	r26, 0x71	; 113
    90fa:	b0 e0       	ldi	r27, 0x00	; 0
    90fc:	e1 e7       	ldi	r30, 0x71	; 113
    90fe:	f0 e0       	ldi	r31, 0x00	; 0
    9100:	80 81       	ld	r24, Z
    9102:	81 60       	ori	r24, 0x01	; 1
    9104:	8c 93       	st	X, r24
      break;
#endif
  }
}
    9106:	26 96       	adiw	r28, 0x06	; 6
    9108:	0f b6       	in	r0, 0x3f	; 63
    910a:	f8 94       	cli
    910c:	de bf       	out	0x3e, r29	; 62
    910e:	0f be       	out	0x3f, r0	; 63
    9110:	cd bf       	out	0x3d, r28	; 61
    9112:	cf 91       	pop	r28
    9114:	df 91       	pop	r29
    9116:	08 95       	ret

00009118 <_ZN6CTimer6attachEPFvvE>:

void CTimer::attach(voidFuncPtr fp)
    9118:	df 93       	push	r29
    911a:	cf 93       	push	r28
    911c:	00 d0       	rcall	.+0      	; 0x911e <_ZN6CTimer6attachEPFvvE+0x6>
    911e:	00 d0       	rcall	.+0      	; 0x9120 <_ZN6CTimer6attachEPFvvE+0x8>
    9120:	cd b7       	in	r28, 0x3d	; 61
    9122:	de b7       	in	r29, 0x3e	; 62
    9124:	9a 83       	std	Y+2, r25	; 0x02
    9126:	89 83       	std	Y+1, r24	; 0x01
    9128:	7c 83       	std	Y+4, r23	; 0x04
    912a:	6b 83       	std	Y+3, r22	; 0x03
{
  timers[devNum] = this;
    912c:	e9 81       	ldd	r30, Y+1	; 0x01
    912e:	fa 81       	ldd	r31, Y+2	; 0x02
    9130:	80 81       	ld	r24, Z
    9132:	88 2f       	mov	r24, r24
    9134:	90 e0       	ldi	r25, 0x00	; 0
    9136:	88 0f       	add	r24, r24
    9138:	99 1f       	adc	r25, r25
    913a:	fc 01       	movw	r30, r24
    913c:	ef 59       	subi	r30, 0x9F	; 159
    913e:	f5 4f       	sbci	r31, 0xF5	; 245
    9140:	89 81       	ldd	r24, Y+1	; 0x01
    9142:	9a 81       	ldd	r25, Y+2	; 0x02
    9144:	91 83       	std	Z+1, r25	; 0x01
    9146:	80 83       	st	Z, r24
  function = fp;
    9148:	e9 81       	ldd	r30, Y+1	; 0x01
    914a:	fa 81       	ldd	r31, Y+2	; 0x02
    914c:	8b 81       	ldd	r24, Y+3	; 0x03
    914e:	9c 81       	ldd	r25, Y+4	; 0x04
    9150:	92 83       	std	Z+2, r25	; 0x02
    9152:	81 83       	std	Z+1, r24	; 0x01
}
    9154:	0f 90       	pop	r0
    9156:	0f 90       	pop	r0
    9158:	0f 90       	pop	r0
    915a:	0f 90       	pop	r0
    915c:	cf 91       	pop	r28
    915e:	df 91       	pop	r29
    9160:	08 95       	ret

00009162 <_ZN6CTimer6detachEPFvvE>:

void CTimer::detach(voidFuncPtr fp)
    9162:	df 93       	push	r29
    9164:	cf 93       	push	r28
    9166:	00 d0       	rcall	.+0      	; 0x9168 <_ZN6CTimer6detachEPFvvE+0x6>
    9168:	00 d0       	rcall	.+0      	; 0x916a <_ZN6CTimer6detachEPFvvE+0x8>
    916a:	cd b7       	in	r28, 0x3d	; 61
    916c:	de b7       	in	r29, 0x3e	; 62
    916e:	9a 83       	std	Y+2, r25	; 0x02
    9170:	89 83       	std	Y+1, r24	; 0x01
    9172:	7c 83       	std	Y+4, r23	; 0x04
    9174:	6b 83       	std	Y+3, r22	; 0x03
{
  timers[devNum] = 0;
    9176:	e9 81       	ldd	r30, Y+1	; 0x01
    9178:	fa 81       	ldd	r31, Y+2	; 0x02
    917a:	80 81       	ld	r24, Z
    917c:	88 2f       	mov	r24, r24
    917e:	90 e0       	ldi	r25, 0x00	; 0
    9180:	88 0f       	add	r24, r24
    9182:	99 1f       	adc	r25, r25
    9184:	fc 01       	movw	r30, r24
    9186:	ef 59       	subi	r30, 0x9F	; 159
    9188:	f5 4f       	sbci	r31, 0xF5	; 245
    918a:	11 82       	std	Z+1, r1	; 0x01
    918c:	10 82       	st	Z, r1
  function = 0;
    918e:	e9 81       	ldd	r30, Y+1	; 0x01
    9190:	fa 81       	ldd	r31, Y+2	; 0x02
    9192:	12 82       	std	Z+2, r1	; 0x02
    9194:	11 82       	std	Z+1, r1	; 0x01
}
    9196:	0f 90       	pop	r0
    9198:	0f 90       	pop	r0
    919a:	0f 90       	pop	r0
    919c:	0f 90       	pop	r0
    919e:	cf 91       	pop	r28
    91a0:	df 91       	pop	r29
    91a2:	08 95       	ret

000091a4 <__vector_23>:

SIGNAL(SIG_OVERFLOW0)
    91a4:	1f 92       	push	r1
    91a6:	0f 92       	push	r0
    91a8:	0f b6       	in	r0, 0x3f	; 63
    91aa:	0f 92       	push	r0
    91ac:	00 90 5b 00 	lds	r0, 0x005B
    91b0:	0f 92       	push	r0
    91b2:	11 24       	eor	r1, r1
    91b4:	2f 93       	push	r18
    91b6:	3f 93       	push	r19
    91b8:	4f 93       	push	r20
    91ba:	5f 93       	push	r21
    91bc:	6f 93       	push	r22
    91be:	7f 93       	push	r23
    91c0:	8f 93       	push	r24
    91c2:	9f 93       	push	r25
    91c4:	af 93       	push	r26
    91c6:	bf 93       	push	r27
    91c8:	ef 93       	push	r30
    91ca:	ff 93       	push	r31
    91cc:	df 93       	push	r29
    91ce:	cf 93       	push	r28
    91d0:	cd b7       	in	r28, 0x3d	; 61
    91d2:	de b7       	in	r29, 0x3e	; 62
{
  if (timers[0] != 0){
    91d4:	80 91 61 0a 	lds	r24, 0x0A61
    91d8:	90 91 62 0a 	lds	r25, 0x0A62
    91dc:	00 97       	sbiw	r24, 0x00	; 0
    91de:	81 f0       	breq	.+32     	; 0x9200 <__vector_23+0x5c>
    if (timers[0]->function != 0){
    91e0:	e0 91 61 0a 	lds	r30, 0x0A61
    91e4:	f0 91 62 0a 	lds	r31, 0x0A62
    91e8:	81 81       	ldd	r24, Z+1	; 0x01
    91ea:	92 81       	ldd	r25, Z+2	; 0x02
    91ec:	00 97       	sbiw	r24, 0x00	; 0
    91ee:	41 f0       	breq	.+16     	; 0x9200 <__vector_23+0x5c>
      timers[0]->function();
    91f0:	e0 91 61 0a 	lds	r30, 0x0A61
    91f4:	f0 91 62 0a 	lds	r31, 0x0A62
    91f8:	01 80       	ldd	r0, Z+1	; 0x01
    91fa:	f2 81       	ldd	r31, Z+2	; 0x02
    91fc:	e0 2d       	mov	r30, r0
    91fe:	09 95       	icall
    }
  }
}
    9200:	cf 91       	pop	r28
    9202:	df 91       	pop	r29
    9204:	ff 91       	pop	r31
    9206:	ef 91       	pop	r30
    9208:	bf 91       	pop	r27
    920a:	af 91       	pop	r26
    920c:	9f 91       	pop	r25
    920e:	8f 91       	pop	r24
    9210:	7f 91       	pop	r23
    9212:	6f 91       	pop	r22
    9214:	5f 91       	pop	r21
    9216:	4f 91       	pop	r20
    9218:	3f 91       	pop	r19
    921a:	2f 91       	pop	r18
    921c:	0f 90       	pop	r0
    921e:	00 92 5b 00 	sts	0x005B, r0
    9222:	0f 90       	pop	r0
    9224:	0f be       	out	0x3f, r0	; 63
    9226:	0f 90       	pop	r0
    9228:	1f 90       	pop	r1
    922a:	18 95       	reti

0000922c <__vector_20>:
#ifdef TCCR1B
SIGNAL(SIG_OVERFLOW1)
    922c:	1f 92       	push	r1
    922e:	0f 92       	push	r0
    9230:	0f b6       	in	r0, 0x3f	; 63
    9232:	0f 92       	push	r0
    9234:	00 90 5b 00 	lds	r0, 0x005B
    9238:	0f 92       	push	r0
    923a:	11 24       	eor	r1, r1
    923c:	2f 93       	push	r18
    923e:	3f 93       	push	r19
    9240:	4f 93       	push	r20
    9242:	5f 93       	push	r21
    9244:	6f 93       	push	r22
    9246:	7f 93       	push	r23
    9248:	8f 93       	push	r24
    924a:	9f 93       	push	r25
    924c:	af 93       	push	r26
    924e:	bf 93       	push	r27
    9250:	ef 93       	push	r30
    9252:	ff 93       	push	r31
    9254:	df 93       	push	r29
    9256:	cf 93       	push	r28
    9258:	cd b7       	in	r28, 0x3d	; 61
    925a:	de b7       	in	r29, 0x3e	; 62
{
  if (timers[1] != 0){
    925c:	80 91 63 0a 	lds	r24, 0x0A63
    9260:	90 91 64 0a 	lds	r25, 0x0A64
    9264:	00 97       	sbiw	r24, 0x00	; 0
    9266:	81 f0       	breq	.+32     	; 0x9288 <__vector_20+0x5c>
    if (timers[1]->function != 0){
    9268:	e0 91 63 0a 	lds	r30, 0x0A63
    926c:	f0 91 64 0a 	lds	r31, 0x0A64
    9270:	81 81       	ldd	r24, Z+1	; 0x01
    9272:	92 81       	ldd	r25, Z+2	; 0x02
    9274:	00 97       	sbiw	r24, 0x00	; 0
    9276:	41 f0       	breq	.+16     	; 0x9288 <__vector_20+0x5c>
      timers[1]->function();
    9278:	e0 91 63 0a 	lds	r30, 0x0A63
    927c:	f0 91 64 0a 	lds	r31, 0x0A64
    9280:	01 80       	ldd	r0, Z+1	; 0x01
    9282:	f2 81       	ldd	r31, Z+2	; 0x02
    9284:	e0 2d       	mov	r30, r0
    9286:	09 95       	icall
    }
  }
}
    9288:	cf 91       	pop	r28
    928a:	df 91       	pop	r29
    928c:	ff 91       	pop	r31
    928e:	ef 91       	pop	r30
    9290:	bf 91       	pop	r27
    9292:	af 91       	pop	r26
    9294:	9f 91       	pop	r25
    9296:	8f 91       	pop	r24
    9298:	7f 91       	pop	r23
    929a:	6f 91       	pop	r22
    929c:	5f 91       	pop	r21
    929e:	4f 91       	pop	r20
    92a0:	3f 91       	pop	r19
    92a2:	2f 91       	pop	r18
    92a4:	0f 90       	pop	r0
    92a6:	00 92 5b 00 	sts	0x005B, r0
    92aa:	0f 90       	pop	r0
    92ac:	0f be       	out	0x3f, r0	; 63
    92ae:	0f 90       	pop	r0
    92b0:	1f 90       	pop	r1
    92b2:	18 95       	reti

000092b4 <__vector_15>:
#endif
#ifdef TCCR2B
SIGNAL(SIG_OVERFLOW2)
    92b4:	1f 92       	push	r1
    92b6:	0f 92       	push	r0
    92b8:	0f b6       	in	r0, 0x3f	; 63
    92ba:	0f 92       	push	r0
    92bc:	00 90 5b 00 	lds	r0, 0x005B
    92c0:	0f 92       	push	r0
    92c2:	11 24       	eor	r1, r1
    92c4:	2f 93       	push	r18
    92c6:	3f 93       	push	r19
    92c8:	4f 93       	push	r20
    92ca:	5f 93       	push	r21
    92cc:	6f 93       	push	r22
    92ce:	7f 93       	push	r23
    92d0:	8f 93       	push	r24
    92d2:	9f 93       	push	r25
    92d4:	af 93       	push	r26
    92d6:	bf 93       	push	r27
    92d8:	ef 93       	push	r30
    92da:	ff 93       	push	r31
    92dc:	df 93       	push	r29
    92de:	cf 93       	push	r28
    92e0:	cd b7       	in	r28, 0x3d	; 61
    92e2:	de b7       	in	r29, 0x3e	; 62
{
  if (timers[2] != 0){
    92e4:	80 91 65 0a 	lds	r24, 0x0A65
    92e8:	90 91 66 0a 	lds	r25, 0x0A66
    92ec:	00 97       	sbiw	r24, 0x00	; 0
    92ee:	81 f0       	breq	.+32     	; 0x9310 <__vector_15+0x5c>
    if (timers[2]->function != 0){
    92f0:	e0 91 65 0a 	lds	r30, 0x0A65
    92f4:	f0 91 66 0a 	lds	r31, 0x0A66
    92f8:	81 81       	ldd	r24, Z+1	; 0x01
    92fa:	92 81       	ldd	r25, Z+2	; 0x02
    92fc:	00 97       	sbiw	r24, 0x00	; 0
    92fe:	41 f0       	breq	.+16     	; 0x9310 <__vector_15+0x5c>
      timers[2]->function();
    9300:	e0 91 65 0a 	lds	r30, 0x0A65
    9304:	f0 91 66 0a 	lds	r31, 0x0A66
    9308:	01 80       	ldd	r0, Z+1	; 0x01
    930a:	f2 81       	ldd	r31, Z+2	; 0x02
    930c:	e0 2d       	mov	r30, r0
    930e:	09 95       	icall
    }
  }
}
    9310:	cf 91       	pop	r28
    9312:	df 91       	pop	r29
    9314:	ff 91       	pop	r31
    9316:	ef 91       	pop	r30
    9318:	bf 91       	pop	r27
    931a:	af 91       	pop	r26
    931c:	9f 91       	pop	r25
    931e:	8f 91       	pop	r24
    9320:	7f 91       	pop	r23
    9322:	6f 91       	pop	r22
    9324:	5f 91       	pop	r21
    9326:	4f 91       	pop	r20
    9328:	3f 91       	pop	r19
    932a:	2f 91       	pop	r18
    932c:	0f 90       	pop	r0
    932e:	00 92 5b 00 	sts	0x005B, r0
    9332:	0f 90       	pop	r0
    9334:	0f be       	out	0x3f, r0	; 63
    9336:	0f 90       	pop	r0
    9338:	1f 90       	pop	r1
    933a:	18 95       	reti

0000933c <__vector_35>:
#endif
#ifdef TCCR3B
SIGNAL(SIG_OVERFLOW3)
    933c:	1f 92       	push	r1
    933e:	0f 92       	push	r0
    9340:	0f b6       	in	r0, 0x3f	; 63
    9342:	0f 92       	push	r0
    9344:	00 90 5b 00 	lds	r0, 0x005B
    9348:	0f 92       	push	r0
    934a:	11 24       	eor	r1, r1
    934c:	2f 93       	push	r18
    934e:	3f 93       	push	r19
    9350:	4f 93       	push	r20
    9352:	5f 93       	push	r21
    9354:	6f 93       	push	r22
    9356:	7f 93       	push	r23
    9358:	8f 93       	push	r24
    935a:	9f 93       	push	r25
    935c:	af 93       	push	r26
    935e:	bf 93       	push	r27
    9360:	ef 93       	push	r30
    9362:	ff 93       	push	r31
    9364:	df 93       	push	r29
    9366:	cf 93       	push	r28
    9368:	cd b7       	in	r28, 0x3d	; 61
    936a:	de b7       	in	r29, 0x3e	; 62
{
  if (timers[3] != 0){
    936c:	80 91 67 0a 	lds	r24, 0x0A67
    9370:	90 91 68 0a 	lds	r25, 0x0A68
    9374:	00 97       	sbiw	r24, 0x00	; 0
    9376:	81 f0       	breq	.+32     	; 0x9398 <__vector_35+0x5c>
    if (timers[3]->function != 0){
    9378:	e0 91 67 0a 	lds	r30, 0x0A67
    937c:	f0 91 68 0a 	lds	r31, 0x0A68
    9380:	81 81       	ldd	r24, Z+1	; 0x01
    9382:	92 81       	ldd	r25, Z+2	; 0x02
    9384:	00 97       	sbiw	r24, 0x00	; 0
    9386:	41 f0       	breq	.+16     	; 0x9398 <__vector_35+0x5c>
      timers[3]->function();
    9388:	e0 91 67 0a 	lds	r30, 0x0A67
    938c:	f0 91 68 0a 	lds	r31, 0x0A68
    9390:	01 80       	ldd	r0, Z+1	; 0x01
    9392:	f2 81       	ldd	r31, Z+2	; 0x02
    9394:	e0 2d       	mov	r30, r0
    9396:	09 95       	icall
    }
  }
}
    9398:	cf 91       	pop	r28
    939a:	df 91       	pop	r29
    939c:	ff 91       	pop	r31
    939e:	ef 91       	pop	r30
    93a0:	bf 91       	pop	r27
    93a2:	af 91       	pop	r26
    93a4:	9f 91       	pop	r25
    93a6:	8f 91       	pop	r24
    93a8:	7f 91       	pop	r23
    93aa:	6f 91       	pop	r22
    93ac:	5f 91       	pop	r21
    93ae:	4f 91       	pop	r20
    93b0:	3f 91       	pop	r19
    93b2:	2f 91       	pop	r18
    93b4:	0f 90       	pop	r0
    93b6:	00 92 5b 00 	sts	0x005B, r0
    93ba:	0f 90       	pop	r0
    93bc:	0f be       	out	0x3f, r0	; 63
    93be:	0f 90       	pop	r0
    93c0:	1f 90       	pop	r1
    93c2:	18 95       	reti

000093c4 <_ZN5CUART8setFrameEv>:
	default:
		break;
	}
}
/****************************************************************************************/
void CUART::setFrame(void) {
    93c4:	df 93       	push	r29
    93c6:	cf 93       	push	r28
    93c8:	00 d0       	rcall	.+0      	; 0x93ca <_ZN5CUART8setFrameEv+0x6>
    93ca:	00 d0       	rcall	.+0      	; 0x93cc <_ZN5CUART8setFrameEv+0x8>
    93cc:	cd b7       	in	r28, 0x3d	; 61
    93ce:	de b7       	in	r29, 0x3e	; 62
    93d0:	9a 83       	std	Y+2, r25	; 0x02
    93d2:	89 83       	std	Y+1, r24	; 0x01
	// Set frame format to 8 data bits, 1 stop bit and no parity
	switch (uartNr) {
    93d4:	e9 81       	ldd	r30, Y+1	; 0x01
    93d6:	fa 81       	ldd	r31, Y+2	; 0x02
    93d8:	82 81       	ldd	r24, Z+2	; 0x02
    93da:	28 2f       	mov	r18, r24
    93dc:	30 e0       	ldi	r19, 0x00	; 0
    93de:	3c 83       	std	Y+4, r19	; 0x04
    93e0:	2b 83       	std	Y+3, r18	; 0x03
    93e2:	8b 81       	ldd	r24, Y+3	; 0x03
    93e4:	9c 81       	ldd	r25, Y+4	; 0x04
    93e6:	81 30       	cpi	r24, 0x01	; 1
    93e8:	91 05       	cpc	r25, r1
    93ea:	09 f4       	brne	.+2      	; 0x93ee <_ZN5CUART8setFrameEv+0x2a>
    93ec:	42 c0       	rjmp	.+132    	; 0x9472 <_ZN5CUART8setFrameEv+0xae>
    93ee:	2b 81       	ldd	r18, Y+3	; 0x03
    93f0:	3c 81       	ldd	r19, Y+4	; 0x04
    93f2:	22 30       	cpi	r18, 0x02	; 2
    93f4:	31 05       	cpc	r19, r1
    93f6:	2c f4       	brge	.+10     	; 0x9402 <_ZN5CUART8setFrameEv+0x3e>
    93f8:	8b 81       	ldd	r24, Y+3	; 0x03
    93fa:	9c 81       	ldd	r25, Y+4	; 0x04
    93fc:	00 97       	sbiw	r24, 0x00	; 0
    93fe:	71 f0       	breq	.+28     	; 0x941c <_ZN5CUART8setFrameEv+0x58>
    9400:	b8 c0       	rjmp	.+368    	; 0x9572 <_ZN5CUART8setFrameEv+0x1ae>
    9402:	2b 81       	ldd	r18, Y+3	; 0x03
    9404:	3c 81       	ldd	r19, Y+4	; 0x04
    9406:	22 30       	cpi	r18, 0x02	; 2
    9408:	31 05       	cpc	r19, r1
    940a:	09 f4       	brne	.+2      	; 0x940e <_ZN5CUART8setFrameEv+0x4a>
    940c:	5d c0       	rjmp	.+186    	; 0x94c8 <_ZN5CUART8setFrameEv+0x104>
    940e:	8b 81       	ldd	r24, Y+3	; 0x03
    9410:	9c 81       	ldd	r25, Y+4	; 0x04
    9412:	83 30       	cpi	r24, 0x03	; 3
    9414:	91 05       	cpc	r25, r1
    9416:	09 f4       	brne	.+2      	; 0x941a <_ZN5CUART8setFrameEv+0x56>
    9418:	82 c0       	rjmp	.+260    	; 0x951e <_ZN5CUART8setFrameEv+0x15a>
    941a:	ab c0       	rjmp	.+342    	; 0x9572 <_ZN5CUART8setFrameEv+0x1ae>
	case 0:
		sbi(UCSR0C,UCSZ00);
    941c:	a2 ec       	ldi	r26, 0xC2	; 194
    941e:	b0 e0       	ldi	r27, 0x00	; 0
    9420:	e2 ec       	ldi	r30, 0xC2	; 194
    9422:	f0 e0       	ldi	r31, 0x00	; 0
    9424:	80 81       	ld	r24, Z
    9426:	82 60       	ori	r24, 0x02	; 2
    9428:	8c 93       	st	X, r24
		sbi(UCSR0C,UCSZ01);
    942a:	a2 ec       	ldi	r26, 0xC2	; 194
    942c:	b0 e0       	ldi	r27, 0x00	; 0
    942e:	e2 ec       	ldi	r30, 0xC2	; 194
    9430:	f0 e0       	ldi	r31, 0x00	; 0
    9432:	80 81       	ld	r24, Z
    9434:	84 60       	ori	r24, 0x04	; 4
    9436:	8c 93       	st	X, r24
		cbi(UCSR0C,UCSZ02);
    9438:	a2 ec       	ldi	r26, 0xC2	; 194
    943a:	b0 e0       	ldi	r27, 0x00	; 0
    943c:	e2 ec       	ldi	r30, 0xC2	; 194
    943e:	f0 e0       	ldi	r31, 0x00	; 0
    9440:	80 81       	ld	r24, Z
    9442:	8b 7f       	andi	r24, 0xFB	; 251
    9444:	8c 93       	st	X, r24
		cbi(UCSR0C,USBS0);
    9446:	a2 ec       	ldi	r26, 0xC2	; 194
    9448:	b0 e0       	ldi	r27, 0x00	; 0
    944a:	e2 ec       	ldi	r30, 0xC2	; 194
    944c:	f0 e0       	ldi	r31, 0x00	; 0
    944e:	80 81       	ld	r24, Z
    9450:	87 7f       	andi	r24, 0xF7	; 247
    9452:	8c 93       	st	X, r24
		cbi(UCSR0C,UPM00);
    9454:	a2 ec       	ldi	r26, 0xC2	; 194
    9456:	b0 e0       	ldi	r27, 0x00	; 0
    9458:	e2 ec       	ldi	r30, 0xC2	; 194
    945a:	f0 e0       	ldi	r31, 0x00	; 0
    945c:	80 81       	ld	r24, Z
    945e:	8f 7e       	andi	r24, 0xEF	; 239
    9460:	8c 93       	st	X, r24
		cbi(UCSR0C,UPM01);
    9462:	a2 ec       	ldi	r26, 0xC2	; 194
    9464:	b0 e0       	ldi	r27, 0x00	; 0
    9466:	e2 ec       	ldi	r30, 0xC2	; 194
    9468:	f0 e0       	ldi	r31, 0x00	; 0
    946a:	80 81       	ld	r24, Z
    946c:	8f 7d       	andi	r24, 0xDF	; 223
    946e:	8c 93       	st	X, r24
    9470:	80 c0       	rjmp	.+256    	; 0x9572 <_ZN5CUART8setFrameEv+0x1ae>
		break;
#ifdef UCSR1C
	case 1:
		sbi(UCSR1C,UCSZ10);
    9472:	aa ec       	ldi	r26, 0xCA	; 202
    9474:	b0 e0       	ldi	r27, 0x00	; 0
    9476:	ea ec       	ldi	r30, 0xCA	; 202
    9478:	f0 e0       	ldi	r31, 0x00	; 0
    947a:	80 81       	ld	r24, Z
    947c:	82 60       	ori	r24, 0x02	; 2
    947e:	8c 93       	st	X, r24
		sbi(UCSR1C,UCSZ11);
    9480:	aa ec       	ldi	r26, 0xCA	; 202
    9482:	b0 e0       	ldi	r27, 0x00	; 0
    9484:	ea ec       	ldi	r30, 0xCA	; 202
    9486:	f0 e0       	ldi	r31, 0x00	; 0
    9488:	80 81       	ld	r24, Z
    948a:	84 60       	ori	r24, 0x04	; 4
    948c:	8c 93       	st	X, r24
		cbi(UCSR1C,UCSZ12);
    948e:	aa ec       	ldi	r26, 0xCA	; 202
    9490:	b0 e0       	ldi	r27, 0x00	; 0
    9492:	ea ec       	ldi	r30, 0xCA	; 202
    9494:	f0 e0       	ldi	r31, 0x00	; 0
    9496:	80 81       	ld	r24, Z
    9498:	8b 7f       	andi	r24, 0xFB	; 251
    949a:	8c 93       	st	X, r24
		cbi(UCSR1C,USBS1);
    949c:	aa ec       	ldi	r26, 0xCA	; 202
    949e:	b0 e0       	ldi	r27, 0x00	; 0
    94a0:	ea ec       	ldi	r30, 0xCA	; 202
    94a2:	f0 e0       	ldi	r31, 0x00	; 0
    94a4:	80 81       	ld	r24, Z
    94a6:	87 7f       	andi	r24, 0xF7	; 247
    94a8:	8c 93       	st	X, r24
		cbi(UCSR1C,UPM10);
    94aa:	aa ec       	ldi	r26, 0xCA	; 202
    94ac:	b0 e0       	ldi	r27, 0x00	; 0
    94ae:	ea ec       	ldi	r30, 0xCA	; 202
    94b0:	f0 e0       	ldi	r31, 0x00	; 0
    94b2:	80 81       	ld	r24, Z
    94b4:	8f 7e       	andi	r24, 0xEF	; 239
    94b6:	8c 93       	st	X, r24
		cbi(UCSR1C,UPM11);
    94b8:	aa ec       	ldi	r26, 0xCA	; 202
    94ba:	b0 e0       	ldi	r27, 0x00	; 0
    94bc:	ea ec       	ldi	r30, 0xCA	; 202
    94be:	f0 e0       	ldi	r31, 0x00	; 0
    94c0:	80 81       	ld	r24, Z
    94c2:	8f 7d       	andi	r24, 0xDF	; 223
    94c4:	8c 93       	st	X, r24
    94c6:	55 c0       	rjmp	.+170    	; 0x9572 <_ZN5CUART8setFrameEv+0x1ae>
		break;
#endif
#ifdef UCSR2C
	case 2:
		sbi(UCSR2C,UCSZ20);
    94c8:	a2 ed       	ldi	r26, 0xD2	; 210
    94ca:	b0 e0       	ldi	r27, 0x00	; 0
    94cc:	e2 ed       	ldi	r30, 0xD2	; 210
    94ce:	f0 e0       	ldi	r31, 0x00	; 0
    94d0:	80 81       	ld	r24, Z
    94d2:	82 60       	ori	r24, 0x02	; 2
    94d4:	8c 93       	st	X, r24
		sbi(UCSR2C,UCSZ21);
    94d6:	a2 ed       	ldi	r26, 0xD2	; 210
    94d8:	b0 e0       	ldi	r27, 0x00	; 0
    94da:	e2 ed       	ldi	r30, 0xD2	; 210
    94dc:	f0 e0       	ldi	r31, 0x00	; 0
    94de:	80 81       	ld	r24, Z
    94e0:	84 60       	ori	r24, 0x04	; 4
    94e2:	8c 93       	st	X, r24
		cbi(UCSR2C,UCSZ22);
    94e4:	a2 ed       	ldi	r26, 0xD2	; 210
    94e6:	b0 e0       	ldi	r27, 0x00	; 0
    94e8:	e2 ed       	ldi	r30, 0xD2	; 210
    94ea:	f0 e0       	ldi	r31, 0x00	; 0
    94ec:	80 81       	ld	r24, Z
    94ee:	8b 7f       	andi	r24, 0xFB	; 251
    94f0:	8c 93       	st	X, r24
		cbi(UCSR2C,USBS2);
    94f2:	a2 ed       	ldi	r26, 0xD2	; 210
    94f4:	b0 e0       	ldi	r27, 0x00	; 0
    94f6:	e2 ed       	ldi	r30, 0xD2	; 210
    94f8:	f0 e0       	ldi	r31, 0x00	; 0
    94fa:	80 81       	ld	r24, Z
    94fc:	87 7f       	andi	r24, 0xF7	; 247
    94fe:	8c 93       	st	X, r24
		cbi(UCSR2C,UPM20);
    9500:	a2 ed       	ldi	r26, 0xD2	; 210
    9502:	b0 e0       	ldi	r27, 0x00	; 0
    9504:	e2 ed       	ldi	r30, 0xD2	; 210
    9506:	f0 e0       	ldi	r31, 0x00	; 0
    9508:	80 81       	ld	r24, Z
    950a:	8f 7e       	andi	r24, 0xEF	; 239
    950c:	8c 93       	st	X, r24
		cbi(UCSR2C,UPM21);
    950e:	a2 ed       	ldi	r26, 0xD2	; 210
    9510:	b0 e0       	ldi	r27, 0x00	; 0
    9512:	e2 ed       	ldi	r30, 0xD2	; 210
    9514:	f0 e0       	ldi	r31, 0x00	; 0
    9516:	80 81       	ld	r24, Z
    9518:	8f 7d       	andi	r24, 0xDF	; 223
    951a:	8c 93       	st	X, r24
    951c:	2a c0       	rjmp	.+84     	; 0x9572 <_ZN5CUART8setFrameEv+0x1ae>
		break;
#endif
#ifdef UCSR3C
	case 3:
		sbi(UCSR3C,UCSZ30);
    951e:	a2 e3       	ldi	r26, 0x32	; 50
    9520:	b1 e0       	ldi	r27, 0x01	; 1
    9522:	e2 e3       	ldi	r30, 0x32	; 50
    9524:	f1 e0       	ldi	r31, 0x01	; 1
    9526:	80 81       	ld	r24, Z
    9528:	82 60       	ori	r24, 0x02	; 2
    952a:	8c 93       	st	X, r24
		sbi(UCSR3C,UCSZ31);
    952c:	a2 e3       	ldi	r26, 0x32	; 50
    952e:	b1 e0       	ldi	r27, 0x01	; 1
    9530:	e2 e3       	ldi	r30, 0x32	; 50
    9532:	f1 e0       	ldi	r31, 0x01	; 1
    9534:	80 81       	ld	r24, Z
    9536:	84 60       	ori	r24, 0x04	; 4
    9538:	8c 93       	st	X, r24
		cbi(UCSR3C,UCSZ32);
    953a:	a2 e3       	ldi	r26, 0x32	; 50
    953c:	b1 e0       	ldi	r27, 0x01	; 1
    953e:	e2 e3       	ldi	r30, 0x32	; 50
    9540:	f1 e0       	ldi	r31, 0x01	; 1
    9542:	80 81       	ld	r24, Z
    9544:	8b 7f       	andi	r24, 0xFB	; 251
    9546:	8c 93       	st	X, r24
		cbi(UCSR3C,USBS3);
    9548:	a2 e3       	ldi	r26, 0x32	; 50
    954a:	b1 e0       	ldi	r27, 0x01	; 1
    954c:	e2 e3       	ldi	r30, 0x32	; 50
    954e:	f1 e0       	ldi	r31, 0x01	; 1
    9550:	80 81       	ld	r24, Z
    9552:	87 7f       	andi	r24, 0xF7	; 247
    9554:	8c 93       	st	X, r24
		cbi(UCSR3C,UPM30);
    9556:	a2 e3       	ldi	r26, 0x32	; 50
    9558:	b1 e0       	ldi	r27, 0x01	; 1
    955a:	e2 e3       	ldi	r30, 0x32	; 50
    955c:	f1 e0       	ldi	r31, 0x01	; 1
    955e:	80 81       	ld	r24, Z
    9560:	8f 7e       	andi	r24, 0xEF	; 239
    9562:	8c 93       	st	X, r24
		cbi(UCSR3C,UPM31);
    9564:	a2 e3       	ldi	r26, 0x32	; 50
    9566:	b1 e0       	ldi	r27, 0x01	; 1
    9568:	e2 e3       	ldi	r30, 0x32	; 50
    956a:	f1 e0       	ldi	r31, 0x01	; 1
    956c:	80 81       	ld	r24, Z
    956e:	8f 7d       	andi	r24, 0xDF	; 223
    9570:	8c 93       	st	X, r24
		break;

#endif
	}
}
    9572:	0f 90       	pop	r0
    9574:	0f 90       	pop	r0
    9576:	0f 90       	pop	r0
    9578:	0f 90       	pop	r0
    957a:	cf 91       	pop	r28
    957c:	df 91       	pop	r29
    957e:	08 95       	ret

00009580 <_Z14SIG_UART_TRANSv>:
	}
}
//===============================================================================
// UART Transmit Complete Interrupt Handler
//===============================================================================
void SIG_UART_TRANS(void) {
    9580:	df 93       	push	r29
    9582:	cf 93       	push	r28
    9584:	cd b7       	in	r28, 0x3d	; 61
    9586:	de b7       	in	r29, 0x3e	; 62
	if (pUart[0]->enable485 == true) {
    9588:	e0 91 69 0a 	lds	r30, 0x0A69
    958c:	f0 91 6a 0a 	lds	r31, 0x0A6A
    9590:	84 8d       	ldd	r24, Z+28	; 0x1c
    9592:	81 30       	cpi	r24, 0x01	; 1
    9594:	39 f4       	brne	.+14     	; 0x95a4 <_Z14SIG_UART_TRANSv+0x24>
		BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    9596:	a5 e0       	ldi	r26, 0x05	; 5
    9598:	b1 e0       	ldi	r27, 0x01	; 1
    959a:	e5 e0       	ldi	r30, 0x05	; 5
    959c:	f1 e0       	ldi	r31, 0x01	; 1
    959e:	80 81       	ld	r24, Z
    95a0:	8b 7f       	andi	r24, 0xFB	; 251
    95a2:	8c 93       	st	X, r24
	}
}
    95a4:	cf 91       	pop	r28
    95a6:	df 91       	pop	r29
    95a8:	08 95       	ret

000095aa <__vector_27>:
	}
}
//===============================================================================
// UART Transmit Complete Interrupt Handler
//===============================================================================
void SIG_USART0_TRANS(void) {
    95aa:	1f 92       	push	r1
    95ac:	0f 92       	push	r0
    95ae:	0f b6       	in	r0, 0x3f	; 63
    95b0:	0f 92       	push	r0
    95b2:	00 90 5b 00 	lds	r0, 0x005B
    95b6:	0f 92       	push	r0
    95b8:	11 24       	eor	r1, r1
    95ba:	8f 93       	push	r24
    95bc:	af 93       	push	r26
    95be:	bf 93       	push	r27
    95c0:	ef 93       	push	r30
    95c2:	ff 93       	push	r31
    95c4:	df 93       	push	r29
    95c6:	cf 93       	push	r28
    95c8:	cd b7       	in	r28, 0x3d	; 61
    95ca:	de b7       	in	r29, 0x3e	; 62
	if (pUart[0]->enable485 == true) {
    95cc:	e0 91 69 0a 	lds	r30, 0x0A69
    95d0:	f0 91 6a 0a 	lds	r31, 0x0A6A
    95d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    95d6:	81 30       	cpi	r24, 0x01	; 1
    95d8:	39 f4       	brne	.+14     	; 0x95e8 <__vector_27+0x3e>
		BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    95da:	a5 e0       	ldi	r26, 0x05	; 5
    95dc:	b1 e0       	ldi	r27, 0x01	; 1
    95de:	e5 e0       	ldi	r30, 0x05	; 5
    95e0:	f1 e0       	ldi	r31, 0x01	; 1
    95e2:	80 81       	ld	r24, Z
    95e4:	8b 7f       	andi	r24, 0xFB	; 251
    95e6:	8c 93       	st	X, r24
	}
}
    95e8:	cf 91       	pop	r28
    95ea:	df 91       	pop	r29
    95ec:	ff 91       	pop	r31
    95ee:	ef 91       	pop	r30
    95f0:	bf 91       	pop	r27
    95f2:	af 91       	pop	r26
    95f4:	8f 91       	pop	r24
    95f6:	0f 90       	pop	r0
    95f8:	00 92 5b 00 	sts	0x005B, r0
    95fc:	0f 90       	pop	r0
    95fe:	0f be       	out	0x3f, r0	; 63
    9600:	0f 90       	pop	r0
    9602:	1f 90       	pop	r1
    9604:	18 95       	reti

00009606 <__vector_38>:
	}
}
//===============================================================================
// UART Transmit Complete Interrupt Handler
//===============================================================================
void SIG_USART1_TRANS(void) {
    9606:	1f 92       	push	r1
    9608:	0f 92       	push	r0
    960a:	0f b6       	in	r0, 0x3f	; 63
    960c:	0f 92       	push	r0
    960e:	00 90 5b 00 	lds	r0, 0x005B
    9612:	0f 92       	push	r0
    9614:	11 24       	eor	r1, r1
    9616:	8f 93       	push	r24
    9618:	af 93       	push	r26
    961a:	bf 93       	push	r27
    961c:	ef 93       	push	r30
    961e:	ff 93       	push	r31
    9620:	df 93       	push	r29
    9622:	cf 93       	push	r28
    9624:	cd b7       	in	r28, 0x3d	; 61
    9626:	de b7       	in	r29, 0x3e	; 62
	if (pUart[1]->enable485 == true) {
    9628:	e0 91 6b 0a 	lds	r30, 0x0A6B
    962c:	f0 91 6c 0a 	lds	r31, 0x0A6C
    9630:	84 8d       	ldd	r24, Z+28	; 0x1c
    9632:	81 30       	cpi	r24, 0x01	; 1
    9634:	39 f4       	brne	.+14     	; 0x9644 <__vector_38+0x3e>
		BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    9636:	a5 e0       	ldi	r26, 0x05	; 5
    9638:	b1 e0       	ldi	r27, 0x01	; 1
    963a:	e5 e0       	ldi	r30, 0x05	; 5
    963c:	f1 e0       	ldi	r31, 0x01	; 1
    963e:	80 81       	ld	r24, Z
    9640:	8b 7f       	andi	r24, 0xFB	; 251
    9642:	8c 93       	st	X, r24
	}
}
    9644:	cf 91       	pop	r28
    9646:	df 91       	pop	r29
    9648:	ff 91       	pop	r31
    964a:	ef 91       	pop	r30
    964c:	bf 91       	pop	r27
    964e:	af 91       	pop	r26
    9650:	8f 91       	pop	r24
    9652:	0f 90       	pop	r0
    9654:	00 92 5b 00 	sts	0x005B, r0
    9658:	0f 90       	pop	r0
    965a:	0f be       	out	0x3f, r0	; 63
    965c:	0f 90       	pop	r0
    965e:	1f 90       	pop	r1
    9660:	18 95       	reti

00009662 <__vector_53>:
	}
}
//===============================================================================
// UART Transmit Complete Interrupt Handler
//===============================================================================
void SIG_USART2_TRANS(void) {
    9662:	1f 92       	push	r1
    9664:	0f 92       	push	r0
    9666:	0f b6       	in	r0, 0x3f	; 63
    9668:	0f 92       	push	r0
    966a:	00 90 5b 00 	lds	r0, 0x005B
    966e:	0f 92       	push	r0
    9670:	11 24       	eor	r1, r1
    9672:	8f 93       	push	r24
    9674:	af 93       	push	r26
    9676:	bf 93       	push	r27
    9678:	ef 93       	push	r30
    967a:	ff 93       	push	r31
    967c:	df 93       	push	r29
    967e:	cf 93       	push	r28
    9680:	cd b7       	in	r28, 0x3d	; 61
    9682:	de b7       	in	r29, 0x3e	; 62
	if (pUart[2]->enable485 == true) {
    9684:	e0 91 6d 0a 	lds	r30, 0x0A6D
    9688:	f0 91 6e 0a 	lds	r31, 0x0A6E
    968c:	84 8d       	ldd	r24, Z+28	; 0x1c
    968e:	81 30       	cpi	r24, 0x01	; 1
    9690:	39 f4       	brne	.+14     	; 0x96a0 <__vector_53+0x3e>
		BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    9692:	a5 e0       	ldi	r26, 0x05	; 5
    9694:	b1 e0       	ldi	r27, 0x01	; 1
    9696:	e5 e0       	ldi	r30, 0x05	; 5
    9698:	f1 e0       	ldi	r31, 0x01	; 1
    969a:	80 81       	ld	r24, Z
    969c:	8b 7f       	andi	r24, 0xFB	; 251
    969e:	8c 93       	st	X, r24
	}
}
    96a0:	cf 91       	pop	r28
    96a2:	df 91       	pop	r29
    96a4:	ff 91       	pop	r31
    96a6:	ef 91       	pop	r30
    96a8:	bf 91       	pop	r27
    96aa:	af 91       	pop	r26
    96ac:	8f 91       	pop	r24
    96ae:	0f 90       	pop	r0
    96b0:	00 92 5b 00 	sts	0x005B, r0
    96b4:	0f 90       	pop	r0
    96b6:	0f be       	out	0x3f, r0	; 63
    96b8:	0f 90       	pop	r0
    96ba:	1f 90       	pop	r1
    96bc:	18 95       	reti

000096be <__vector_56>:
	}
}
//===============================================================================
// UART Transmit Complete Interrupt Handler
//===============================================================================
void SIG_USART3_TRANS(void) {
    96be:	1f 92       	push	r1
    96c0:	0f 92       	push	r0
    96c2:	0f b6       	in	r0, 0x3f	; 63
    96c4:	0f 92       	push	r0
    96c6:	00 90 5b 00 	lds	r0, 0x005B
    96ca:	0f 92       	push	r0
    96cc:	11 24       	eor	r1, r1
    96ce:	8f 93       	push	r24
    96d0:	af 93       	push	r26
    96d2:	bf 93       	push	r27
    96d4:	ef 93       	push	r30
    96d6:	ff 93       	push	r31
    96d8:	df 93       	push	r29
    96da:	cf 93       	push	r28
    96dc:	cd b7       	in	r28, 0x3d	; 61
    96de:	de b7       	in	r29, 0x3e	; 62
	if (pUart[3]->enable485 == true) {
    96e0:	e0 91 6f 0a 	lds	r30, 0x0A6F
    96e4:	f0 91 70 0a 	lds	r31, 0x0A70
    96e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    96ea:	81 30       	cpi	r24, 0x01	; 1
    96ec:	39 f4       	brne	.+14     	; 0x96fc <__vector_56+0x3e>
		BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    96ee:	a5 e0       	ldi	r26, 0x05	; 5
    96f0:	b1 e0       	ldi	r27, 0x01	; 1
    96f2:	e5 e0       	ldi	r30, 0x05	; 5
    96f4:	f1 e0       	ldi	r31, 0x01	; 1
    96f6:	80 81       	ld	r24, Z
    96f8:	8b 7f       	andi	r24, 0xFB	; 251
    96fa:	8c 93       	st	X, r24
	}
}
    96fc:	cf 91       	pop	r28
    96fe:	df 91       	pop	r29
    9700:	ff 91       	pop	r31
    9702:	ef 91       	pop	r30
    9704:	bf 91       	pop	r27
    9706:	af 91       	pop	r26
    9708:	8f 91       	pop	r24
    970a:	0f 90       	pop	r0
    970c:	00 92 5b 00 	sts	0x005B, r0
    9710:	0f 90       	pop	r0
    9712:	0f be       	out	0x3f, r0	; 63
    9714:	0f 90       	pop	r0
    9716:	1f 90       	pop	r1
    9718:	18 95       	reti

0000971a <__vector_54>:

//===============================================================================
// UART Receive Complete Interrupt Handler
//===============================================================================
void SIG_USART3_RECV(void) {
    971a:	1f 92       	push	r1
    971c:	0f 92       	push	r0
    971e:	0f b6       	in	r0, 0x3f	; 63
    9720:	0f 92       	push	r0
    9722:	00 90 5b 00 	lds	r0, 0x005B
    9726:	0f 92       	push	r0
    9728:	11 24       	eor	r1, r1
    972a:	2f 93       	push	r18
    972c:	3f 93       	push	r19
    972e:	4f 93       	push	r20
    9730:	5f 93       	push	r21
    9732:	6f 93       	push	r22
    9734:	7f 93       	push	r23
    9736:	8f 93       	push	r24
    9738:	9f 93       	push	r25
    973a:	af 93       	push	r26
    973c:	bf 93       	push	r27
    973e:	ef 93       	push	r30
    9740:	ff 93       	push	r31
    9742:	df 93       	push	r29
    9744:	cf 93       	push	r28
    9746:	0f 92       	push	r0
    9748:	cd b7       	in	r28, 0x3d	; 61
    974a:	de b7       	in	r29, 0x3e	; 62
  u08 data;
  /* read the received data */
  data = UDR3;
    974c:	e6 e3       	ldi	r30, 0x36	; 54
    974e:	f1 e0       	ldi	r31, 0x01	; 1
    9750:	80 81       	ld	r24, Z
    9752:	89 83       	std	Y+1, r24	; 0x01
  pUart[3]->rxFIFO.add(&data, 1);
    9754:	80 91 6f 0a 	lds	r24, 0x0A6F
    9758:	90 91 70 0a 	lds	r25, 0x0A70
    975c:	09 96       	adiw	r24, 0x09	; 9
    975e:	9e 01       	movw	r18, r28
    9760:	2f 5f       	subi	r18, 0xFF	; 255
    9762:	3f 4f       	sbci	r19, 0xFF	; 255
    9764:	b9 01       	movw	r22, r18
    9766:	41 e0       	ldi	r20, 0x01	; 1
    9768:	50 e0       	ldi	r21, 0x00	; 0
    976a:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
}
    976e:	0f 90       	pop	r0
    9770:	cf 91       	pop	r28
    9772:	df 91       	pop	r29
    9774:	ff 91       	pop	r31
    9776:	ef 91       	pop	r30
    9778:	bf 91       	pop	r27
    977a:	af 91       	pop	r26
    977c:	9f 91       	pop	r25
    977e:	8f 91       	pop	r24
    9780:	7f 91       	pop	r23
    9782:	6f 91       	pop	r22
    9784:	5f 91       	pop	r21
    9786:	4f 91       	pop	r20
    9788:	3f 91       	pop	r19
    978a:	2f 91       	pop	r18
    978c:	0f 90       	pop	r0
    978e:	00 92 5b 00 	sts	0x005B, r0
    9792:	0f 90       	pop	r0
    9794:	0f be       	out	0x3f, r0	; 63
    9796:	0f 90       	pop	r0
    9798:	1f 90       	pop	r1
    979a:	18 95       	reti

0000979c <__vector_51>:
	}
}
//===============================================================================
// UART Receive Complete Interrupt Handler
//===============================================================================
void SIG_USART2_RECV(void) {
    979c:	1f 92       	push	r1
    979e:	0f 92       	push	r0
    97a0:	0f b6       	in	r0, 0x3f	; 63
    97a2:	0f 92       	push	r0
    97a4:	00 90 5b 00 	lds	r0, 0x005B
    97a8:	0f 92       	push	r0
    97aa:	11 24       	eor	r1, r1
    97ac:	2f 93       	push	r18
    97ae:	3f 93       	push	r19
    97b0:	4f 93       	push	r20
    97b2:	5f 93       	push	r21
    97b4:	6f 93       	push	r22
    97b6:	7f 93       	push	r23
    97b8:	8f 93       	push	r24
    97ba:	9f 93       	push	r25
    97bc:	af 93       	push	r26
    97be:	bf 93       	push	r27
    97c0:	ef 93       	push	r30
    97c2:	ff 93       	push	r31
    97c4:	df 93       	push	r29
    97c6:	cf 93       	push	r28
    97c8:	0f 92       	push	r0
    97ca:	cd b7       	in	r28, 0x3d	; 61
    97cc:	de b7       	in	r29, 0x3e	; 62
	u08 data;
	/* read the received data */
	data = UDR2;
    97ce:	e6 ed       	ldi	r30, 0xD6	; 214
    97d0:	f0 e0       	ldi	r31, 0x00	; 0
    97d2:	80 81       	ld	r24, Z
    97d4:	89 83       	std	Y+1, r24	; 0x01
	pUart[2]->rxFIFO.add(&data, 1);
    97d6:	80 91 6d 0a 	lds	r24, 0x0A6D
    97da:	90 91 6e 0a 	lds	r25, 0x0A6E
    97de:	09 96       	adiw	r24, 0x09	; 9
    97e0:	9e 01       	movw	r18, r28
    97e2:	2f 5f       	subi	r18, 0xFF	; 255
    97e4:	3f 4f       	sbci	r19, 0xFF	; 255
    97e6:	b9 01       	movw	r22, r18
    97e8:	41 e0       	ldi	r20, 0x01	; 1
    97ea:	50 e0       	ldi	r21, 0x00	; 0
    97ec:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
}
    97f0:	0f 90       	pop	r0
    97f2:	cf 91       	pop	r28
    97f4:	df 91       	pop	r29
    97f6:	ff 91       	pop	r31
    97f8:	ef 91       	pop	r30
    97fa:	bf 91       	pop	r27
    97fc:	af 91       	pop	r26
    97fe:	9f 91       	pop	r25
    9800:	8f 91       	pop	r24
    9802:	7f 91       	pop	r23
    9804:	6f 91       	pop	r22
    9806:	5f 91       	pop	r21
    9808:	4f 91       	pop	r20
    980a:	3f 91       	pop	r19
    980c:	2f 91       	pop	r18
    980e:	0f 90       	pop	r0
    9810:	00 92 5b 00 	sts	0x005B, r0
    9814:	0f 90       	pop	r0
    9816:	0f be       	out	0x3f, r0	; 63
    9818:	0f 90       	pop	r0
    981a:	1f 90       	pop	r1
    981c:	18 95       	reti

0000981e <__vector_36>:
	}
}
//===============================================================================
// UART Receive Complete Interrupt Handler
//===============================================================================
void SIG_USART1_RECV(void) {
    981e:	1f 92       	push	r1
    9820:	0f 92       	push	r0
    9822:	0f b6       	in	r0, 0x3f	; 63
    9824:	0f 92       	push	r0
    9826:	00 90 5b 00 	lds	r0, 0x005B
    982a:	0f 92       	push	r0
    982c:	11 24       	eor	r1, r1
    982e:	2f 93       	push	r18
    9830:	3f 93       	push	r19
    9832:	4f 93       	push	r20
    9834:	5f 93       	push	r21
    9836:	6f 93       	push	r22
    9838:	7f 93       	push	r23
    983a:	8f 93       	push	r24
    983c:	9f 93       	push	r25
    983e:	af 93       	push	r26
    9840:	bf 93       	push	r27
    9842:	ef 93       	push	r30
    9844:	ff 93       	push	r31
    9846:	df 93       	push	r29
    9848:	cf 93       	push	r28
    984a:	0f 92       	push	r0
    984c:	cd b7       	in	r28, 0x3d	; 61
    984e:	de b7       	in	r29, 0x3e	; 62
	u08 data;
	/* read the received data */
	data = UDR1;
    9850:	ee ec       	ldi	r30, 0xCE	; 206
    9852:	f0 e0       	ldi	r31, 0x00	; 0
    9854:	80 81       	ld	r24, Z
    9856:	89 83       	std	Y+1, r24	; 0x01
	pUart[1]->rxFIFO.add(&data, 1);
    9858:	80 91 6b 0a 	lds	r24, 0x0A6B
    985c:	90 91 6c 0a 	lds	r25, 0x0A6C
    9860:	09 96       	adiw	r24, 0x09	; 9
    9862:	9e 01       	movw	r18, r28
    9864:	2f 5f       	subi	r18, 0xFF	; 255
    9866:	3f 4f       	sbci	r19, 0xFF	; 255
    9868:	b9 01       	movw	r22, r18
    986a:	41 e0       	ldi	r20, 0x01	; 1
    986c:	50 e0       	ldi	r21, 0x00	; 0
    986e:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
}
    9872:	0f 90       	pop	r0
    9874:	cf 91       	pop	r28
    9876:	df 91       	pop	r29
    9878:	ff 91       	pop	r31
    987a:	ef 91       	pop	r30
    987c:	bf 91       	pop	r27
    987e:	af 91       	pop	r26
    9880:	9f 91       	pop	r25
    9882:	8f 91       	pop	r24
    9884:	7f 91       	pop	r23
    9886:	6f 91       	pop	r22
    9888:	5f 91       	pop	r21
    988a:	4f 91       	pop	r20
    988c:	3f 91       	pop	r19
    988e:	2f 91       	pop	r18
    9890:	0f 90       	pop	r0
    9892:	00 92 5b 00 	sts	0x005B, r0
    9896:	0f 90       	pop	r0
    9898:	0f be       	out	0x3f, r0	; 63
    989a:	0f 90       	pop	r0
    989c:	1f 90       	pop	r1
    989e:	18 95       	reti

000098a0 <__vector_25>:
	}
}
//===============================================================================
// UART Receive Complete Interrupt Handler
//===============================================================================
void SIG_USART0_RECV(void) {
    98a0:	1f 92       	push	r1
    98a2:	0f 92       	push	r0
    98a4:	0f b6       	in	r0, 0x3f	; 63
    98a6:	0f 92       	push	r0
    98a8:	00 90 5b 00 	lds	r0, 0x005B
    98ac:	0f 92       	push	r0
    98ae:	11 24       	eor	r1, r1
    98b0:	2f 93       	push	r18
    98b2:	3f 93       	push	r19
    98b4:	4f 93       	push	r20
    98b6:	5f 93       	push	r21
    98b8:	6f 93       	push	r22
    98ba:	7f 93       	push	r23
    98bc:	8f 93       	push	r24
    98be:	9f 93       	push	r25
    98c0:	af 93       	push	r26
    98c2:	bf 93       	push	r27
    98c4:	ef 93       	push	r30
    98c6:	ff 93       	push	r31
    98c8:	df 93       	push	r29
    98ca:	cf 93       	push	r28
    98cc:	0f 92       	push	r0
    98ce:	cd b7       	in	r28, 0x3d	; 61
    98d0:	de b7       	in	r29, 0x3e	; 62
	u08 data;
	/* read the received data */
	data = UDR0;
    98d2:	e6 ec       	ldi	r30, 0xC6	; 198
    98d4:	f0 e0       	ldi	r31, 0x00	; 0
    98d6:	80 81       	ld	r24, Z
    98d8:	89 83       	std	Y+1, r24	; 0x01
	pUart[0]->rxFIFO.add(&data, 1);
    98da:	80 91 69 0a 	lds	r24, 0x0A69
    98de:	90 91 6a 0a 	lds	r25, 0x0A6A
    98e2:	09 96       	adiw	r24, 0x09	; 9
    98e4:	9e 01       	movw	r18, r28
    98e6:	2f 5f       	subi	r18, 0xFF	; 255
    98e8:	3f 4f       	sbci	r19, 0xFF	; 255
    98ea:	b9 01       	movw	r22, r18
    98ec:	41 e0       	ldi	r20, 0x01	; 1
    98ee:	50 e0       	ldi	r21, 0x00	; 0
    98f0:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
}
    98f4:	0f 90       	pop	r0
    98f6:	cf 91       	pop	r28
    98f8:	df 91       	pop	r29
    98fa:	ff 91       	pop	r31
    98fc:	ef 91       	pop	r30
    98fe:	bf 91       	pop	r27
    9900:	af 91       	pop	r26
    9902:	9f 91       	pop	r25
    9904:	8f 91       	pop	r24
    9906:	7f 91       	pop	r23
    9908:	6f 91       	pop	r22
    990a:	5f 91       	pop	r21
    990c:	4f 91       	pop	r20
    990e:	3f 91       	pop	r19
    9910:	2f 91       	pop	r18
    9912:	0f 90       	pop	r0
    9914:	00 92 5b 00 	sts	0x005B, r0
    9918:	0f 90       	pop	r0
    991a:	0f be       	out	0x3f, r0	; 63
    991c:	0f 90       	pop	r0
    991e:	1f 90       	pop	r1
    9920:	18 95       	reti

00009922 <_Z13SIG_UART_RECVv>:
	}
}
//===============================================================================
// UART Receive Complete Interrupt Handler
//===============================================================================
void SIG_UART_RECV(void) {
    9922:	df 93       	push	r29
    9924:	cf 93       	push	r28
    9926:	0f 92       	push	r0
    9928:	cd b7       	in	r28, 0x3d	; 61
    992a:	de b7       	in	r29, 0x3e	; 62
	u08 data;
	/* read the received data */
	data = UDR0;
    992c:	e6 ec       	ldi	r30, 0xC6	; 198
    992e:	f0 e0       	ldi	r31, 0x00	; 0
    9930:	80 81       	ld	r24, Z
    9932:	89 83       	std	Y+1, r24	; 0x01
	pUart[0]->rxFIFO.add(&data, 1);
    9934:	80 91 69 0a 	lds	r24, 0x0A69
    9938:	90 91 6a 0a 	lds	r25, 0x0A6A
    993c:	09 96       	adiw	r24, 0x09	; 9
    993e:	9e 01       	movw	r18, r28
    9940:	2f 5f       	subi	r18, 0xFF	; 255
    9942:	3f 4f       	sbci	r19, 0xFF	; 255
    9944:	b9 01       	movw	r22, r18
    9946:	41 e0       	ldi	r20, 0x01	; 1
    9948:	50 e0       	ldi	r21, 0x00	; 0
    994a:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
}
    994e:	0f 90       	pop	r0
    9950:	cf 91       	pop	r28
    9952:	df 91       	pop	r29
    9954:	08 95       	ret

00009956 <_ZN5CUART4sendEPct>:
  send(str,strlen(str));
}

#endif
/****************************************************************************************/
u16 CUART::send(c08* buffer, u16 nBytes) {
    9956:	df 93       	push	r29
    9958:	cf 93       	push	r28
    995a:	cd b7       	in	r28, 0x3d	; 61
    995c:	de b7       	in	r29, 0x3e	; 62
    995e:	2c 97       	sbiw	r28, 0x0c	; 12
    9960:	0f b6       	in	r0, 0x3f	; 63
    9962:	f8 94       	cli
    9964:	de bf       	out	0x3e, r29	; 62
    9966:	0f be       	out	0x3f, r0	; 63
    9968:	cd bf       	out	0x3d, r28	; 61
    996a:	9c 83       	std	Y+4, r25	; 0x04
    996c:	8b 83       	std	Y+3, r24	; 0x03
    996e:	7e 83       	std	Y+6, r23	; 0x06
    9970:	6d 83       	std	Y+5, r22	; 0x05
    9972:	58 87       	std	Y+8, r21	; 0x08
    9974:	4f 83       	std	Y+7, r20	; 0x07
	u16 res;
	if (!nBytes || !buffer) {
    9976:	8f 81       	ldd	r24, Y+7	; 0x07
    9978:	98 85       	ldd	r25, Y+8	; 0x08
    997a:	00 97       	sbiw	r24, 0x00	; 0
    997c:	21 f0       	breq	.+8      	; 0x9986 <_ZN5CUART4sendEPct+0x30>
    997e:	8d 81       	ldd	r24, Y+5	; 0x05
    9980:	9e 81       	ldd	r25, Y+6	; 0x06
    9982:	00 97       	sbiw	r24, 0x00	; 0
    9984:	19 f4       	brne	.+6      	; 0x998c <_ZN5CUART4sendEPct+0x36>
		return 0;
    9986:	1c 86       	std	Y+12, r1	; 0x0c
    9988:	1b 86       	std	Y+11, r1	; 0x0b
    998a:	50 c0       	rjmp	.+160    	; 0x9a2c <_ZN5CUART4sendEPct+0xd6>
	}
	res = txFIFO.add((u08 *)buffer, nBytes);
    998c:	8b 81       	ldd	r24, Y+3	; 0x03
    998e:	9c 81       	ldd	r25, Y+4	; 0x04
    9990:	42 96       	adiw	r24, 0x12	; 18
    9992:	2d 81       	ldd	r18, Y+5	; 0x05
    9994:	3e 81       	ldd	r19, Y+6	; 0x06
    9996:	4f 81       	ldd	r20, Y+7	; 0x07
    9998:	58 85       	ldd	r21, Y+8	; 0x08
    999a:	b9 01       	movw	r22, r18
    999c:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
    99a0:	9a 83       	std	Y+2, r25	; 0x02
    99a2:	89 83       	std	Y+1, r24	; 0x01
	switch (uartNr) {
    99a4:	eb 81       	ldd	r30, Y+3	; 0x03
    99a6:	fc 81       	ldd	r31, Y+4	; 0x04
    99a8:	82 81       	ldd	r24, Z+2	; 0x02
    99aa:	28 2f       	mov	r18, r24
    99ac:	30 e0       	ldi	r19, 0x00	; 0
    99ae:	3a 87       	std	Y+10, r19	; 0x0a
    99b0:	29 87       	std	Y+9, r18	; 0x09
    99b2:	89 85       	ldd	r24, Y+9	; 0x09
    99b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    99b6:	81 30       	cpi	r24, 0x01	; 1
    99b8:	91 05       	cpc	r25, r1
    99ba:	e9 f0       	breq	.+58     	; 0x99f6 <_ZN5CUART4sendEPct+0xa0>
    99bc:	29 85       	ldd	r18, Y+9	; 0x09
    99be:	3a 85       	ldd	r19, Y+10	; 0x0a
    99c0:	22 30       	cpi	r18, 0x02	; 2
    99c2:	31 05       	cpc	r19, r1
    99c4:	2c f4       	brge	.+10     	; 0x99d0 <_ZN5CUART4sendEPct+0x7a>
    99c6:	89 85       	ldd	r24, Y+9	; 0x09
    99c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    99ca:	00 97       	sbiw	r24, 0x00	; 0
    99cc:	61 f0       	breq	.+24     	; 0x99e6 <_ZN5CUART4sendEPct+0x90>
    99ce:	2a c0       	rjmp	.+84     	; 0x9a24 <_ZN5CUART4sendEPct+0xce>
    99d0:	29 85       	ldd	r18, Y+9	; 0x09
    99d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    99d4:	22 30       	cpi	r18, 0x02	; 2
    99d6:	31 05       	cpc	r19, r1
    99d8:	b1 f0       	breq	.+44     	; 0x9a06 <_ZN5CUART4sendEPct+0xb0>
    99da:	89 85       	ldd	r24, Y+9	; 0x09
    99dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    99de:	83 30       	cpi	r24, 0x03	; 3
    99e0:	91 05       	cpc	r25, r1
    99e2:	c9 f0       	breq	.+50     	; 0x9a16 <_ZN5CUART4sendEPct+0xc0>
    99e4:	1f c0       	rjmp	.+62     	; 0x9a24 <_ZN5CUART4sendEPct+0xce>
	case 0:
		// enable UDRE interrupt => we will start sending as soon as interrupt is handled
		UCSR0B |= BV(UDRIE0);
    99e6:	a1 ec       	ldi	r26, 0xC1	; 193
    99e8:	b0 e0       	ldi	r27, 0x00	; 0
    99ea:	e1 ec       	ldi	r30, 0xC1	; 193
    99ec:	f0 e0       	ldi	r31, 0x00	; 0
    99ee:	80 81       	ld	r24, Z
    99f0:	80 62       	ori	r24, 0x20	; 32
    99f2:	8c 93       	st	X, r24
    99f4:	17 c0       	rjmp	.+46     	; 0x9a24 <_ZN5CUART4sendEPct+0xce>
		break;
#ifdef UDR1
	case 1:
		UCSR1B |= BV(UDRIE1);
    99f6:	a9 ec       	ldi	r26, 0xC9	; 201
    99f8:	b0 e0       	ldi	r27, 0x00	; 0
    99fa:	e9 ec       	ldi	r30, 0xC9	; 201
    99fc:	f0 e0       	ldi	r31, 0x00	; 0
    99fe:	80 81       	ld	r24, Z
    9a00:	80 62       	ori	r24, 0x20	; 32
    9a02:	8c 93       	st	X, r24
    9a04:	0f c0       	rjmp	.+30     	; 0x9a24 <_ZN5CUART4sendEPct+0xce>
		break;
#endif
#ifdef UDR2
	case 2:
		UCSR2B |= BV(UDRIE2);
    9a06:	a1 ed       	ldi	r26, 0xD1	; 209
    9a08:	b0 e0       	ldi	r27, 0x00	; 0
    9a0a:	e1 ed       	ldi	r30, 0xD1	; 209
    9a0c:	f0 e0       	ldi	r31, 0x00	; 0
    9a0e:	80 81       	ld	r24, Z
    9a10:	80 62       	ori	r24, 0x20	; 32
    9a12:	8c 93       	st	X, r24
    9a14:	07 c0       	rjmp	.+14     	; 0x9a24 <_ZN5CUART4sendEPct+0xce>
		break;
#endif
#ifdef UDR2
	case 3:
		UCSR3B |= BV(UDRIE3);
    9a16:	a1 e3       	ldi	r26, 0x31	; 49
    9a18:	b1 e0       	ldi	r27, 0x01	; 1
    9a1a:	e1 e3       	ldi	r30, 0x31	; 49
    9a1c:	f1 e0       	ldi	r31, 0x01	; 1
    9a1e:	80 81       	ld	r24, Z
    9a20:	80 62       	ori	r24, 0x20	; 32
    9a22:	8c 93       	st	X, r24
		break;
#endif
	}
	//return number of bytes written
	return res;
    9a24:	29 81       	ldd	r18, Y+1	; 0x01
    9a26:	3a 81       	ldd	r19, Y+2	; 0x02
    9a28:	3c 87       	std	Y+12, r19	; 0x0c
    9a2a:	2b 87       	std	Y+11, r18	; 0x0b
    9a2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    9a2e:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    9a30:	2c 96       	adiw	r28, 0x0c	; 12
    9a32:	0f b6       	in	r0, 0x3f	; 63
    9a34:	f8 94       	cli
    9a36:	de bf       	out	0x3e, r29	; 62
    9a38:	0f be       	out	0x3f, r0	; 63
    9a3a:	cd bf       	out	0x3d, r28	; 61
    9a3c:	cf 91       	pop	r28
    9a3e:	df 91       	pop	r29
    9a40:	08 95       	ret

00009a42 <_ZN5CUART9sendStr_PEPKc>:
	rxFIFO.clear();
}
/****************************************************************************************/
// prints a null-terminated string stored in program ROM
#ifndef UART_MINIMAL
void CUART::sendStr_P(const prog_char str[])
    9a42:	df 93       	push	r29
    9a44:	cf 93       	push	r28
    9a46:	cd b7       	in	r28, 0x3d	; 61
    9a48:	de b7       	in	r29, 0x3e	; 62
    9a4a:	29 97       	sbiw	r28, 0x09	; 9
    9a4c:	0f b6       	in	r0, 0x3f	; 63
    9a4e:	f8 94       	cli
    9a50:	de bf       	out	0x3e, r29	; 62
    9a52:	0f be       	out	0x3f, r0	; 63
    9a54:	cd bf       	out	0x3d, r28	; 61
    9a56:	9e 83       	std	Y+6, r25	; 0x06
    9a58:	8d 83       	std	Y+5, r24	; 0x05
    9a5a:	78 87       	std	Y+8, r23	; 0x08
    9a5c:	6f 83       	std	Y+7, r22	; 0x07
{
  register char c;
  if (!str) return;
    9a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    9a60:	98 85       	ldd	r25, Y+8	; 0x08
    9a62:	00 97       	sbiw	r24, 0x00	; 0
    9a64:	21 f1       	breq	.+72     	; 0x9aae <_ZN5CUART9sendStr_PEPKc+0x6c>
    9a66:	0a c0       	rjmp	.+20     	; 0x9a7c <_ZN5CUART9sendStr_PEPKc+0x3a>
  // print the string until the null-terminator
  while((c = pgm_read_byte(str++)))
    send(&c,1);
    9a68:	8d 81       	ldd	r24, Y+5	; 0x05
    9a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    9a6c:	9e 01       	movw	r18, r28
    9a6e:	2c 5f       	subi	r18, 0xFC	; 252
    9a70:	3f 4f       	sbci	r19, 0xFF	; 255
    9a72:	b9 01       	movw	r22, r18
    9a74:	41 e0       	ldi	r20, 0x01	; 1
    9a76:	50 e0       	ldi	r21, 0x00	; 0
    9a78:	0e 94 ab 4c 	call	0x9956	; 0x9956 <_ZN5CUART4sendEPct>
void CUART::sendStr_P(const prog_char str[])
{
  register char c;
  if (!str) return;
  // print the string until the null-terminator
  while((c = pgm_read_byte(str++)))
    9a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    9a7e:	98 85       	ldd	r25, Y+8	; 0x08
    9a80:	9b 83       	std	Y+3, r25	; 0x03
    9a82:	8a 83       	std	Y+2, r24	; 0x02
    9a84:	8f 81       	ldd	r24, Y+7	; 0x07
    9a86:	98 85       	ldd	r25, Y+8	; 0x08
    9a88:	01 96       	adiw	r24, 0x01	; 1
    9a8a:	98 87       	std	Y+8, r25	; 0x08
    9a8c:	8f 83       	std	Y+7, r24	; 0x07
    9a8e:	ea 81       	ldd	r30, Y+2	; 0x02
    9a90:	fb 81       	ldd	r31, Y+3	; 0x03
    9a92:	84 91       	lpm	r24, Z+
    9a94:	89 83       	std	Y+1, r24	; 0x01
    9a96:	89 81       	ldd	r24, Y+1	; 0x01
    9a98:	8c 83       	std	Y+4, r24	; 0x04
    9a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    9a9c:	89 87       	std	Y+9, r24	; 0x09
    9a9e:	89 85       	ldd	r24, Y+9	; 0x09
    9aa0:	88 23       	and	r24, r24
    9aa2:	11 f0       	breq	.+4      	; 0x9aa8 <_ZN5CUART9sendStr_PEPKc+0x66>
    9aa4:	81 e0       	ldi	r24, 0x01	; 1
    9aa6:	89 87       	std	Y+9, r24	; 0x09
    9aa8:	89 85       	ldd	r24, Y+9	; 0x09
    9aaa:	88 23       	and	r24, r24
    9aac:	e9 f6       	brne	.-70     	; 0x9a68 <_ZN5CUART9sendStr_PEPKc+0x26>
    send(&c,1);
}
    9aae:	29 96       	adiw	r28, 0x09	; 9
    9ab0:	0f b6       	in	r0, 0x3f	; 63
    9ab2:	f8 94       	cli
    9ab4:	de bf       	out	0x3e, r29	; 62
    9ab6:	0f be       	out	0x3f, r0	; 63
    9ab8:	cd bf       	out	0x3d, r28	; 61
    9aba:	cf 91       	pop	r28
    9abc:	df 91       	pop	r29
    9abe:	08 95       	ret

00009ac0 <_ZN5CUART6send_PEPKct>:
void CUART::sendStr(c08* str)
{
  send(str,strlen(str));
}

u16 CUART::send_P(const prog_char buf[], u16 nBytes) {
    9ac0:	df 93       	push	r29
    9ac2:	cf 93       	push	r28
    9ac4:	cd b7       	in	r28, 0x3d	; 61
    9ac6:	de b7       	in	r29, 0x3e	; 62
    9ac8:	2e 97       	sbiw	r28, 0x0e	; 14
    9aca:	0f b6       	in	r0, 0x3f	; 63
    9acc:	f8 94       	cli
    9ace:	de bf       	out	0x3e, r29	; 62
    9ad0:	0f be       	out	0x3f, r0	; 63
    9ad2:	cd bf       	out	0x3d, r28	; 61
    9ad4:	98 87       	std	Y+8, r25	; 0x08
    9ad6:	8f 83       	std	Y+7, r24	; 0x07
    9ad8:	7a 87       	std	Y+10, r23	; 0x0a
    9ada:	69 87       	std	Y+9, r22	; 0x09
    9adc:	5c 87       	std	Y+12, r21	; 0x0c
    9ade:	4b 87       	std	Y+11, r20	; 0x0b
  u16 res;
  u08 dat;
  if (!nBytes || !buf) {
    9ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
    9ae2:	9c 85       	ldd	r25, Y+12	; 0x0c
    9ae4:	00 97       	sbiw	r24, 0x00	; 0
    9ae6:	21 f0       	breq	.+8      	; 0x9af0 <_ZN5CUART6send_PEPKct+0x30>
    9ae8:	89 85       	ldd	r24, Y+9	; 0x09
    9aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    9aec:	00 97       	sbiw	r24, 0x00	; 0
    9aee:	21 f5       	brne	.+72     	; 0x9b38 <_ZN5CUART6send_PEPKct+0x78>
    return 0;
    9af0:	1e 86       	std	Y+14, r1	; 0x0e
    9af2:	1d 86       	std	Y+13, r1	; 0x0d
    9af4:	29 c0       	rjmp	.+82     	; 0x9b48 <_ZN5CUART6send_PEPKct+0x88>
  }
  while(nBytes){
    dat = pgm_read_byte(buf++);
    9af6:	89 85       	ldd	r24, Y+9	; 0x09
    9af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    9afa:	9b 83       	std	Y+3, r25	; 0x03
    9afc:	8a 83       	std	Y+2, r24	; 0x02
    9afe:	89 85       	ldd	r24, Y+9	; 0x09
    9b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    9b02:	01 96       	adiw	r24, 0x01	; 1
    9b04:	9a 87       	std	Y+10, r25	; 0x0a
    9b06:	89 87       	std	Y+9, r24	; 0x09
    9b08:	ea 81       	ldd	r30, Y+2	; 0x02
    9b0a:	fb 81       	ldd	r31, Y+3	; 0x03
    9b0c:	84 91       	lpm	r24, Z+
    9b0e:	89 83       	std	Y+1, r24	; 0x01
    9b10:	89 81       	ldd	r24, Y+1	; 0x01
    9b12:	8e 83       	std	Y+6, r24	; 0x06
    res = txFIFO.add(&dat,1);
    9b14:	8f 81       	ldd	r24, Y+7	; 0x07
    9b16:	98 85       	ldd	r25, Y+8	; 0x08
    9b18:	42 96       	adiw	r24, 0x12	; 18
    9b1a:	9e 01       	movw	r18, r28
    9b1c:	2a 5f       	subi	r18, 0xFA	; 250
    9b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    9b20:	b9 01       	movw	r22, r18
    9b22:	41 e0       	ldi	r20, 0x01	; 1
    9b24:	50 e0       	ldi	r21, 0x00	; 0
    9b26:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <_ZN5CFIFO3addEPht>
    9b2a:	9d 83       	std	Y+5, r25	; 0x05
    9b2c:	8c 83       	std	Y+4, r24	; 0x04
    nBytes--;
    9b2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9b30:	9c 85       	ldd	r25, Y+12	; 0x0c
    9b32:	01 97       	sbiw	r24, 0x01	; 1
    9b34:	9c 87       	std	Y+12, r25	; 0x0c
    9b36:	8b 87       	std	Y+11, r24	; 0x0b
  u16 res;
  u08 dat;
  if (!nBytes || !buf) {
    return 0;
  }
  while(nBytes){
    9b38:	8b 85       	ldd	r24, Y+11	; 0x0b
    9b3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    9b3c:	00 97       	sbiw	r24, 0x00	; 0
    9b3e:	d9 f6       	brne	.-74     	; 0x9af6 <_ZN5CUART6send_PEPKct+0x36>
    dat = pgm_read_byte(buf++);
    res = txFIFO.add(&dat,1);
    nBytes--;
  }
  return res;
    9b40:	8c 81       	ldd	r24, Y+4	; 0x04
    9b42:	9d 81       	ldd	r25, Y+5	; 0x05
    9b44:	9e 87       	std	Y+14, r25	; 0x0e
    9b46:	8d 87       	std	Y+13, r24	; 0x0d
    9b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    9b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    9b4c:	2e 96       	adiw	r28, 0x0e	; 14
    9b4e:	0f b6       	in	r0, 0x3f	; 63
    9b50:	f8 94       	cli
    9b52:	de bf       	out	0x3e, r29	; 62
    9b54:	0f be       	out	0x3f, r0	; 63
    9b56:	cd bf       	out	0x3d, r28	; 61
    9b58:	cf 91       	pop	r28
    9b5a:	df 91       	pop	r29
    9b5c:	08 95       	ret

00009b5e <__vector_55>:

//===============================================================================
// UART Transmit register empty
//===============================================================================
#ifdef UDR3
void SIG_USART3_DATA(void) {
    9b5e:	1f 92       	push	r1
    9b60:	0f 92       	push	r0
    9b62:	0f b6       	in	r0, 0x3f	; 63
    9b64:	0f 92       	push	r0
    9b66:	00 90 5b 00 	lds	r0, 0x005B
    9b6a:	0f 92       	push	r0
    9b6c:	11 24       	eor	r1, r1
    9b6e:	2f 93       	push	r18
    9b70:	3f 93       	push	r19
    9b72:	4f 93       	push	r20
    9b74:	5f 93       	push	r21
    9b76:	6f 93       	push	r22
    9b78:	7f 93       	push	r23
    9b7a:	8f 93       	push	r24
    9b7c:	9f 93       	push	r25
    9b7e:	af 93       	push	r26
    9b80:	bf 93       	push	r27
    9b82:	ef 93       	push	r30
    9b84:	ff 93       	push	r31
    9b86:	df 93       	push	r29
    9b88:	cf 93       	push	r28
    9b8a:	00 d0       	rcall	.+0      	; 0x9b8c <__vector_55+0x2e>
    9b8c:	cd b7       	in	r28, 0x3d	; 61
    9b8e:	de b7       	in	r29, 0x3e	; 62
	u08 dat;
	u08 cnt;
	if (pUart[3]->enable485 == true) {
    9b90:	e0 91 6f 0a 	lds	r30, 0x0A6F
    9b94:	f0 91 70 0a 	lds	r31, 0x0A70
    9b98:	84 8d       	ldd	r24, Z+28	; 0x1c
    9b9a:	81 30       	cpi	r24, 0x01	; 1
    9b9c:	39 f4       	brne	.+14     	; 0x9bac <__vector_55+0x4e>
		BIT_SET_HI(RS485_EN_PORT, RS485_EN_PIN);
    9b9e:	a5 e0       	ldi	r26, 0x05	; 5
    9ba0:	b1 e0       	ldi	r27, 0x01	; 1
    9ba2:	e5 e0       	ldi	r30, 0x05	; 5
    9ba4:	f1 e0       	ldi	r31, 0x01	; 1
    9ba6:	80 81       	ld	r24, Z
    9ba8:	84 60       	ori	r24, 0x04	; 4
    9baa:	8c 93       	st	X, r24
	}
	cnt = pUart[3]->txFIFO.remove(&dat, 1);
    9bac:	80 91 6f 0a 	lds	r24, 0x0A6F
    9bb0:	90 91 70 0a 	lds	r25, 0x0A70
    9bb4:	42 96       	adiw	r24, 0x12	; 18
    9bb6:	9e 01       	movw	r18, r28
    9bb8:	2e 5f       	subi	r18, 0xFE	; 254
    9bba:	3f 4f       	sbci	r19, 0xFF	; 255
    9bbc:	b9 01       	movw	r22, r18
    9bbe:	41 e0       	ldi	r20, 0x01	; 1
    9bc0:	50 e0       	ldi	r21, 0x00	; 0
    9bc2:	0e 94 24 41 	call	0x8248	; 0x8248 <_ZN5CFIFO6removeEPht>
    9bc6:	89 83       	std	Y+1, r24	; 0x01
	if (cnt) {
    9bc8:	89 81       	ldd	r24, Y+1	; 0x01
    9bca:	88 23       	and	r24, r24
    9bcc:	29 f0       	breq	.+10     	; 0x9bd8 <__vector_55+0x7a>
		UDR3 = dat;
    9bce:	e6 e3       	ldi	r30, 0x36	; 54
    9bd0:	f1 e0       	ldi	r31, 0x01	; 1
    9bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    9bd4:	80 83       	st	Z, r24
    9bd6:	07 c0       	rjmp	.+14     	; 0x9be6 <__vector_55+0x88>
	} else {
		UCSR3B &= ~(BV(UDRIE3)); /* disable UDRE interrupt */
    9bd8:	a1 e3       	ldi	r26, 0x31	; 49
    9bda:	b1 e0       	ldi	r27, 0x01	; 1
    9bdc:	e1 e3       	ldi	r30, 0x31	; 49
    9bde:	f1 e0       	ldi	r31, 0x01	; 1
    9be0:	80 81       	ld	r24, Z
    9be2:	8f 7d       	andi	r24, 0xDF	; 223
    9be4:	8c 93       	st	X, r24
	}
}
    9be6:	0f 90       	pop	r0
    9be8:	0f 90       	pop	r0
    9bea:	cf 91       	pop	r28
    9bec:	df 91       	pop	r29
    9bee:	ff 91       	pop	r31
    9bf0:	ef 91       	pop	r30
    9bf2:	bf 91       	pop	r27
    9bf4:	af 91       	pop	r26
    9bf6:	9f 91       	pop	r25
    9bf8:	8f 91       	pop	r24
    9bfa:	7f 91       	pop	r23
    9bfc:	6f 91       	pop	r22
    9bfe:	5f 91       	pop	r21
    9c00:	4f 91       	pop	r20
    9c02:	3f 91       	pop	r19
    9c04:	2f 91       	pop	r18
    9c06:	0f 90       	pop	r0
    9c08:	00 92 5b 00 	sts	0x005B, r0
    9c0c:	0f 90       	pop	r0
    9c0e:	0f be       	out	0x3f, r0	; 63
    9c10:	0f 90       	pop	r0
    9c12:	1f 90       	pop	r1
    9c14:	18 95       	reti

00009c16 <__vector_52>:
#endif
#ifdef UDR2
//===============================================================================
// UART2 Transmit register empty
//===============================================================================
void SIG_USART2_DATA(void) {
    9c16:	1f 92       	push	r1
    9c18:	0f 92       	push	r0
    9c1a:	0f b6       	in	r0, 0x3f	; 63
    9c1c:	0f 92       	push	r0
    9c1e:	00 90 5b 00 	lds	r0, 0x005B
    9c22:	0f 92       	push	r0
    9c24:	11 24       	eor	r1, r1
    9c26:	2f 93       	push	r18
    9c28:	3f 93       	push	r19
    9c2a:	4f 93       	push	r20
    9c2c:	5f 93       	push	r21
    9c2e:	6f 93       	push	r22
    9c30:	7f 93       	push	r23
    9c32:	8f 93       	push	r24
    9c34:	9f 93       	push	r25
    9c36:	af 93       	push	r26
    9c38:	bf 93       	push	r27
    9c3a:	ef 93       	push	r30
    9c3c:	ff 93       	push	r31
    9c3e:	df 93       	push	r29
    9c40:	cf 93       	push	r28
    9c42:	00 d0       	rcall	.+0      	; 0x9c44 <__vector_52+0x2e>
    9c44:	cd b7       	in	r28, 0x3d	; 61
    9c46:	de b7       	in	r29, 0x3e	; 62
	u08 dat;
	u08 cnt;
	if (pUart[2]->enable485 == true) {
    9c48:	e0 91 6d 0a 	lds	r30, 0x0A6D
    9c4c:	f0 91 6e 0a 	lds	r31, 0x0A6E
    9c50:	84 8d       	ldd	r24, Z+28	; 0x1c
    9c52:	81 30       	cpi	r24, 0x01	; 1
    9c54:	39 f4       	brne	.+14     	; 0x9c64 <__vector_52+0x4e>
		BIT_SET_HI(RS485_EN_PORT, RS485_EN_PIN);
    9c56:	a5 e0       	ldi	r26, 0x05	; 5
    9c58:	b1 e0       	ldi	r27, 0x01	; 1
    9c5a:	e5 e0       	ldi	r30, 0x05	; 5
    9c5c:	f1 e0       	ldi	r31, 0x01	; 1
    9c5e:	80 81       	ld	r24, Z
    9c60:	84 60       	ori	r24, 0x04	; 4
    9c62:	8c 93       	st	X, r24
	}
	cnt = pUart[2]->txFIFO.remove(&dat, 1);
    9c64:	80 91 6d 0a 	lds	r24, 0x0A6D
    9c68:	90 91 6e 0a 	lds	r25, 0x0A6E
    9c6c:	42 96       	adiw	r24, 0x12	; 18
    9c6e:	9e 01       	movw	r18, r28
    9c70:	2e 5f       	subi	r18, 0xFE	; 254
    9c72:	3f 4f       	sbci	r19, 0xFF	; 255
    9c74:	b9 01       	movw	r22, r18
    9c76:	41 e0       	ldi	r20, 0x01	; 1
    9c78:	50 e0       	ldi	r21, 0x00	; 0
    9c7a:	0e 94 24 41 	call	0x8248	; 0x8248 <_ZN5CFIFO6removeEPht>
    9c7e:	89 83       	std	Y+1, r24	; 0x01
	if (cnt) {
    9c80:	89 81       	ldd	r24, Y+1	; 0x01
    9c82:	88 23       	and	r24, r24
    9c84:	29 f0       	breq	.+10     	; 0x9c90 <__vector_52+0x7a>
		UDR2 = dat;
    9c86:	e6 ed       	ldi	r30, 0xD6	; 214
    9c88:	f0 e0       	ldi	r31, 0x00	; 0
    9c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    9c8c:	80 83       	st	Z, r24
    9c8e:	07 c0       	rjmp	.+14     	; 0x9c9e <__vector_52+0x88>
	} else {
		UCSR2B &= ~(BV(UDRIE2)); /* disable UDRE interrupt */
    9c90:	a1 ed       	ldi	r26, 0xD1	; 209
    9c92:	b0 e0       	ldi	r27, 0x00	; 0
    9c94:	e1 ed       	ldi	r30, 0xD1	; 209
    9c96:	f0 e0       	ldi	r31, 0x00	; 0
    9c98:	80 81       	ld	r24, Z
    9c9a:	8f 7d       	andi	r24, 0xDF	; 223
    9c9c:	8c 93       	st	X, r24
	}
}
    9c9e:	0f 90       	pop	r0
    9ca0:	0f 90       	pop	r0
    9ca2:	cf 91       	pop	r28
    9ca4:	df 91       	pop	r29
    9ca6:	ff 91       	pop	r31
    9ca8:	ef 91       	pop	r30
    9caa:	bf 91       	pop	r27
    9cac:	af 91       	pop	r26
    9cae:	9f 91       	pop	r25
    9cb0:	8f 91       	pop	r24
    9cb2:	7f 91       	pop	r23
    9cb4:	6f 91       	pop	r22
    9cb6:	5f 91       	pop	r21
    9cb8:	4f 91       	pop	r20
    9cba:	3f 91       	pop	r19
    9cbc:	2f 91       	pop	r18
    9cbe:	0f 90       	pop	r0
    9cc0:	00 92 5b 00 	sts	0x005B, r0
    9cc4:	0f 90       	pop	r0
    9cc6:	0f be       	out	0x3f, r0	; 63
    9cc8:	0f 90       	pop	r0
    9cca:	1f 90       	pop	r1
    9ccc:	18 95       	reti

00009cce <__vector_37>:

//===============================================================================
// UART1 Transmit register empty
//===============================================================================
#ifdef UDR1
void SIG_USART1_DATA(void) {
    9cce:	1f 92       	push	r1
    9cd0:	0f 92       	push	r0
    9cd2:	0f b6       	in	r0, 0x3f	; 63
    9cd4:	0f 92       	push	r0
    9cd6:	00 90 5b 00 	lds	r0, 0x005B
    9cda:	0f 92       	push	r0
    9cdc:	11 24       	eor	r1, r1
    9cde:	2f 93       	push	r18
    9ce0:	3f 93       	push	r19
    9ce2:	4f 93       	push	r20
    9ce4:	5f 93       	push	r21
    9ce6:	6f 93       	push	r22
    9ce8:	7f 93       	push	r23
    9cea:	8f 93       	push	r24
    9cec:	9f 93       	push	r25
    9cee:	af 93       	push	r26
    9cf0:	bf 93       	push	r27
    9cf2:	ef 93       	push	r30
    9cf4:	ff 93       	push	r31
    9cf6:	df 93       	push	r29
    9cf8:	cf 93       	push	r28
    9cfa:	00 d0       	rcall	.+0      	; 0x9cfc <__vector_37+0x2e>
    9cfc:	cd b7       	in	r28, 0x3d	; 61
    9cfe:	de b7       	in	r29, 0x3e	; 62
	u08 dat;
	u08 cnt;
	if (pUart[1]->enable485 == true) {
    9d00:	e0 91 6b 0a 	lds	r30, 0x0A6B
    9d04:	f0 91 6c 0a 	lds	r31, 0x0A6C
    9d08:	84 8d       	ldd	r24, Z+28	; 0x1c
    9d0a:	81 30       	cpi	r24, 0x01	; 1
    9d0c:	39 f4       	brne	.+14     	; 0x9d1c <__vector_37+0x4e>
		BIT_SET_HI(RS485_EN_PORT, RS485_EN_PIN);
    9d0e:	a5 e0       	ldi	r26, 0x05	; 5
    9d10:	b1 e0       	ldi	r27, 0x01	; 1
    9d12:	e5 e0       	ldi	r30, 0x05	; 5
    9d14:	f1 e0       	ldi	r31, 0x01	; 1
    9d16:	80 81       	ld	r24, Z
    9d18:	84 60       	ori	r24, 0x04	; 4
    9d1a:	8c 93       	st	X, r24
	}
	cnt = pUart[1]->txFIFO.remove(&dat, 1);
    9d1c:	80 91 6b 0a 	lds	r24, 0x0A6B
    9d20:	90 91 6c 0a 	lds	r25, 0x0A6C
    9d24:	42 96       	adiw	r24, 0x12	; 18
    9d26:	9e 01       	movw	r18, r28
    9d28:	2e 5f       	subi	r18, 0xFE	; 254
    9d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    9d2c:	b9 01       	movw	r22, r18
    9d2e:	41 e0       	ldi	r20, 0x01	; 1
    9d30:	50 e0       	ldi	r21, 0x00	; 0
    9d32:	0e 94 24 41 	call	0x8248	; 0x8248 <_ZN5CFIFO6removeEPht>
    9d36:	89 83       	std	Y+1, r24	; 0x01
	if (cnt) {
    9d38:	89 81       	ldd	r24, Y+1	; 0x01
    9d3a:	88 23       	and	r24, r24
    9d3c:	29 f0       	breq	.+10     	; 0x9d48 <__vector_37+0x7a>
		UDR1 = dat;
    9d3e:	ee ec       	ldi	r30, 0xCE	; 206
    9d40:	f0 e0       	ldi	r31, 0x00	; 0
    9d42:	8a 81       	ldd	r24, Y+2	; 0x02
    9d44:	80 83       	st	Z, r24
    9d46:	07 c0       	rjmp	.+14     	; 0x9d56 <__vector_37+0x88>
	} else {
		UCSR1B &= ~(BV(UDRIE1)); /* disable UDRE interrupt */
    9d48:	a9 ec       	ldi	r26, 0xC9	; 201
    9d4a:	b0 e0       	ldi	r27, 0x00	; 0
    9d4c:	e9 ec       	ldi	r30, 0xC9	; 201
    9d4e:	f0 e0       	ldi	r31, 0x00	; 0
    9d50:	80 81       	ld	r24, Z
    9d52:	8f 7d       	andi	r24, 0xDF	; 223
    9d54:	8c 93       	st	X, r24
	}
}
    9d56:	0f 90       	pop	r0
    9d58:	0f 90       	pop	r0
    9d5a:	cf 91       	pop	r28
    9d5c:	df 91       	pop	r29
    9d5e:	ff 91       	pop	r31
    9d60:	ef 91       	pop	r30
    9d62:	bf 91       	pop	r27
    9d64:	af 91       	pop	r26
    9d66:	9f 91       	pop	r25
    9d68:	8f 91       	pop	r24
    9d6a:	7f 91       	pop	r23
    9d6c:	6f 91       	pop	r22
    9d6e:	5f 91       	pop	r21
    9d70:	4f 91       	pop	r20
    9d72:	3f 91       	pop	r19
    9d74:	2f 91       	pop	r18
    9d76:	0f 90       	pop	r0
    9d78:	00 92 5b 00 	sts	0x005B, r0
    9d7c:	0f 90       	pop	r0
    9d7e:	0f be       	out	0x3f, r0	; 63
    9d80:	0f 90       	pop	r0
    9d82:	1f 90       	pop	r1
    9d84:	18 95       	reti

00009d86 <__vector_26>:
	pUart[0]->rxFIFO.add(&data, 1);
}
//===============================================================================
// UART Transmit register empty
//===============================================================================
void SIG_USART0_DATA(void) {
    9d86:	1f 92       	push	r1
    9d88:	0f 92       	push	r0
    9d8a:	0f b6       	in	r0, 0x3f	; 63
    9d8c:	0f 92       	push	r0
    9d8e:	00 90 5b 00 	lds	r0, 0x005B
    9d92:	0f 92       	push	r0
    9d94:	11 24       	eor	r1, r1
    9d96:	2f 93       	push	r18
    9d98:	3f 93       	push	r19
    9d9a:	4f 93       	push	r20
    9d9c:	5f 93       	push	r21
    9d9e:	6f 93       	push	r22
    9da0:	7f 93       	push	r23
    9da2:	8f 93       	push	r24
    9da4:	9f 93       	push	r25
    9da6:	af 93       	push	r26
    9da8:	bf 93       	push	r27
    9daa:	ef 93       	push	r30
    9dac:	ff 93       	push	r31
    9dae:	df 93       	push	r29
    9db0:	cf 93       	push	r28
    9db2:	00 d0       	rcall	.+0      	; 0x9db4 <__vector_26+0x2e>
    9db4:	cd b7       	in	r28, 0x3d	; 61
    9db6:	de b7       	in	r29, 0x3e	; 62
	u08 dat;
	u08 cnt;
	if (pUart[0]->enable485 == true) {
    9db8:	e0 91 69 0a 	lds	r30, 0x0A69
    9dbc:	f0 91 6a 0a 	lds	r31, 0x0A6A
    9dc0:	84 8d       	ldd	r24, Z+28	; 0x1c
    9dc2:	81 30       	cpi	r24, 0x01	; 1
    9dc4:	39 f4       	brne	.+14     	; 0x9dd4 <__vector_26+0x4e>
		BIT_SET_HI(RS485_EN_PORT, RS485_EN_PIN);
    9dc6:	a5 e0       	ldi	r26, 0x05	; 5
    9dc8:	b1 e0       	ldi	r27, 0x01	; 1
    9dca:	e5 e0       	ldi	r30, 0x05	; 5
    9dcc:	f1 e0       	ldi	r31, 0x01	; 1
    9dce:	80 81       	ld	r24, Z
    9dd0:	84 60       	ori	r24, 0x04	; 4
    9dd2:	8c 93       	st	X, r24
	}
	cnt = pUart[0]->txFIFO.remove(&dat, 1);
    9dd4:	80 91 69 0a 	lds	r24, 0x0A69
    9dd8:	90 91 6a 0a 	lds	r25, 0x0A6A
    9ddc:	42 96       	adiw	r24, 0x12	; 18
    9dde:	9e 01       	movw	r18, r28
    9de0:	2e 5f       	subi	r18, 0xFE	; 254
    9de2:	3f 4f       	sbci	r19, 0xFF	; 255
    9de4:	b9 01       	movw	r22, r18
    9de6:	41 e0       	ldi	r20, 0x01	; 1
    9de8:	50 e0       	ldi	r21, 0x00	; 0
    9dea:	0e 94 24 41 	call	0x8248	; 0x8248 <_ZN5CFIFO6removeEPht>
    9dee:	89 83       	std	Y+1, r24	; 0x01
	if (cnt) {
    9df0:	89 81       	ldd	r24, Y+1	; 0x01
    9df2:	88 23       	and	r24, r24
    9df4:	29 f0       	breq	.+10     	; 0x9e00 <__vector_26+0x7a>
		UDR0 = dat;
    9df6:	e6 ec       	ldi	r30, 0xC6	; 198
    9df8:	f0 e0       	ldi	r31, 0x00	; 0
    9dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    9dfc:	80 83       	st	Z, r24
    9dfe:	07 c0       	rjmp	.+14     	; 0x9e0e <__vector_26+0x88>
	} else {
		UCSR0B &= ~(BV(UDRIE0)); /* disable UDRE interrupt */
    9e00:	a1 ec       	ldi	r26, 0xC1	; 193
    9e02:	b0 e0       	ldi	r27, 0x00	; 0
    9e04:	e1 ec       	ldi	r30, 0xC1	; 193
    9e06:	f0 e0       	ldi	r31, 0x00	; 0
    9e08:	80 81       	ld	r24, Z
    9e0a:	8f 7d       	andi	r24, 0xDF	; 223
    9e0c:	8c 93       	st	X, r24
	}
}
    9e0e:	0f 90       	pop	r0
    9e10:	0f 90       	pop	r0
    9e12:	cf 91       	pop	r28
    9e14:	df 91       	pop	r29
    9e16:	ff 91       	pop	r31
    9e18:	ef 91       	pop	r30
    9e1a:	bf 91       	pop	r27
    9e1c:	af 91       	pop	r26
    9e1e:	9f 91       	pop	r25
    9e20:	8f 91       	pop	r24
    9e22:	7f 91       	pop	r23
    9e24:	6f 91       	pop	r22
    9e26:	5f 91       	pop	r21
    9e28:	4f 91       	pop	r20
    9e2a:	3f 91       	pop	r19
    9e2c:	2f 91       	pop	r18
    9e2e:	0f 90       	pop	r0
    9e30:	00 92 5b 00 	sts	0x005B, r0
    9e34:	0f 90       	pop	r0
    9e36:	0f be       	out	0x3f, r0	; 63
    9e38:	0f 90       	pop	r0
    9e3a:	1f 90       	pop	r1
    9e3c:	18 95       	reti

00009e3e <_Z13SIG_UART_DATAv>:
	}
}
//===============================================================================
// UART Transmit register empty
//===============================================================================
void SIG_UART_DATA(void) {
    9e3e:	df 93       	push	r29
    9e40:	cf 93       	push	r28
    9e42:	00 d0       	rcall	.+0      	; 0x9e44 <_Z13SIG_UART_DATAv+0x6>
    9e44:	cd b7       	in	r28, 0x3d	; 61
    9e46:	de b7       	in	r29, 0x3e	; 62
	u08 dat;
	u08 cnt;
	if (pUart[0]->enable485 == true) {
    9e48:	e0 91 69 0a 	lds	r30, 0x0A69
    9e4c:	f0 91 6a 0a 	lds	r31, 0x0A6A
    9e50:	84 8d       	ldd	r24, Z+28	; 0x1c
    9e52:	81 30       	cpi	r24, 0x01	; 1
    9e54:	39 f4       	brne	.+14     	; 0x9e64 <_Z13SIG_UART_DATAv+0x26>
		BIT_SET_HI(RS485_EN_PORT, RS485_EN_PIN);
    9e56:	a5 e0       	ldi	r26, 0x05	; 5
    9e58:	b1 e0       	ldi	r27, 0x01	; 1
    9e5a:	e5 e0       	ldi	r30, 0x05	; 5
    9e5c:	f1 e0       	ldi	r31, 0x01	; 1
    9e5e:	80 81       	ld	r24, Z
    9e60:	84 60       	ori	r24, 0x04	; 4
    9e62:	8c 93       	st	X, r24
	}
	cnt = pUart[0]->txFIFO.remove(&dat, 1);
    9e64:	80 91 69 0a 	lds	r24, 0x0A69
    9e68:	90 91 6a 0a 	lds	r25, 0x0A6A
    9e6c:	42 96       	adiw	r24, 0x12	; 18
    9e6e:	9e 01       	movw	r18, r28
    9e70:	2e 5f       	subi	r18, 0xFE	; 254
    9e72:	3f 4f       	sbci	r19, 0xFF	; 255
    9e74:	b9 01       	movw	r22, r18
    9e76:	41 e0       	ldi	r20, 0x01	; 1
    9e78:	50 e0       	ldi	r21, 0x00	; 0
    9e7a:	0e 94 24 41 	call	0x8248	; 0x8248 <_ZN5CFIFO6removeEPht>
    9e7e:	89 83       	std	Y+1, r24	; 0x01
	if (cnt) {
    9e80:	89 81       	ldd	r24, Y+1	; 0x01
    9e82:	88 23       	and	r24, r24
    9e84:	29 f0       	breq	.+10     	; 0x9e90 <_Z13SIG_UART_DATAv+0x52>
		UDR0 = dat;
    9e86:	e6 ec       	ldi	r30, 0xC6	; 198
    9e88:	f0 e0       	ldi	r31, 0x00	; 0
    9e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    9e8c:	80 83       	st	Z, r24
    9e8e:	07 c0       	rjmp	.+14     	; 0x9e9e <_Z13SIG_UART_DATAv+0x60>
	} else {
		UCSR0B &= ~(BV(UDRIE0)); /* disable UDRE interrupt */
    9e90:	a1 ec       	ldi	r26, 0xC1	; 193
    9e92:	b0 e0       	ldi	r27, 0x00	; 0
    9e94:	e1 ec       	ldi	r30, 0xC1	; 193
    9e96:	f0 e0       	ldi	r31, 0x00	; 0
    9e98:	80 81       	ld	r24, Z
    9e9a:	8f 7d       	andi	r24, 0xDF	; 223
    9e9c:	8c 93       	st	X, r24
	}
}
    9e9e:	0f 90       	pop	r0
    9ea0:	0f 90       	pop	r0
    9ea2:	cf 91       	pop	r28
    9ea4:	df 91       	pop	r29
    9ea6:	08 95       	ret

00009ea8 <_ZN5CUART7receiveEPht>:
	}
	//return number of bytes written
	return res;
}
/****************************************************************************************/
u16 CUART::receive(u08* buffer, u16 nBytes) {
    9ea8:	df 93       	push	r29
    9eaa:	cf 93       	push	r28
    9eac:	00 d0       	rcall	.+0      	; 0x9eae <_ZN5CUART7receiveEPht+0x6>
    9eae:	00 d0       	rcall	.+0      	; 0x9eb0 <_ZN5CUART7receiveEPht+0x8>
    9eb0:	00 d0       	rcall	.+0      	; 0x9eb2 <_ZN5CUART7receiveEPht+0xa>
    9eb2:	cd b7       	in	r28, 0x3d	; 61
    9eb4:	de b7       	in	r29, 0x3e	; 62
    9eb6:	9a 83       	std	Y+2, r25	; 0x02
    9eb8:	89 83       	std	Y+1, r24	; 0x01
    9eba:	7c 83       	std	Y+4, r23	; 0x04
    9ebc:	6b 83       	std	Y+3, r22	; 0x03
    9ebe:	5e 83       	std	Y+6, r21	; 0x06
    9ec0:	4d 83       	std	Y+5, r20	; 0x05
	return rxFIFO.remove(buffer, nBytes);
    9ec2:	89 81       	ldd	r24, Y+1	; 0x01
    9ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    9ec6:	09 96       	adiw	r24, 0x09	; 9
    9ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    9eca:	3c 81       	ldd	r19, Y+4	; 0x04
    9ecc:	4d 81       	ldd	r20, Y+5	; 0x05
    9ece:	5e 81       	ldd	r21, Y+6	; 0x06
    9ed0:	b9 01       	movw	r22, r18
    9ed2:	0e 94 24 41 	call	0x8248	; 0x8248 <_ZN5CFIFO6removeEPht>
}
    9ed6:	26 96       	adiw	r28, 0x06	; 6
    9ed8:	0f b6       	in	r0, 0x3f	; 63
    9eda:	f8 94       	cli
    9edc:	de bf       	out	0x3e, r29	; 62
    9ede:	0f be       	out	0x3f, r0	; 63
    9ee0:	cd bf       	out	0x3d, r28	; 61
    9ee2:	cf 91       	pop	r28
    9ee4:	df 91       	pop	r29
    9ee6:	08 95       	ret

00009ee8 <_ZN5CUART11setBaudRateEm>:
  return rxFIFO.received();
}


/****************************************************************************************/
void CUART::setBaudRate(u32 baudRate) {
    9ee8:	df 93       	push	r29
    9eea:	cf 93       	push	r28
    9eec:	cd b7       	in	r28, 0x3d	; 61
    9eee:	de b7       	in	r29, 0x3e	; 62
    9ef0:	6f 97       	sbiw	r28, 0x1f	; 31
    9ef2:	0f b6       	in	r0, 0x3f	; 63
    9ef4:	f8 94       	cli
    9ef6:	de bf       	out	0x3e, r29	; 62
    9ef8:	0f be       	out	0x3f, r0	; 63
    9efa:	cd bf       	out	0x3d, r28	; 61
    9efc:	9c 87       	std	Y+12, r25	; 0x0c
    9efe:	8b 87       	std	Y+11, r24	; 0x0b
    9f00:	4d 87       	std	Y+13, r20	; 0x0d
    9f02:	5e 87       	std	Y+14, r21	; 0x0e
    9f04:	6f 87       	std	Y+15, r22	; 0x0f
    9f06:	78 8b       	std	Y+16, r23	; 0x10
	u16 u16UBRR;
	ldiv_t xDiv;
	this->baudRate = baudRate;
    9f08:	eb 85       	ldd	r30, Y+11	; 0x0b
    9f0a:	fc 85       	ldd	r31, Y+12	; 0x0c
    9f0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f10:	af 85       	ldd	r26, Y+15	; 0x0f
    9f12:	b8 89       	ldd	r27, Y+16	; 0x10
    9f14:	86 8f       	std	Z+30, r24	; 0x1e
    9f16:	97 8f       	std	Z+31, r25	; 0x1f
    9f18:	a0 a3       	std	Z+32, r26	; 0x20
    9f1a:	b1 a3       	std	Z+33, r27	; 0x21

	// Calculate new 16-bit UBBR register value
	baudRate <<= 4;
    9f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f20:	af 85       	ldd	r26, Y+15	; 0x0f
    9f22:	b8 89       	ldd	r27, Y+16	; 0x10
    9f24:	88 0f       	add	r24, r24
    9f26:	99 1f       	adc	r25, r25
    9f28:	aa 1f       	adc	r26, r26
    9f2a:	bb 1f       	adc	r27, r27
    9f2c:	88 0f       	add	r24, r24
    9f2e:	99 1f       	adc	r25, r25
    9f30:	aa 1f       	adc	r26, r26
    9f32:	bb 1f       	adc	r27, r27
    9f34:	88 0f       	add	r24, r24
    9f36:	99 1f       	adc	r25, r25
    9f38:	aa 1f       	adc	r26, r26
    9f3a:	bb 1f       	adc	r27, r27
    9f3c:	88 0f       	add	r24, r24
    9f3e:	99 1f       	adc	r25, r25
    9f40:	aa 1f       	adc	r26, r26
    9f42:	bb 1f       	adc	r27, r27
    9f44:	8d 87       	std	Y+13, r24	; 0x0d
    9f46:	9e 87       	std	Y+14, r25	; 0x0e
    9f48:	af 87       	std	Y+15, r26	; 0x0f
    9f4a:	b8 8b       	std	Y+16, r27	; 0x10
	xDiv = ldiv(F_CPU, baudRate);
    9f4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    9f4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    9f50:	4f 85       	ldd	r20, Y+15	; 0x0f
    9f52:	58 89       	ldd	r21, Y+16	; 0x10
    9f54:	60 e0       	ldi	r22, 0x00	; 0
    9f56:	70 e0       	ldi	r23, 0x00	; 0
    9f58:	81 ee       	ldi	r24, 0xE1	; 225
    9f5a:	90 e0       	ldi	r25, 0x00	; 0
    9f5c:	0e 94 e7 59 	call	0xb3ce	; 0xb3ce <__divmodsi4>
    9f60:	29 8b       	std	Y+17, r18	; 0x11
    9f62:	3a 8b       	std	Y+18, r19	; 0x12
    9f64:	4b 8b       	std	Y+19, r20	; 0x13
    9f66:	5c 8b       	std	Y+20, r21	; 0x14
    9f68:	6d 8b       	std	Y+21, r22	; 0x15
    9f6a:	7e 8b       	std	Y+22, r23	; 0x16
    9f6c:	8f 8b       	std	Y+23, r24	; 0x17
    9f6e:	98 8f       	std	Y+24, r25	; 0x18
    9f70:	9e 01       	movw	r18, r28
    9f72:	2d 5f       	subi	r18, 0xFD	; 253
    9f74:	3f 4f       	sbci	r19, 0xFF	; 255
    9f76:	3c 8f       	std	Y+28, r19	; 0x1c
    9f78:	2b 8f       	std	Y+27, r18	; 0x1b
    9f7a:	ce 01       	movw	r24, r28
    9f7c:	41 96       	adiw	r24, 0x11	; 17
    9f7e:	9e 8f       	std	Y+30, r25	; 0x1e
    9f80:	8d 8f       	std	Y+29, r24	; 0x1d
    9f82:	98 e0       	ldi	r25, 0x08	; 8
    9f84:	9f 8f       	std	Y+31, r25	; 0x1f
    9f86:	ed 8d       	ldd	r30, Y+29	; 0x1d
    9f88:	fe 8d       	ldd	r31, Y+30	; 0x1e
    9f8a:	00 80       	ld	r0, Z
    9f8c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    9f8e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    9f90:	2f 5f       	subi	r18, 0xFF	; 255
    9f92:	3f 4f       	sbci	r19, 0xFF	; 255
    9f94:	3e 8f       	std	Y+30, r19	; 0x1e
    9f96:	2d 8f       	std	Y+29, r18	; 0x1d
    9f98:	eb 8d       	ldd	r30, Y+27	; 0x1b
    9f9a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    9f9c:	00 82       	st	Z, r0
    9f9e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    9fa0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    9fa2:	2f 5f       	subi	r18, 0xFF	; 255
    9fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    9fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    9fa8:	2b 8f       	std	Y+27, r18	; 0x1b
    9faa:	3f 8d       	ldd	r19, Y+31	; 0x1f
    9fac:	31 50       	subi	r19, 0x01	; 1
    9fae:	3f 8f       	std	Y+31, r19	; 0x1f
    9fb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9fb2:	88 23       	and	r24, r24
    9fb4:	41 f7       	brne	.-48     	; 0x9f86 <_ZN5CUART11setBaudRateEm+0x9e>
	u16UBRR = (u16) xDiv.quot;
    9fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    9fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    9fba:	ad 81       	ldd	r26, Y+5	; 0x05
    9fbc:	be 81       	ldd	r27, Y+6	; 0x06
    9fbe:	9a 83       	std	Y+2, r25	; 0x02
    9fc0:	89 83       	std	Y+1, r24	; 0x01
	baudRate >>= 1;
    9fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    9fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    9fc6:	af 85       	ldd	r26, Y+15	; 0x0f
    9fc8:	b8 89       	ldd	r27, Y+16	; 0x10
    9fca:	b6 95       	lsr	r27
    9fcc:	a7 95       	ror	r26
    9fce:	97 95       	ror	r25
    9fd0:	87 95       	ror	r24
    9fd2:	8d 87       	std	Y+13, r24	; 0x0d
    9fd4:	9e 87       	std	Y+14, r25	; 0x0e
    9fd6:	af 87       	std	Y+15, r26	; 0x0f
    9fd8:	b8 8b       	std	Y+16, r27	; 0x10
	if ((u32) (xDiv.rem) < baudRate) {
    9fda:	8f 81       	ldd	r24, Y+7	; 0x07
    9fdc:	98 85       	ldd	r25, Y+8	; 0x08
    9fde:	a9 85       	ldd	r26, Y+9	; 0x09
    9fe0:	ba 85       	ldd	r27, Y+10	; 0x0a
    9fe2:	9c 01       	movw	r18, r24
    9fe4:	ad 01       	movw	r20, r26
    9fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    9fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    9fea:	af 85       	ldd	r26, Y+15	; 0x0f
    9fec:	b8 89       	ldd	r27, Y+16	; 0x10
    9fee:	28 17       	cp	r18, r24
    9ff0:	39 07       	cpc	r19, r25
    9ff2:	4a 07       	cpc	r20, r26
    9ff4:	5b 07       	cpc	r21, r27
    9ff6:	28 f4       	brcc	.+10     	; 0xa002 <_ZN5CUART11setBaudRateEm+0x11a>
		u16UBRR--;
    9ff8:	89 81       	ldd	r24, Y+1	; 0x01
    9ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    9ffc:	01 97       	sbiw	r24, 0x01	; 1
    9ffe:	9a 83       	std	Y+2, r25	; 0x02
    a000:	89 83       	std	Y+1, r24	; 0x01
	}
	switch (uartNr) {
    a002:	eb 85       	ldd	r30, Y+11	; 0x0b
    a004:	fc 85       	ldd	r31, Y+12	; 0x0c
    a006:	82 81       	ldd	r24, Z+2	; 0x02
    a008:	e8 2f       	mov	r30, r24
    a00a:	f0 e0       	ldi	r31, 0x00	; 0
    a00c:	fa 8f       	std	Y+26, r31	; 0x1a
    a00e:	e9 8f       	std	Y+25, r30	; 0x19
    a010:	29 8d       	ldd	r18, Y+25	; 0x19
    a012:	3a 8d       	ldd	r19, Y+26	; 0x1a
    a014:	21 30       	cpi	r18, 0x01	; 1
    a016:	31 05       	cpc	r19, r1
    a018:	e1 f0       	breq	.+56     	; 0xa052 <_ZN5CUART11setBaudRateEm+0x16a>
    a01a:	89 8d       	ldd	r24, Y+25	; 0x19
    a01c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a01e:	82 30       	cpi	r24, 0x02	; 2
    a020:	91 05       	cpc	r25, r1
    a022:	2c f4       	brge	.+10     	; 0xa02e <_ZN5CUART11setBaudRateEm+0x146>
    a024:	e9 8d       	ldd	r30, Y+25	; 0x19
    a026:	fa 8d       	ldd	r31, Y+26	; 0x1a
    a028:	30 97       	sbiw	r30, 0x00	; 0
    a02a:	61 f0       	breq	.+24     	; 0xa044 <_ZN5CUART11setBaudRateEm+0x15c>
    a02c:	26 c0       	rjmp	.+76     	; 0xa07a <_ZN5CUART11setBaudRateEm+0x192>
    a02e:	29 8d       	ldd	r18, Y+25	; 0x19
    a030:	3a 8d       	ldd	r19, Y+26	; 0x1a
    a032:	22 30       	cpi	r18, 0x02	; 2
    a034:	31 05       	cpc	r19, r1
    a036:	a1 f0       	breq	.+40     	; 0xa060 <_ZN5CUART11setBaudRateEm+0x178>
    a038:	89 8d       	ldd	r24, Y+25	; 0x19
    a03a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a03c:	83 30       	cpi	r24, 0x03	; 3
    a03e:	91 05       	cpc	r25, r1
    a040:	b1 f0       	breq	.+44     	; 0xa06e <_ZN5CUART11setBaudRateEm+0x186>
    a042:	1b c0       	rjmp	.+54     	; 0xa07a <_ZN5CUART11setBaudRateEm+0x192>
		// Set baud rate
		UCSRC = 0;
		UBRRH = U16_HI(u16UBRR);
		UBRRL = U16_LO(u16UBRR);
#else
		UBRR0 = u16UBRR;
    a044:	e4 ec       	ldi	r30, 0xC4	; 196
    a046:	f0 e0       	ldi	r31, 0x00	; 0
    a048:	89 81       	ldd	r24, Y+1	; 0x01
    a04a:	9a 81       	ldd	r25, Y+2	; 0x02
    a04c:	91 83       	std	Z+1, r25	; 0x01
    a04e:	80 83       	st	Z, r24
    a050:	14 c0       	rjmp	.+40     	; 0xa07a <_ZN5CUART11setBaudRateEm+0x192>
#endif
		break;
#ifdef UBRR1
	case 1:
		UBRR1 = u16UBRR;
    a052:	ec ec       	ldi	r30, 0xCC	; 204
    a054:	f0 e0       	ldi	r31, 0x00	; 0
    a056:	89 81       	ldd	r24, Y+1	; 0x01
    a058:	9a 81       	ldd	r25, Y+2	; 0x02
    a05a:	91 83       	std	Z+1, r25	; 0x01
    a05c:	80 83       	st	Z, r24
    a05e:	0d c0       	rjmp	.+26     	; 0xa07a <_ZN5CUART11setBaudRateEm+0x192>
		break;
#endif
#ifdef UBRR2
	case 2:
		UBRR2 = u16UBRR;
    a060:	e4 ed       	ldi	r30, 0xD4	; 212
    a062:	f0 e0       	ldi	r31, 0x00	; 0
    a064:	89 81       	ldd	r24, Y+1	; 0x01
    a066:	9a 81       	ldd	r25, Y+2	; 0x02
    a068:	91 83       	std	Z+1, r25	; 0x01
    a06a:	80 83       	st	Z, r24
    a06c:	06 c0       	rjmp	.+12     	; 0xa07a <_ZN5CUART11setBaudRateEm+0x192>
		break;
#endif
#ifdef UBRR3
	case 3:
		UBRR3 = u16UBRR;
    a06e:	e4 e3       	ldi	r30, 0x34	; 52
    a070:	f1 e0       	ldi	r31, 0x01	; 1
    a072:	89 81       	ldd	r24, Y+1	; 0x01
    a074:	9a 81       	ldd	r25, Y+2	; 0x02
    a076:	91 83       	std	Z+1, r25	; 0x01
    a078:	80 83       	st	Z, r24
		break;
#endif
	default:
		break;
	}
}
    a07a:	6f 96       	adiw	r28, 0x1f	; 31
    a07c:	0f b6       	in	r0, 0x3f	; 63
    a07e:	f8 94       	cli
    a080:	de bf       	out	0x3e, r29	; 62
    a082:	0f be       	out	0x3f, r0	; 63
    a084:	cd bf       	out	0x3d, r28	; 61
    a086:	cf 91       	pop	r28
    a088:	df 91       	pop	r29
    a08a:	08 95       	ret

0000a08c <_ZN5CUART5rxnumEv>:

u16 CUART::space(void) {
	return txFIFO.space();
}

u16 CUART::rxnum(void) {
    a08c:	df 93       	push	r29
    a08e:	cf 93       	push	r28
    a090:	00 d0       	rcall	.+0      	; 0xa092 <_ZN5CUART5rxnumEv+0x6>
    a092:	cd b7       	in	r28, 0x3d	; 61
    a094:	de b7       	in	r29, 0x3e	; 62
    a096:	9a 83       	std	Y+2, r25	; 0x02
    a098:	89 83       	std	Y+1, r24	; 0x01
  return rxFIFO.received();
    a09a:	89 81       	ldd	r24, Y+1	; 0x01
    a09c:	9a 81       	ldd	r25, Y+2	; 0x02
    a09e:	09 96       	adiw	r24, 0x09	; 9
    a0a0:	0e 94 12 40 	call	0x8024	; 0x8024 <_ZN5CFIFO8receivedEv>
}
    a0a4:	0f 90       	pop	r0
    a0a6:	0f 90       	pop	r0
    a0a8:	cf 91       	pop	r28
    a0aa:	df 91       	pop	r29
    a0ac:	08 95       	ret

0000a0ae <_ZN5CUART5spaceEv>:

u16 CUART::peek(c08* buffer) {
  return rxFIFO.peek(buffer);
}

u16 CUART::space(void) {
    a0ae:	df 93       	push	r29
    a0b0:	cf 93       	push	r28
    a0b2:	00 d0       	rcall	.+0      	; 0xa0b4 <_ZN5CUART5spaceEv+0x6>
    a0b4:	cd b7       	in	r28, 0x3d	; 61
    a0b6:	de b7       	in	r29, 0x3e	; 62
    a0b8:	9a 83       	std	Y+2, r25	; 0x02
    a0ba:	89 83       	std	Y+1, r24	; 0x01
	return txFIFO.space();
    a0bc:	89 81       	ldd	r24, Y+1	; 0x01
    a0be:	9a 81       	ldd	r25, Y+2	; 0x02
    a0c0:	42 96       	adiw	r24, 0x12	; 18
    a0c2:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <_ZN5CFIFO5spaceEv>
}
    a0c6:	0f 90       	pop	r0
    a0c8:	0f 90       	pop	r0
    a0ca:	cf 91       	pop	r28
    a0cc:	df 91       	pop	r29
    a0ce:	08 95       	ret

0000a0d0 <_ZN5CUART4peekEPc>:
/****************************************************************************************/
u16 CUART::receive(u08* buffer, u16 nBytes) {
	return rxFIFO.remove(buffer, nBytes);
}

u16 CUART::peek(c08* buffer) {
    a0d0:	df 93       	push	r29
    a0d2:	cf 93       	push	r28
    a0d4:	00 d0       	rcall	.+0      	; 0xa0d6 <_ZN5CUART4peekEPc+0x6>
    a0d6:	00 d0       	rcall	.+0      	; 0xa0d8 <_ZN5CUART4peekEPc+0x8>
    a0d8:	cd b7       	in	r28, 0x3d	; 61
    a0da:	de b7       	in	r29, 0x3e	; 62
    a0dc:	9a 83       	std	Y+2, r25	; 0x02
    a0de:	89 83       	std	Y+1, r24	; 0x01
    a0e0:	7c 83       	std	Y+4, r23	; 0x04
    a0e2:	6b 83       	std	Y+3, r22	; 0x03
  return rxFIFO.peek(buffer);
    a0e4:	89 81       	ldd	r24, Y+1	; 0x01
    a0e6:	9a 81       	ldd	r25, Y+2	; 0x02
    a0e8:	09 96       	adiw	r24, 0x09	; 9
    a0ea:	2b 81       	ldd	r18, Y+3	; 0x03
    a0ec:	3c 81       	ldd	r19, Y+4	; 0x04
    a0ee:	b9 01       	movw	r22, r18
    a0f0:	0e 94 b1 41 	call	0x8362	; 0x8362 <_ZN5CFIFO4peekEPc>
}
    a0f4:	0f 90       	pop	r0
    a0f6:	0f 90       	pop	r0
    a0f8:	0f 90       	pop	r0
    a0fa:	0f 90       	pop	r0
    a0fc:	cf 91       	pop	r28
    a0fe:	df 91       	pop	r29
    a100:	08 95       	ret

0000a102 <_ZN5CUART7uprintfEPKcz>:
    nBytes--;
  }
  return res;
}

void CUART::uprintf(const char *__fmt, ...) {
    a102:	df 93       	push	r29
    a104:	cf 93       	push	r28
    a106:	cd b7       	in	r28, 0x3d	; 61
    a108:	de b7       	in	r29, 0x3e	; 62
    a10a:	c1 50       	subi	r28, 0x01	; 1
    a10c:	d1 40       	sbci	r29, 0x01	; 1
    a10e:	0f b6       	in	r0, 0x3f	; 63
    a110:	f8 94       	cli
    a112:	de bf       	out	0x3e, r29	; 62
    a114:	0f be       	out	0x3f, r0	; 63
    a116:	cd bf       	out	0x3d, r28	; 61
  c08 str[255];
  va_list arg;
  va_start(arg,__fmt);
    a118:	ce 01       	movw	r24, r28
    a11a:	86 5f       	subi	r24, 0xF6	; 246
    a11c:	9e 4f       	sbci	r25, 0xFE	; 254
    a11e:	9a 83       	std	Y+2, r25	; 0x02
    a120:	89 83       	std	Y+1, r24	; 0x01
  vsprintf(str,__fmt,arg);
    a122:	49 81       	ldd	r20, Y+1	; 0x01
    a124:	5a 81       	ldd	r21, Y+2	; 0x02
    a126:	ce 01       	movw	r24, r28
    a128:	03 96       	adiw	r24, 0x03	; 3
    a12a:	c8 5f       	subi	r28, 0xF8	; 248
    a12c:	de 4f       	sbci	r29, 0xFE	; 254
    a12e:	28 81       	ld	r18, Y
    a130:	39 81       	ldd	r19, Y+1	; 0x01
    a132:	c8 50       	subi	r28, 0x08	; 8
    a134:	d1 40       	sbci	r29, 0x01	; 1
    a136:	b9 01       	movw	r22, r18
    a138:	0e 94 7e 5c 	call	0xb8fc	; 0xb8fc <vsprintf>
  va_end(arg);
  send(str,strlen(str));
    a13c:	ce 01       	movw	r24, r28
    a13e:	03 96       	adiw	r24, 0x03	; 3
    a140:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    a144:	ac 01       	movw	r20, r24
    a146:	ca 5f       	subi	r28, 0xFA	; 250
    a148:	de 4f       	sbci	r29, 0xFE	; 254
    a14a:	88 81       	ld	r24, Y
    a14c:	99 81       	ldd	r25, Y+1	; 0x01
    a14e:	c6 50       	subi	r28, 0x06	; 6
    a150:	d1 40       	sbci	r29, 0x01	; 1
    a152:	9e 01       	movw	r18, r28
    a154:	2d 5f       	subi	r18, 0xFD	; 253
    a156:	3f 4f       	sbci	r19, 0xFF	; 255
    a158:	b9 01       	movw	r22, r18
    a15a:	0e 94 ab 4c 	call	0x9956	; 0x9956 <_ZN5CUART4sendEPct>
}
    a15e:	cf 5f       	subi	r28, 0xFF	; 255
    a160:	de 4f       	sbci	r29, 0xFE	; 254
    a162:	0f b6       	in	r0, 0x3f	; 63
    a164:	f8 94       	cli
    a166:	de bf       	out	0x3e, r29	; 62
    a168:	0f be       	out	0x3f, r0	; 63
    a16a:	cd bf       	out	0x3d, r28	; 61
    a16c:	cf 91       	pop	r28
    a16e:	df 91       	pop	r29
    a170:	08 95       	ret

0000a172 <_ZN5CUART7sendStrEPc>:
  // print the string until the null-terminator
  while((c = pgm_read_byte(str++)))
    send(&c,1);
}

void CUART::sendStr(c08* str)
    a172:	df 93       	push	r29
    a174:	cf 93       	push	r28
    a176:	00 d0       	rcall	.+0      	; 0xa178 <_ZN5CUART7sendStrEPc+0x6>
    a178:	00 d0       	rcall	.+0      	; 0xa17a <_ZN5CUART7sendStrEPc+0x8>
    a17a:	cd b7       	in	r28, 0x3d	; 61
    a17c:	de b7       	in	r29, 0x3e	; 62
    a17e:	9a 83       	std	Y+2, r25	; 0x02
    a180:	89 83       	std	Y+1, r24	; 0x01
    a182:	7c 83       	std	Y+4, r23	; 0x04
    a184:	6b 83       	std	Y+3, r22	; 0x03
{
  send(str,strlen(str));
    a186:	8b 81       	ldd	r24, Y+3	; 0x03
    a188:	9c 81       	ldd	r25, Y+4	; 0x04
    a18a:	0e 94 c9 5b 	call	0xb792	; 0xb792 <strlen>
    a18e:	ac 01       	movw	r20, r24
    a190:	89 81       	ldd	r24, Y+1	; 0x01
    a192:	9a 81       	ldd	r25, Y+2	; 0x02
    a194:	2b 81       	ldd	r18, Y+3	; 0x03
    a196:	3c 81       	ldd	r19, Y+4	; 0x04
    a198:	b9 01       	movw	r22, r18
    a19a:	0e 94 ab 4c 	call	0x9956	; 0x9956 <_ZN5CUART4sendEPct>
}
    a19e:	0f 90       	pop	r0
    a1a0:	0f 90       	pop	r0
    a1a2:	0f 90       	pop	r0
    a1a4:	0f 90       	pop	r0
    a1a6:	cf 91       	pop	r28
    a1a8:	df 91       	pop	r29
    a1aa:	08 95       	ret

0000a1ac <_ZN5CUART7clearRxEv>:
	BIT_SET_HI(RS485_EN_DDR, RS485_EN_PIN);
	BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
	//setFrame();
}
/****************************************************************************************/
void CUART::clearRx(void) {
    a1ac:	df 93       	push	r29
    a1ae:	cf 93       	push	r28
    a1b0:	00 d0       	rcall	.+0      	; 0xa1b2 <_ZN5CUART7clearRxEv+0x6>
    a1b2:	cd b7       	in	r28, 0x3d	; 61
    a1b4:	de b7       	in	r29, 0x3e	; 62
    a1b6:	9a 83       	std	Y+2, r25	; 0x02
    a1b8:	89 83       	std	Y+1, r24	; 0x01
	rxFIFO.clear();
    a1ba:	89 81       	ldd	r24, Y+1	; 0x01
    a1bc:	9a 81       	ldd	r25, Y+2	; 0x02
    a1be:	09 96       	adiw	r24, 0x09	; 9
    a1c0:	0e 94 10 41 	call	0x8220	; 0x8220 <_ZN5CFIFO5clearEv>
}
    a1c4:	0f 90       	pop	r0
    a1c6:	0f 90       	pop	r0
    a1c8:	cf 91       	pop	r28
    a1ca:	df 91       	pop	r29
    a1cc:	08 95       	ret

0000a1ce <_ZN5CUARTC1Ehmth>:
	rxOverflowCnt = 0;
	txBusy = false;
}

/****************************************************************************************/
CUART::CUART(u08 uartNr, u32 baudRate, u16 bufSize, u08 enable485) {
    a1ce:	ef 92       	push	r14
    a1d0:	0f 93       	push	r16
    a1d2:	1f 93       	push	r17
    a1d4:	df 93       	push	r29
    a1d6:	cf 93       	push	r28
    a1d8:	cd b7       	in	r28, 0x3d	; 61
    a1da:	de b7       	in	r29, 0x3e	; 62
    a1dc:	2e 97       	sbiw	r28, 0x0e	; 14
    a1de:	0f b6       	in	r0, 0x3f	; 63
    a1e0:	f8 94       	cli
    a1e2:	de bf       	out	0x3e, r29	; 62
    a1e4:	0f be       	out	0x3f, r0	; 63
    a1e6:	cd bf       	out	0x3d, r28	; 61
    a1e8:	9a 83       	std	Y+2, r25	; 0x02
    a1ea:	89 83       	std	Y+1, r24	; 0x01
    a1ec:	6b 83       	std	Y+3, r22	; 0x03
    a1ee:	2c 83       	std	Y+4, r18	; 0x04
    a1f0:	3d 83       	std	Y+5, r19	; 0x05
    a1f2:	4e 83       	std	Y+6, r20	; 0x06
    a1f4:	5f 83       	std	Y+7, r21	; 0x07
    a1f6:	19 87       	std	Y+9, r17	; 0x09
    a1f8:	08 87       	std	Y+8, r16	; 0x08
    a1fa:	ea 86       	std	Y+10, r14	; 0x0a
    a1fc:	89 81       	ldd	r24, Y+1	; 0x01
    a1fe:	9a 81       	ldd	r25, Y+2	; 0x02
    a200:	09 96       	adiw	r24, 0x09	; 9
    a202:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
    a206:	89 81       	ldd	r24, Y+1	; 0x01
    a208:	9a 81       	ldd	r25, Y+2	; 0x02
    a20a:	42 96       	adiw	r24, 0x12	; 18
    a20c:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
	this->uartNr = uartNr;
    a210:	e9 81       	ldd	r30, Y+1	; 0x01
    a212:	fa 81       	ldd	r31, Y+2	; 0x02
    a214:	8b 81       	ldd	r24, Y+3	; 0x03
    a216:	82 83       	std	Z+2, r24	; 0x02
	healthy = true;
    a218:	e9 81       	ldd	r30, Y+1	; 0x01
    a21a:	fa 81       	ldd	r31, Y+2	; 0x02
    a21c:	81 e0       	ldi	r24, 0x01	; 1
    a21e:	85 8f       	std	Z+29, r24	; 0x1d
	if (!rxFIFO.setBufSize(bufSize))
    a220:	89 81       	ldd	r24, Y+1	; 0x01
    a222:	9a 81       	ldd	r25, Y+2	; 0x02
    a224:	09 96       	adiw	r24, 0x09	; 9
    a226:	28 85       	ldd	r18, Y+8	; 0x08
    a228:	39 85       	ldd	r19, Y+9	; 0x09
    a22a:	b9 01       	movw	r22, r18
    a22c:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a230:	1e 86       	std	Y+14, r1	; 0x0e
    a232:	88 23       	and	r24, r24
    a234:	11 f4       	brne	.+4      	; 0xa23a <_ZN5CUARTC1Ehmth+0x6c>
    a236:	21 e0       	ldi	r18, 0x01	; 1
    a238:	2e 87       	std	Y+14, r18	; 0x0e
    a23a:	3e 85       	ldd	r19, Y+14	; 0x0e
    a23c:	33 23       	and	r19, r19
    a23e:	19 f0       	breq	.+6      	; 0xa246 <_ZN5CUARTC1Ehmth+0x78>
		healthy = false;
    a240:	e9 81       	ldd	r30, Y+1	; 0x01
    a242:	fa 81       	ldd	r31, Y+2	; 0x02
    a244:	15 8e       	std	Z+29, r1	; 0x1d
	if (!txFIFO.setBufSize(bufSize))
    a246:	89 81       	ldd	r24, Y+1	; 0x01
    a248:	9a 81       	ldd	r25, Y+2	; 0x02
    a24a:	42 96       	adiw	r24, 0x12	; 18
    a24c:	28 85       	ldd	r18, Y+8	; 0x08
    a24e:	39 85       	ldd	r19, Y+9	; 0x09
    a250:	b9 01       	movw	r22, r18
    a252:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a256:	1d 86       	std	Y+13, r1	; 0x0d
    a258:	88 23       	and	r24, r24
    a25a:	11 f4       	brne	.+4      	; 0xa260 <_ZN5CUARTC1Ehmth+0x92>
    a25c:	81 e0       	ldi	r24, 0x01	; 1
    a25e:	8d 87       	std	Y+13, r24	; 0x0d
    a260:	9d 85       	ldd	r25, Y+13	; 0x0d
    a262:	99 23       	and	r25, r25
    a264:	19 f0       	breq	.+6      	; 0xa26c <_ZN5CUARTC1Ehmth+0x9e>
		healthy = false;
    a266:	e9 81       	ldd	r30, Y+1	; 0x01
    a268:	fa 81       	ldd	r31, Y+2	; 0x02
    a26a:	15 8e       	std	Z+29, r1	; 0x1d
	this->enable485 = true;
    a26c:	e9 81       	ldd	r30, Y+1	; 0x01
    a26e:	fa 81       	ldd	r31, Y+2	; 0x02
    a270:	81 e0       	ldi	r24, 0x01	; 1
    a272:	84 8f       	std	Z+28, r24	; 0x1c
	// enable RxD/TxD and interrupts
	switch (uartNr) {
    a274:	8b 81       	ldd	r24, Y+3	; 0x03
    a276:	28 2f       	mov	r18, r24
    a278:	30 e0       	ldi	r19, 0x00	; 0
    a27a:	3c 87       	std	Y+12, r19	; 0x0c
    a27c:	2b 87       	std	Y+11, r18	; 0x0b
    a27e:	8b 85       	ldd	r24, Y+11	; 0x0b
    a280:	9c 85       	ldd	r25, Y+12	; 0x0c
    a282:	81 30       	cpi	r24, 0x01	; 1
    a284:	91 05       	cpc	r25, r1
    a286:	01 f1       	breq	.+64     	; 0xa2c8 <_ZN5CUARTC1Ehmth+0xfa>
    a288:	2b 85       	ldd	r18, Y+11	; 0x0b
    a28a:	3c 85       	ldd	r19, Y+12	; 0x0c
    a28c:	22 30       	cpi	r18, 0x02	; 2
    a28e:	31 05       	cpc	r19, r1
    a290:	2c f4       	brge	.+10     	; 0xa29c <_ZN5CUARTC1Ehmth+0xce>
    a292:	8b 85       	ldd	r24, Y+11	; 0x0b
    a294:	9c 85       	ldd	r25, Y+12	; 0x0c
    a296:	00 97       	sbiw	r24, 0x00	; 0
    a298:	61 f0       	breq	.+24     	; 0xa2b2 <_ZN5CUARTC1Ehmth+0xe4>
    a29a:	36 c0       	rjmp	.+108    	; 0xa308 <_ZN5CUARTC1Ehmth+0x13a>
    a29c:	2b 85       	ldd	r18, Y+11	; 0x0b
    a29e:	3c 85       	ldd	r19, Y+12	; 0x0c
    a2a0:	22 30       	cpi	r18, 0x02	; 2
    a2a2:	31 05       	cpc	r19, r1
    a2a4:	e1 f0       	breq	.+56     	; 0xa2de <_ZN5CUARTC1Ehmth+0x110>
    a2a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    a2a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    a2aa:	83 30       	cpi	r24, 0x03	; 3
    a2ac:	91 05       	cpc	r25, r1
    a2ae:	11 f1       	breq	.+68     	; 0xa2f4 <_ZN5CUARTC1Ehmth+0x126>
    a2b0:	2b c0       	rjmp	.+86     	; 0xa308 <_ZN5CUARTC1Ehmth+0x13a>
	case 0:
		UCSR0B = BV(RXCIE0) | BV(TXCIE0) | BV(RXEN0) | BV(TXEN0);
    a2b2:	e1 ec       	ldi	r30, 0xC1	; 193
    a2b4:	f0 e0       	ldi	r31, 0x00	; 0
    a2b6:	88 ed       	ldi	r24, 0xD8	; 216
    a2b8:	80 83       	st	Z, r24
		pUart[0] = this;
    a2ba:	89 81       	ldd	r24, Y+1	; 0x01
    a2bc:	9a 81       	ldd	r25, Y+2	; 0x02
    a2be:	90 93 6a 0a 	sts	0x0A6A, r25
    a2c2:	80 93 69 0a 	sts	0x0A69, r24
    a2c6:	20 c0       	rjmp	.+64     	; 0xa308 <_ZN5CUARTC1Ehmth+0x13a>
		break;
#ifdef UCSR1B
	case 1:
		UCSR1B = BV(RXCIE1) | BV(TXCIE1) | BV(RXEN1) | BV(TXEN1);
    a2c8:	e9 ec       	ldi	r30, 0xC9	; 201
    a2ca:	f0 e0       	ldi	r31, 0x00	; 0
    a2cc:	88 ed       	ldi	r24, 0xD8	; 216
    a2ce:	80 83       	st	Z, r24
		pUart[1] = this;
    a2d0:	89 81       	ldd	r24, Y+1	; 0x01
    a2d2:	9a 81       	ldd	r25, Y+2	; 0x02
    a2d4:	90 93 6c 0a 	sts	0x0A6C, r25
    a2d8:	80 93 6b 0a 	sts	0x0A6B, r24
    a2dc:	15 c0       	rjmp	.+42     	; 0xa308 <_ZN5CUARTC1Ehmth+0x13a>
		break;
#endif
#ifdef UCSR2B
	case 2:
	  UCSR2B = BV(RXCIE2) | BV(TXCIE2) | BV(RXEN2) | BV(TXEN2);
    a2de:	e1 ed       	ldi	r30, 0xD1	; 209
    a2e0:	f0 e0       	ldi	r31, 0x00	; 0
    a2e2:	88 ed       	ldi	r24, 0xD8	; 216
    a2e4:	80 83       	st	Z, r24
		pUart[2] = this;
    a2e6:	89 81       	ldd	r24, Y+1	; 0x01
    a2e8:	9a 81       	ldd	r25, Y+2	; 0x02
    a2ea:	90 93 6e 0a 	sts	0x0A6E, r25
    a2ee:	80 93 6d 0a 	sts	0x0A6D, r24
    a2f2:	0a c0       	rjmp	.+20     	; 0xa308 <_ZN5CUARTC1Ehmth+0x13a>
		break;
#endif
#ifdef UCSR3B
	case 3:
	  UCSR3B = BV(RXCIE3) | BV(TXCIE3) | BV(RXEN3) | BV(TXEN3);
    a2f4:	e1 e3       	ldi	r30, 0x31	; 49
    a2f6:	f1 e0       	ldi	r31, 0x01	; 1
    a2f8:	88 ed       	ldi	r24, 0xD8	; 216
    a2fa:	80 83       	st	Z, r24
		pUart[3] = this;
    a2fc:	89 81       	ldd	r24, Y+1	; 0x01
    a2fe:	9a 81       	ldd	r25, Y+2	; 0x02
    a300:	90 93 70 0a 	sts	0x0A70, r25
    a304:	80 93 6f 0a 	sts	0x0A6F, r24
		break;
#endif
	}
	setBaudRate(baudRate);
    a308:	89 81       	ldd	r24, Y+1	; 0x01
    a30a:	9a 81       	ldd	r25, Y+2	; 0x02
    a30c:	2c 81       	ldd	r18, Y+4	; 0x04
    a30e:	3d 81       	ldd	r19, Y+5	; 0x05
    a310:	4e 81       	ldd	r20, Y+6	; 0x06
    a312:	5f 81       	ldd	r21, Y+7	; 0x07
    a314:	ba 01       	movw	r22, r20
    a316:	a9 01       	movw	r20, r18
    a318:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <_ZN5CUART11setBaudRateEm>
	rxOverflowCnt = 0;
    a31c:	e9 81       	ldd	r30, Y+1	; 0x01
    a31e:	fa 81       	ldd	r31, Y+2	; 0x02
    a320:	11 82       	std	Z+1, r1	; 0x01
    a322:	10 82       	st	Z, r1
	txBusy = false;
    a324:	e9 81       	ldd	r30, Y+1	; 0x01
    a326:	fa 81       	ldd	r31, Y+2	; 0x02
    a328:	13 8e       	std	Z+27, r1	; 0x1b
	BIT_SET_HI(RS485_EN_DDR, RS485_EN_PIN);
    a32a:	a4 e0       	ldi	r26, 0x04	; 4
    a32c:	b1 e0       	ldi	r27, 0x01	; 1
    a32e:	e4 e0       	ldi	r30, 0x04	; 4
    a330:	f1 e0       	ldi	r31, 0x01	; 1
    a332:	80 81       	ld	r24, Z
    a334:	84 60       	ori	r24, 0x04	; 4
    a336:	8c 93       	st	X, r24
	BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    a338:	a5 e0       	ldi	r26, 0x05	; 5
    a33a:	b1 e0       	ldi	r27, 0x01	; 1
    a33c:	e5 e0       	ldi	r30, 0x05	; 5
    a33e:	f1 e0       	ldi	r31, 0x01	; 1
    a340:	80 81       	ld	r24, Z
    a342:	8b 7f       	andi	r24, 0xFB	; 251
    a344:	8c 93       	st	X, r24
	//setFrame();
}
    a346:	2e 96       	adiw	r28, 0x0e	; 14
    a348:	0f b6       	in	r0, 0x3f	; 63
    a34a:	f8 94       	cli
    a34c:	de bf       	out	0x3e, r29	; 62
    a34e:	0f be       	out	0x3f, r0	; 63
    a350:	cd bf       	out	0x3d, r28	; 61
    a352:	cf 91       	pop	r28
    a354:	df 91       	pop	r29
    a356:	1f 91       	pop	r17
    a358:	0f 91       	pop	r16
    a35a:	ef 90       	pop	r14
    a35c:	08 95       	ret

0000a35e <_ZN5CUARTC2Ehmth>:
	rxOverflowCnt = 0;
	txBusy = false;
}

/****************************************************************************************/
CUART::CUART(u08 uartNr, u32 baudRate, u16 bufSize, u08 enable485) {
    a35e:	ef 92       	push	r14
    a360:	0f 93       	push	r16
    a362:	1f 93       	push	r17
    a364:	df 93       	push	r29
    a366:	cf 93       	push	r28
    a368:	cd b7       	in	r28, 0x3d	; 61
    a36a:	de b7       	in	r29, 0x3e	; 62
    a36c:	2e 97       	sbiw	r28, 0x0e	; 14
    a36e:	0f b6       	in	r0, 0x3f	; 63
    a370:	f8 94       	cli
    a372:	de bf       	out	0x3e, r29	; 62
    a374:	0f be       	out	0x3f, r0	; 63
    a376:	cd bf       	out	0x3d, r28	; 61
    a378:	9a 83       	std	Y+2, r25	; 0x02
    a37a:	89 83       	std	Y+1, r24	; 0x01
    a37c:	6b 83       	std	Y+3, r22	; 0x03
    a37e:	2c 83       	std	Y+4, r18	; 0x04
    a380:	3d 83       	std	Y+5, r19	; 0x05
    a382:	4e 83       	std	Y+6, r20	; 0x06
    a384:	5f 83       	std	Y+7, r21	; 0x07
    a386:	19 87       	std	Y+9, r17	; 0x09
    a388:	08 87       	std	Y+8, r16	; 0x08
    a38a:	ea 86       	std	Y+10, r14	; 0x0a
    a38c:	89 81       	ldd	r24, Y+1	; 0x01
    a38e:	9a 81       	ldd	r25, Y+2	; 0x02
    a390:	09 96       	adiw	r24, 0x09	; 9
    a392:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
    a396:	89 81       	ldd	r24, Y+1	; 0x01
    a398:	9a 81       	ldd	r25, Y+2	; 0x02
    a39a:	42 96       	adiw	r24, 0x12	; 18
    a39c:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
	this->uartNr = uartNr;
    a3a0:	e9 81       	ldd	r30, Y+1	; 0x01
    a3a2:	fa 81       	ldd	r31, Y+2	; 0x02
    a3a4:	8b 81       	ldd	r24, Y+3	; 0x03
    a3a6:	82 83       	std	Z+2, r24	; 0x02
	healthy = true;
    a3a8:	e9 81       	ldd	r30, Y+1	; 0x01
    a3aa:	fa 81       	ldd	r31, Y+2	; 0x02
    a3ac:	81 e0       	ldi	r24, 0x01	; 1
    a3ae:	85 8f       	std	Z+29, r24	; 0x1d
	if (!rxFIFO.setBufSize(bufSize))
    a3b0:	89 81       	ldd	r24, Y+1	; 0x01
    a3b2:	9a 81       	ldd	r25, Y+2	; 0x02
    a3b4:	09 96       	adiw	r24, 0x09	; 9
    a3b6:	28 85       	ldd	r18, Y+8	; 0x08
    a3b8:	39 85       	ldd	r19, Y+9	; 0x09
    a3ba:	b9 01       	movw	r22, r18
    a3bc:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a3c0:	1e 86       	std	Y+14, r1	; 0x0e
    a3c2:	88 23       	and	r24, r24
    a3c4:	11 f4       	brne	.+4      	; 0xa3ca <_ZN5CUARTC2Ehmth+0x6c>
    a3c6:	21 e0       	ldi	r18, 0x01	; 1
    a3c8:	2e 87       	std	Y+14, r18	; 0x0e
    a3ca:	3e 85       	ldd	r19, Y+14	; 0x0e
    a3cc:	33 23       	and	r19, r19
    a3ce:	19 f0       	breq	.+6      	; 0xa3d6 <_ZN5CUARTC2Ehmth+0x78>
		healthy = false;
    a3d0:	e9 81       	ldd	r30, Y+1	; 0x01
    a3d2:	fa 81       	ldd	r31, Y+2	; 0x02
    a3d4:	15 8e       	std	Z+29, r1	; 0x1d
	if (!txFIFO.setBufSize(bufSize))
    a3d6:	89 81       	ldd	r24, Y+1	; 0x01
    a3d8:	9a 81       	ldd	r25, Y+2	; 0x02
    a3da:	42 96       	adiw	r24, 0x12	; 18
    a3dc:	28 85       	ldd	r18, Y+8	; 0x08
    a3de:	39 85       	ldd	r19, Y+9	; 0x09
    a3e0:	b9 01       	movw	r22, r18
    a3e2:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a3e6:	1d 86       	std	Y+13, r1	; 0x0d
    a3e8:	88 23       	and	r24, r24
    a3ea:	11 f4       	brne	.+4      	; 0xa3f0 <_ZN5CUARTC2Ehmth+0x92>
    a3ec:	81 e0       	ldi	r24, 0x01	; 1
    a3ee:	8d 87       	std	Y+13, r24	; 0x0d
    a3f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    a3f2:	99 23       	and	r25, r25
    a3f4:	19 f0       	breq	.+6      	; 0xa3fc <_ZN5CUARTC2Ehmth+0x9e>
		healthy = false;
    a3f6:	e9 81       	ldd	r30, Y+1	; 0x01
    a3f8:	fa 81       	ldd	r31, Y+2	; 0x02
    a3fa:	15 8e       	std	Z+29, r1	; 0x1d
	this->enable485 = true;
    a3fc:	e9 81       	ldd	r30, Y+1	; 0x01
    a3fe:	fa 81       	ldd	r31, Y+2	; 0x02
    a400:	81 e0       	ldi	r24, 0x01	; 1
    a402:	84 8f       	std	Z+28, r24	; 0x1c
	// enable RxD/TxD and interrupts
	switch (uartNr) {
    a404:	8b 81       	ldd	r24, Y+3	; 0x03
    a406:	28 2f       	mov	r18, r24
    a408:	30 e0       	ldi	r19, 0x00	; 0
    a40a:	3c 87       	std	Y+12, r19	; 0x0c
    a40c:	2b 87       	std	Y+11, r18	; 0x0b
    a40e:	8b 85       	ldd	r24, Y+11	; 0x0b
    a410:	9c 85       	ldd	r25, Y+12	; 0x0c
    a412:	81 30       	cpi	r24, 0x01	; 1
    a414:	91 05       	cpc	r25, r1
    a416:	01 f1       	breq	.+64     	; 0xa458 <_ZN5CUARTC2Ehmth+0xfa>
    a418:	2b 85       	ldd	r18, Y+11	; 0x0b
    a41a:	3c 85       	ldd	r19, Y+12	; 0x0c
    a41c:	22 30       	cpi	r18, 0x02	; 2
    a41e:	31 05       	cpc	r19, r1
    a420:	2c f4       	brge	.+10     	; 0xa42c <_ZN5CUARTC2Ehmth+0xce>
    a422:	8b 85       	ldd	r24, Y+11	; 0x0b
    a424:	9c 85       	ldd	r25, Y+12	; 0x0c
    a426:	00 97       	sbiw	r24, 0x00	; 0
    a428:	61 f0       	breq	.+24     	; 0xa442 <_ZN5CUARTC2Ehmth+0xe4>
    a42a:	36 c0       	rjmp	.+108    	; 0xa498 <_ZN5CUARTC2Ehmth+0x13a>
    a42c:	2b 85       	ldd	r18, Y+11	; 0x0b
    a42e:	3c 85       	ldd	r19, Y+12	; 0x0c
    a430:	22 30       	cpi	r18, 0x02	; 2
    a432:	31 05       	cpc	r19, r1
    a434:	e1 f0       	breq	.+56     	; 0xa46e <_ZN5CUARTC2Ehmth+0x110>
    a436:	8b 85       	ldd	r24, Y+11	; 0x0b
    a438:	9c 85       	ldd	r25, Y+12	; 0x0c
    a43a:	83 30       	cpi	r24, 0x03	; 3
    a43c:	91 05       	cpc	r25, r1
    a43e:	11 f1       	breq	.+68     	; 0xa484 <_ZN5CUARTC2Ehmth+0x126>
    a440:	2b c0       	rjmp	.+86     	; 0xa498 <_ZN5CUARTC2Ehmth+0x13a>
	case 0:
		UCSR0B = BV(RXCIE0) | BV(TXCIE0) | BV(RXEN0) | BV(TXEN0);
    a442:	e1 ec       	ldi	r30, 0xC1	; 193
    a444:	f0 e0       	ldi	r31, 0x00	; 0
    a446:	88 ed       	ldi	r24, 0xD8	; 216
    a448:	80 83       	st	Z, r24
		pUart[0] = this;
    a44a:	89 81       	ldd	r24, Y+1	; 0x01
    a44c:	9a 81       	ldd	r25, Y+2	; 0x02
    a44e:	90 93 6a 0a 	sts	0x0A6A, r25
    a452:	80 93 69 0a 	sts	0x0A69, r24
    a456:	20 c0       	rjmp	.+64     	; 0xa498 <_ZN5CUARTC2Ehmth+0x13a>
		break;
#ifdef UCSR1B
	case 1:
		UCSR1B = BV(RXCIE1) | BV(TXCIE1) | BV(RXEN1) | BV(TXEN1);
    a458:	e9 ec       	ldi	r30, 0xC9	; 201
    a45a:	f0 e0       	ldi	r31, 0x00	; 0
    a45c:	88 ed       	ldi	r24, 0xD8	; 216
    a45e:	80 83       	st	Z, r24
		pUart[1] = this;
    a460:	89 81       	ldd	r24, Y+1	; 0x01
    a462:	9a 81       	ldd	r25, Y+2	; 0x02
    a464:	90 93 6c 0a 	sts	0x0A6C, r25
    a468:	80 93 6b 0a 	sts	0x0A6B, r24
    a46c:	15 c0       	rjmp	.+42     	; 0xa498 <_ZN5CUARTC2Ehmth+0x13a>
		break;
#endif
#ifdef UCSR2B
	case 2:
	  UCSR2B = BV(RXCIE2) | BV(TXCIE2) | BV(RXEN2) | BV(TXEN2);
    a46e:	e1 ed       	ldi	r30, 0xD1	; 209
    a470:	f0 e0       	ldi	r31, 0x00	; 0
    a472:	88 ed       	ldi	r24, 0xD8	; 216
    a474:	80 83       	st	Z, r24
		pUart[2] = this;
    a476:	89 81       	ldd	r24, Y+1	; 0x01
    a478:	9a 81       	ldd	r25, Y+2	; 0x02
    a47a:	90 93 6e 0a 	sts	0x0A6E, r25
    a47e:	80 93 6d 0a 	sts	0x0A6D, r24
    a482:	0a c0       	rjmp	.+20     	; 0xa498 <_ZN5CUARTC2Ehmth+0x13a>
		break;
#endif
#ifdef UCSR3B
	case 3:
	  UCSR3B = BV(RXCIE3) | BV(TXCIE3) | BV(RXEN3) | BV(TXEN3);
    a484:	e1 e3       	ldi	r30, 0x31	; 49
    a486:	f1 e0       	ldi	r31, 0x01	; 1
    a488:	88 ed       	ldi	r24, 0xD8	; 216
    a48a:	80 83       	st	Z, r24
		pUart[3] = this;
    a48c:	89 81       	ldd	r24, Y+1	; 0x01
    a48e:	9a 81       	ldd	r25, Y+2	; 0x02
    a490:	90 93 70 0a 	sts	0x0A70, r25
    a494:	80 93 6f 0a 	sts	0x0A6F, r24
		break;
#endif
	}
	setBaudRate(baudRate);
    a498:	89 81       	ldd	r24, Y+1	; 0x01
    a49a:	9a 81       	ldd	r25, Y+2	; 0x02
    a49c:	2c 81       	ldd	r18, Y+4	; 0x04
    a49e:	3d 81       	ldd	r19, Y+5	; 0x05
    a4a0:	4e 81       	ldd	r20, Y+6	; 0x06
    a4a2:	5f 81       	ldd	r21, Y+7	; 0x07
    a4a4:	ba 01       	movw	r22, r20
    a4a6:	a9 01       	movw	r20, r18
    a4a8:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <_ZN5CUART11setBaudRateEm>
	rxOverflowCnt = 0;
    a4ac:	e9 81       	ldd	r30, Y+1	; 0x01
    a4ae:	fa 81       	ldd	r31, Y+2	; 0x02
    a4b0:	11 82       	std	Z+1, r1	; 0x01
    a4b2:	10 82       	st	Z, r1
	txBusy = false;
    a4b4:	e9 81       	ldd	r30, Y+1	; 0x01
    a4b6:	fa 81       	ldd	r31, Y+2	; 0x02
    a4b8:	13 8e       	std	Z+27, r1	; 0x1b
	BIT_SET_HI(RS485_EN_DDR, RS485_EN_PIN);
    a4ba:	a4 e0       	ldi	r26, 0x04	; 4
    a4bc:	b1 e0       	ldi	r27, 0x01	; 1
    a4be:	e4 e0       	ldi	r30, 0x04	; 4
    a4c0:	f1 e0       	ldi	r31, 0x01	; 1
    a4c2:	80 81       	ld	r24, Z
    a4c4:	84 60       	ori	r24, 0x04	; 4
    a4c6:	8c 93       	st	X, r24
	BIT_SET_LO(RS485_EN_PORT, RS485_EN_PIN);
    a4c8:	a5 e0       	ldi	r26, 0x05	; 5
    a4ca:	b1 e0       	ldi	r27, 0x01	; 1
    a4cc:	e5 e0       	ldi	r30, 0x05	; 5
    a4ce:	f1 e0       	ldi	r31, 0x01	; 1
    a4d0:	80 81       	ld	r24, Z
    a4d2:	8b 7f       	andi	r24, 0xFB	; 251
    a4d4:	8c 93       	st	X, r24
	//setFrame();
}
    a4d6:	2e 96       	adiw	r28, 0x0e	; 14
    a4d8:	0f b6       	in	r0, 0x3f	; 63
    a4da:	f8 94       	cli
    a4dc:	de bf       	out	0x3e, r29	; 62
    a4de:	0f be       	out	0x3f, r0	; 63
    a4e0:	cd bf       	out	0x3d, r28	; 61
    a4e2:	cf 91       	pop	r28
    a4e4:	df 91       	pop	r29
    a4e6:	1f 91       	pop	r17
    a4e8:	0f 91       	pop	r16
    a4ea:	ef 90       	pop	r14
    a4ec:	08 95       	ret

0000a4ee <_ZN5CUARTC1Ehmt>:
/****************************************************************************************/
#define UART_INACTIVE_TIME    1000  //us
/****************************************************************************************/
static CUART* pUart[4];
/****************************************************************************************/
CUART::CUART(u08 uartNr, u32 baudRate, u16 bufSize) {
    a4ee:	0f 93       	push	r16
    a4f0:	1f 93       	push	r17
    a4f2:	df 93       	push	r29
    a4f4:	cf 93       	push	r28
    a4f6:	cd b7       	in	r28, 0x3d	; 61
    a4f8:	de b7       	in	r29, 0x3e	; 62
    a4fa:	2d 97       	sbiw	r28, 0x0d	; 13
    a4fc:	0f b6       	in	r0, 0x3f	; 63
    a4fe:	f8 94       	cli
    a500:	de bf       	out	0x3e, r29	; 62
    a502:	0f be       	out	0x3f, r0	; 63
    a504:	cd bf       	out	0x3d, r28	; 61
    a506:	9a 83       	std	Y+2, r25	; 0x02
    a508:	89 83       	std	Y+1, r24	; 0x01
    a50a:	6b 83       	std	Y+3, r22	; 0x03
    a50c:	2c 83       	std	Y+4, r18	; 0x04
    a50e:	3d 83       	std	Y+5, r19	; 0x05
    a510:	4e 83       	std	Y+6, r20	; 0x06
    a512:	5f 83       	std	Y+7, r21	; 0x07
    a514:	19 87       	std	Y+9, r17	; 0x09
    a516:	08 87       	std	Y+8, r16	; 0x08
    a518:	89 81       	ldd	r24, Y+1	; 0x01
    a51a:	9a 81       	ldd	r25, Y+2	; 0x02
    a51c:	09 96       	adiw	r24, 0x09	; 9
    a51e:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
    a522:	89 81       	ldd	r24, Y+1	; 0x01
    a524:	9a 81       	ldd	r25, Y+2	; 0x02
    a526:	42 96       	adiw	r24, 0x12	; 18
    a528:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
	this->uartNr = uartNr;
    a52c:	e9 81       	ldd	r30, Y+1	; 0x01
    a52e:	fa 81       	ldd	r31, Y+2	; 0x02
    a530:	8b 81       	ldd	r24, Y+3	; 0x03
    a532:	82 83       	std	Z+2, r24	; 0x02
	this->baudRate = baudRate;
    a534:	e9 81       	ldd	r30, Y+1	; 0x01
    a536:	fa 81       	ldd	r31, Y+2	; 0x02
    a538:	8c 81       	ldd	r24, Y+4	; 0x04
    a53a:	9d 81       	ldd	r25, Y+5	; 0x05
    a53c:	ae 81       	ldd	r26, Y+6	; 0x06
    a53e:	bf 81       	ldd	r27, Y+7	; 0x07
    a540:	86 8f       	std	Z+30, r24	; 0x1e
    a542:	97 8f       	std	Z+31, r25	; 0x1f
    a544:	a0 a3       	std	Z+32, r26	; 0x20
    a546:	b1 a3       	std	Z+33, r27	; 0x21
	healthy = true;
    a548:	e9 81       	ldd	r30, Y+1	; 0x01
    a54a:	fa 81       	ldd	r31, Y+2	; 0x02
    a54c:	81 e0       	ldi	r24, 0x01	; 1
    a54e:	85 8f       	std	Z+29, r24	; 0x1d
	if (!rxFIFO.setBufSize(bufSize))
    a550:	89 81       	ldd	r24, Y+1	; 0x01
    a552:	9a 81       	ldd	r25, Y+2	; 0x02
    a554:	09 96       	adiw	r24, 0x09	; 9
    a556:	28 85       	ldd	r18, Y+8	; 0x08
    a558:	39 85       	ldd	r19, Y+9	; 0x09
    a55a:	b9 01       	movw	r22, r18
    a55c:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a560:	1d 86       	std	Y+13, r1	; 0x0d
    a562:	88 23       	and	r24, r24
    a564:	11 f4       	brne	.+4      	; 0xa56a <_ZN5CUARTC1Ehmt+0x7c>
    a566:	21 e0       	ldi	r18, 0x01	; 1
    a568:	2d 87       	std	Y+13, r18	; 0x0d
    a56a:	3d 85       	ldd	r19, Y+13	; 0x0d
    a56c:	33 23       	and	r19, r19
    a56e:	19 f0       	breq	.+6      	; 0xa576 <_ZN5CUARTC1Ehmt+0x88>
		healthy = false;
    a570:	e9 81       	ldd	r30, Y+1	; 0x01
    a572:	fa 81       	ldd	r31, Y+2	; 0x02
    a574:	15 8e       	std	Z+29, r1	; 0x1d
	if (!txFIFO.setBufSize(bufSize))
    a576:	89 81       	ldd	r24, Y+1	; 0x01
    a578:	9a 81       	ldd	r25, Y+2	; 0x02
    a57a:	42 96       	adiw	r24, 0x12	; 18
    a57c:	28 85       	ldd	r18, Y+8	; 0x08
    a57e:	39 85       	ldd	r19, Y+9	; 0x09
    a580:	b9 01       	movw	r22, r18
    a582:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a586:	1c 86       	std	Y+12, r1	; 0x0c
    a588:	88 23       	and	r24, r24
    a58a:	11 f4       	brne	.+4      	; 0xa590 <_ZN5CUARTC1Ehmt+0xa2>
    a58c:	81 e0       	ldi	r24, 0x01	; 1
    a58e:	8c 87       	std	Y+12, r24	; 0x0c
    a590:	9c 85       	ldd	r25, Y+12	; 0x0c
    a592:	99 23       	and	r25, r25
    a594:	19 f0       	breq	.+6      	; 0xa59c <_ZN5CUARTC1Ehmt+0xae>
		healthy = false;
    a596:	e9 81       	ldd	r30, Y+1	; 0x01
    a598:	fa 81       	ldd	r31, Y+2	; 0x02
    a59a:	15 8e       	std	Z+29, r1	; 0x1d
	this->enable485 = false;
    a59c:	e9 81       	ldd	r30, Y+1	; 0x01
    a59e:	fa 81       	ldd	r31, Y+2	; 0x02
    a5a0:	14 8e       	std	Z+28, r1	; 0x1c
	// enable RxD/TxD and interrupts
	switch (uartNr) {
    a5a2:	8b 81       	ldd	r24, Y+3	; 0x03
    a5a4:	28 2f       	mov	r18, r24
    a5a6:	30 e0       	ldi	r19, 0x00	; 0
    a5a8:	3b 87       	std	Y+11, r19	; 0x0b
    a5aa:	2a 87       	std	Y+10, r18	; 0x0a
    a5ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5b0:	81 30       	cpi	r24, 0x01	; 1
    a5b2:	91 05       	cpc	r25, r1
    a5b4:	01 f1       	breq	.+64     	; 0xa5f6 <_ZN5CUARTC1Ehmt+0x108>
    a5b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    a5b8:	3b 85       	ldd	r19, Y+11	; 0x0b
    a5ba:	22 30       	cpi	r18, 0x02	; 2
    a5bc:	31 05       	cpc	r19, r1
    a5be:	2c f4       	brge	.+10     	; 0xa5ca <_ZN5CUARTC1Ehmt+0xdc>
    a5c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5c4:	00 97       	sbiw	r24, 0x00	; 0
    a5c6:	61 f0       	breq	.+24     	; 0xa5e0 <_ZN5CUARTC1Ehmt+0xf2>
    a5c8:	36 c0       	rjmp	.+108    	; 0xa636 <_ZN5CUARTC1Ehmt+0x148>
    a5ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    a5cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    a5ce:	22 30       	cpi	r18, 0x02	; 2
    a5d0:	31 05       	cpc	r19, r1
    a5d2:	e1 f0       	breq	.+56     	; 0xa60c <_ZN5CUARTC1Ehmt+0x11e>
    a5d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    a5d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    a5d8:	83 30       	cpi	r24, 0x03	; 3
    a5da:	91 05       	cpc	r25, r1
    a5dc:	11 f1       	breq	.+68     	; 0xa622 <_ZN5CUARTC1Ehmt+0x134>
    a5de:	2b c0       	rjmp	.+86     	; 0xa636 <_ZN5CUARTC1Ehmt+0x148>
	case 0:
		UCSR0B = BV(RXCIE0) | BV(TXCIE0) | BV(RXEN0) | BV(TXEN0);
    a5e0:	e1 ec       	ldi	r30, 0xC1	; 193
    a5e2:	f0 e0       	ldi	r31, 0x00	; 0
    a5e4:	88 ed       	ldi	r24, 0xD8	; 216
    a5e6:	80 83       	st	Z, r24
		pUart[0] = this;
    a5e8:	89 81       	ldd	r24, Y+1	; 0x01
    a5ea:	9a 81       	ldd	r25, Y+2	; 0x02
    a5ec:	90 93 6a 0a 	sts	0x0A6A, r25
    a5f0:	80 93 69 0a 	sts	0x0A69, r24
    a5f4:	20 c0       	rjmp	.+64     	; 0xa636 <_ZN5CUARTC1Ehmt+0x148>
		break;
#ifdef UCSR1B
	case 1:
		UCSR1B = BV(RXCIE1) | BV(TXCIE1) | BV(RXEN1) | BV(TXEN1);
    a5f6:	e9 ec       	ldi	r30, 0xC9	; 201
    a5f8:	f0 e0       	ldi	r31, 0x00	; 0
    a5fa:	88 ed       	ldi	r24, 0xD8	; 216
    a5fc:	80 83       	st	Z, r24
		pUart[1] = this;
    a5fe:	89 81       	ldd	r24, Y+1	; 0x01
    a600:	9a 81       	ldd	r25, Y+2	; 0x02
    a602:	90 93 6c 0a 	sts	0x0A6C, r25
    a606:	80 93 6b 0a 	sts	0x0A6B, r24
    a60a:	15 c0       	rjmp	.+42     	; 0xa636 <_ZN5CUARTC1Ehmt+0x148>
		break;
#endif
#ifdef UCSR2B
	case 2:
		UCSR2B = BV(RXCIE2) | BV(TXCIE2) | BV(RXEN2) | BV(TXEN2);
    a60c:	e1 ed       	ldi	r30, 0xD1	; 209
    a60e:	f0 e0       	ldi	r31, 0x00	; 0
    a610:	88 ed       	ldi	r24, 0xD8	; 216
    a612:	80 83       	st	Z, r24
		pUart[2] = this;
    a614:	89 81       	ldd	r24, Y+1	; 0x01
    a616:	9a 81       	ldd	r25, Y+2	; 0x02
    a618:	90 93 6e 0a 	sts	0x0A6E, r25
    a61c:	80 93 6d 0a 	sts	0x0A6D, r24
    a620:	0a c0       	rjmp	.+20     	; 0xa636 <_ZN5CUARTC1Ehmt+0x148>
		break;
#endif
#ifdef UCSR3B
	case 3:
		UCSR3B = BV(RXCIE3) | BV(TXCIE3) | BV(RXEN3) | BV(TXEN3);
    a622:	e1 e3       	ldi	r30, 0x31	; 49
    a624:	f1 e0       	ldi	r31, 0x01	; 1
    a626:	88 ed       	ldi	r24, 0xD8	; 216
    a628:	80 83       	st	Z, r24
		pUart[3] = this;
    a62a:	89 81       	ldd	r24, Y+1	; 0x01
    a62c:	9a 81       	ldd	r25, Y+2	; 0x02
    a62e:	90 93 70 0a 	sts	0x0A70, r25
    a632:	80 93 6f 0a 	sts	0x0A6F, r24
		break;
#endif
	}
	setBaudRate(baudRate);
    a636:	89 81       	ldd	r24, Y+1	; 0x01
    a638:	9a 81       	ldd	r25, Y+2	; 0x02
    a63a:	2c 81       	ldd	r18, Y+4	; 0x04
    a63c:	3d 81       	ldd	r19, Y+5	; 0x05
    a63e:	4e 81       	ldd	r20, Y+6	; 0x06
    a640:	5f 81       	ldd	r21, Y+7	; 0x07
    a642:	ba 01       	movw	r22, r20
    a644:	a9 01       	movw	r20, r18
    a646:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <_ZN5CUART11setBaudRateEm>
	rxOverflowCnt = 0;
    a64a:	e9 81       	ldd	r30, Y+1	; 0x01
    a64c:	fa 81       	ldd	r31, Y+2	; 0x02
    a64e:	11 82       	std	Z+1, r1	; 0x01
    a650:	10 82       	st	Z, r1
	txBusy = false;
    a652:	e9 81       	ldd	r30, Y+1	; 0x01
    a654:	fa 81       	ldd	r31, Y+2	; 0x02
    a656:	13 8e       	std	Z+27, r1	; 0x1b
}
    a658:	2d 96       	adiw	r28, 0x0d	; 13
    a65a:	0f b6       	in	r0, 0x3f	; 63
    a65c:	f8 94       	cli
    a65e:	de bf       	out	0x3e, r29	; 62
    a660:	0f be       	out	0x3f, r0	; 63
    a662:	cd bf       	out	0x3d, r28	; 61
    a664:	cf 91       	pop	r28
    a666:	df 91       	pop	r29
    a668:	1f 91       	pop	r17
    a66a:	0f 91       	pop	r16
    a66c:	08 95       	ret

0000a66e <_ZN5CUARTC2Ehmt>:
/****************************************************************************************/
#define UART_INACTIVE_TIME    1000  //us
/****************************************************************************************/
static CUART* pUart[4];
/****************************************************************************************/
CUART::CUART(u08 uartNr, u32 baudRate, u16 bufSize) {
    a66e:	0f 93       	push	r16
    a670:	1f 93       	push	r17
    a672:	df 93       	push	r29
    a674:	cf 93       	push	r28
    a676:	cd b7       	in	r28, 0x3d	; 61
    a678:	de b7       	in	r29, 0x3e	; 62
    a67a:	2d 97       	sbiw	r28, 0x0d	; 13
    a67c:	0f b6       	in	r0, 0x3f	; 63
    a67e:	f8 94       	cli
    a680:	de bf       	out	0x3e, r29	; 62
    a682:	0f be       	out	0x3f, r0	; 63
    a684:	cd bf       	out	0x3d, r28	; 61
    a686:	9a 83       	std	Y+2, r25	; 0x02
    a688:	89 83       	std	Y+1, r24	; 0x01
    a68a:	6b 83       	std	Y+3, r22	; 0x03
    a68c:	2c 83       	std	Y+4, r18	; 0x04
    a68e:	3d 83       	std	Y+5, r19	; 0x05
    a690:	4e 83       	std	Y+6, r20	; 0x06
    a692:	5f 83       	std	Y+7, r21	; 0x07
    a694:	19 87       	std	Y+9, r17	; 0x09
    a696:	08 87       	std	Y+8, r16	; 0x08
    a698:	89 81       	ldd	r24, Y+1	; 0x01
    a69a:	9a 81       	ldd	r25, Y+2	; 0x02
    a69c:	09 96       	adiw	r24, 0x09	; 9
    a69e:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
    a6a2:	89 81       	ldd	r24, Y+1	; 0x01
    a6a4:	9a 81       	ldd	r25, Y+2	; 0x02
    a6a6:	42 96       	adiw	r24, 0x12	; 18
    a6a8:	0e 94 a0 3f 	call	0x7f40	; 0x7f40 <_ZN5CFIFOC1Ev>
	this->uartNr = uartNr;
    a6ac:	e9 81       	ldd	r30, Y+1	; 0x01
    a6ae:	fa 81       	ldd	r31, Y+2	; 0x02
    a6b0:	8b 81       	ldd	r24, Y+3	; 0x03
    a6b2:	82 83       	std	Z+2, r24	; 0x02
	this->baudRate = baudRate;
    a6b4:	e9 81       	ldd	r30, Y+1	; 0x01
    a6b6:	fa 81       	ldd	r31, Y+2	; 0x02
    a6b8:	8c 81       	ldd	r24, Y+4	; 0x04
    a6ba:	9d 81       	ldd	r25, Y+5	; 0x05
    a6bc:	ae 81       	ldd	r26, Y+6	; 0x06
    a6be:	bf 81       	ldd	r27, Y+7	; 0x07
    a6c0:	86 8f       	std	Z+30, r24	; 0x1e
    a6c2:	97 8f       	std	Z+31, r25	; 0x1f
    a6c4:	a0 a3       	std	Z+32, r26	; 0x20
    a6c6:	b1 a3       	std	Z+33, r27	; 0x21
	healthy = true;
    a6c8:	e9 81       	ldd	r30, Y+1	; 0x01
    a6ca:	fa 81       	ldd	r31, Y+2	; 0x02
    a6cc:	81 e0       	ldi	r24, 0x01	; 1
    a6ce:	85 8f       	std	Z+29, r24	; 0x1d
	if (!rxFIFO.setBufSize(bufSize))
    a6d0:	89 81       	ldd	r24, Y+1	; 0x01
    a6d2:	9a 81       	ldd	r25, Y+2	; 0x02
    a6d4:	09 96       	adiw	r24, 0x09	; 9
    a6d6:	28 85       	ldd	r18, Y+8	; 0x08
    a6d8:	39 85       	ldd	r19, Y+9	; 0x09
    a6da:	b9 01       	movw	r22, r18
    a6dc:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a6e0:	1d 86       	std	Y+13, r1	; 0x0d
    a6e2:	88 23       	and	r24, r24
    a6e4:	11 f4       	brne	.+4      	; 0xa6ea <_ZN5CUARTC2Ehmt+0x7c>
    a6e6:	21 e0       	ldi	r18, 0x01	; 1
    a6e8:	2d 87       	std	Y+13, r18	; 0x0d
    a6ea:	3d 85       	ldd	r19, Y+13	; 0x0d
    a6ec:	33 23       	and	r19, r19
    a6ee:	19 f0       	breq	.+6      	; 0xa6f6 <_ZN5CUARTC2Ehmt+0x88>
		healthy = false;
    a6f0:	e9 81       	ldd	r30, Y+1	; 0x01
    a6f2:	fa 81       	ldd	r31, Y+2	; 0x02
    a6f4:	15 8e       	std	Z+29, r1	; 0x1d
	if (!txFIFO.setBufSize(bufSize))
    a6f6:	89 81       	ldd	r24, Y+1	; 0x01
    a6f8:	9a 81       	ldd	r25, Y+2	; 0x02
    a6fa:	42 96       	adiw	r24, 0x12	; 18
    a6fc:	28 85       	ldd	r18, Y+8	; 0x08
    a6fe:	39 85       	ldd	r19, Y+9	; 0x09
    a700:	b9 01       	movw	r22, r18
    a702:	0e 94 2e 42 	call	0x845c	; 0x845c <_ZN5CFIFO10setBufSizeEt>
    a706:	1c 86       	std	Y+12, r1	; 0x0c
    a708:	88 23       	and	r24, r24
    a70a:	11 f4       	brne	.+4      	; 0xa710 <_ZN5CUARTC2Ehmt+0xa2>
    a70c:	81 e0       	ldi	r24, 0x01	; 1
    a70e:	8c 87       	std	Y+12, r24	; 0x0c
    a710:	9c 85       	ldd	r25, Y+12	; 0x0c
    a712:	99 23       	and	r25, r25
    a714:	19 f0       	breq	.+6      	; 0xa71c <_ZN5CUARTC2Ehmt+0xae>
		healthy = false;
    a716:	e9 81       	ldd	r30, Y+1	; 0x01
    a718:	fa 81       	ldd	r31, Y+2	; 0x02
    a71a:	15 8e       	std	Z+29, r1	; 0x1d
	this->enable485 = false;
    a71c:	e9 81       	ldd	r30, Y+1	; 0x01
    a71e:	fa 81       	ldd	r31, Y+2	; 0x02
    a720:	14 8e       	std	Z+28, r1	; 0x1c
	// enable RxD/TxD and interrupts
	switch (uartNr) {
    a722:	8b 81       	ldd	r24, Y+3	; 0x03
    a724:	28 2f       	mov	r18, r24
    a726:	30 e0       	ldi	r19, 0x00	; 0
    a728:	3b 87       	std	Y+11, r19	; 0x0b
    a72a:	2a 87       	std	Y+10, r18	; 0x0a
    a72c:	8a 85       	ldd	r24, Y+10	; 0x0a
    a72e:	9b 85       	ldd	r25, Y+11	; 0x0b
    a730:	81 30       	cpi	r24, 0x01	; 1
    a732:	91 05       	cpc	r25, r1
    a734:	01 f1       	breq	.+64     	; 0xa776 <_ZN5CUARTC2Ehmt+0x108>
    a736:	2a 85       	ldd	r18, Y+10	; 0x0a
    a738:	3b 85       	ldd	r19, Y+11	; 0x0b
    a73a:	22 30       	cpi	r18, 0x02	; 2
    a73c:	31 05       	cpc	r19, r1
    a73e:	2c f4       	brge	.+10     	; 0xa74a <_ZN5CUARTC2Ehmt+0xdc>
    a740:	8a 85       	ldd	r24, Y+10	; 0x0a
    a742:	9b 85       	ldd	r25, Y+11	; 0x0b
    a744:	00 97       	sbiw	r24, 0x00	; 0
    a746:	61 f0       	breq	.+24     	; 0xa760 <_ZN5CUARTC2Ehmt+0xf2>
    a748:	36 c0       	rjmp	.+108    	; 0xa7b6 <_ZN5CUARTC2Ehmt+0x148>
    a74a:	2a 85       	ldd	r18, Y+10	; 0x0a
    a74c:	3b 85       	ldd	r19, Y+11	; 0x0b
    a74e:	22 30       	cpi	r18, 0x02	; 2
    a750:	31 05       	cpc	r19, r1
    a752:	e1 f0       	breq	.+56     	; 0xa78c <_ZN5CUARTC2Ehmt+0x11e>
    a754:	8a 85       	ldd	r24, Y+10	; 0x0a
    a756:	9b 85       	ldd	r25, Y+11	; 0x0b
    a758:	83 30       	cpi	r24, 0x03	; 3
    a75a:	91 05       	cpc	r25, r1
    a75c:	11 f1       	breq	.+68     	; 0xa7a2 <_ZN5CUARTC2Ehmt+0x134>
    a75e:	2b c0       	rjmp	.+86     	; 0xa7b6 <_ZN5CUARTC2Ehmt+0x148>
	case 0:
		UCSR0B = BV(RXCIE0) | BV(TXCIE0) | BV(RXEN0) | BV(TXEN0);
    a760:	e1 ec       	ldi	r30, 0xC1	; 193
    a762:	f0 e0       	ldi	r31, 0x00	; 0
    a764:	88 ed       	ldi	r24, 0xD8	; 216
    a766:	80 83       	st	Z, r24
		pUart[0] = this;
    a768:	89 81       	ldd	r24, Y+1	; 0x01
    a76a:	9a 81       	ldd	r25, Y+2	; 0x02
    a76c:	90 93 6a 0a 	sts	0x0A6A, r25
    a770:	80 93 69 0a 	sts	0x0A69, r24
    a774:	20 c0       	rjmp	.+64     	; 0xa7b6 <_ZN5CUARTC2Ehmt+0x148>
		break;
#ifdef UCSR1B
	case 1:
		UCSR1B = BV(RXCIE1) | BV(TXCIE1) | BV(RXEN1) | BV(TXEN1);
    a776:	e9 ec       	ldi	r30, 0xC9	; 201
    a778:	f0 e0       	ldi	r31, 0x00	; 0
    a77a:	88 ed       	ldi	r24, 0xD8	; 216
    a77c:	80 83       	st	Z, r24
		pUart[1] = this;
    a77e:	89 81       	ldd	r24, Y+1	; 0x01
    a780:	9a 81       	ldd	r25, Y+2	; 0x02
    a782:	90 93 6c 0a 	sts	0x0A6C, r25
    a786:	80 93 6b 0a 	sts	0x0A6B, r24
    a78a:	15 c0       	rjmp	.+42     	; 0xa7b6 <_ZN5CUARTC2Ehmt+0x148>
		break;
#endif
#ifdef UCSR2B
	case 2:
		UCSR2B = BV(RXCIE2) | BV(TXCIE2) | BV(RXEN2) | BV(TXEN2);
    a78c:	e1 ed       	ldi	r30, 0xD1	; 209
    a78e:	f0 e0       	ldi	r31, 0x00	; 0
    a790:	88 ed       	ldi	r24, 0xD8	; 216
    a792:	80 83       	st	Z, r24
		pUart[2] = this;
    a794:	89 81       	ldd	r24, Y+1	; 0x01
    a796:	9a 81       	ldd	r25, Y+2	; 0x02
    a798:	90 93 6e 0a 	sts	0x0A6E, r25
    a79c:	80 93 6d 0a 	sts	0x0A6D, r24
    a7a0:	0a c0       	rjmp	.+20     	; 0xa7b6 <_ZN5CUARTC2Ehmt+0x148>
		break;
#endif
#ifdef UCSR3B
	case 3:
		UCSR3B = BV(RXCIE3) | BV(TXCIE3) | BV(RXEN3) | BV(TXEN3);
    a7a2:	e1 e3       	ldi	r30, 0x31	; 49
    a7a4:	f1 e0       	ldi	r31, 0x01	; 1
    a7a6:	88 ed       	ldi	r24, 0xD8	; 216
    a7a8:	80 83       	st	Z, r24
		pUart[3] = this;
    a7aa:	89 81       	ldd	r24, Y+1	; 0x01
    a7ac:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ae:	90 93 70 0a 	sts	0x0A70, r25
    a7b2:	80 93 6f 0a 	sts	0x0A6F, r24
		break;
#endif
	}
	setBaudRate(baudRate);
    a7b6:	89 81       	ldd	r24, Y+1	; 0x01
    a7b8:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ba:	2c 81       	ldd	r18, Y+4	; 0x04
    a7bc:	3d 81       	ldd	r19, Y+5	; 0x05
    a7be:	4e 81       	ldd	r20, Y+6	; 0x06
    a7c0:	5f 81       	ldd	r21, Y+7	; 0x07
    a7c2:	ba 01       	movw	r22, r20
    a7c4:	a9 01       	movw	r20, r18
    a7c6:	0e 94 74 4f 	call	0x9ee8	; 0x9ee8 <_ZN5CUART11setBaudRateEm>
	rxOverflowCnt = 0;
    a7ca:	e9 81       	ldd	r30, Y+1	; 0x01
    a7cc:	fa 81       	ldd	r31, Y+2	; 0x02
    a7ce:	11 82       	std	Z+1, r1	; 0x01
    a7d0:	10 82       	st	Z, r1
	txBusy = false;
    a7d2:	e9 81       	ldd	r30, Y+1	; 0x01
    a7d4:	fa 81       	ldd	r31, Y+2	; 0x02
    a7d6:	13 8e       	std	Z+27, r1	; 0x1b
}
    a7d8:	2d 96       	adiw	r28, 0x0d	; 13
    a7da:	0f b6       	in	r0, 0x3f	; 63
    a7dc:	f8 94       	cli
    a7de:	de bf       	out	0x3e, r29	; 62
    a7e0:	0f be       	out	0x3f, r0	; 63
    a7e2:	cd bf       	out	0x3d, r28	; 61
    a7e4:	cf 91       	pop	r28
    a7e6:	df 91       	pop	r29
    a7e8:	1f 91       	pop	r17
    a7ea:	0f 91       	pop	r16
    a7ec:	08 95       	ret

0000a7ee <_Z4crc8Pht>:
#include "crc.h"
//---------------------------------------------------------
u08 crc8(u08 *data_in, u16 number_of_bytes_to_read) {
    a7ee:	df 93       	push	r29
    a7f0:	cf 93       	push	r28
    a7f2:	cd b7       	in	r28, 0x3d	; 61
    a7f4:	de b7       	in	r29, 0x3e	; 62
    a7f6:	2a 97       	sbiw	r28, 0x0a	; 10
    a7f8:	0f b6       	in	r0, 0x3f	; 63
    a7fa:	f8 94       	cli
    a7fc:	de bf       	out	0x3e, r29	; 62
    a7fe:	0f be       	out	0x3f, r0	; 63
    a800:	cd bf       	out	0x3d, r28	; 61
    a802:	98 87       	std	Y+8, r25	; 0x08
    a804:	8f 83       	std	Y+7, r24	; 0x07
    a806:	7a 87       	std	Y+10, r23	; 0x0a
    a808:	69 87       	std	Y+9, r22	; 0x09
  u16 loop_count;
  u08 bit_counter;
  u08 data;
  u08 feedback_bit;

  crc = CRC8INIT;
    a80a:	1e 82       	std	Y+6, r1	; 0x06

  for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
    a80c:	1d 82       	std	Y+5, r1	; 0x05
    a80e:	1c 82       	std	Y+4, r1	; 0x04
    a810:	31 c0       	rjmp	.+98     	; 0xa874 <_Z4crc8Pht+0x86>
    data = data_in[loop_count];
    a812:	2f 81       	ldd	r18, Y+7	; 0x07
    a814:	38 85       	ldd	r19, Y+8	; 0x08
    a816:	8c 81       	ldd	r24, Y+4	; 0x04
    a818:	9d 81       	ldd	r25, Y+5	; 0x05
    a81a:	f9 01       	movw	r30, r18
    a81c:	e8 0f       	add	r30, r24
    a81e:	f9 1f       	adc	r31, r25
    a820:	80 81       	ld	r24, Z
    a822:	8a 83       	std	Y+2, r24	; 0x02

    bit_counter = 8;
    a824:	88 e0       	ldi	r24, 0x08	; 8
    a826:	8b 83       	std	Y+3, r24	; 0x03
    do {
      feedback_bit = (crc ^ data) & 0x01;
    a828:	9e 81       	ldd	r25, Y+6	; 0x06
    a82a:	8a 81       	ldd	r24, Y+2	; 0x02
    a82c:	89 27       	eor	r24, r25
    a82e:	81 70       	andi	r24, 0x01	; 1
    a830:	89 83       	std	Y+1, r24	; 0x01
      if (feedback_bit == 0x01) {
    a832:	89 81       	ldd	r24, Y+1	; 0x01
    a834:	81 30       	cpi	r24, 0x01	; 1
    a836:	21 f4       	brne	.+8      	; 0xa840 <_Z4crc8Pht+0x52>
        crc = crc ^ CRC8POLY;
    a838:	8e 81       	ldd	r24, Y+6	; 0x06
    a83a:	98 e1       	ldi	r25, 0x18	; 24
    a83c:	89 27       	eor	r24, r25
    a83e:	8e 83       	std	Y+6, r24	; 0x06
      }
      crc = (crc >> 1) & 0x7F;
    a840:	8e 81       	ldd	r24, Y+6	; 0x06
    a842:	86 95       	lsr	r24
    a844:	8e 83       	std	Y+6, r24	; 0x06
      if (feedback_bit == 0x01) {
    a846:	89 81       	ldd	r24, Y+1	; 0x01
    a848:	81 30       	cpi	r24, 0x01	; 1
    a84a:	19 f4       	brne	.+6      	; 0xa852 <_Z4crc8Pht+0x64>
        crc = crc | 0x80;
    a84c:	8e 81       	ldd	r24, Y+6	; 0x06
    a84e:	80 68       	ori	r24, 0x80	; 128
    a850:	8e 83       	std	Y+6, r24	; 0x06
      }

      data = data >> 1;
    a852:	8a 81       	ldd	r24, Y+2	; 0x02
    a854:	88 2f       	mov	r24, r24
    a856:	90 e0       	ldi	r25, 0x00	; 0
    a858:	95 95       	asr	r25
    a85a:	87 95       	ror	r24
    a85c:	8a 83       	std	Y+2, r24	; 0x02

      bit_counter--;
    a85e:	8b 81       	ldd	r24, Y+3	; 0x03
    a860:	81 50       	subi	r24, 0x01	; 1
    a862:	8b 83       	std	Y+3, r24	; 0x03

  for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
    data = data_in[loop_count];

    bit_counter = 8;
    do {
    a864:	8b 81       	ldd	r24, Y+3	; 0x03
    a866:	88 23       	and	r24, r24
    a868:	f9 f6       	brne	.-66     	; 0xa828 <_Z4crc8Pht+0x3a>
  u08 data;
  u08 feedback_bit;

  crc = CRC8INIT;

  for (loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++) {
    a86a:	8c 81       	ldd	r24, Y+4	; 0x04
    a86c:	9d 81       	ldd	r25, Y+5	; 0x05
    a86e:	01 96       	adiw	r24, 0x01	; 1
    a870:	9d 83       	std	Y+5, r25	; 0x05
    a872:	8c 83       	std	Y+4, r24	; 0x04
    a874:	2c 81       	ldd	r18, Y+4	; 0x04
    a876:	3d 81       	ldd	r19, Y+5	; 0x05
    a878:	89 85       	ldd	r24, Y+9	; 0x09
    a87a:	9a 85       	ldd	r25, Y+10	; 0x0a
    a87c:	28 17       	cp	r18, r24
    a87e:	39 07       	cpc	r19, r25
    a880:	41 f6       	brne	.-112    	; 0xa812 <_Z4crc8Pht+0x24>
      bit_counter--;

    } while (bit_counter > 0);
  }

  return crc;
    a882:	8e 81       	ldd	r24, Y+6	; 0x06
}
    a884:	2a 96       	adiw	r28, 0x0a	; 10
    a886:	0f b6       	in	r0, 0x3f	; 63
    a888:	f8 94       	cli
    a88a:	de bf       	out	0x3e, r29	; 62
    a88c:	0f be       	out	0x3f, r0	; 63
    a88e:	cd bf       	out	0x3d, r28	; 61
    a890:	cf 91       	pop	r28
    a892:	df 91       	pop	r29
    a894:	08 95       	ret

0000a896 <__fixunssfsi>:
    a896:	ef 92       	push	r14
    a898:	ff 92       	push	r15
    a89a:	0f 93       	push	r16
    a89c:	1f 93       	push	r17
    a89e:	7b 01       	movw	r14, r22
    a8a0:	8c 01       	movw	r16, r24
    a8a2:	20 e0       	ldi	r18, 0x00	; 0
    a8a4:	30 e0       	ldi	r19, 0x00	; 0
    a8a6:	40 e0       	ldi	r20, 0x00	; 0
    a8a8:	5f e4       	ldi	r21, 0x4F	; 79
    a8aa:	0e 94 4b 57 	call	0xae96	; 0xae96 <__gesf2>
    a8ae:	88 23       	and	r24, r24
    a8b0:	8c f0       	brlt	.+34     	; 0xa8d4 <__fixunssfsi+0x3e>
    a8b2:	c8 01       	movw	r24, r16
    a8b4:	b7 01       	movw	r22, r14
    a8b6:	20 e0       	ldi	r18, 0x00	; 0
    a8b8:	30 e0       	ldi	r19, 0x00	; 0
    a8ba:	40 e0       	ldi	r20, 0x00	; 0
    a8bc:	5f e4       	ldi	r21, 0x4F	; 79
    a8be:	0e 94 c3 55 	call	0xab86	; 0xab86 <__subsf3>
    a8c2:	0e 94 ab 57 	call	0xaf56	; 0xaf56 <__fixsfsi>
    a8c6:	9b 01       	movw	r18, r22
    a8c8:	ac 01       	movw	r20, r24
    a8ca:	20 50       	subi	r18, 0x00	; 0
    a8cc:	30 40       	sbci	r19, 0x00	; 0
    a8ce:	40 40       	sbci	r20, 0x00	; 0
    a8d0:	50 48       	sbci	r21, 0x80	; 128
    a8d2:	06 c0       	rjmp	.+12     	; 0xa8e0 <__fixunssfsi+0x4a>
    a8d4:	c8 01       	movw	r24, r16
    a8d6:	b7 01       	movw	r22, r14
    a8d8:	0e 94 ab 57 	call	0xaf56	; 0xaf56 <__fixsfsi>
    a8dc:	9b 01       	movw	r18, r22
    a8de:	ac 01       	movw	r20, r24
    a8e0:	b9 01       	movw	r22, r18
    a8e2:	ca 01       	movw	r24, r20
    a8e4:	1f 91       	pop	r17
    a8e6:	0f 91       	pop	r16
    a8e8:	ff 90       	pop	r15
    a8ea:	ef 90       	pop	r14
    a8ec:	08 95       	ret

0000a8ee <_fpadd_parts>:
    a8ee:	a0 e0       	ldi	r26, 0x00	; 0
    a8f0:	b0 e0       	ldi	r27, 0x00	; 0
    a8f2:	ed e7       	ldi	r30, 0x7D	; 125
    a8f4:	f4 e5       	ldi	r31, 0x54	; 84
    a8f6:	0c 94 02 5a 	jmp	0xb404	; 0xb404 <__prologue_saves__>
    a8fa:	dc 01       	movw	r26, r24
    a8fc:	2b 01       	movw	r4, r22
    a8fe:	fa 01       	movw	r30, r20
    a900:	9c 91       	ld	r25, X
    a902:	92 30       	cpi	r25, 0x02	; 2
    a904:	08 f4       	brcc	.+2      	; 0xa908 <_fpadd_parts+0x1a>
    a906:	39 c1       	rjmp	.+626    	; 0xab7a <_fpadd_parts+0x28c>
    a908:	eb 01       	movw	r28, r22
    a90a:	88 81       	ld	r24, Y
    a90c:	82 30       	cpi	r24, 0x02	; 2
    a90e:	08 f4       	brcc	.+2      	; 0xa912 <_fpadd_parts+0x24>
    a910:	33 c1       	rjmp	.+614    	; 0xab78 <_fpadd_parts+0x28a>
    a912:	94 30       	cpi	r25, 0x04	; 4
    a914:	69 f4       	brne	.+26     	; 0xa930 <_fpadd_parts+0x42>
    a916:	84 30       	cpi	r24, 0x04	; 4
    a918:	09 f0       	breq	.+2      	; 0xa91c <_fpadd_parts+0x2e>
    a91a:	2f c1       	rjmp	.+606    	; 0xab7a <_fpadd_parts+0x28c>
    a91c:	11 96       	adiw	r26, 0x01	; 1
    a91e:	9c 91       	ld	r25, X
    a920:	11 97       	sbiw	r26, 0x01	; 1
    a922:	89 81       	ldd	r24, Y+1	; 0x01
    a924:	98 17       	cp	r25, r24
    a926:	09 f4       	brne	.+2      	; 0xa92a <_fpadd_parts+0x3c>
    a928:	28 c1       	rjmp	.+592    	; 0xab7a <_fpadd_parts+0x28c>
    a92a:	a8 ed       	ldi	r26, 0xD8	; 216
    a92c:	b4 e0       	ldi	r27, 0x04	; 4
    a92e:	25 c1       	rjmp	.+586    	; 0xab7a <_fpadd_parts+0x28c>
    a930:	84 30       	cpi	r24, 0x04	; 4
    a932:	09 f4       	brne	.+2      	; 0xa936 <_fpadd_parts+0x48>
    a934:	21 c1       	rjmp	.+578    	; 0xab78 <_fpadd_parts+0x28a>
    a936:	82 30       	cpi	r24, 0x02	; 2
    a938:	a9 f4       	brne	.+42     	; 0xa964 <_fpadd_parts+0x76>
    a93a:	92 30       	cpi	r25, 0x02	; 2
    a93c:	09 f0       	breq	.+2      	; 0xa940 <_fpadd_parts+0x52>
    a93e:	1d c1       	rjmp	.+570    	; 0xab7a <_fpadd_parts+0x28c>
    a940:	9a 01       	movw	r18, r20
    a942:	ad 01       	movw	r20, r26
    a944:	88 e0       	ldi	r24, 0x08	; 8
    a946:	ea 01       	movw	r28, r20
    a948:	09 90       	ld	r0, Y+
    a94a:	ae 01       	movw	r20, r28
    a94c:	e9 01       	movw	r28, r18
    a94e:	09 92       	st	Y+, r0
    a950:	9e 01       	movw	r18, r28
    a952:	81 50       	subi	r24, 0x01	; 1
    a954:	c1 f7       	brne	.-16     	; 0xa946 <_fpadd_parts+0x58>
    a956:	e2 01       	movw	r28, r4
    a958:	89 81       	ldd	r24, Y+1	; 0x01
    a95a:	11 96       	adiw	r26, 0x01	; 1
    a95c:	9c 91       	ld	r25, X
    a95e:	89 23       	and	r24, r25
    a960:	81 83       	std	Z+1, r24	; 0x01
    a962:	08 c1       	rjmp	.+528    	; 0xab74 <_fpadd_parts+0x286>
    a964:	92 30       	cpi	r25, 0x02	; 2
    a966:	09 f4       	brne	.+2      	; 0xa96a <_fpadd_parts+0x7c>
    a968:	07 c1       	rjmp	.+526    	; 0xab78 <_fpadd_parts+0x28a>
    a96a:	12 96       	adiw	r26, 0x02	; 2
    a96c:	2d 90       	ld	r2, X+
    a96e:	3c 90       	ld	r3, X
    a970:	13 97       	sbiw	r26, 0x03	; 3
    a972:	eb 01       	movw	r28, r22
    a974:	8a 81       	ldd	r24, Y+2	; 0x02
    a976:	9b 81       	ldd	r25, Y+3	; 0x03
    a978:	14 96       	adiw	r26, 0x04	; 4
    a97a:	ad 90       	ld	r10, X+
    a97c:	bd 90       	ld	r11, X+
    a97e:	cd 90       	ld	r12, X+
    a980:	dc 90       	ld	r13, X
    a982:	17 97       	sbiw	r26, 0x07	; 7
    a984:	ec 80       	ldd	r14, Y+4	; 0x04
    a986:	fd 80       	ldd	r15, Y+5	; 0x05
    a988:	0e 81       	ldd	r16, Y+6	; 0x06
    a98a:	1f 81       	ldd	r17, Y+7	; 0x07
    a98c:	91 01       	movw	r18, r2
    a98e:	28 1b       	sub	r18, r24
    a990:	39 0b       	sbc	r19, r25
    a992:	b9 01       	movw	r22, r18
    a994:	37 ff       	sbrs	r19, 7
    a996:	04 c0       	rjmp	.+8      	; 0xa9a0 <_fpadd_parts+0xb2>
    a998:	66 27       	eor	r22, r22
    a99a:	77 27       	eor	r23, r23
    a99c:	62 1b       	sub	r22, r18
    a99e:	73 0b       	sbc	r23, r19
    a9a0:	60 32       	cpi	r22, 0x20	; 32
    a9a2:	71 05       	cpc	r23, r1
    a9a4:	0c f0       	brlt	.+2      	; 0xa9a8 <_fpadd_parts+0xba>
    a9a6:	61 c0       	rjmp	.+194    	; 0xaa6a <_fpadd_parts+0x17c>
    a9a8:	12 16       	cp	r1, r18
    a9aa:	13 06       	cpc	r1, r19
    a9ac:	6c f5       	brge	.+90     	; 0xaa08 <_fpadd_parts+0x11a>
    a9ae:	37 01       	movw	r6, r14
    a9b0:	48 01       	movw	r8, r16
    a9b2:	06 2e       	mov	r0, r22
    a9b4:	04 c0       	rjmp	.+8      	; 0xa9be <_fpadd_parts+0xd0>
    a9b6:	96 94       	lsr	r9
    a9b8:	87 94       	ror	r8
    a9ba:	77 94       	ror	r7
    a9bc:	67 94       	ror	r6
    a9be:	0a 94       	dec	r0
    a9c0:	d2 f7       	brpl	.-12     	; 0xa9b6 <_fpadd_parts+0xc8>
    a9c2:	21 e0       	ldi	r18, 0x01	; 1
    a9c4:	30 e0       	ldi	r19, 0x00	; 0
    a9c6:	40 e0       	ldi	r20, 0x00	; 0
    a9c8:	50 e0       	ldi	r21, 0x00	; 0
    a9ca:	04 c0       	rjmp	.+8      	; 0xa9d4 <_fpadd_parts+0xe6>
    a9cc:	22 0f       	add	r18, r18
    a9ce:	33 1f       	adc	r19, r19
    a9d0:	44 1f       	adc	r20, r20
    a9d2:	55 1f       	adc	r21, r21
    a9d4:	6a 95       	dec	r22
    a9d6:	d2 f7       	brpl	.-12     	; 0xa9cc <_fpadd_parts+0xde>
    a9d8:	21 50       	subi	r18, 0x01	; 1
    a9da:	30 40       	sbci	r19, 0x00	; 0
    a9dc:	40 40       	sbci	r20, 0x00	; 0
    a9de:	50 40       	sbci	r21, 0x00	; 0
    a9e0:	2e 21       	and	r18, r14
    a9e2:	3f 21       	and	r19, r15
    a9e4:	40 23       	and	r20, r16
    a9e6:	51 23       	and	r21, r17
    a9e8:	21 15       	cp	r18, r1
    a9ea:	31 05       	cpc	r19, r1
    a9ec:	41 05       	cpc	r20, r1
    a9ee:	51 05       	cpc	r21, r1
    a9f0:	21 f0       	breq	.+8      	; 0xa9fa <_fpadd_parts+0x10c>
    a9f2:	21 e0       	ldi	r18, 0x01	; 1
    a9f4:	30 e0       	ldi	r19, 0x00	; 0
    a9f6:	40 e0       	ldi	r20, 0x00	; 0
    a9f8:	50 e0       	ldi	r21, 0x00	; 0
    a9fa:	79 01       	movw	r14, r18
    a9fc:	8a 01       	movw	r16, r20
    a9fe:	e6 28       	or	r14, r6
    aa00:	f7 28       	or	r15, r7
    aa02:	08 29       	or	r16, r8
    aa04:	19 29       	or	r17, r9
    aa06:	3c c0       	rjmp	.+120    	; 0xaa80 <_fpadd_parts+0x192>
    aa08:	23 2b       	or	r18, r19
    aa0a:	d1 f1       	breq	.+116    	; 0xaa80 <_fpadd_parts+0x192>
    aa0c:	26 0e       	add	r2, r22
    aa0e:	37 1e       	adc	r3, r23
    aa10:	35 01       	movw	r6, r10
    aa12:	46 01       	movw	r8, r12
    aa14:	06 2e       	mov	r0, r22
    aa16:	04 c0       	rjmp	.+8      	; 0xaa20 <_fpadd_parts+0x132>
    aa18:	96 94       	lsr	r9
    aa1a:	87 94       	ror	r8
    aa1c:	77 94       	ror	r7
    aa1e:	67 94       	ror	r6
    aa20:	0a 94       	dec	r0
    aa22:	d2 f7       	brpl	.-12     	; 0xaa18 <_fpadd_parts+0x12a>
    aa24:	21 e0       	ldi	r18, 0x01	; 1
    aa26:	30 e0       	ldi	r19, 0x00	; 0
    aa28:	40 e0       	ldi	r20, 0x00	; 0
    aa2a:	50 e0       	ldi	r21, 0x00	; 0
    aa2c:	04 c0       	rjmp	.+8      	; 0xaa36 <_fpadd_parts+0x148>
    aa2e:	22 0f       	add	r18, r18
    aa30:	33 1f       	adc	r19, r19
    aa32:	44 1f       	adc	r20, r20
    aa34:	55 1f       	adc	r21, r21
    aa36:	6a 95       	dec	r22
    aa38:	d2 f7       	brpl	.-12     	; 0xaa2e <_fpadd_parts+0x140>
    aa3a:	21 50       	subi	r18, 0x01	; 1
    aa3c:	30 40       	sbci	r19, 0x00	; 0
    aa3e:	40 40       	sbci	r20, 0x00	; 0
    aa40:	50 40       	sbci	r21, 0x00	; 0
    aa42:	2a 21       	and	r18, r10
    aa44:	3b 21       	and	r19, r11
    aa46:	4c 21       	and	r20, r12
    aa48:	5d 21       	and	r21, r13
    aa4a:	21 15       	cp	r18, r1
    aa4c:	31 05       	cpc	r19, r1
    aa4e:	41 05       	cpc	r20, r1
    aa50:	51 05       	cpc	r21, r1
    aa52:	21 f0       	breq	.+8      	; 0xaa5c <_fpadd_parts+0x16e>
    aa54:	21 e0       	ldi	r18, 0x01	; 1
    aa56:	30 e0       	ldi	r19, 0x00	; 0
    aa58:	40 e0       	ldi	r20, 0x00	; 0
    aa5a:	50 e0       	ldi	r21, 0x00	; 0
    aa5c:	59 01       	movw	r10, r18
    aa5e:	6a 01       	movw	r12, r20
    aa60:	a6 28       	or	r10, r6
    aa62:	b7 28       	or	r11, r7
    aa64:	c8 28       	or	r12, r8
    aa66:	d9 28       	or	r13, r9
    aa68:	0b c0       	rjmp	.+22     	; 0xaa80 <_fpadd_parts+0x192>
    aa6a:	82 15       	cp	r24, r2
    aa6c:	93 05       	cpc	r25, r3
    aa6e:	2c f0       	brlt	.+10     	; 0xaa7a <_fpadd_parts+0x18c>
    aa70:	1c 01       	movw	r2, r24
    aa72:	aa 24       	eor	r10, r10
    aa74:	bb 24       	eor	r11, r11
    aa76:	65 01       	movw	r12, r10
    aa78:	03 c0       	rjmp	.+6      	; 0xaa80 <_fpadd_parts+0x192>
    aa7a:	ee 24       	eor	r14, r14
    aa7c:	ff 24       	eor	r15, r15
    aa7e:	87 01       	movw	r16, r14
    aa80:	11 96       	adiw	r26, 0x01	; 1
    aa82:	9c 91       	ld	r25, X
    aa84:	d2 01       	movw	r26, r4
    aa86:	11 96       	adiw	r26, 0x01	; 1
    aa88:	8c 91       	ld	r24, X
    aa8a:	98 17       	cp	r25, r24
    aa8c:	09 f4       	brne	.+2      	; 0xaa90 <_fpadd_parts+0x1a2>
    aa8e:	45 c0       	rjmp	.+138    	; 0xab1a <_fpadd_parts+0x22c>
    aa90:	99 23       	and	r25, r25
    aa92:	39 f0       	breq	.+14     	; 0xaaa2 <_fpadd_parts+0x1b4>
    aa94:	a8 01       	movw	r20, r16
    aa96:	97 01       	movw	r18, r14
    aa98:	2a 19       	sub	r18, r10
    aa9a:	3b 09       	sbc	r19, r11
    aa9c:	4c 09       	sbc	r20, r12
    aa9e:	5d 09       	sbc	r21, r13
    aaa0:	06 c0       	rjmp	.+12     	; 0xaaae <_fpadd_parts+0x1c0>
    aaa2:	a6 01       	movw	r20, r12
    aaa4:	95 01       	movw	r18, r10
    aaa6:	2e 19       	sub	r18, r14
    aaa8:	3f 09       	sbc	r19, r15
    aaaa:	40 0b       	sbc	r20, r16
    aaac:	51 0b       	sbc	r21, r17
    aaae:	57 fd       	sbrc	r21, 7
    aab0:	08 c0       	rjmp	.+16     	; 0xaac2 <_fpadd_parts+0x1d4>
    aab2:	11 82       	std	Z+1, r1	; 0x01
    aab4:	33 82       	std	Z+3, r3	; 0x03
    aab6:	22 82       	std	Z+2, r2	; 0x02
    aab8:	24 83       	std	Z+4, r18	; 0x04
    aaba:	35 83       	std	Z+5, r19	; 0x05
    aabc:	46 83       	std	Z+6, r20	; 0x06
    aabe:	57 83       	std	Z+7, r21	; 0x07
    aac0:	1d c0       	rjmp	.+58     	; 0xaafc <_fpadd_parts+0x20e>
    aac2:	81 e0       	ldi	r24, 0x01	; 1
    aac4:	81 83       	std	Z+1, r24	; 0x01
    aac6:	33 82       	std	Z+3, r3	; 0x03
    aac8:	22 82       	std	Z+2, r2	; 0x02
    aaca:	88 27       	eor	r24, r24
    aacc:	99 27       	eor	r25, r25
    aace:	dc 01       	movw	r26, r24
    aad0:	82 1b       	sub	r24, r18
    aad2:	93 0b       	sbc	r25, r19
    aad4:	a4 0b       	sbc	r26, r20
    aad6:	b5 0b       	sbc	r27, r21
    aad8:	84 83       	std	Z+4, r24	; 0x04
    aada:	95 83       	std	Z+5, r25	; 0x05
    aadc:	a6 83       	std	Z+6, r26	; 0x06
    aade:	b7 83       	std	Z+7, r27	; 0x07
    aae0:	0d c0       	rjmp	.+26     	; 0xaafc <_fpadd_parts+0x20e>
    aae2:	22 0f       	add	r18, r18
    aae4:	33 1f       	adc	r19, r19
    aae6:	44 1f       	adc	r20, r20
    aae8:	55 1f       	adc	r21, r21
    aaea:	24 83       	std	Z+4, r18	; 0x04
    aaec:	35 83       	std	Z+5, r19	; 0x05
    aaee:	46 83       	std	Z+6, r20	; 0x06
    aaf0:	57 83       	std	Z+7, r21	; 0x07
    aaf2:	82 81       	ldd	r24, Z+2	; 0x02
    aaf4:	93 81       	ldd	r25, Z+3	; 0x03
    aaf6:	01 97       	sbiw	r24, 0x01	; 1
    aaf8:	93 83       	std	Z+3, r25	; 0x03
    aafa:	82 83       	std	Z+2, r24	; 0x02
    aafc:	24 81       	ldd	r18, Z+4	; 0x04
    aafe:	35 81       	ldd	r19, Z+5	; 0x05
    ab00:	46 81       	ldd	r20, Z+6	; 0x06
    ab02:	57 81       	ldd	r21, Z+7	; 0x07
    ab04:	da 01       	movw	r26, r20
    ab06:	c9 01       	movw	r24, r18
    ab08:	01 97       	sbiw	r24, 0x01	; 1
    ab0a:	a1 09       	sbc	r26, r1
    ab0c:	b1 09       	sbc	r27, r1
    ab0e:	8f 5f       	subi	r24, 0xFF	; 255
    ab10:	9f 4f       	sbci	r25, 0xFF	; 255
    ab12:	af 4f       	sbci	r26, 0xFF	; 255
    ab14:	bf 43       	sbci	r27, 0x3F	; 63
    ab16:	28 f3       	brcs	.-54     	; 0xaae2 <_fpadd_parts+0x1f4>
    ab18:	0b c0       	rjmp	.+22     	; 0xab30 <_fpadd_parts+0x242>
    ab1a:	91 83       	std	Z+1, r25	; 0x01
    ab1c:	33 82       	std	Z+3, r3	; 0x03
    ab1e:	22 82       	std	Z+2, r2	; 0x02
    ab20:	ea 0c       	add	r14, r10
    ab22:	fb 1c       	adc	r15, r11
    ab24:	0c 1d       	adc	r16, r12
    ab26:	1d 1d       	adc	r17, r13
    ab28:	e4 82       	std	Z+4, r14	; 0x04
    ab2a:	f5 82       	std	Z+5, r15	; 0x05
    ab2c:	06 83       	std	Z+6, r16	; 0x06
    ab2e:	17 83       	std	Z+7, r17	; 0x07
    ab30:	83 e0       	ldi	r24, 0x03	; 3
    ab32:	80 83       	st	Z, r24
    ab34:	24 81       	ldd	r18, Z+4	; 0x04
    ab36:	35 81       	ldd	r19, Z+5	; 0x05
    ab38:	46 81       	ldd	r20, Z+6	; 0x06
    ab3a:	57 81       	ldd	r21, Z+7	; 0x07
    ab3c:	57 ff       	sbrs	r21, 7
    ab3e:	1a c0       	rjmp	.+52     	; 0xab74 <_fpadd_parts+0x286>
    ab40:	c9 01       	movw	r24, r18
    ab42:	aa 27       	eor	r26, r26
    ab44:	97 fd       	sbrc	r25, 7
    ab46:	a0 95       	com	r26
    ab48:	ba 2f       	mov	r27, r26
    ab4a:	81 70       	andi	r24, 0x01	; 1
    ab4c:	90 70       	andi	r25, 0x00	; 0
    ab4e:	a0 70       	andi	r26, 0x00	; 0
    ab50:	b0 70       	andi	r27, 0x00	; 0
    ab52:	56 95       	lsr	r21
    ab54:	47 95       	ror	r20
    ab56:	37 95       	ror	r19
    ab58:	27 95       	ror	r18
    ab5a:	82 2b       	or	r24, r18
    ab5c:	93 2b       	or	r25, r19
    ab5e:	a4 2b       	or	r26, r20
    ab60:	b5 2b       	or	r27, r21
    ab62:	84 83       	std	Z+4, r24	; 0x04
    ab64:	95 83       	std	Z+5, r25	; 0x05
    ab66:	a6 83       	std	Z+6, r26	; 0x06
    ab68:	b7 83       	std	Z+7, r27	; 0x07
    ab6a:	82 81       	ldd	r24, Z+2	; 0x02
    ab6c:	93 81       	ldd	r25, Z+3	; 0x03
    ab6e:	01 96       	adiw	r24, 0x01	; 1
    ab70:	93 83       	std	Z+3, r25	; 0x03
    ab72:	82 83       	std	Z+2, r24	; 0x02
    ab74:	df 01       	movw	r26, r30
    ab76:	01 c0       	rjmp	.+2      	; 0xab7a <_fpadd_parts+0x28c>
    ab78:	d2 01       	movw	r26, r4
    ab7a:	cd 01       	movw	r24, r26
    ab7c:	cd b7       	in	r28, 0x3d	; 61
    ab7e:	de b7       	in	r29, 0x3e	; 62
    ab80:	e2 e1       	ldi	r30, 0x12	; 18
    ab82:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <__epilogue_restores__>

0000ab86 <__subsf3>:
    ab86:	a0 e2       	ldi	r26, 0x20	; 32
    ab88:	b0 e0       	ldi	r27, 0x00	; 0
    ab8a:	e9 ec       	ldi	r30, 0xC9	; 201
    ab8c:	f5 e5       	ldi	r31, 0x55	; 85
    ab8e:	0c 94 0e 5a 	jmp	0xb41c	; 0xb41c <__prologue_saves__+0x18>
    ab92:	69 83       	std	Y+1, r22	; 0x01
    ab94:	7a 83       	std	Y+2, r23	; 0x02
    ab96:	8b 83       	std	Y+3, r24	; 0x03
    ab98:	9c 83       	std	Y+4, r25	; 0x04
    ab9a:	2d 83       	std	Y+5, r18	; 0x05
    ab9c:	3e 83       	std	Y+6, r19	; 0x06
    ab9e:	4f 83       	std	Y+7, r20	; 0x07
    aba0:	58 87       	std	Y+8, r21	; 0x08
    aba2:	e9 e0       	ldi	r30, 0x09	; 9
    aba4:	ee 2e       	mov	r14, r30
    aba6:	f1 2c       	mov	r15, r1
    aba8:	ec 0e       	add	r14, r28
    abaa:	fd 1e       	adc	r15, r29
    abac:	ce 01       	movw	r24, r28
    abae:	01 96       	adiw	r24, 0x01	; 1
    abb0:	b7 01       	movw	r22, r14
    abb2:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    abb6:	8e 01       	movw	r16, r28
    abb8:	0f 5e       	subi	r16, 0xEF	; 239
    abba:	1f 4f       	sbci	r17, 0xFF	; 255
    abbc:	ce 01       	movw	r24, r28
    abbe:	05 96       	adiw	r24, 0x05	; 5
    abc0:	b8 01       	movw	r22, r16
    abc2:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    abc6:	8a 89       	ldd	r24, Y+18	; 0x12
    abc8:	91 e0       	ldi	r25, 0x01	; 1
    abca:	89 27       	eor	r24, r25
    abcc:	8a 8b       	std	Y+18, r24	; 0x12
    abce:	c7 01       	movw	r24, r14
    abd0:	b8 01       	movw	r22, r16
    abd2:	ae 01       	movw	r20, r28
    abd4:	47 5e       	subi	r20, 0xE7	; 231
    abd6:	5f 4f       	sbci	r21, 0xFF	; 255
    abd8:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <_fpadd_parts>
    abdc:	0e 94 ff 57 	call	0xaffe	; 0xaffe <__pack_f>
    abe0:	a0 96       	adiw	r28, 0x20	; 32
    abe2:	e6 e0       	ldi	r30, 0x06	; 6
    abe4:	0c 94 2a 5a 	jmp	0xb454	; 0xb454 <__epilogue_restores__+0x18>

0000abe8 <__addsf3>:
    abe8:	a0 e2       	ldi	r26, 0x20	; 32
    abea:	b0 e0       	ldi	r27, 0x00	; 0
    abec:	ea ef       	ldi	r30, 0xFA	; 250
    abee:	f5 e5       	ldi	r31, 0x55	; 85
    abf0:	0c 94 0e 5a 	jmp	0xb41c	; 0xb41c <__prologue_saves__+0x18>
    abf4:	69 83       	std	Y+1, r22	; 0x01
    abf6:	7a 83       	std	Y+2, r23	; 0x02
    abf8:	8b 83       	std	Y+3, r24	; 0x03
    abfa:	9c 83       	std	Y+4, r25	; 0x04
    abfc:	2d 83       	std	Y+5, r18	; 0x05
    abfe:	3e 83       	std	Y+6, r19	; 0x06
    ac00:	4f 83       	std	Y+7, r20	; 0x07
    ac02:	58 87       	std	Y+8, r21	; 0x08
    ac04:	f9 e0       	ldi	r31, 0x09	; 9
    ac06:	ef 2e       	mov	r14, r31
    ac08:	f1 2c       	mov	r15, r1
    ac0a:	ec 0e       	add	r14, r28
    ac0c:	fd 1e       	adc	r15, r29
    ac0e:	ce 01       	movw	r24, r28
    ac10:	01 96       	adiw	r24, 0x01	; 1
    ac12:	b7 01       	movw	r22, r14
    ac14:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    ac18:	8e 01       	movw	r16, r28
    ac1a:	0f 5e       	subi	r16, 0xEF	; 239
    ac1c:	1f 4f       	sbci	r17, 0xFF	; 255
    ac1e:	ce 01       	movw	r24, r28
    ac20:	05 96       	adiw	r24, 0x05	; 5
    ac22:	b8 01       	movw	r22, r16
    ac24:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    ac28:	c7 01       	movw	r24, r14
    ac2a:	b8 01       	movw	r22, r16
    ac2c:	ae 01       	movw	r20, r28
    ac2e:	47 5e       	subi	r20, 0xE7	; 231
    ac30:	5f 4f       	sbci	r21, 0xFF	; 255
    ac32:	0e 94 77 54 	call	0xa8ee	; 0xa8ee <_fpadd_parts>
    ac36:	0e 94 ff 57 	call	0xaffe	; 0xaffe <__pack_f>
    ac3a:	a0 96       	adiw	r28, 0x20	; 32
    ac3c:	e6 e0       	ldi	r30, 0x06	; 6
    ac3e:	0c 94 2a 5a 	jmp	0xb454	; 0xb454 <__epilogue_restores__+0x18>

0000ac42 <__mulsf3>:
    ac42:	a0 e2       	ldi	r26, 0x20	; 32
    ac44:	b0 e0       	ldi	r27, 0x00	; 0
    ac46:	e7 e2       	ldi	r30, 0x27	; 39
    ac48:	f6 e5       	ldi	r31, 0x56	; 86
    ac4a:	0c 94 02 5a 	jmp	0xb404	; 0xb404 <__prologue_saves__>
    ac4e:	69 83       	std	Y+1, r22	; 0x01
    ac50:	7a 83       	std	Y+2, r23	; 0x02
    ac52:	8b 83       	std	Y+3, r24	; 0x03
    ac54:	9c 83       	std	Y+4, r25	; 0x04
    ac56:	2d 83       	std	Y+5, r18	; 0x05
    ac58:	3e 83       	std	Y+6, r19	; 0x06
    ac5a:	4f 83       	std	Y+7, r20	; 0x07
    ac5c:	58 87       	std	Y+8, r21	; 0x08
    ac5e:	ce 01       	movw	r24, r28
    ac60:	01 96       	adiw	r24, 0x01	; 1
    ac62:	be 01       	movw	r22, r28
    ac64:	67 5f       	subi	r22, 0xF7	; 247
    ac66:	7f 4f       	sbci	r23, 0xFF	; 255
    ac68:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    ac6c:	ce 01       	movw	r24, r28
    ac6e:	05 96       	adiw	r24, 0x05	; 5
    ac70:	be 01       	movw	r22, r28
    ac72:	6f 5e       	subi	r22, 0xEF	; 239
    ac74:	7f 4f       	sbci	r23, 0xFF	; 255
    ac76:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    ac7a:	99 85       	ldd	r25, Y+9	; 0x09
    ac7c:	92 30       	cpi	r25, 0x02	; 2
    ac7e:	88 f0       	brcs	.+34     	; 0xaca2 <__mulsf3+0x60>
    ac80:	89 89       	ldd	r24, Y+17	; 0x11
    ac82:	82 30       	cpi	r24, 0x02	; 2
    ac84:	c8 f0       	brcs	.+50     	; 0xacb8 <__mulsf3+0x76>
    ac86:	94 30       	cpi	r25, 0x04	; 4
    ac88:	19 f4       	brne	.+6      	; 0xac90 <__mulsf3+0x4e>
    ac8a:	82 30       	cpi	r24, 0x02	; 2
    ac8c:	51 f4       	brne	.+20     	; 0xaca2 <__mulsf3+0x60>
    ac8e:	04 c0       	rjmp	.+8      	; 0xac98 <__mulsf3+0x56>
    ac90:	84 30       	cpi	r24, 0x04	; 4
    ac92:	29 f4       	brne	.+10     	; 0xac9e <__mulsf3+0x5c>
    ac94:	92 30       	cpi	r25, 0x02	; 2
    ac96:	81 f4       	brne	.+32     	; 0xacb8 <__mulsf3+0x76>
    ac98:	88 ed       	ldi	r24, 0xD8	; 216
    ac9a:	94 e0       	ldi	r25, 0x04	; 4
    ac9c:	c6 c0       	rjmp	.+396    	; 0xae2a <__mulsf3+0x1e8>
    ac9e:	92 30       	cpi	r25, 0x02	; 2
    aca0:	49 f4       	brne	.+18     	; 0xacb4 <__mulsf3+0x72>
    aca2:	20 e0       	ldi	r18, 0x00	; 0
    aca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    aca6:	8a 89       	ldd	r24, Y+18	; 0x12
    aca8:	98 13       	cpse	r25, r24
    acaa:	21 e0       	ldi	r18, 0x01	; 1
    acac:	2a 87       	std	Y+10, r18	; 0x0a
    acae:	ce 01       	movw	r24, r28
    acb0:	09 96       	adiw	r24, 0x09	; 9
    acb2:	bb c0       	rjmp	.+374    	; 0xae2a <__mulsf3+0x1e8>
    acb4:	82 30       	cpi	r24, 0x02	; 2
    acb6:	49 f4       	brne	.+18     	; 0xacca <__mulsf3+0x88>
    acb8:	20 e0       	ldi	r18, 0x00	; 0
    acba:	9a 85       	ldd	r25, Y+10	; 0x0a
    acbc:	8a 89       	ldd	r24, Y+18	; 0x12
    acbe:	98 13       	cpse	r25, r24
    acc0:	21 e0       	ldi	r18, 0x01	; 1
    acc2:	2a 8b       	std	Y+18, r18	; 0x12
    acc4:	ce 01       	movw	r24, r28
    acc6:	41 96       	adiw	r24, 0x11	; 17
    acc8:	b0 c0       	rjmp	.+352    	; 0xae2a <__mulsf3+0x1e8>
    acca:	2d 84       	ldd	r2, Y+13	; 0x0d
    accc:	3e 84       	ldd	r3, Y+14	; 0x0e
    acce:	4f 84       	ldd	r4, Y+15	; 0x0f
    acd0:	58 88       	ldd	r5, Y+16	; 0x10
    acd2:	6d 88       	ldd	r6, Y+21	; 0x15
    acd4:	7e 88       	ldd	r7, Y+22	; 0x16
    acd6:	8f 88       	ldd	r8, Y+23	; 0x17
    acd8:	98 8c       	ldd	r9, Y+24	; 0x18
    acda:	ee 24       	eor	r14, r14
    acdc:	ff 24       	eor	r15, r15
    acde:	87 01       	movw	r16, r14
    ace0:	aa 24       	eor	r10, r10
    ace2:	bb 24       	eor	r11, r11
    ace4:	65 01       	movw	r12, r10
    ace6:	40 e0       	ldi	r20, 0x00	; 0
    ace8:	50 e0       	ldi	r21, 0x00	; 0
    acea:	60 e0       	ldi	r22, 0x00	; 0
    acec:	70 e0       	ldi	r23, 0x00	; 0
    acee:	e0 e0       	ldi	r30, 0x00	; 0
    acf0:	f0 e0       	ldi	r31, 0x00	; 0
    acf2:	c1 01       	movw	r24, r2
    acf4:	81 70       	andi	r24, 0x01	; 1
    acf6:	90 70       	andi	r25, 0x00	; 0
    acf8:	89 2b       	or	r24, r25
    acfa:	e9 f0       	breq	.+58     	; 0xad36 <__mulsf3+0xf4>
    acfc:	e6 0c       	add	r14, r6
    acfe:	f7 1c       	adc	r15, r7
    ad00:	08 1d       	adc	r16, r8
    ad02:	19 1d       	adc	r17, r9
    ad04:	9a 01       	movw	r18, r20
    ad06:	ab 01       	movw	r20, r22
    ad08:	2a 0d       	add	r18, r10
    ad0a:	3b 1d       	adc	r19, r11
    ad0c:	4c 1d       	adc	r20, r12
    ad0e:	5d 1d       	adc	r21, r13
    ad10:	80 e0       	ldi	r24, 0x00	; 0
    ad12:	90 e0       	ldi	r25, 0x00	; 0
    ad14:	a0 e0       	ldi	r26, 0x00	; 0
    ad16:	b0 e0       	ldi	r27, 0x00	; 0
    ad18:	e6 14       	cp	r14, r6
    ad1a:	f7 04       	cpc	r15, r7
    ad1c:	08 05       	cpc	r16, r8
    ad1e:	19 05       	cpc	r17, r9
    ad20:	20 f4       	brcc	.+8      	; 0xad2a <__mulsf3+0xe8>
    ad22:	81 e0       	ldi	r24, 0x01	; 1
    ad24:	90 e0       	ldi	r25, 0x00	; 0
    ad26:	a0 e0       	ldi	r26, 0x00	; 0
    ad28:	b0 e0       	ldi	r27, 0x00	; 0
    ad2a:	ba 01       	movw	r22, r20
    ad2c:	a9 01       	movw	r20, r18
    ad2e:	48 0f       	add	r20, r24
    ad30:	59 1f       	adc	r21, r25
    ad32:	6a 1f       	adc	r22, r26
    ad34:	7b 1f       	adc	r23, r27
    ad36:	aa 0c       	add	r10, r10
    ad38:	bb 1c       	adc	r11, r11
    ad3a:	cc 1c       	adc	r12, r12
    ad3c:	dd 1c       	adc	r13, r13
    ad3e:	97 fe       	sbrs	r9, 7
    ad40:	08 c0       	rjmp	.+16     	; 0xad52 <__mulsf3+0x110>
    ad42:	81 e0       	ldi	r24, 0x01	; 1
    ad44:	90 e0       	ldi	r25, 0x00	; 0
    ad46:	a0 e0       	ldi	r26, 0x00	; 0
    ad48:	b0 e0       	ldi	r27, 0x00	; 0
    ad4a:	a8 2a       	or	r10, r24
    ad4c:	b9 2a       	or	r11, r25
    ad4e:	ca 2a       	or	r12, r26
    ad50:	db 2a       	or	r13, r27
    ad52:	31 96       	adiw	r30, 0x01	; 1
    ad54:	e0 32       	cpi	r30, 0x20	; 32
    ad56:	f1 05       	cpc	r31, r1
    ad58:	49 f0       	breq	.+18     	; 0xad6c <__mulsf3+0x12a>
    ad5a:	66 0c       	add	r6, r6
    ad5c:	77 1c       	adc	r7, r7
    ad5e:	88 1c       	adc	r8, r8
    ad60:	99 1c       	adc	r9, r9
    ad62:	56 94       	lsr	r5
    ad64:	47 94       	ror	r4
    ad66:	37 94       	ror	r3
    ad68:	27 94       	ror	r2
    ad6a:	c3 cf       	rjmp	.-122    	; 0xacf2 <__mulsf3+0xb0>
    ad6c:	fa 85       	ldd	r31, Y+10	; 0x0a
    ad6e:	ea 89       	ldd	r30, Y+18	; 0x12
    ad70:	2b 89       	ldd	r18, Y+19	; 0x13
    ad72:	3c 89       	ldd	r19, Y+20	; 0x14
    ad74:	8b 85       	ldd	r24, Y+11	; 0x0b
    ad76:	9c 85       	ldd	r25, Y+12	; 0x0c
    ad78:	28 0f       	add	r18, r24
    ad7a:	39 1f       	adc	r19, r25
    ad7c:	2e 5f       	subi	r18, 0xFE	; 254
    ad7e:	3f 4f       	sbci	r19, 0xFF	; 255
    ad80:	17 c0       	rjmp	.+46     	; 0xadb0 <__mulsf3+0x16e>
    ad82:	ca 01       	movw	r24, r20
    ad84:	81 70       	andi	r24, 0x01	; 1
    ad86:	90 70       	andi	r25, 0x00	; 0
    ad88:	89 2b       	or	r24, r25
    ad8a:	61 f0       	breq	.+24     	; 0xada4 <__mulsf3+0x162>
    ad8c:	16 95       	lsr	r17
    ad8e:	07 95       	ror	r16
    ad90:	f7 94       	ror	r15
    ad92:	e7 94       	ror	r14
    ad94:	80 e0       	ldi	r24, 0x00	; 0
    ad96:	90 e0       	ldi	r25, 0x00	; 0
    ad98:	a0 e0       	ldi	r26, 0x00	; 0
    ad9a:	b0 e8       	ldi	r27, 0x80	; 128
    ad9c:	e8 2a       	or	r14, r24
    ad9e:	f9 2a       	or	r15, r25
    ada0:	0a 2b       	or	r16, r26
    ada2:	1b 2b       	or	r17, r27
    ada4:	76 95       	lsr	r23
    ada6:	67 95       	ror	r22
    ada8:	57 95       	ror	r21
    adaa:	47 95       	ror	r20
    adac:	2f 5f       	subi	r18, 0xFF	; 255
    adae:	3f 4f       	sbci	r19, 0xFF	; 255
    adb0:	77 fd       	sbrc	r23, 7
    adb2:	e7 cf       	rjmp	.-50     	; 0xad82 <__mulsf3+0x140>
    adb4:	0c c0       	rjmp	.+24     	; 0xadce <__mulsf3+0x18c>
    adb6:	44 0f       	add	r20, r20
    adb8:	55 1f       	adc	r21, r21
    adba:	66 1f       	adc	r22, r22
    adbc:	77 1f       	adc	r23, r23
    adbe:	17 fd       	sbrc	r17, 7
    adc0:	41 60       	ori	r20, 0x01	; 1
    adc2:	ee 0c       	add	r14, r14
    adc4:	ff 1c       	adc	r15, r15
    adc6:	00 1f       	adc	r16, r16
    adc8:	11 1f       	adc	r17, r17
    adca:	21 50       	subi	r18, 0x01	; 1
    adcc:	30 40       	sbci	r19, 0x00	; 0
    adce:	40 30       	cpi	r20, 0x00	; 0
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	59 07       	cpc	r21, r25
    add4:	90 e0       	ldi	r25, 0x00	; 0
    add6:	69 07       	cpc	r22, r25
    add8:	90 e4       	ldi	r25, 0x40	; 64
    adda:	79 07       	cpc	r23, r25
    addc:	60 f3       	brcs	.-40     	; 0xadb6 <__mulsf3+0x174>
    adde:	2b 8f       	std	Y+27, r18	; 0x1b
    ade0:	3c 8f       	std	Y+28, r19	; 0x1c
    ade2:	db 01       	movw	r26, r22
    ade4:	ca 01       	movw	r24, r20
    ade6:	8f 77       	andi	r24, 0x7F	; 127
    ade8:	90 70       	andi	r25, 0x00	; 0
    adea:	a0 70       	andi	r26, 0x00	; 0
    adec:	b0 70       	andi	r27, 0x00	; 0
    adee:	80 34       	cpi	r24, 0x40	; 64
    adf0:	91 05       	cpc	r25, r1
    adf2:	a1 05       	cpc	r26, r1
    adf4:	b1 05       	cpc	r27, r1
    adf6:	61 f4       	brne	.+24     	; 0xae10 <__mulsf3+0x1ce>
    adf8:	47 fd       	sbrc	r20, 7
    adfa:	0a c0       	rjmp	.+20     	; 0xae10 <__mulsf3+0x1ce>
    adfc:	e1 14       	cp	r14, r1
    adfe:	f1 04       	cpc	r15, r1
    ae00:	01 05       	cpc	r16, r1
    ae02:	11 05       	cpc	r17, r1
    ae04:	29 f0       	breq	.+10     	; 0xae10 <__mulsf3+0x1ce>
    ae06:	40 5c       	subi	r20, 0xC0	; 192
    ae08:	5f 4f       	sbci	r21, 0xFF	; 255
    ae0a:	6f 4f       	sbci	r22, 0xFF	; 255
    ae0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ae0e:	40 78       	andi	r20, 0x80	; 128
    ae10:	1a 8e       	std	Y+26, r1	; 0x1a
    ae12:	fe 17       	cp	r31, r30
    ae14:	11 f0       	breq	.+4      	; 0xae1a <__mulsf3+0x1d8>
    ae16:	81 e0       	ldi	r24, 0x01	; 1
    ae18:	8a 8f       	std	Y+26, r24	; 0x1a
    ae1a:	4d 8f       	std	Y+29, r20	; 0x1d
    ae1c:	5e 8f       	std	Y+30, r21	; 0x1e
    ae1e:	6f 8f       	std	Y+31, r22	; 0x1f
    ae20:	78 a3       	std	Y+32, r23	; 0x20
    ae22:	83 e0       	ldi	r24, 0x03	; 3
    ae24:	89 8f       	std	Y+25, r24	; 0x19
    ae26:	ce 01       	movw	r24, r28
    ae28:	49 96       	adiw	r24, 0x19	; 25
    ae2a:	0e 94 ff 57 	call	0xaffe	; 0xaffe <__pack_f>
    ae2e:	a0 96       	adiw	r28, 0x20	; 32
    ae30:	e2 e1       	ldi	r30, 0x12	; 18
    ae32:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <__epilogue_restores__>

0000ae36 <__gtsf2>:
    ae36:	a8 e1       	ldi	r26, 0x18	; 24
    ae38:	b0 e0       	ldi	r27, 0x00	; 0
    ae3a:	e1 e2       	ldi	r30, 0x21	; 33
    ae3c:	f7 e5       	ldi	r31, 0x57	; 87
    ae3e:	0c 94 0e 5a 	jmp	0xb41c	; 0xb41c <__prologue_saves__+0x18>
    ae42:	69 83       	std	Y+1, r22	; 0x01
    ae44:	7a 83       	std	Y+2, r23	; 0x02
    ae46:	8b 83       	std	Y+3, r24	; 0x03
    ae48:	9c 83       	std	Y+4, r25	; 0x04
    ae4a:	2d 83       	std	Y+5, r18	; 0x05
    ae4c:	3e 83       	std	Y+6, r19	; 0x06
    ae4e:	4f 83       	std	Y+7, r20	; 0x07
    ae50:	58 87       	std	Y+8, r21	; 0x08
    ae52:	89 e0       	ldi	r24, 0x09	; 9
    ae54:	e8 2e       	mov	r14, r24
    ae56:	f1 2c       	mov	r15, r1
    ae58:	ec 0e       	add	r14, r28
    ae5a:	fd 1e       	adc	r15, r29
    ae5c:	ce 01       	movw	r24, r28
    ae5e:	01 96       	adiw	r24, 0x01	; 1
    ae60:	b7 01       	movw	r22, r14
    ae62:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    ae66:	8e 01       	movw	r16, r28
    ae68:	0f 5e       	subi	r16, 0xEF	; 239
    ae6a:	1f 4f       	sbci	r17, 0xFF	; 255
    ae6c:	ce 01       	movw	r24, r28
    ae6e:	05 96       	adiw	r24, 0x05	; 5
    ae70:	b8 01       	movw	r22, r16
    ae72:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    ae76:	89 85       	ldd	r24, Y+9	; 0x09
    ae78:	82 30       	cpi	r24, 0x02	; 2
    ae7a:	40 f0       	brcs	.+16     	; 0xae8c <__gtsf2+0x56>
    ae7c:	89 89       	ldd	r24, Y+17	; 0x11
    ae7e:	82 30       	cpi	r24, 0x02	; 2
    ae80:	28 f0       	brcs	.+10     	; 0xae8c <__gtsf2+0x56>
    ae82:	c7 01       	movw	r24, r14
    ae84:	b8 01       	movw	r22, r16
    ae86:	0e 94 4c 59 	call	0xb298	; 0xb298 <__fpcmp_parts_f>
    ae8a:	01 c0       	rjmp	.+2      	; 0xae8e <__gtsf2+0x58>
    ae8c:	8f ef       	ldi	r24, 0xFF	; 255
    ae8e:	68 96       	adiw	r28, 0x18	; 24
    ae90:	e6 e0       	ldi	r30, 0x06	; 6
    ae92:	0c 94 2a 5a 	jmp	0xb454	; 0xb454 <__epilogue_restores__+0x18>

0000ae96 <__gesf2>:
    ae96:	a8 e1       	ldi	r26, 0x18	; 24
    ae98:	b0 e0       	ldi	r27, 0x00	; 0
    ae9a:	e1 e5       	ldi	r30, 0x51	; 81
    ae9c:	f7 e5       	ldi	r31, 0x57	; 87
    ae9e:	0c 94 0e 5a 	jmp	0xb41c	; 0xb41c <__prologue_saves__+0x18>
    aea2:	69 83       	std	Y+1, r22	; 0x01
    aea4:	7a 83       	std	Y+2, r23	; 0x02
    aea6:	8b 83       	std	Y+3, r24	; 0x03
    aea8:	9c 83       	std	Y+4, r25	; 0x04
    aeaa:	2d 83       	std	Y+5, r18	; 0x05
    aeac:	3e 83       	std	Y+6, r19	; 0x06
    aeae:	4f 83       	std	Y+7, r20	; 0x07
    aeb0:	58 87       	std	Y+8, r21	; 0x08
    aeb2:	89 e0       	ldi	r24, 0x09	; 9
    aeb4:	e8 2e       	mov	r14, r24
    aeb6:	f1 2c       	mov	r15, r1
    aeb8:	ec 0e       	add	r14, r28
    aeba:	fd 1e       	adc	r15, r29
    aebc:	ce 01       	movw	r24, r28
    aebe:	01 96       	adiw	r24, 0x01	; 1
    aec0:	b7 01       	movw	r22, r14
    aec2:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    aec6:	8e 01       	movw	r16, r28
    aec8:	0f 5e       	subi	r16, 0xEF	; 239
    aeca:	1f 4f       	sbci	r17, 0xFF	; 255
    aecc:	ce 01       	movw	r24, r28
    aece:	05 96       	adiw	r24, 0x05	; 5
    aed0:	b8 01       	movw	r22, r16
    aed2:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    aed6:	89 85       	ldd	r24, Y+9	; 0x09
    aed8:	82 30       	cpi	r24, 0x02	; 2
    aeda:	40 f0       	brcs	.+16     	; 0xaeec <__gesf2+0x56>
    aedc:	89 89       	ldd	r24, Y+17	; 0x11
    aede:	82 30       	cpi	r24, 0x02	; 2
    aee0:	28 f0       	brcs	.+10     	; 0xaeec <__gesf2+0x56>
    aee2:	c7 01       	movw	r24, r14
    aee4:	b8 01       	movw	r22, r16
    aee6:	0e 94 4c 59 	call	0xb298	; 0xb298 <__fpcmp_parts_f>
    aeea:	01 c0       	rjmp	.+2      	; 0xaeee <__gesf2+0x58>
    aeec:	8f ef       	ldi	r24, 0xFF	; 255
    aeee:	68 96       	adiw	r28, 0x18	; 24
    aef0:	e6 e0       	ldi	r30, 0x06	; 6
    aef2:	0c 94 2a 5a 	jmp	0xb454	; 0xb454 <__epilogue_restores__+0x18>

0000aef6 <__ltsf2>:
    aef6:	a8 e1       	ldi	r26, 0x18	; 24
    aef8:	b0 e0       	ldi	r27, 0x00	; 0
    aefa:	e1 e8       	ldi	r30, 0x81	; 129
    aefc:	f7 e5       	ldi	r31, 0x57	; 87
    aefe:	0c 94 0e 5a 	jmp	0xb41c	; 0xb41c <__prologue_saves__+0x18>
    af02:	69 83       	std	Y+1, r22	; 0x01
    af04:	7a 83       	std	Y+2, r23	; 0x02
    af06:	8b 83       	std	Y+3, r24	; 0x03
    af08:	9c 83       	std	Y+4, r25	; 0x04
    af0a:	2d 83       	std	Y+5, r18	; 0x05
    af0c:	3e 83       	std	Y+6, r19	; 0x06
    af0e:	4f 83       	std	Y+7, r20	; 0x07
    af10:	58 87       	std	Y+8, r21	; 0x08
    af12:	89 e0       	ldi	r24, 0x09	; 9
    af14:	e8 2e       	mov	r14, r24
    af16:	f1 2c       	mov	r15, r1
    af18:	ec 0e       	add	r14, r28
    af1a:	fd 1e       	adc	r15, r29
    af1c:	ce 01       	movw	r24, r28
    af1e:	01 96       	adiw	r24, 0x01	; 1
    af20:	b7 01       	movw	r22, r14
    af22:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    af26:	8e 01       	movw	r16, r28
    af28:	0f 5e       	subi	r16, 0xEF	; 239
    af2a:	1f 4f       	sbci	r17, 0xFF	; 255
    af2c:	ce 01       	movw	r24, r28
    af2e:	05 96       	adiw	r24, 0x05	; 5
    af30:	b8 01       	movw	r22, r16
    af32:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    af36:	89 85       	ldd	r24, Y+9	; 0x09
    af38:	82 30       	cpi	r24, 0x02	; 2
    af3a:	40 f0       	brcs	.+16     	; 0xaf4c <__ltsf2+0x56>
    af3c:	89 89       	ldd	r24, Y+17	; 0x11
    af3e:	82 30       	cpi	r24, 0x02	; 2
    af40:	28 f0       	brcs	.+10     	; 0xaf4c <__ltsf2+0x56>
    af42:	c7 01       	movw	r24, r14
    af44:	b8 01       	movw	r22, r16
    af46:	0e 94 4c 59 	call	0xb298	; 0xb298 <__fpcmp_parts_f>
    af4a:	01 c0       	rjmp	.+2      	; 0xaf4e <__ltsf2+0x58>
    af4c:	81 e0       	ldi	r24, 0x01	; 1
    af4e:	68 96       	adiw	r28, 0x18	; 24
    af50:	e6 e0       	ldi	r30, 0x06	; 6
    af52:	0c 94 2a 5a 	jmp	0xb454	; 0xb454 <__epilogue_restores__+0x18>

0000af56 <__fixsfsi>:
    af56:	ac e0       	ldi	r26, 0x0C	; 12
    af58:	b0 e0       	ldi	r27, 0x00	; 0
    af5a:	e1 eb       	ldi	r30, 0xB1	; 177
    af5c:	f7 e5       	ldi	r31, 0x57	; 87
    af5e:	0c 94 12 5a 	jmp	0xb424	; 0xb424 <__prologue_saves__+0x20>
    af62:	69 83       	std	Y+1, r22	; 0x01
    af64:	7a 83       	std	Y+2, r23	; 0x02
    af66:	8b 83       	std	Y+3, r24	; 0x03
    af68:	9c 83       	std	Y+4, r25	; 0x04
    af6a:	ce 01       	movw	r24, r28
    af6c:	01 96       	adiw	r24, 0x01	; 1
    af6e:	be 01       	movw	r22, r28
    af70:	6b 5f       	subi	r22, 0xFB	; 251
    af72:	7f 4f       	sbci	r23, 0xFF	; 255
    af74:	0e 94 d4 58 	call	0xb1a8	; 0xb1a8 <__unpack_f>
    af78:	8d 81       	ldd	r24, Y+5	; 0x05
    af7a:	82 30       	cpi	r24, 0x02	; 2
    af7c:	61 f1       	breq	.+88     	; 0xafd6 <__fixsfsi+0x80>
    af7e:	82 30       	cpi	r24, 0x02	; 2
    af80:	50 f1       	brcs	.+84     	; 0xafd6 <__fixsfsi+0x80>
    af82:	84 30       	cpi	r24, 0x04	; 4
    af84:	21 f4       	brne	.+8      	; 0xaf8e <__fixsfsi+0x38>
    af86:	8e 81       	ldd	r24, Y+6	; 0x06
    af88:	88 23       	and	r24, r24
    af8a:	51 f1       	breq	.+84     	; 0xafe0 <__fixsfsi+0x8a>
    af8c:	2e c0       	rjmp	.+92     	; 0xafea <__fixsfsi+0x94>
    af8e:	2f 81       	ldd	r18, Y+7	; 0x07
    af90:	38 85       	ldd	r19, Y+8	; 0x08
    af92:	37 fd       	sbrc	r19, 7
    af94:	20 c0       	rjmp	.+64     	; 0xafd6 <__fixsfsi+0x80>
    af96:	6e 81       	ldd	r22, Y+6	; 0x06
    af98:	2f 31       	cpi	r18, 0x1F	; 31
    af9a:	31 05       	cpc	r19, r1
    af9c:	1c f0       	brlt	.+6      	; 0xafa4 <__fixsfsi+0x4e>
    af9e:	66 23       	and	r22, r22
    afa0:	f9 f0       	breq	.+62     	; 0xafe0 <__fixsfsi+0x8a>
    afa2:	23 c0       	rjmp	.+70     	; 0xafea <__fixsfsi+0x94>
    afa4:	8e e1       	ldi	r24, 0x1E	; 30
    afa6:	90 e0       	ldi	r25, 0x00	; 0
    afa8:	82 1b       	sub	r24, r18
    afaa:	93 0b       	sbc	r25, r19
    afac:	29 85       	ldd	r18, Y+9	; 0x09
    afae:	3a 85       	ldd	r19, Y+10	; 0x0a
    afb0:	4b 85       	ldd	r20, Y+11	; 0x0b
    afb2:	5c 85       	ldd	r21, Y+12	; 0x0c
    afb4:	04 c0       	rjmp	.+8      	; 0xafbe <__fixsfsi+0x68>
    afb6:	56 95       	lsr	r21
    afb8:	47 95       	ror	r20
    afba:	37 95       	ror	r19
    afbc:	27 95       	ror	r18
    afbe:	8a 95       	dec	r24
    afc0:	d2 f7       	brpl	.-12     	; 0xafb6 <__fixsfsi+0x60>
    afc2:	66 23       	and	r22, r22
    afc4:	b1 f0       	breq	.+44     	; 0xaff2 <__fixsfsi+0x9c>
    afc6:	50 95       	com	r21
    afc8:	40 95       	com	r20
    afca:	30 95       	com	r19
    afcc:	21 95       	neg	r18
    afce:	3f 4f       	sbci	r19, 0xFF	; 255
    afd0:	4f 4f       	sbci	r20, 0xFF	; 255
    afd2:	5f 4f       	sbci	r21, 0xFF	; 255
    afd4:	0e c0       	rjmp	.+28     	; 0xaff2 <__fixsfsi+0x9c>
    afd6:	20 e0       	ldi	r18, 0x00	; 0
    afd8:	30 e0       	ldi	r19, 0x00	; 0
    afda:	40 e0       	ldi	r20, 0x00	; 0
    afdc:	50 e0       	ldi	r21, 0x00	; 0
    afde:	09 c0       	rjmp	.+18     	; 0xaff2 <__fixsfsi+0x9c>
    afe0:	2f ef       	ldi	r18, 0xFF	; 255
    afe2:	3f ef       	ldi	r19, 0xFF	; 255
    afe4:	4f ef       	ldi	r20, 0xFF	; 255
    afe6:	5f e7       	ldi	r21, 0x7F	; 127
    afe8:	04 c0       	rjmp	.+8      	; 0xaff2 <__fixsfsi+0x9c>
    afea:	20 e0       	ldi	r18, 0x00	; 0
    afec:	30 e0       	ldi	r19, 0x00	; 0
    afee:	40 e0       	ldi	r20, 0x00	; 0
    aff0:	50 e8       	ldi	r21, 0x80	; 128
    aff2:	b9 01       	movw	r22, r18
    aff4:	ca 01       	movw	r24, r20
    aff6:	2c 96       	adiw	r28, 0x0c	; 12
    aff8:	e2 e0       	ldi	r30, 0x02	; 2
    affa:	0c 94 2e 5a 	jmp	0xb45c	; 0xb45c <__epilogue_restores__+0x20>

0000affe <__pack_f>:
    affe:	df 92       	push	r13
    b000:	ef 92       	push	r14
    b002:	ff 92       	push	r15
    b004:	0f 93       	push	r16
    b006:	1f 93       	push	r17
    b008:	fc 01       	movw	r30, r24
    b00a:	e4 80       	ldd	r14, Z+4	; 0x04
    b00c:	f5 80       	ldd	r15, Z+5	; 0x05
    b00e:	06 81       	ldd	r16, Z+6	; 0x06
    b010:	17 81       	ldd	r17, Z+7	; 0x07
    b012:	d1 80       	ldd	r13, Z+1	; 0x01
    b014:	80 81       	ld	r24, Z
    b016:	82 30       	cpi	r24, 0x02	; 2
    b018:	48 f4       	brcc	.+18     	; 0xb02c <__pack_f+0x2e>
    b01a:	80 e0       	ldi	r24, 0x00	; 0
    b01c:	90 e0       	ldi	r25, 0x00	; 0
    b01e:	a0 e1       	ldi	r26, 0x10	; 16
    b020:	b0 e0       	ldi	r27, 0x00	; 0
    b022:	e8 2a       	or	r14, r24
    b024:	f9 2a       	or	r15, r25
    b026:	0a 2b       	or	r16, r26
    b028:	1b 2b       	or	r17, r27
    b02a:	a5 c0       	rjmp	.+330    	; 0xb176 <__pack_f+0x178>
    b02c:	84 30       	cpi	r24, 0x04	; 4
    b02e:	09 f4       	brne	.+2      	; 0xb032 <__pack_f+0x34>
    b030:	9f c0       	rjmp	.+318    	; 0xb170 <__pack_f+0x172>
    b032:	82 30       	cpi	r24, 0x02	; 2
    b034:	21 f4       	brne	.+8      	; 0xb03e <__pack_f+0x40>
    b036:	ee 24       	eor	r14, r14
    b038:	ff 24       	eor	r15, r15
    b03a:	87 01       	movw	r16, r14
    b03c:	05 c0       	rjmp	.+10     	; 0xb048 <__pack_f+0x4a>
    b03e:	e1 14       	cp	r14, r1
    b040:	f1 04       	cpc	r15, r1
    b042:	01 05       	cpc	r16, r1
    b044:	11 05       	cpc	r17, r1
    b046:	19 f4       	brne	.+6      	; 0xb04e <__pack_f+0x50>
    b048:	e0 e0       	ldi	r30, 0x00	; 0
    b04a:	f0 e0       	ldi	r31, 0x00	; 0
    b04c:	96 c0       	rjmp	.+300    	; 0xb17a <__pack_f+0x17c>
    b04e:	62 81       	ldd	r22, Z+2	; 0x02
    b050:	73 81       	ldd	r23, Z+3	; 0x03
    b052:	9f ef       	ldi	r25, 0xFF	; 255
    b054:	62 38       	cpi	r22, 0x82	; 130
    b056:	79 07       	cpc	r23, r25
    b058:	0c f0       	brlt	.+2      	; 0xb05c <__pack_f+0x5e>
    b05a:	5b c0       	rjmp	.+182    	; 0xb112 <__pack_f+0x114>
    b05c:	22 e8       	ldi	r18, 0x82	; 130
    b05e:	3f ef       	ldi	r19, 0xFF	; 255
    b060:	26 1b       	sub	r18, r22
    b062:	37 0b       	sbc	r19, r23
    b064:	2a 31       	cpi	r18, 0x1A	; 26
    b066:	31 05       	cpc	r19, r1
    b068:	2c f0       	brlt	.+10     	; 0xb074 <__pack_f+0x76>
    b06a:	20 e0       	ldi	r18, 0x00	; 0
    b06c:	30 e0       	ldi	r19, 0x00	; 0
    b06e:	40 e0       	ldi	r20, 0x00	; 0
    b070:	50 e0       	ldi	r21, 0x00	; 0
    b072:	2a c0       	rjmp	.+84     	; 0xb0c8 <__pack_f+0xca>
    b074:	b8 01       	movw	r22, r16
    b076:	a7 01       	movw	r20, r14
    b078:	02 2e       	mov	r0, r18
    b07a:	04 c0       	rjmp	.+8      	; 0xb084 <__pack_f+0x86>
    b07c:	76 95       	lsr	r23
    b07e:	67 95       	ror	r22
    b080:	57 95       	ror	r21
    b082:	47 95       	ror	r20
    b084:	0a 94       	dec	r0
    b086:	d2 f7       	brpl	.-12     	; 0xb07c <__pack_f+0x7e>
    b088:	81 e0       	ldi	r24, 0x01	; 1
    b08a:	90 e0       	ldi	r25, 0x00	; 0
    b08c:	a0 e0       	ldi	r26, 0x00	; 0
    b08e:	b0 e0       	ldi	r27, 0x00	; 0
    b090:	04 c0       	rjmp	.+8      	; 0xb09a <__pack_f+0x9c>
    b092:	88 0f       	add	r24, r24
    b094:	99 1f       	adc	r25, r25
    b096:	aa 1f       	adc	r26, r26
    b098:	bb 1f       	adc	r27, r27
    b09a:	2a 95       	dec	r18
    b09c:	d2 f7       	brpl	.-12     	; 0xb092 <__pack_f+0x94>
    b09e:	01 97       	sbiw	r24, 0x01	; 1
    b0a0:	a1 09       	sbc	r26, r1
    b0a2:	b1 09       	sbc	r27, r1
    b0a4:	8e 21       	and	r24, r14
    b0a6:	9f 21       	and	r25, r15
    b0a8:	a0 23       	and	r26, r16
    b0aa:	b1 23       	and	r27, r17
    b0ac:	00 97       	sbiw	r24, 0x00	; 0
    b0ae:	a1 05       	cpc	r26, r1
    b0b0:	b1 05       	cpc	r27, r1
    b0b2:	21 f0       	breq	.+8      	; 0xb0bc <__pack_f+0xbe>
    b0b4:	81 e0       	ldi	r24, 0x01	; 1
    b0b6:	90 e0       	ldi	r25, 0x00	; 0
    b0b8:	a0 e0       	ldi	r26, 0x00	; 0
    b0ba:	b0 e0       	ldi	r27, 0x00	; 0
    b0bc:	9a 01       	movw	r18, r20
    b0be:	ab 01       	movw	r20, r22
    b0c0:	28 2b       	or	r18, r24
    b0c2:	39 2b       	or	r19, r25
    b0c4:	4a 2b       	or	r20, r26
    b0c6:	5b 2b       	or	r21, r27
    b0c8:	da 01       	movw	r26, r20
    b0ca:	c9 01       	movw	r24, r18
    b0cc:	8f 77       	andi	r24, 0x7F	; 127
    b0ce:	90 70       	andi	r25, 0x00	; 0
    b0d0:	a0 70       	andi	r26, 0x00	; 0
    b0d2:	b0 70       	andi	r27, 0x00	; 0
    b0d4:	80 34       	cpi	r24, 0x40	; 64
    b0d6:	91 05       	cpc	r25, r1
    b0d8:	a1 05       	cpc	r26, r1
    b0da:	b1 05       	cpc	r27, r1
    b0dc:	39 f4       	brne	.+14     	; 0xb0ec <__pack_f+0xee>
    b0de:	27 ff       	sbrs	r18, 7
    b0e0:	09 c0       	rjmp	.+18     	; 0xb0f4 <__pack_f+0xf6>
    b0e2:	20 5c       	subi	r18, 0xC0	; 192
    b0e4:	3f 4f       	sbci	r19, 0xFF	; 255
    b0e6:	4f 4f       	sbci	r20, 0xFF	; 255
    b0e8:	5f 4f       	sbci	r21, 0xFF	; 255
    b0ea:	04 c0       	rjmp	.+8      	; 0xb0f4 <__pack_f+0xf6>
    b0ec:	21 5c       	subi	r18, 0xC1	; 193
    b0ee:	3f 4f       	sbci	r19, 0xFF	; 255
    b0f0:	4f 4f       	sbci	r20, 0xFF	; 255
    b0f2:	5f 4f       	sbci	r21, 0xFF	; 255
    b0f4:	e0 e0       	ldi	r30, 0x00	; 0
    b0f6:	f0 e0       	ldi	r31, 0x00	; 0
    b0f8:	20 30       	cpi	r18, 0x00	; 0
    b0fa:	a0 e0       	ldi	r26, 0x00	; 0
    b0fc:	3a 07       	cpc	r19, r26
    b0fe:	a0 e0       	ldi	r26, 0x00	; 0
    b100:	4a 07       	cpc	r20, r26
    b102:	a0 e4       	ldi	r26, 0x40	; 64
    b104:	5a 07       	cpc	r21, r26
    b106:	10 f0       	brcs	.+4      	; 0xb10c <__pack_f+0x10e>
    b108:	e1 e0       	ldi	r30, 0x01	; 1
    b10a:	f0 e0       	ldi	r31, 0x00	; 0
    b10c:	79 01       	movw	r14, r18
    b10e:	8a 01       	movw	r16, r20
    b110:	27 c0       	rjmp	.+78     	; 0xb160 <__pack_f+0x162>
    b112:	60 38       	cpi	r22, 0x80	; 128
    b114:	71 05       	cpc	r23, r1
    b116:	64 f5       	brge	.+88     	; 0xb170 <__pack_f+0x172>
    b118:	fb 01       	movw	r30, r22
    b11a:	e1 58       	subi	r30, 0x81	; 129
    b11c:	ff 4f       	sbci	r31, 0xFF	; 255
    b11e:	d8 01       	movw	r26, r16
    b120:	c7 01       	movw	r24, r14
    b122:	8f 77       	andi	r24, 0x7F	; 127
    b124:	90 70       	andi	r25, 0x00	; 0
    b126:	a0 70       	andi	r26, 0x00	; 0
    b128:	b0 70       	andi	r27, 0x00	; 0
    b12a:	80 34       	cpi	r24, 0x40	; 64
    b12c:	91 05       	cpc	r25, r1
    b12e:	a1 05       	cpc	r26, r1
    b130:	b1 05       	cpc	r27, r1
    b132:	39 f4       	brne	.+14     	; 0xb142 <__pack_f+0x144>
    b134:	e7 fe       	sbrs	r14, 7
    b136:	0d c0       	rjmp	.+26     	; 0xb152 <__pack_f+0x154>
    b138:	80 e4       	ldi	r24, 0x40	; 64
    b13a:	90 e0       	ldi	r25, 0x00	; 0
    b13c:	a0 e0       	ldi	r26, 0x00	; 0
    b13e:	b0 e0       	ldi	r27, 0x00	; 0
    b140:	04 c0       	rjmp	.+8      	; 0xb14a <__pack_f+0x14c>
    b142:	8f e3       	ldi	r24, 0x3F	; 63
    b144:	90 e0       	ldi	r25, 0x00	; 0
    b146:	a0 e0       	ldi	r26, 0x00	; 0
    b148:	b0 e0       	ldi	r27, 0x00	; 0
    b14a:	e8 0e       	add	r14, r24
    b14c:	f9 1e       	adc	r15, r25
    b14e:	0a 1f       	adc	r16, r26
    b150:	1b 1f       	adc	r17, r27
    b152:	17 ff       	sbrs	r17, 7
    b154:	05 c0       	rjmp	.+10     	; 0xb160 <__pack_f+0x162>
    b156:	16 95       	lsr	r17
    b158:	07 95       	ror	r16
    b15a:	f7 94       	ror	r15
    b15c:	e7 94       	ror	r14
    b15e:	31 96       	adiw	r30, 0x01	; 1
    b160:	87 e0       	ldi	r24, 0x07	; 7
    b162:	16 95       	lsr	r17
    b164:	07 95       	ror	r16
    b166:	f7 94       	ror	r15
    b168:	e7 94       	ror	r14
    b16a:	8a 95       	dec	r24
    b16c:	d1 f7       	brne	.-12     	; 0xb162 <__pack_f+0x164>
    b16e:	05 c0       	rjmp	.+10     	; 0xb17a <__pack_f+0x17c>
    b170:	ee 24       	eor	r14, r14
    b172:	ff 24       	eor	r15, r15
    b174:	87 01       	movw	r16, r14
    b176:	ef ef       	ldi	r30, 0xFF	; 255
    b178:	f0 e0       	ldi	r31, 0x00	; 0
    b17a:	6e 2f       	mov	r22, r30
    b17c:	67 95       	ror	r22
    b17e:	66 27       	eor	r22, r22
    b180:	67 95       	ror	r22
    b182:	90 2f       	mov	r25, r16
    b184:	9f 77       	andi	r25, 0x7F	; 127
    b186:	d7 94       	ror	r13
    b188:	dd 24       	eor	r13, r13
    b18a:	d7 94       	ror	r13
    b18c:	8e 2f       	mov	r24, r30
    b18e:	86 95       	lsr	r24
    b190:	49 2f       	mov	r20, r25
    b192:	46 2b       	or	r20, r22
    b194:	58 2f       	mov	r21, r24
    b196:	5d 29       	or	r21, r13
    b198:	b7 01       	movw	r22, r14
    b19a:	ca 01       	movw	r24, r20
    b19c:	1f 91       	pop	r17
    b19e:	0f 91       	pop	r16
    b1a0:	ff 90       	pop	r15
    b1a2:	ef 90       	pop	r14
    b1a4:	df 90       	pop	r13
    b1a6:	08 95       	ret

0000b1a8 <__unpack_f>:
    b1a8:	fc 01       	movw	r30, r24
    b1aa:	db 01       	movw	r26, r22
    b1ac:	40 81       	ld	r20, Z
    b1ae:	51 81       	ldd	r21, Z+1	; 0x01
    b1b0:	22 81       	ldd	r18, Z+2	; 0x02
    b1b2:	62 2f       	mov	r22, r18
    b1b4:	6f 77       	andi	r22, 0x7F	; 127
    b1b6:	70 e0       	ldi	r23, 0x00	; 0
    b1b8:	22 1f       	adc	r18, r18
    b1ba:	22 27       	eor	r18, r18
    b1bc:	22 1f       	adc	r18, r18
    b1be:	93 81       	ldd	r25, Z+3	; 0x03
    b1c0:	89 2f       	mov	r24, r25
    b1c2:	88 0f       	add	r24, r24
    b1c4:	82 2b       	or	r24, r18
    b1c6:	28 2f       	mov	r18, r24
    b1c8:	30 e0       	ldi	r19, 0x00	; 0
    b1ca:	99 1f       	adc	r25, r25
    b1cc:	99 27       	eor	r25, r25
    b1ce:	99 1f       	adc	r25, r25
    b1d0:	11 96       	adiw	r26, 0x01	; 1
    b1d2:	9c 93       	st	X, r25
    b1d4:	11 97       	sbiw	r26, 0x01	; 1
    b1d6:	21 15       	cp	r18, r1
    b1d8:	31 05       	cpc	r19, r1
    b1da:	a9 f5       	brne	.+106    	; 0xb246 <__unpack_f+0x9e>
    b1dc:	41 15       	cp	r20, r1
    b1de:	51 05       	cpc	r21, r1
    b1e0:	61 05       	cpc	r22, r1
    b1e2:	71 05       	cpc	r23, r1
    b1e4:	11 f4       	brne	.+4      	; 0xb1ea <__unpack_f+0x42>
    b1e6:	82 e0       	ldi	r24, 0x02	; 2
    b1e8:	37 c0       	rjmp	.+110    	; 0xb258 <__unpack_f+0xb0>
    b1ea:	82 e8       	ldi	r24, 0x82	; 130
    b1ec:	9f ef       	ldi	r25, 0xFF	; 255
    b1ee:	13 96       	adiw	r26, 0x03	; 3
    b1f0:	9c 93       	st	X, r25
    b1f2:	8e 93       	st	-X, r24
    b1f4:	12 97       	sbiw	r26, 0x02	; 2
    b1f6:	9a 01       	movw	r18, r20
    b1f8:	ab 01       	movw	r20, r22
    b1fa:	67 e0       	ldi	r22, 0x07	; 7
    b1fc:	22 0f       	add	r18, r18
    b1fe:	33 1f       	adc	r19, r19
    b200:	44 1f       	adc	r20, r20
    b202:	55 1f       	adc	r21, r21
    b204:	6a 95       	dec	r22
    b206:	d1 f7       	brne	.-12     	; 0xb1fc <__unpack_f+0x54>
    b208:	83 e0       	ldi	r24, 0x03	; 3
    b20a:	8c 93       	st	X, r24
    b20c:	0d c0       	rjmp	.+26     	; 0xb228 <__unpack_f+0x80>
    b20e:	22 0f       	add	r18, r18
    b210:	33 1f       	adc	r19, r19
    b212:	44 1f       	adc	r20, r20
    b214:	55 1f       	adc	r21, r21
    b216:	12 96       	adiw	r26, 0x02	; 2
    b218:	8d 91       	ld	r24, X+
    b21a:	9c 91       	ld	r25, X
    b21c:	13 97       	sbiw	r26, 0x03	; 3
    b21e:	01 97       	sbiw	r24, 0x01	; 1
    b220:	13 96       	adiw	r26, 0x03	; 3
    b222:	9c 93       	st	X, r25
    b224:	8e 93       	st	-X, r24
    b226:	12 97       	sbiw	r26, 0x02	; 2
    b228:	20 30       	cpi	r18, 0x00	; 0
    b22a:	80 e0       	ldi	r24, 0x00	; 0
    b22c:	38 07       	cpc	r19, r24
    b22e:	80 e0       	ldi	r24, 0x00	; 0
    b230:	48 07       	cpc	r20, r24
    b232:	80 e4       	ldi	r24, 0x40	; 64
    b234:	58 07       	cpc	r21, r24
    b236:	58 f3       	brcs	.-42     	; 0xb20e <__unpack_f+0x66>
    b238:	14 96       	adiw	r26, 0x04	; 4
    b23a:	2d 93       	st	X+, r18
    b23c:	3d 93       	st	X+, r19
    b23e:	4d 93       	st	X+, r20
    b240:	5c 93       	st	X, r21
    b242:	17 97       	sbiw	r26, 0x07	; 7
    b244:	08 95       	ret
    b246:	2f 3f       	cpi	r18, 0xFF	; 255
    b248:	31 05       	cpc	r19, r1
    b24a:	79 f4       	brne	.+30     	; 0xb26a <__unpack_f+0xc2>
    b24c:	41 15       	cp	r20, r1
    b24e:	51 05       	cpc	r21, r1
    b250:	61 05       	cpc	r22, r1
    b252:	71 05       	cpc	r23, r1
    b254:	19 f4       	brne	.+6      	; 0xb25c <__unpack_f+0xb4>
    b256:	84 e0       	ldi	r24, 0x04	; 4
    b258:	8c 93       	st	X, r24
    b25a:	08 95       	ret
    b25c:	64 ff       	sbrs	r22, 4
    b25e:	03 c0       	rjmp	.+6      	; 0xb266 <__unpack_f+0xbe>
    b260:	81 e0       	ldi	r24, 0x01	; 1
    b262:	8c 93       	st	X, r24
    b264:	12 c0       	rjmp	.+36     	; 0xb28a <__unpack_f+0xe2>
    b266:	1c 92       	st	X, r1
    b268:	10 c0       	rjmp	.+32     	; 0xb28a <__unpack_f+0xe2>
    b26a:	2f 57       	subi	r18, 0x7F	; 127
    b26c:	30 40       	sbci	r19, 0x00	; 0
    b26e:	13 96       	adiw	r26, 0x03	; 3
    b270:	3c 93       	st	X, r19
    b272:	2e 93       	st	-X, r18
    b274:	12 97       	sbiw	r26, 0x02	; 2
    b276:	83 e0       	ldi	r24, 0x03	; 3
    b278:	8c 93       	st	X, r24
    b27a:	87 e0       	ldi	r24, 0x07	; 7
    b27c:	44 0f       	add	r20, r20
    b27e:	55 1f       	adc	r21, r21
    b280:	66 1f       	adc	r22, r22
    b282:	77 1f       	adc	r23, r23
    b284:	8a 95       	dec	r24
    b286:	d1 f7       	brne	.-12     	; 0xb27c <__unpack_f+0xd4>
    b288:	70 64       	ori	r23, 0x40	; 64
    b28a:	14 96       	adiw	r26, 0x04	; 4
    b28c:	4d 93       	st	X+, r20
    b28e:	5d 93       	st	X+, r21
    b290:	6d 93       	st	X+, r22
    b292:	7c 93       	st	X, r23
    b294:	17 97       	sbiw	r26, 0x07	; 7
    b296:	08 95       	ret

0000b298 <__fpcmp_parts_f>:
    b298:	1f 93       	push	r17
    b29a:	dc 01       	movw	r26, r24
    b29c:	fb 01       	movw	r30, r22
    b29e:	9c 91       	ld	r25, X
    b2a0:	92 30       	cpi	r25, 0x02	; 2
    b2a2:	08 f4       	brcc	.+2      	; 0xb2a6 <__fpcmp_parts_f+0xe>
    b2a4:	47 c0       	rjmp	.+142    	; 0xb334 <__fpcmp_parts_f+0x9c>
    b2a6:	80 81       	ld	r24, Z
    b2a8:	82 30       	cpi	r24, 0x02	; 2
    b2aa:	08 f4       	brcc	.+2      	; 0xb2ae <__fpcmp_parts_f+0x16>
    b2ac:	43 c0       	rjmp	.+134    	; 0xb334 <__fpcmp_parts_f+0x9c>
    b2ae:	94 30       	cpi	r25, 0x04	; 4
    b2b0:	51 f4       	brne	.+20     	; 0xb2c6 <__fpcmp_parts_f+0x2e>
    b2b2:	11 96       	adiw	r26, 0x01	; 1
    b2b4:	1c 91       	ld	r17, X
    b2b6:	84 30       	cpi	r24, 0x04	; 4
    b2b8:	99 f5       	brne	.+102    	; 0xb320 <__fpcmp_parts_f+0x88>
    b2ba:	81 81       	ldd	r24, Z+1	; 0x01
    b2bc:	68 2f       	mov	r22, r24
    b2be:	70 e0       	ldi	r23, 0x00	; 0
    b2c0:	61 1b       	sub	r22, r17
    b2c2:	71 09       	sbc	r23, r1
    b2c4:	3f c0       	rjmp	.+126    	; 0xb344 <__fpcmp_parts_f+0xac>
    b2c6:	84 30       	cpi	r24, 0x04	; 4
    b2c8:	21 f0       	breq	.+8      	; 0xb2d2 <__fpcmp_parts_f+0x3a>
    b2ca:	92 30       	cpi	r25, 0x02	; 2
    b2cc:	31 f4       	brne	.+12     	; 0xb2da <__fpcmp_parts_f+0x42>
    b2ce:	82 30       	cpi	r24, 0x02	; 2
    b2d0:	b9 f1       	breq	.+110    	; 0xb340 <__fpcmp_parts_f+0xa8>
    b2d2:	81 81       	ldd	r24, Z+1	; 0x01
    b2d4:	88 23       	and	r24, r24
    b2d6:	89 f1       	breq	.+98     	; 0xb33a <__fpcmp_parts_f+0xa2>
    b2d8:	2d c0       	rjmp	.+90     	; 0xb334 <__fpcmp_parts_f+0x9c>
    b2da:	11 96       	adiw	r26, 0x01	; 1
    b2dc:	1c 91       	ld	r17, X
    b2de:	11 97       	sbiw	r26, 0x01	; 1
    b2e0:	82 30       	cpi	r24, 0x02	; 2
    b2e2:	f1 f0       	breq	.+60     	; 0xb320 <__fpcmp_parts_f+0x88>
    b2e4:	81 81       	ldd	r24, Z+1	; 0x01
    b2e6:	18 17       	cp	r17, r24
    b2e8:	d9 f4       	brne	.+54     	; 0xb320 <__fpcmp_parts_f+0x88>
    b2ea:	12 96       	adiw	r26, 0x02	; 2
    b2ec:	2d 91       	ld	r18, X+
    b2ee:	3c 91       	ld	r19, X
    b2f0:	13 97       	sbiw	r26, 0x03	; 3
    b2f2:	82 81       	ldd	r24, Z+2	; 0x02
    b2f4:	93 81       	ldd	r25, Z+3	; 0x03
    b2f6:	82 17       	cp	r24, r18
    b2f8:	93 07       	cpc	r25, r19
    b2fa:	94 f0       	brlt	.+36     	; 0xb320 <__fpcmp_parts_f+0x88>
    b2fc:	28 17       	cp	r18, r24
    b2fe:	39 07       	cpc	r19, r25
    b300:	bc f0       	brlt	.+46     	; 0xb330 <__fpcmp_parts_f+0x98>
    b302:	14 96       	adiw	r26, 0x04	; 4
    b304:	8d 91       	ld	r24, X+
    b306:	9d 91       	ld	r25, X+
    b308:	0d 90       	ld	r0, X+
    b30a:	bc 91       	ld	r27, X
    b30c:	a0 2d       	mov	r26, r0
    b30e:	24 81       	ldd	r18, Z+4	; 0x04
    b310:	35 81       	ldd	r19, Z+5	; 0x05
    b312:	46 81       	ldd	r20, Z+6	; 0x06
    b314:	57 81       	ldd	r21, Z+7	; 0x07
    b316:	28 17       	cp	r18, r24
    b318:	39 07       	cpc	r19, r25
    b31a:	4a 07       	cpc	r20, r26
    b31c:	5b 07       	cpc	r21, r27
    b31e:	18 f4       	brcc	.+6      	; 0xb326 <__fpcmp_parts_f+0x8e>
    b320:	11 23       	and	r17, r17
    b322:	41 f0       	breq	.+16     	; 0xb334 <__fpcmp_parts_f+0x9c>
    b324:	0a c0       	rjmp	.+20     	; 0xb33a <__fpcmp_parts_f+0xa2>
    b326:	82 17       	cp	r24, r18
    b328:	93 07       	cpc	r25, r19
    b32a:	a4 07       	cpc	r26, r20
    b32c:	b5 07       	cpc	r27, r21
    b32e:	40 f4       	brcc	.+16     	; 0xb340 <__fpcmp_parts_f+0xa8>
    b330:	11 23       	and	r17, r17
    b332:	19 f0       	breq	.+6      	; 0xb33a <__fpcmp_parts_f+0xa2>
    b334:	61 e0       	ldi	r22, 0x01	; 1
    b336:	70 e0       	ldi	r23, 0x00	; 0
    b338:	05 c0       	rjmp	.+10     	; 0xb344 <__fpcmp_parts_f+0xac>
    b33a:	6f ef       	ldi	r22, 0xFF	; 255
    b33c:	7f ef       	ldi	r23, 0xFF	; 255
    b33e:	02 c0       	rjmp	.+4      	; 0xb344 <__fpcmp_parts_f+0xac>
    b340:	60 e0       	ldi	r22, 0x00	; 0
    b342:	70 e0       	ldi	r23, 0x00	; 0
    b344:	cb 01       	movw	r24, r22
    b346:	1f 91       	pop	r17
    b348:	08 95       	ret

0000b34a <__udivmodqi4>:
    b34a:	99 1b       	sub	r25, r25
    b34c:	79 e0       	ldi	r23, 0x09	; 9
    b34e:	04 c0       	rjmp	.+8      	; 0xb358 <__udivmodqi4_ep>

0000b350 <__udivmodqi4_loop>:
    b350:	99 1f       	adc	r25, r25
    b352:	96 17       	cp	r25, r22
    b354:	08 f0       	brcs	.+2      	; 0xb358 <__udivmodqi4_ep>
    b356:	96 1b       	sub	r25, r22

0000b358 <__udivmodqi4_ep>:
    b358:	88 1f       	adc	r24, r24
    b35a:	7a 95       	dec	r23
    b35c:	c9 f7       	brne	.-14     	; 0xb350 <__udivmodqi4_loop>
    b35e:	80 95       	com	r24
    b360:	08 95       	ret

0000b362 <__udivmodhi4>:
    b362:	aa 1b       	sub	r26, r26
    b364:	bb 1b       	sub	r27, r27
    b366:	51 e1       	ldi	r21, 0x11	; 17
    b368:	07 c0       	rjmp	.+14     	; 0xb378 <__udivmodhi4_ep>

0000b36a <__udivmodhi4_loop>:
    b36a:	aa 1f       	adc	r26, r26
    b36c:	bb 1f       	adc	r27, r27
    b36e:	a6 17       	cp	r26, r22
    b370:	b7 07       	cpc	r27, r23
    b372:	10 f0       	brcs	.+4      	; 0xb378 <__udivmodhi4_ep>
    b374:	a6 1b       	sub	r26, r22
    b376:	b7 0b       	sbc	r27, r23

0000b378 <__udivmodhi4_ep>:
    b378:	88 1f       	adc	r24, r24
    b37a:	99 1f       	adc	r25, r25
    b37c:	5a 95       	dec	r21
    b37e:	a9 f7       	brne	.-22     	; 0xb36a <__udivmodhi4_loop>
    b380:	80 95       	com	r24
    b382:	90 95       	com	r25
    b384:	bc 01       	movw	r22, r24
    b386:	cd 01       	movw	r24, r26
    b388:	08 95       	ret

0000b38a <__udivmodsi4>:
    b38a:	a1 e2       	ldi	r26, 0x21	; 33
    b38c:	1a 2e       	mov	r1, r26
    b38e:	aa 1b       	sub	r26, r26
    b390:	bb 1b       	sub	r27, r27
    b392:	fd 01       	movw	r30, r26
    b394:	0d c0       	rjmp	.+26     	; 0xb3b0 <__udivmodsi4_ep>

0000b396 <__udivmodsi4_loop>:
    b396:	aa 1f       	adc	r26, r26
    b398:	bb 1f       	adc	r27, r27
    b39a:	ee 1f       	adc	r30, r30
    b39c:	ff 1f       	adc	r31, r31
    b39e:	a2 17       	cp	r26, r18
    b3a0:	b3 07       	cpc	r27, r19
    b3a2:	e4 07       	cpc	r30, r20
    b3a4:	f5 07       	cpc	r31, r21
    b3a6:	20 f0       	brcs	.+8      	; 0xb3b0 <__udivmodsi4_ep>
    b3a8:	a2 1b       	sub	r26, r18
    b3aa:	b3 0b       	sbc	r27, r19
    b3ac:	e4 0b       	sbc	r30, r20
    b3ae:	f5 0b       	sbc	r31, r21

0000b3b0 <__udivmodsi4_ep>:
    b3b0:	66 1f       	adc	r22, r22
    b3b2:	77 1f       	adc	r23, r23
    b3b4:	88 1f       	adc	r24, r24
    b3b6:	99 1f       	adc	r25, r25
    b3b8:	1a 94       	dec	r1
    b3ba:	69 f7       	brne	.-38     	; 0xb396 <__udivmodsi4_loop>
    b3bc:	60 95       	com	r22
    b3be:	70 95       	com	r23
    b3c0:	80 95       	com	r24
    b3c2:	90 95       	com	r25
    b3c4:	9b 01       	movw	r18, r22
    b3c6:	ac 01       	movw	r20, r24
    b3c8:	bd 01       	movw	r22, r26
    b3ca:	cf 01       	movw	r24, r30
    b3cc:	08 95       	ret

0000b3ce <__divmodsi4>:
    b3ce:	97 fb       	bst	r25, 7
    b3d0:	09 2e       	mov	r0, r25
    b3d2:	05 26       	eor	r0, r21
    b3d4:	0e d0       	rcall	.+28     	; 0xb3f2 <__divmodsi4_neg1>
    b3d6:	57 fd       	sbrc	r21, 7
    b3d8:	04 d0       	rcall	.+8      	; 0xb3e2 <__divmodsi4_neg2>
    b3da:	d7 df       	rcall	.-82     	; 0xb38a <__udivmodsi4>
    b3dc:	0a d0       	rcall	.+20     	; 0xb3f2 <__divmodsi4_neg1>
    b3de:	00 1c       	adc	r0, r0
    b3e0:	38 f4       	brcc	.+14     	; 0xb3f0 <__divmodsi4_exit>

0000b3e2 <__divmodsi4_neg2>:
    b3e2:	50 95       	com	r21
    b3e4:	40 95       	com	r20
    b3e6:	30 95       	com	r19
    b3e8:	21 95       	neg	r18
    b3ea:	3f 4f       	sbci	r19, 0xFF	; 255
    b3ec:	4f 4f       	sbci	r20, 0xFF	; 255
    b3ee:	5f 4f       	sbci	r21, 0xFF	; 255

0000b3f0 <__divmodsi4_exit>:
    b3f0:	08 95       	ret

0000b3f2 <__divmodsi4_neg1>:
    b3f2:	f6 f7       	brtc	.-4      	; 0xb3f0 <__divmodsi4_exit>
    b3f4:	90 95       	com	r25
    b3f6:	80 95       	com	r24
    b3f8:	70 95       	com	r23
    b3fa:	61 95       	neg	r22
    b3fc:	7f 4f       	sbci	r23, 0xFF	; 255
    b3fe:	8f 4f       	sbci	r24, 0xFF	; 255
    b400:	9f 4f       	sbci	r25, 0xFF	; 255
    b402:	08 95       	ret

0000b404 <__prologue_saves__>:
    b404:	2f 92       	push	r2
    b406:	3f 92       	push	r3
    b408:	4f 92       	push	r4
    b40a:	5f 92       	push	r5
    b40c:	6f 92       	push	r6
    b40e:	7f 92       	push	r7
    b410:	8f 92       	push	r8
    b412:	9f 92       	push	r9
    b414:	af 92       	push	r10
    b416:	bf 92       	push	r11
    b418:	cf 92       	push	r12
    b41a:	df 92       	push	r13
    b41c:	ef 92       	push	r14
    b41e:	ff 92       	push	r15
    b420:	0f 93       	push	r16
    b422:	1f 93       	push	r17
    b424:	cf 93       	push	r28
    b426:	df 93       	push	r29
    b428:	cd b7       	in	r28, 0x3d	; 61
    b42a:	de b7       	in	r29, 0x3e	; 62
    b42c:	ca 1b       	sub	r28, r26
    b42e:	db 0b       	sbc	r29, r27
    b430:	0f b6       	in	r0, 0x3f	; 63
    b432:	f8 94       	cli
    b434:	de bf       	out	0x3e, r29	; 62
    b436:	0f be       	out	0x3f, r0	; 63
    b438:	cd bf       	out	0x3d, r28	; 61
    b43a:	09 94       	ijmp

0000b43c <__epilogue_restores__>:
    b43c:	2a 88       	ldd	r2, Y+18	; 0x12
    b43e:	39 88       	ldd	r3, Y+17	; 0x11
    b440:	48 88       	ldd	r4, Y+16	; 0x10
    b442:	5f 84       	ldd	r5, Y+15	; 0x0f
    b444:	6e 84       	ldd	r6, Y+14	; 0x0e
    b446:	7d 84       	ldd	r7, Y+13	; 0x0d
    b448:	8c 84       	ldd	r8, Y+12	; 0x0c
    b44a:	9b 84       	ldd	r9, Y+11	; 0x0b
    b44c:	aa 84       	ldd	r10, Y+10	; 0x0a
    b44e:	b9 84       	ldd	r11, Y+9	; 0x09
    b450:	c8 84       	ldd	r12, Y+8	; 0x08
    b452:	df 80       	ldd	r13, Y+7	; 0x07
    b454:	ee 80       	ldd	r14, Y+6	; 0x06
    b456:	fd 80       	ldd	r15, Y+5	; 0x05
    b458:	0c 81       	ldd	r16, Y+4	; 0x04
    b45a:	1b 81       	ldd	r17, Y+3	; 0x03
    b45c:	aa 81       	ldd	r26, Y+2	; 0x02
    b45e:	b9 81       	ldd	r27, Y+1	; 0x01
    b460:	ce 0f       	add	r28, r30
    b462:	d1 1d       	adc	r29, r1
    b464:	0f b6       	in	r0, 0x3f	; 63
    b466:	f8 94       	cli
    b468:	de bf       	out	0x3e, r29	; 62
    b46a:	0f be       	out	0x3f, r0	; 63
    b46c:	cd bf       	out	0x3d, r28	; 61
    b46e:	ed 01       	movw	r28, r26
    b470:	08 95       	ret

0000b472 <__tablejump2__>:
    b472:	ee 0f       	add	r30, r30
    b474:	ff 1f       	adc	r31, r31

0000b476 <__tablejump__>:
    b476:	05 90       	lpm	r0, Z+
    b478:	f4 91       	lpm	r31, Z+
    b47a:	e0 2d       	mov	r30, r0
    b47c:	09 94       	ijmp

0000b47e <malloc>:
    b47e:	cf 93       	push	r28
    b480:	df 93       	push	r29
    b482:	bc 01       	movw	r22, r24
    b484:	82 30       	cpi	r24, 0x02	; 2
    b486:	91 05       	cpc	r25, r1
    b488:	10 f4       	brcc	.+4      	; 0xb48e <malloc+0x10>
    b48a:	62 e0       	ldi	r22, 0x02	; 2
    b48c:	70 e0       	ldi	r23, 0x00	; 0
    b48e:	a0 91 75 0a 	lds	r26, 0x0A75
    b492:	b0 91 76 0a 	lds	r27, 0x0A76
    b496:	ed 01       	movw	r28, r26
    b498:	e0 e0       	ldi	r30, 0x00	; 0
    b49a:	f0 e0       	ldi	r31, 0x00	; 0
    b49c:	40 e0       	ldi	r20, 0x00	; 0
    b49e:	50 e0       	ldi	r21, 0x00	; 0
    b4a0:	21 c0       	rjmp	.+66     	; 0xb4e4 <malloc+0x66>
    b4a2:	88 81       	ld	r24, Y
    b4a4:	99 81       	ldd	r25, Y+1	; 0x01
    b4a6:	86 17       	cp	r24, r22
    b4a8:	97 07       	cpc	r25, r23
    b4aa:	69 f4       	brne	.+26     	; 0xb4c6 <malloc+0x48>
    b4ac:	8a 81       	ldd	r24, Y+2	; 0x02
    b4ae:	9b 81       	ldd	r25, Y+3	; 0x03
    b4b0:	30 97       	sbiw	r30, 0x00	; 0
    b4b2:	19 f0       	breq	.+6      	; 0xb4ba <malloc+0x3c>
    b4b4:	93 83       	std	Z+3, r25	; 0x03
    b4b6:	82 83       	std	Z+2, r24	; 0x02
    b4b8:	04 c0       	rjmp	.+8      	; 0xb4c2 <malloc+0x44>
    b4ba:	90 93 76 0a 	sts	0x0A76, r25
    b4be:	80 93 75 0a 	sts	0x0A75, r24
    b4c2:	fe 01       	movw	r30, r28
    b4c4:	34 c0       	rjmp	.+104    	; 0xb52e <malloc+0xb0>
    b4c6:	68 17       	cp	r22, r24
    b4c8:	79 07       	cpc	r23, r25
    b4ca:	38 f4       	brcc	.+14     	; 0xb4da <malloc+0x5c>
    b4cc:	41 15       	cp	r20, r1
    b4ce:	51 05       	cpc	r21, r1
    b4d0:	19 f0       	breq	.+6      	; 0xb4d8 <malloc+0x5a>
    b4d2:	84 17       	cp	r24, r20
    b4d4:	95 07       	cpc	r25, r21
    b4d6:	08 f4       	brcc	.+2      	; 0xb4da <malloc+0x5c>
    b4d8:	ac 01       	movw	r20, r24
    b4da:	fe 01       	movw	r30, r28
    b4dc:	8a 81       	ldd	r24, Y+2	; 0x02
    b4de:	9b 81       	ldd	r25, Y+3	; 0x03
    b4e0:	9c 01       	movw	r18, r24
    b4e2:	e9 01       	movw	r28, r18
    b4e4:	20 97       	sbiw	r28, 0x00	; 0
    b4e6:	e9 f6       	brne	.-70     	; 0xb4a2 <malloc+0x24>
    b4e8:	41 15       	cp	r20, r1
    b4ea:	51 05       	cpc	r21, r1
    b4ec:	a9 f1       	breq	.+106    	; 0xb558 <malloc+0xda>
    b4ee:	ca 01       	movw	r24, r20
    b4f0:	86 1b       	sub	r24, r22
    b4f2:	97 0b       	sbc	r25, r23
    b4f4:	04 97       	sbiw	r24, 0x04	; 4
    b4f6:	08 f4       	brcc	.+2      	; 0xb4fa <malloc+0x7c>
    b4f8:	ba 01       	movw	r22, r20
    b4fa:	e0 e0       	ldi	r30, 0x00	; 0
    b4fc:	f0 e0       	ldi	r31, 0x00	; 0
    b4fe:	2a c0       	rjmp	.+84     	; 0xb554 <malloc+0xd6>
    b500:	8d 91       	ld	r24, X+
    b502:	9c 91       	ld	r25, X
    b504:	11 97       	sbiw	r26, 0x01	; 1
    b506:	84 17       	cp	r24, r20
    b508:	95 07       	cpc	r25, r21
    b50a:	f9 f4       	brne	.+62     	; 0xb54a <malloc+0xcc>
    b50c:	64 17       	cp	r22, r20
    b50e:	75 07       	cpc	r23, r21
    b510:	81 f4       	brne	.+32     	; 0xb532 <malloc+0xb4>
    b512:	12 96       	adiw	r26, 0x02	; 2
    b514:	8d 91       	ld	r24, X+
    b516:	9c 91       	ld	r25, X
    b518:	13 97       	sbiw	r26, 0x03	; 3
    b51a:	30 97       	sbiw	r30, 0x00	; 0
    b51c:	19 f0       	breq	.+6      	; 0xb524 <malloc+0xa6>
    b51e:	93 83       	std	Z+3, r25	; 0x03
    b520:	82 83       	std	Z+2, r24	; 0x02
    b522:	04 c0       	rjmp	.+8      	; 0xb52c <malloc+0xae>
    b524:	90 93 76 0a 	sts	0x0A76, r25
    b528:	80 93 75 0a 	sts	0x0A75, r24
    b52c:	fd 01       	movw	r30, r26
    b52e:	32 96       	adiw	r30, 0x02	; 2
    b530:	4f c0       	rjmp	.+158    	; 0xb5d0 <malloc+0x152>
    b532:	ca 01       	movw	r24, r20
    b534:	86 1b       	sub	r24, r22
    b536:	97 0b       	sbc	r25, r23
    b538:	fd 01       	movw	r30, r26
    b53a:	e8 0f       	add	r30, r24
    b53c:	f9 1f       	adc	r31, r25
    b53e:	61 93       	st	Z+, r22
    b540:	71 93       	st	Z+, r23
    b542:	02 97       	sbiw	r24, 0x02	; 2
    b544:	8d 93       	st	X+, r24
    b546:	9c 93       	st	X, r25
    b548:	43 c0       	rjmp	.+134    	; 0xb5d0 <malloc+0x152>
    b54a:	fd 01       	movw	r30, r26
    b54c:	82 81       	ldd	r24, Z+2	; 0x02
    b54e:	93 81       	ldd	r25, Z+3	; 0x03
    b550:	9c 01       	movw	r18, r24
    b552:	d9 01       	movw	r26, r18
    b554:	10 97       	sbiw	r26, 0x00	; 0
    b556:	a1 f6       	brne	.-88     	; 0xb500 <malloc+0x82>
    b558:	80 91 73 0a 	lds	r24, 0x0A73
    b55c:	90 91 74 0a 	lds	r25, 0x0A74
    b560:	89 2b       	or	r24, r25
    b562:	41 f4       	brne	.+16     	; 0xb574 <malloc+0xf6>
    b564:	80 91 e2 04 	lds	r24, 0x04E2
    b568:	90 91 e3 04 	lds	r25, 0x04E3
    b56c:	90 93 74 0a 	sts	0x0A74, r25
    b570:	80 93 73 0a 	sts	0x0A73, r24
    b574:	40 91 e4 04 	lds	r20, 0x04E4
    b578:	50 91 e5 04 	lds	r21, 0x04E5
    b57c:	41 15       	cp	r20, r1
    b57e:	51 05       	cpc	r21, r1
    b580:	41 f4       	brne	.+16     	; 0xb592 <malloc+0x114>
    b582:	4d b7       	in	r20, 0x3d	; 61
    b584:	5e b7       	in	r21, 0x3e	; 62
    b586:	80 91 e0 04 	lds	r24, 0x04E0
    b58a:	90 91 e1 04 	lds	r25, 0x04E1
    b58e:	48 1b       	sub	r20, r24
    b590:	59 0b       	sbc	r21, r25
    b592:	20 91 73 0a 	lds	r18, 0x0A73
    b596:	30 91 74 0a 	lds	r19, 0x0A74
    b59a:	24 17       	cp	r18, r20
    b59c:	35 07       	cpc	r19, r21
    b59e:	b0 f4       	brcc	.+44     	; 0xb5cc <malloc+0x14e>
    b5a0:	ca 01       	movw	r24, r20
    b5a2:	82 1b       	sub	r24, r18
    b5a4:	93 0b       	sbc	r25, r19
    b5a6:	86 17       	cp	r24, r22
    b5a8:	97 07       	cpc	r25, r23
    b5aa:	80 f0       	brcs	.+32     	; 0xb5cc <malloc+0x14e>
    b5ac:	ab 01       	movw	r20, r22
    b5ae:	4e 5f       	subi	r20, 0xFE	; 254
    b5b0:	5f 4f       	sbci	r21, 0xFF	; 255
    b5b2:	84 17       	cp	r24, r20
    b5b4:	95 07       	cpc	r25, r21
    b5b6:	50 f0       	brcs	.+20     	; 0xb5cc <malloc+0x14e>
    b5b8:	42 0f       	add	r20, r18
    b5ba:	53 1f       	adc	r21, r19
    b5bc:	50 93 74 0a 	sts	0x0A74, r21
    b5c0:	40 93 73 0a 	sts	0x0A73, r20
    b5c4:	f9 01       	movw	r30, r18
    b5c6:	61 93       	st	Z+, r22
    b5c8:	71 93       	st	Z+, r23
    b5ca:	02 c0       	rjmp	.+4      	; 0xb5d0 <malloc+0x152>
    b5cc:	e0 e0       	ldi	r30, 0x00	; 0
    b5ce:	f0 e0       	ldi	r31, 0x00	; 0
    b5d0:	cf 01       	movw	r24, r30
    b5d2:	df 91       	pop	r29
    b5d4:	cf 91       	pop	r28
    b5d6:	08 95       	ret

0000b5d8 <free>:
    b5d8:	cf 93       	push	r28
    b5da:	df 93       	push	r29
    b5dc:	00 97       	sbiw	r24, 0x00	; 0
    b5de:	09 f4       	brne	.+2      	; 0xb5e2 <free+0xa>
    b5e0:	50 c0       	rjmp	.+160    	; 0xb682 <free+0xaa>
    b5e2:	ec 01       	movw	r28, r24
    b5e4:	22 97       	sbiw	r28, 0x02	; 2
    b5e6:	1b 82       	std	Y+3, r1	; 0x03
    b5e8:	1a 82       	std	Y+2, r1	; 0x02
    b5ea:	a0 91 75 0a 	lds	r26, 0x0A75
    b5ee:	b0 91 76 0a 	lds	r27, 0x0A76
    b5f2:	10 97       	sbiw	r26, 0x00	; 0
    b5f4:	09 f1       	breq	.+66     	; 0xb638 <free+0x60>
    b5f6:	40 e0       	ldi	r20, 0x00	; 0
    b5f8:	50 e0       	ldi	r21, 0x00	; 0
    b5fa:	ac 17       	cp	r26, r28
    b5fc:	bd 07       	cpc	r27, r29
    b5fe:	08 f1       	brcs	.+66     	; 0xb642 <free+0x6a>
    b600:	bb 83       	std	Y+3, r27	; 0x03
    b602:	aa 83       	std	Y+2, r26	; 0x02
    b604:	fe 01       	movw	r30, r28
    b606:	21 91       	ld	r18, Z+
    b608:	31 91       	ld	r19, Z+
    b60a:	e2 0f       	add	r30, r18
    b60c:	f3 1f       	adc	r31, r19
    b60e:	ae 17       	cp	r26, r30
    b610:	bf 07       	cpc	r27, r31
    b612:	79 f4       	brne	.+30     	; 0xb632 <free+0x5a>
    b614:	8d 91       	ld	r24, X+
    b616:	9c 91       	ld	r25, X
    b618:	11 97       	sbiw	r26, 0x01	; 1
    b61a:	28 0f       	add	r18, r24
    b61c:	39 1f       	adc	r19, r25
    b61e:	2e 5f       	subi	r18, 0xFE	; 254
    b620:	3f 4f       	sbci	r19, 0xFF	; 255
    b622:	39 83       	std	Y+1, r19	; 0x01
    b624:	28 83       	st	Y, r18
    b626:	12 96       	adiw	r26, 0x02	; 2
    b628:	8d 91       	ld	r24, X+
    b62a:	9c 91       	ld	r25, X
    b62c:	13 97       	sbiw	r26, 0x03	; 3
    b62e:	9b 83       	std	Y+3, r25	; 0x03
    b630:	8a 83       	std	Y+2, r24	; 0x02
    b632:	41 15       	cp	r20, r1
    b634:	51 05       	cpc	r21, r1
    b636:	71 f4       	brne	.+28     	; 0xb654 <free+0x7c>
    b638:	d0 93 76 0a 	sts	0x0A76, r29
    b63c:	c0 93 75 0a 	sts	0x0A75, r28
    b640:	20 c0       	rjmp	.+64     	; 0xb682 <free+0xaa>
    b642:	12 96       	adiw	r26, 0x02	; 2
    b644:	8d 91       	ld	r24, X+
    b646:	9c 91       	ld	r25, X
    b648:	13 97       	sbiw	r26, 0x03	; 3
    b64a:	ad 01       	movw	r20, r26
    b64c:	00 97       	sbiw	r24, 0x00	; 0
    b64e:	11 f0       	breq	.+4      	; 0xb654 <free+0x7c>
    b650:	dc 01       	movw	r26, r24
    b652:	d3 cf       	rjmp	.-90     	; 0xb5fa <free+0x22>
    b654:	fa 01       	movw	r30, r20
    b656:	d3 83       	std	Z+3, r29	; 0x03
    b658:	c2 83       	std	Z+2, r28	; 0x02
    b65a:	21 91       	ld	r18, Z+
    b65c:	31 91       	ld	r19, Z+
    b65e:	e2 0f       	add	r30, r18
    b660:	f3 1f       	adc	r31, r19
    b662:	ce 17       	cp	r28, r30
    b664:	df 07       	cpc	r29, r31
    b666:	69 f4       	brne	.+26     	; 0xb682 <free+0xaa>
    b668:	88 81       	ld	r24, Y
    b66a:	99 81       	ldd	r25, Y+1	; 0x01
    b66c:	28 0f       	add	r18, r24
    b66e:	39 1f       	adc	r19, r25
    b670:	2e 5f       	subi	r18, 0xFE	; 254
    b672:	3f 4f       	sbci	r19, 0xFF	; 255
    b674:	fa 01       	movw	r30, r20
    b676:	31 83       	std	Z+1, r19	; 0x01
    b678:	20 83       	st	Z, r18
    b67a:	8a 81       	ldd	r24, Y+2	; 0x02
    b67c:	9b 81       	ldd	r25, Y+3	; 0x03
    b67e:	93 83       	std	Z+3, r25	; 0x03
    b680:	82 83       	std	Z+2, r24	; 0x02
    b682:	df 91       	pop	r29
    b684:	cf 91       	pop	r28
    b686:	08 95       	ret

0000b688 <atoi>:
    b688:	fc 01       	movw	r30, r24
    b68a:	88 27       	eor	r24, r24
    b68c:	99 27       	eor	r25, r25
    b68e:	e8 94       	clt
    b690:	21 91       	ld	r18, Z+
    b692:	20 32       	cpi	r18, 0x20	; 32
    b694:	e9 f3       	breq	.-6      	; 0xb690 <atoi+0x8>
    b696:	29 30       	cpi	r18, 0x09	; 9
    b698:	10 f0       	brcs	.+4      	; 0xb69e <atoi+0x16>
    b69a:	2e 30       	cpi	r18, 0x0E	; 14
    b69c:	c8 f3       	brcs	.-14     	; 0xb690 <atoi+0x8>
    b69e:	2b 32       	cpi	r18, 0x2B	; 43
    b6a0:	41 f0       	breq	.+16     	; 0xb6b2 <atoi+0x2a>
    b6a2:	2d 32       	cpi	r18, 0x2D	; 45
    b6a4:	39 f4       	brne	.+14     	; 0xb6b4 <atoi+0x2c>
    b6a6:	68 94       	set
    b6a8:	04 c0       	rjmp	.+8      	; 0xb6b2 <atoi+0x2a>
    b6aa:	0e 94 20 5c 	call	0xb840	; 0xb840 <__mulhi_const_10>
    b6ae:	82 0f       	add	r24, r18
    b6b0:	91 1d       	adc	r25, r1
    b6b2:	21 91       	ld	r18, Z+
    b6b4:	20 53       	subi	r18, 0x30	; 48
    b6b6:	2a 30       	cpi	r18, 0x0A	; 10
    b6b8:	c0 f3       	brcs	.-16     	; 0xb6aa <atoi+0x22>
    b6ba:	1e f4       	brtc	.+6      	; 0xb6c2 <atoi+0x3a>
    b6bc:	90 95       	com	r25
    b6be:	81 95       	neg	r24
    b6c0:	9f 4f       	sbci	r25, 0xFF	; 255
    b6c2:	08 95       	ret

0000b6c4 <strcat_P>:
    b6c4:	fb 01       	movw	r30, r22
    b6c6:	dc 01       	movw	r26, r24
    b6c8:	0d 90       	ld	r0, X+
    b6ca:	00 20       	and	r0, r0
    b6cc:	e9 f7       	brne	.-6      	; 0xb6c8 <strcat_P+0x4>
    b6ce:	11 97       	sbiw	r26, 0x01	; 1
    b6d0:	05 90       	lpm	r0, Z+
    b6d2:	0d 92       	st	X+, r0
    b6d4:	00 20       	and	r0, r0
    b6d6:	e1 f7       	brne	.-8      	; 0xb6d0 <strcat_P+0xc>
    b6d8:	08 95       	ret

0000b6da <strcpy_P>:
    b6da:	fb 01       	movw	r30, r22
    b6dc:	dc 01       	movw	r26, r24
    b6de:	05 90       	lpm	r0, Z+
    b6e0:	0d 92       	st	X+, r0
    b6e2:	00 20       	and	r0, r0
    b6e4:	e1 f7       	brne	.-8      	; 0xb6de <strcpy_P+0x4>
    b6e6:	08 95       	ret

0000b6e8 <strstr_P>:
    b6e8:	fb 01       	movw	r30, r22
    b6ea:	55 91       	lpm	r21, Z+
    b6ec:	55 23       	and	r21, r21
    b6ee:	a9 f0       	breq	.+42     	; 0xb71a <strstr_P+0x32>
    b6f0:	bf 01       	movw	r22, r30
    b6f2:	dc 01       	movw	r26, r24
    b6f4:	4d 91       	ld	r20, X+
    b6f6:	45 17       	cp	r20, r21
    b6f8:	41 11       	cpse	r20, r1
    b6fa:	e1 f7       	brne	.-8      	; 0xb6f4 <strstr_P+0xc>
    b6fc:	59 f4       	brne	.+22     	; 0xb714 <strstr_P+0x2c>
    b6fe:	cd 01       	movw	r24, r26
    b700:	05 90       	lpm	r0, Z+
    b702:	00 20       	and	r0, r0
    b704:	49 f0       	breq	.+18     	; 0xb718 <strstr_P+0x30>
    b706:	4d 91       	ld	r20, X+
    b708:	40 15       	cp	r20, r0
    b70a:	41 11       	cpse	r20, r1
    b70c:	c9 f3       	breq	.-14     	; 0xb700 <strstr_P+0x18>
    b70e:	fb 01       	movw	r30, r22
    b710:	41 11       	cpse	r20, r1
    b712:	ef cf       	rjmp	.-34     	; 0xb6f2 <strstr_P+0xa>
    b714:	81 e0       	ldi	r24, 0x01	; 1
    b716:	90 e0       	ldi	r25, 0x00	; 0
    b718:	01 97       	sbiw	r24, 0x01	; 1
    b71a:	08 95       	ret

0000b71c <strtok>:
    b71c:	41 e7       	ldi	r20, 0x71	; 113
    b71e:	5a e0       	ldi	r21, 0x0A	; 10
    b720:	0e 94 f9 5b 	call	0xb7f2	; 0xb7f2 <strtok_r>
    b724:	08 95       	ret

0000b726 <memcpy>:
    b726:	fb 01       	movw	r30, r22
    b728:	dc 01       	movw	r26, r24
    b72a:	02 c0       	rjmp	.+4      	; 0xb730 <memcpy+0xa>
    b72c:	01 90       	ld	r0, Z+
    b72e:	0d 92       	st	X+, r0
    b730:	41 50       	subi	r20, 0x01	; 1
    b732:	50 40       	sbci	r21, 0x00	; 0
    b734:	d8 f7       	brcc	.-10     	; 0xb72c <memcpy+0x6>
    b736:	08 95       	ret

0000b738 <memset>:
    b738:	dc 01       	movw	r26, r24
    b73a:	01 c0       	rjmp	.+2      	; 0xb73e <memset+0x6>
    b73c:	6d 93       	st	X+, r22
    b73e:	41 50       	subi	r20, 0x01	; 1
    b740:	50 40       	sbci	r21, 0x00	; 0
    b742:	e0 f7       	brcc	.-8      	; 0xb73c <memset+0x4>
    b744:	08 95       	ret

0000b746 <strcat>:
    b746:	fb 01       	movw	r30, r22
    b748:	dc 01       	movw	r26, r24
    b74a:	0d 90       	ld	r0, X+
    b74c:	00 20       	and	r0, r0
    b74e:	e9 f7       	brne	.-6      	; 0xb74a <strcat+0x4>
    b750:	11 97       	sbiw	r26, 0x01	; 1
    b752:	01 90       	ld	r0, Z+
    b754:	0d 92       	st	X+, r0
    b756:	00 20       	and	r0, r0
    b758:	e1 f7       	brne	.-8      	; 0xb752 <strcat+0xc>
    b75a:	08 95       	ret

0000b75c <strchr>:
    b75c:	fc 01       	movw	r30, r24
    b75e:	81 91       	ld	r24, Z+
    b760:	86 17       	cp	r24, r22
    b762:	21 f0       	breq	.+8      	; 0xb76c <strchr+0x10>
    b764:	88 23       	and	r24, r24
    b766:	d9 f7       	brne	.-10     	; 0xb75e <strchr+0x2>
    b768:	99 27       	eor	r25, r25
    b76a:	08 95       	ret
    b76c:	31 97       	sbiw	r30, 0x01	; 1
    b76e:	cf 01       	movw	r24, r30
    b770:	08 95       	ret

0000b772 <strcmp>:
    b772:	fb 01       	movw	r30, r22
    b774:	dc 01       	movw	r26, r24
    b776:	8d 91       	ld	r24, X+
    b778:	01 90       	ld	r0, Z+
    b77a:	80 19       	sub	r24, r0
    b77c:	01 10       	cpse	r0, r1
    b77e:	d9 f3       	breq	.-10     	; 0xb776 <strcmp+0x4>
    b780:	99 0b       	sbc	r25, r25
    b782:	08 95       	ret

0000b784 <strcpy>:
    b784:	fb 01       	movw	r30, r22
    b786:	dc 01       	movw	r26, r24
    b788:	01 90       	ld	r0, Z+
    b78a:	0d 92       	st	X+, r0
    b78c:	00 20       	and	r0, r0
    b78e:	e1 f7       	brne	.-8      	; 0xb788 <strcpy+0x4>
    b790:	08 95       	ret

0000b792 <strlen>:
    b792:	fc 01       	movw	r30, r24
    b794:	01 90       	ld	r0, Z+
    b796:	00 20       	and	r0, r0
    b798:	e9 f7       	brne	.-6      	; 0xb794 <strlen+0x2>
    b79a:	80 95       	com	r24
    b79c:	90 95       	com	r25
    b79e:	8e 0f       	add	r24, r30
    b7a0:	9f 1f       	adc	r25, r31
    b7a2:	08 95       	ret

0000b7a4 <strncpy>:
    b7a4:	fb 01       	movw	r30, r22
    b7a6:	dc 01       	movw	r26, r24
    b7a8:	41 50       	subi	r20, 0x01	; 1
    b7aa:	50 40       	sbci	r21, 0x00	; 0
    b7ac:	48 f0       	brcs	.+18     	; 0xb7c0 <strncpy+0x1c>
    b7ae:	01 90       	ld	r0, Z+
    b7b0:	0d 92       	st	X+, r0
    b7b2:	00 20       	and	r0, r0
    b7b4:	c9 f7       	brne	.-14     	; 0xb7a8 <strncpy+0x4>
    b7b6:	01 c0       	rjmp	.+2      	; 0xb7ba <strncpy+0x16>
    b7b8:	1d 92       	st	X+, r1
    b7ba:	41 50       	subi	r20, 0x01	; 1
    b7bc:	50 40       	sbci	r21, 0x00	; 0
    b7be:	e0 f7       	brcc	.-8      	; 0xb7b8 <strncpy+0x14>
    b7c0:	08 95       	ret

0000b7c2 <strsep>:
    b7c2:	fc 01       	movw	r30, r24
    b7c4:	a0 81       	ld	r26, Z
    b7c6:	b1 81       	ldd	r27, Z+1	; 0x01
    b7c8:	ad 01       	movw	r20, r26
    b7ca:	10 96       	adiw	r26, 0x00	; 0
    b7cc:	81 f0       	breq	.+32     	; 0xb7ee <strsep+0x2c>
    b7ce:	3d 91       	ld	r19, X+
    b7d0:	fb 01       	movw	r30, r22
    b7d2:	01 90       	ld	r0, Z+
    b7d4:	03 16       	cp	r0, r19
    b7d6:	01 10       	cpse	r0, r1
    b7d8:	e1 f7       	brne	.-8      	; 0xb7d2 <strsep+0x10>
    b7da:	c9 f7       	brne	.-14     	; 0xb7ce <strsep+0xc>
    b7dc:	00 20       	and	r0, r0
    b7de:	11 f4       	brne	.+4      	; 0xb7e4 <strsep+0x22>
    b7e0:	d0 01       	movw	r26, r0
    b7e2:	02 c0       	rjmp	.+4      	; 0xb7e8 <strsep+0x26>
    b7e4:	1e 92       	st	-X, r1
    b7e6:	11 96       	adiw	r26, 0x01	; 1
    b7e8:	fc 01       	movw	r30, r24
    b7ea:	a0 83       	st	Z, r26
    b7ec:	b1 83       	std	Z+1, r27	; 0x01
    b7ee:	ca 01       	movw	r24, r20
    b7f0:	08 95       	ret

0000b7f2 <strtok_r>:
    b7f2:	fa 01       	movw	r30, r20
    b7f4:	a1 91       	ld	r26, Z+
    b7f6:	b0 81       	ld	r27, Z
    b7f8:	00 97       	sbiw	r24, 0x00	; 0
    b7fa:	19 f4       	brne	.+6      	; 0xb802 <strtok_r+0x10>
    b7fc:	10 97       	sbiw	r26, 0x00	; 0
    b7fe:	e1 f0       	breq	.+56     	; 0xb838 <strtok_r+0x46>
    b800:	cd 01       	movw	r24, r26
    b802:	dc 01       	movw	r26, r24
    b804:	cd 01       	movw	r24, r26
    b806:	0d 90       	ld	r0, X+
    b808:	00 20       	and	r0, r0
    b80a:	11 f4       	brne	.+4      	; 0xb810 <strtok_r+0x1e>
    b80c:	c0 01       	movw	r24, r0
    b80e:	13 c0       	rjmp	.+38     	; 0xb836 <strtok_r+0x44>
    b810:	fb 01       	movw	r30, r22
    b812:	21 91       	ld	r18, Z+
    b814:	22 23       	and	r18, r18
    b816:	19 f0       	breq	.+6      	; 0xb81e <strtok_r+0x2c>
    b818:	20 15       	cp	r18, r0
    b81a:	d9 f7       	brne	.-10     	; 0xb812 <strtok_r+0x20>
    b81c:	f3 cf       	rjmp	.-26     	; 0xb804 <strtok_r+0x12>
    b81e:	fb 01       	movw	r30, r22
    b820:	21 91       	ld	r18, Z+
    b822:	20 15       	cp	r18, r0
    b824:	19 f4       	brne	.+6      	; 0xb82c <strtok_r+0x3a>
    b826:	1e 92       	st	-X, r1
    b828:	11 96       	adiw	r26, 0x01	; 1
    b82a:	06 c0       	rjmp	.+12     	; 0xb838 <strtok_r+0x46>
    b82c:	22 23       	and	r18, r18
    b82e:	c1 f7       	brne	.-16     	; 0xb820 <strtok_r+0x2e>
    b830:	0d 90       	ld	r0, X+
    b832:	00 20       	and	r0, r0
    b834:	a1 f7       	brne	.-24     	; 0xb81e <strtok_r+0x2c>
    b836:	d0 01       	movw	r26, r0
    b838:	fa 01       	movw	r30, r20
    b83a:	a1 93       	st	Z+, r26
    b83c:	b0 83       	st	Z, r27
    b83e:	08 95       	ret

0000b840 <__mulhi_const_10>:
    b840:	7a e0       	ldi	r23, 0x0A	; 10
    b842:	97 9f       	mul	r25, r23
    b844:	90 2d       	mov	r25, r0
    b846:	87 9f       	mul	r24, r23
    b848:	80 2d       	mov	r24, r0
    b84a:	91 0d       	add	r25, r1
    b84c:	11 24       	eor	r1, r1
    b84e:	08 95       	ret

0000b850 <ultoa>:
    b850:	fa 01       	movw	r30, r20
    b852:	cf 93       	push	r28
    b854:	ff 93       	push	r31
    b856:	ef 93       	push	r30
    b858:	22 30       	cpi	r18, 0x02	; 2
    b85a:	cc f0       	brlt	.+50     	; 0xb88e <ultoa+0x3e>
    b85c:	25 32       	cpi	r18, 0x25	; 37
    b85e:	bc f4       	brge	.+46     	; 0xb88e <ultoa+0x3e>
    b860:	c2 2f       	mov	r28, r18
    b862:	2c 2f       	mov	r18, r28
    b864:	33 27       	eor	r19, r19
    b866:	44 27       	eor	r20, r20
    b868:	55 27       	eor	r21, r21
    b86a:	ff 93       	push	r31
    b86c:	ef 93       	push	r30
    b86e:	0e 94 c5 59 	call	0xb38a	; 0xb38a <__udivmodsi4>
    b872:	ef 91       	pop	r30
    b874:	ff 91       	pop	r31
    b876:	60 5d       	subi	r22, 0xD0	; 208
    b878:	6a 33       	cpi	r22, 0x3A	; 58
    b87a:	0c f0       	brlt	.+2      	; 0xb87e <ultoa+0x2e>
    b87c:	69 5d       	subi	r22, 0xD9	; 217
    b87e:	61 93       	st	Z+, r22
    b880:	b9 01       	movw	r22, r18
    b882:	ca 01       	movw	r24, r20
    b884:	60 50       	subi	r22, 0x00	; 0
    b886:	70 40       	sbci	r23, 0x00	; 0
    b888:	80 40       	sbci	r24, 0x00	; 0
    b88a:	90 40       	sbci	r25, 0x00	; 0
    b88c:	51 f7       	brne	.-44     	; 0xb862 <ultoa+0x12>
    b88e:	10 82       	st	Z, r1
    b890:	8f 91       	pop	r24
    b892:	9f 91       	pop	r25
    b894:	cf 91       	pop	r28
    b896:	0c 94 f3 5e 	jmp	0xbde6	; 0xbde6 <strrev>

0000b89a <sprintf>:
    b89a:	0f 93       	push	r16
    b89c:	1f 93       	push	r17
    b89e:	df 93       	push	r29
    b8a0:	cf 93       	push	r28
    b8a2:	cd b7       	in	r28, 0x3d	; 61
    b8a4:	de b7       	in	r29, 0x3e	; 62
    b8a6:	2e 97       	sbiw	r28, 0x0e	; 14
    b8a8:	0f b6       	in	r0, 0x3f	; 63
    b8aa:	f8 94       	cli
    b8ac:	de bf       	out	0x3e, r29	; 62
    b8ae:	0f be       	out	0x3f, r0	; 63
    b8b0:	cd bf       	out	0x3d, r28	; 61
    b8b2:	0d 89       	ldd	r16, Y+21	; 0x15
    b8b4:	1e 89       	ldd	r17, Y+22	; 0x16
    b8b6:	86 e0       	ldi	r24, 0x06	; 6
    b8b8:	8c 83       	std	Y+4, r24	; 0x04
    b8ba:	1a 83       	std	Y+2, r17	; 0x02
    b8bc:	09 83       	std	Y+1, r16	; 0x01
    b8be:	8f ef       	ldi	r24, 0xFF	; 255
    b8c0:	9f e7       	ldi	r25, 0x7F	; 127
    b8c2:	9e 83       	std	Y+6, r25	; 0x06
    b8c4:	8d 83       	std	Y+5, r24	; 0x05
    b8c6:	9e 01       	movw	r18, r28
    b8c8:	27 5e       	subi	r18, 0xE7	; 231
    b8ca:	3f 4f       	sbci	r19, 0xFF	; 255
    b8cc:	ce 01       	movw	r24, r28
    b8ce:	01 96       	adiw	r24, 0x01	; 1
    b8d0:	6f 89       	ldd	r22, Y+23	; 0x17
    b8d2:	78 8d       	ldd	r23, Y+24	; 0x18
    b8d4:	a9 01       	movw	r20, r18
    b8d6:	0e 94 a7 5c 	call	0xb94e	; 0xb94e <vfprintf>
    b8da:	2f 81       	ldd	r18, Y+7	; 0x07
    b8dc:	38 85       	ldd	r19, Y+8	; 0x08
    b8de:	02 0f       	add	r16, r18
    b8e0:	13 1f       	adc	r17, r19
    b8e2:	f8 01       	movw	r30, r16
    b8e4:	10 82       	st	Z, r1
    b8e6:	2e 96       	adiw	r28, 0x0e	; 14
    b8e8:	0f b6       	in	r0, 0x3f	; 63
    b8ea:	f8 94       	cli
    b8ec:	de bf       	out	0x3e, r29	; 62
    b8ee:	0f be       	out	0x3f, r0	; 63
    b8f0:	cd bf       	out	0x3d, r28	; 61
    b8f2:	cf 91       	pop	r28
    b8f4:	df 91       	pop	r29
    b8f6:	1f 91       	pop	r17
    b8f8:	0f 91       	pop	r16
    b8fa:	08 95       	ret

0000b8fc <vsprintf>:
    b8fc:	0f 93       	push	r16
    b8fe:	1f 93       	push	r17
    b900:	df 93       	push	r29
    b902:	cf 93       	push	r28
    b904:	cd b7       	in	r28, 0x3d	; 61
    b906:	de b7       	in	r29, 0x3e	; 62
    b908:	2e 97       	sbiw	r28, 0x0e	; 14
    b90a:	0f b6       	in	r0, 0x3f	; 63
    b90c:	f8 94       	cli
    b90e:	de bf       	out	0x3e, r29	; 62
    b910:	0f be       	out	0x3f, r0	; 63
    b912:	cd bf       	out	0x3d, r28	; 61
    b914:	8c 01       	movw	r16, r24
    b916:	86 e0       	ldi	r24, 0x06	; 6
    b918:	8c 83       	std	Y+4, r24	; 0x04
    b91a:	1a 83       	std	Y+2, r17	; 0x02
    b91c:	09 83       	std	Y+1, r16	; 0x01
    b91e:	8f ef       	ldi	r24, 0xFF	; 255
    b920:	9f e7       	ldi	r25, 0x7F	; 127
    b922:	9e 83       	std	Y+6, r25	; 0x06
    b924:	8d 83       	std	Y+5, r24	; 0x05
    b926:	ce 01       	movw	r24, r28
    b928:	01 96       	adiw	r24, 0x01	; 1
    b92a:	0e 94 a7 5c 	call	0xb94e	; 0xb94e <vfprintf>
    b92e:	ef 81       	ldd	r30, Y+7	; 0x07
    b930:	f8 85       	ldd	r31, Y+8	; 0x08
    b932:	e0 0f       	add	r30, r16
    b934:	f1 1f       	adc	r31, r17
    b936:	10 82       	st	Z, r1
    b938:	2e 96       	adiw	r28, 0x0e	; 14
    b93a:	0f b6       	in	r0, 0x3f	; 63
    b93c:	f8 94       	cli
    b93e:	de bf       	out	0x3e, r29	; 62
    b940:	0f be       	out	0x3f, r0	; 63
    b942:	cd bf       	out	0x3d, r28	; 61
    b944:	cf 91       	pop	r28
    b946:	df 91       	pop	r29
    b948:	1f 91       	pop	r17
    b94a:	0f 91       	pop	r16
    b94c:	08 95       	ret

0000b94e <vfprintf>:
    b94e:	2f 92       	push	r2
    b950:	3f 92       	push	r3
    b952:	4f 92       	push	r4
    b954:	5f 92       	push	r5
    b956:	6f 92       	push	r6
    b958:	7f 92       	push	r7
    b95a:	8f 92       	push	r8
    b95c:	9f 92       	push	r9
    b95e:	af 92       	push	r10
    b960:	bf 92       	push	r11
    b962:	cf 92       	push	r12
    b964:	df 92       	push	r13
    b966:	ef 92       	push	r14
    b968:	ff 92       	push	r15
    b96a:	0f 93       	push	r16
    b96c:	1f 93       	push	r17
    b96e:	df 93       	push	r29
    b970:	cf 93       	push	r28
    b972:	cd b7       	in	r28, 0x3d	; 61
    b974:	de b7       	in	r29, 0x3e	; 62
    b976:	2b 97       	sbiw	r28, 0x0b	; 11
    b978:	0f b6       	in	r0, 0x3f	; 63
    b97a:	f8 94       	cli
    b97c:	de bf       	out	0x3e, r29	; 62
    b97e:	0f be       	out	0x3f, r0	; 63
    b980:	cd bf       	out	0x3d, r28	; 61
    b982:	3c 01       	movw	r6, r24
    b984:	2b 01       	movw	r4, r22
    b986:	5a 01       	movw	r10, r20
    b988:	fc 01       	movw	r30, r24
    b98a:	17 82       	std	Z+7, r1	; 0x07
    b98c:	16 82       	std	Z+6, r1	; 0x06
    b98e:	83 81       	ldd	r24, Z+3	; 0x03
    b990:	81 fd       	sbrc	r24, 1
    b992:	03 c0       	rjmp	.+6      	; 0xb99a <vfprintf+0x4c>
    b994:	6f ef       	ldi	r22, 0xFF	; 255
    b996:	7f ef       	ldi	r23, 0xFF	; 255
    b998:	c6 c1       	rjmp	.+908    	; 0xbd26 <vfprintf+0x3d8>
    b99a:	9a e0       	ldi	r25, 0x0A	; 10
    b99c:	89 2e       	mov	r8, r25
    b99e:	1e 01       	movw	r2, r28
    b9a0:	08 94       	sec
    b9a2:	21 1c       	adc	r2, r1
    b9a4:	31 1c       	adc	r3, r1
    b9a6:	f3 01       	movw	r30, r6
    b9a8:	23 81       	ldd	r18, Z+3	; 0x03
    b9aa:	f2 01       	movw	r30, r4
    b9ac:	23 fd       	sbrc	r18, 3
    b9ae:	85 91       	lpm	r24, Z+
    b9b0:	23 ff       	sbrs	r18, 3
    b9b2:	81 91       	ld	r24, Z+
    b9b4:	2f 01       	movw	r4, r30
    b9b6:	88 23       	and	r24, r24
    b9b8:	09 f4       	brne	.+2      	; 0xb9bc <vfprintf+0x6e>
    b9ba:	b2 c1       	rjmp	.+868    	; 0xbd20 <vfprintf+0x3d2>
    b9bc:	85 32       	cpi	r24, 0x25	; 37
    b9be:	39 f4       	brne	.+14     	; 0xb9ce <vfprintf+0x80>
    b9c0:	23 fd       	sbrc	r18, 3
    b9c2:	85 91       	lpm	r24, Z+
    b9c4:	23 ff       	sbrs	r18, 3
    b9c6:	81 91       	ld	r24, Z+
    b9c8:	2f 01       	movw	r4, r30
    b9ca:	85 32       	cpi	r24, 0x25	; 37
    b9cc:	29 f4       	brne	.+10     	; 0xb9d8 <vfprintf+0x8a>
    b9ce:	90 e0       	ldi	r25, 0x00	; 0
    b9d0:	b3 01       	movw	r22, r6
    b9d2:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    b9d6:	e7 cf       	rjmp	.-50     	; 0xb9a6 <vfprintf+0x58>
    b9d8:	98 2f       	mov	r25, r24
    b9da:	ff 24       	eor	r15, r15
    b9dc:	ee 24       	eor	r14, r14
    b9de:	99 24       	eor	r9, r9
    b9e0:	ff e1       	ldi	r31, 0x1F	; 31
    b9e2:	ff 15       	cp	r31, r15
    b9e4:	d0 f0       	brcs	.+52     	; 0xba1a <vfprintf+0xcc>
    b9e6:	9b 32       	cpi	r25, 0x2B	; 43
    b9e8:	69 f0       	breq	.+26     	; 0xba04 <vfprintf+0xb6>
    b9ea:	9c 32       	cpi	r25, 0x2C	; 44
    b9ec:	28 f4       	brcc	.+10     	; 0xb9f8 <vfprintf+0xaa>
    b9ee:	90 32       	cpi	r25, 0x20	; 32
    b9f0:	59 f0       	breq	.+22     	; 0xba08 <vfprintf+0xba>
    b9f2:	93 32       	cpi	r25, 0x23	; 35
    b9f4:	91 f4       	brne	.+36     	; 0xba1a <vfprintf+0xcc>
    b9f6:	0e c0       	rjmp	.+28     	; 0xba14 <vfprintf+0xc6>
    b9f8:	9d 32       	cpi	r25, 0x2D	; 45
    b9fa:	49 f0       	breq	.+18     	; 0xba0e <vfprintf+0xc0>
    b9fc:	90 33       	cpi	r25, 0x30	; 48
    b9fe:	69 f4       	brne	.+26     	; 0xba1a <vfprintf+0xcc>
    ba00:	41 e0       	ldi	r20, 0x01	; 1
    ba02:	24 c0       	rjmp	.+72     	; 0xba4c <vfprintf+0xfe>
    ba04:	52 e0       	ldi	r21, 0x02	; 2
    ba06:	f5 2a       	or	r15, r21
    ba08:	84 e0       	ldi	r24, 0x04	; 4
    ba0a:	f8 2a       	or	r15, r24
    ba0c:	28 c0       	rjmp	.+80     	; 0xba5e <vfprintf+0x110>
    ba0e:	98 e0       	ldi	r25, 0x08	; 8
    ba10:	f9 2a       	or	r15, r25
    ba12:	25 c0       	rjmp	.+74     	; 0xba5e <vfprintf+0x110>
    ba14:	e0 e1       	ldi	r30, 0x10	; 16
    ba16:	fe 2a       	or	r15, r30
    ba18:	22 c0       	rjmp	.+68     	; 0xba5e <vfprintf+0x110>
    ba1a:	f7 fc       	sbrc	r15, 7
    ba1c:	29 c0       	rjmp	.+82     	; 0xba70 <vfprintf+0x122>
    ba1e:	89 2f       	mov	r24, r25
    ba20:	80 53       	subi	r24, 0x30	; 48
    ba22:	8a 30       	cpi	r24, 0x0A	; 10
    ba24:	70 f4       	brcc	.+28     	; 0xba42 <vfprintf+0xf4>
    ba26:	f6 fe       	sbrs	r15, 6
    ba28:	05 c0       	rjmp	.+10     	; 0xba34 <vfprintf+0xe6>
    ba2a:	98 9c       	mul	r9, r8
    ba2c:	90 2c       	mov	r9, r0
    ba2e:	11 24       	eor	r1, r1
    ba30:	98 0e       	add	r9, r24
    ba32:	15 c0       	rjmp	.+42     	; 0xba5e <vfprintf+0x110>
    ba34:	e8 9c       	mul	r14, r8
    ba36:	e0 2c       	mov	r14, r0
    ba38:	11 24       	eor	r1, r1
    ba3a:	e8 0e       	add	r14, r24
    ba3c:	f0 e2       	ldi	r31, 0x20	; 32
    ba3e:	ff 2a       	or	r15, r31
    ba40:	0e c0       	rjmp	.+28     	; 0xba5e <vfprintf+0x110>
    ba42:	9e 32       	cpi	r25, 0x2E	; 46
    ba44:	29 f4       	brne	.+10     	; 0xba50 <vfprintf+0x102>
    ba46:	f6 fc       	sbrc	r15, 6
    ba48:	6b c1       	rjmp	.+726    	; 0xbd20 <vfprintf+0x3d2>
    ba4a:	40 e4       	ldi	r20, 0x40	; 64
    ba4c:	f4 2a       	or	r15, r20
    ba4e:	07 c0       	rjmp	.+14     	; 0xba5e <vfprintf+0x110>
    ba50:	9c 36       	cpi	r25, 0x6C	; 108
    ba52:	19 f4       	brne	.+6      	; 0xba5a <vfprintf+0x10c>
    ba54:	50 e8       	ldi	r21, 0x80	; 128
    ba56:	f5 2a       	or	r15, r21
    ba58:	02 c0       	rjmp	.+4      	; 0xba5e <vfprintf+0x110>
    ba5a:	98 36       	cpi	r25, 0x68	; 104
    ba5c:	49 f4       	brne	.+18     	; 0xba70 <vfprintf+0x122>
    ba5e:	f2 01       	movw	r30, r4
    ba60:	23 fd       	sbrc	r18, 3
    ba62:	95 91       	lpm	r25, Z+
    ba64:	23 ff       	sbrs	r18, 3
    ba66:	91 91       	ld	r25, Z+
    ba68:	2f 01       	movw	r4, r30
    ba6a:	99 23       	and	r25, r25
    ba6c:	09 f0       	breq	.+2      	; 0xba70 <vfprintf+0x122>
    ba6e:	b8 cf       	rjmp	.-144    	; 0xb9e0 <vfprintf+0x92>
    ba70:	89 2f       	mov	r24, r25
    ba72:	85 54       	subi	r24, 0x45	; 69
    ba74:	83 30       	cpi	r24, 0x03	; 3
    ba76:	18 f0       	brcs	.+6      	; 0xba7e <vfprintf+0x130>
    ba78:	80 52       	subi	r24, 0x20	; 32
    ba7a:	83 30       	cpi	r24, 0x03	; 3
    ba7c:	38 f4       	brcc	.+14     	; 0xba8c <vfprintf+0x13e>
    ba7e:	44 e0       	ldi	r20, 0x04	; 4
    ba80:	50 e0       	ldi	r21, 0x00	; 0
    ba82:	a4 0e       	add	r10, r20
    ba84:	b5 1e       	adc	r11, r21
    ba86:	5f e3       	ldi	r21, 0x3F	; 63
    ba88:	59 83       	std	Y+1, r21	; 0x01
    ba8a:	0f c0       	rjmp	.+30     	; 0xbaaa <vfprintf+0x15c>
    ba8c:	93 36       	cpi	r25, 0x63	; 99
    ba8e:	31 f0       	breq	.+12     	; 0xba9c <vfprintf+0x14e>
    ba90:	93 37       	cpi	r25, 0x73	; 115
    ba92:	79 f0       	breq	.+30     	; 0xbab2 <vfprintf+0x164>
    ba94:	93 35       	cpi	r25, 0x53	; 83
    ba96:	09 f0       	breq	.+2      	; 0xba9a <vfprintf+0x14c>
    ba98:	56 c0       	rjmp	.+172    	; 0xbb46 <vfprintf+0x1f8>
    ba9a:	20 c0       	rjmp	.+64     	; 0xbadc <vfprintf+0x18e>
    ba9c:	f5 01       	movw	r30, r10
    ba9e:	80 81       	ld	r24, Z
    baa0:	89 83       	std	Y+1, r24	; 0x01
    baa2:	42 e0       	ldi	r20, 0x02	; 2
    baa4:	50 e0       	ldi	r21, 0x00	; 0
    baa6:	a4 0e       	add	r10, r20
    baa8:	b5 1e       	adc	r11, r21
    baaa:	61 01       	movw	r12, r2
    baac:	01 e0       	ldi	r16, 0x01	; 1
    baae:	10 e0       	ldi	r17, 0x00	; 0
    bab0:	12 c0       	rjmp	.+36     	; 0xbad6 <vfprintf+0x188>
    bab2:	f5 01       	movw	r30, r10
    bab4:	c0 80       	ld	r12, Z
    bab6:	d1 80       	ldd	r13, Z+1	; 0x01
    bab8:	f6 fc       	sbrc	r15, 6
    baba:	03 c0       	rjmp	.+6      	; 0xbac2 <vfprintf+0x174>
    babc:	6f ef       	ldi	r22, 0xFF	; 255
    babe:	7f ef       	ldi	r23, 0xFF	; 255
    bac0:	02 c0       	rjmp	.+4      	; 0xbac6 <vfprintf+0x178>
    bac2:	69 2d       	mov	r22, r9
    bac4:	70 e0       	ldi	r23, 0x00	; 0
    bac6:	42 e0       	ldi	r20, 0x02	; 2
    bac8:	50 e0       	ldi	r21, 0x00	; 0
    baca:	a4 0e       	add	r10, r20
    bacc:	b5 1e       	adc	r11, r21
    bace:	c6 01       	movw	r24, r12
    bad0:	0e 94 e8 5e 	call	0xbdd0	; 0xbdd0 <strnlen>
    bad4:	8c 01       	movw	r16, r24
    bad6:	5f e7       	ldi	r21, 0x7F	; 127
    bad8:	f5 22       	and	r15, r21
    bada:	14 c0       	rjmp	.+40     	; 0xbb04 <vfprintf+0x1b6>
    badc:	f5 01       	movw	r30, r10
    bade:	c0 80       	ld	r12, Z
    bae0:	d1 80       	ldd	r13, Z+1	; 0x01
    bae2:	f6 fc       	sbrc	r15, 6
    bae4:	03 c0       	rjmp	.+6      	; 0xbaec <vfprintf+0x19e>
    bae6:	6f ef       	ldi	r22, 0xFF	; 255
    bae8:	7f ef       	ldi	r23, 0xFF	; 255
    baea:	02 c0       	rjmp	.+4      	; 0xbaf0 <vfprintf+0x1a2>
    baec:	69 2d       	mov	r22, r9
    baee:	70 e0       	ldi	r23, 0x00	; 0
    baf0:	42 e0       	ldi	r20, 0x02	; 2
    baf2:	50 e0       	ldi	r21, 0x00	; 0
    baf4:	a4 0e       	add	r10, r20
    baf6:	b5 1e       	adc	r11, r21
    baf8:	c6 01       	movw	r24, r12
    bafa:	0e 94 dd 5e 	call	0xbdba	; 0xbdba <strnlen_P>
    bafe:	8c 01       	movw	r16, r24
    bb00:	50 e8       	ldi	r21, 0x80	; 128
    bb02:	f5 2a       	or	r15, r21
    bb04:	f3 fe       	sbrs	r15, 3
    bb06:	07 c0       	rjmp	.+14     	; 0xbb16 <vfprintf+0x1c8>
    bb08:	1a c0       	rjmp	.+52     	; 0xbb3e <vfprintf+0x1f0>
    bb0a:	80 e2       	ldi	r24, 0x20	; 32
    bb0c:	90 e0       	ldi	r25, 0x00	; 0
    bb0e:	b3 01       	movw	r22, r6
    bb10:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bb14:	ea 94       	dec	r14
    bb16:	8e 2d       	mov	r24, r14
    bb18:	90 e0       	ldi	r25, 0x00	; 0
    bb1a:	08 17       	cp	r16, r24
    bb1c:	19 07       	cpc	r17, r25
    bb1e:	a8 f3       	brcs	.-22     	; 0xbb0a <vfprintf+0x1bc>
    bb20:	0e c0       	rjmp	.+28     	; 0xbb3e <vfprintf+0x1f0>
    bb22:	f6 01       	movw	r30, r12
    bb24:	f7 fc       	sbrc	r15, 7
    bb26:	85 91       	lpm	r24, Z+
    bb28:	f7 fe       	sbrs	r15, 7
    bb2a:	81 91       	ld	r24, Z+
    bb2c:	6f 01       	movw	r12, r30
    bb2e:	90 e0       	ldi	r25, 0x00	; 0
    bb30:	b3 01       	movw	r22, r6
    bb32:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bb36:	e1 10       	cpse	r14, r1
    bb38:	ea 94       	dec	r14
    bb3a:	01 50       	subi	r16, 0x01	; 1
    bb3c:	10 40       	sbci	r17, 0x00	; 0
    bb3e:	01 15       	cp	r16, r1
    bb40:	11 05       	cpc	r17, r1
    bb42:	79 f7       	brne	.-34     	; 0xbb22 <vfprintf+0x1d4>
    bb44:	ea c0       	rjmp	.+468    	; 0xbd1a <vfprintf+0x3cc>
    bb46:	94 36       	cpi	r25, 0x64	; 100
    bb48:	11 f0       	breq	.+4      	; 0xbb4e <vfprintf+0x200>
    bb4a:	99 36       	cpi	r25, 0x69	; 105
    bb4c:	69 f5       	brne	.+90     	; 0xbba8 <vfprintf+0x25a>
    bb4e:	f7 fe       	sbrs	r15, 7
    bb50:	08 c0       	rjmp	.+16     	; 0xbb62 <vfprintf+0x214>
    bb52:	f5 01       	movw	r30, r10
    bb54:	20 81       	ld	r18, Z
    bb56:	31 81       	ldd	r19, Z+1	; 0x01
    bb58:	42 81       	ldd	r20, Z+2	; 0x02
    bb5a:	53 81       	ldd	r21, Z+3	; 0x03
    bb5c:	84 e0       	ldi	r24, 0x04	; 4
    bb5e:	90 e0       	ldi	r25, 0x00	; 0
    bb60:	0a c0       	rjmp	.+20     	; 0xbb76 <vfprintf+0x228>
    bb62:	f5 01       	movw	r30, r10
    bb64:	80 81       	ld	r24, Z
    bb66:	91 81       	ldd	r25, Z+1	; 0x01
    bb68:	9c 01       	movw	r18, r24
    bb6a:	44 27       	eor	r20, r20
    bb6c:	37 fd       	sbrc	r19, 7
    bb6e:	40 95       	com	r20
    bb70:	54 2f       	mov	r21, r20
    bb72:	82 e0       	ldi	r24, 0x02	; 2
    bb74:	90 e0       	ldi	r25, 0x00	; 0
    bb76:	a8 0e       	add	r10, r24
    bb78:	b9 1e       	adc	r11, r25
    bb7a:	9f e6       	ldi	r25, 0x6F	; 111
    bb7c:	f9 22       	and	r15, r25
    bb7e:	57 ff       	sbrs	r21, 7
    bb80:	09 c0       	rjmp	.+18     	; 0xbb94 <vfprintf+0x246>
    bb82:	50 95       	com	r21
    bb84:	40 95       	com	r20
    bb86:	30 95       	com	r19
    bb88:	21 95       	neg	r18
    bb8a:	3f 4f       	sbci	r19, 0xFF	; 255
    bb8c:	4f 4f       	sbci	r20, 0xFF	; 255
    bb8e:	5f 4f       	sbci	r21, 0xFF	; 255
    bb90:	e0 e8       	ldi	r30, 0x80	; 128
    bb92:	fe 2a       	or	r15, r30
    bb94:	ca 01       	movw	r24, r20
    bb96:	b9 01       	movw	r22, r18
    bb98:	a1 01       	movw	r20, r2
    bb9a:	2a e0       	ldi	r18, 0x0A	; 10
    bb9c:	30 e0       	ldi	r19, 0x00	; 0
    bb9e:	0e 94 2f 5f 	call	0xbe5e	; 0xbe5e <__ultoa_invert>
    bba2:	d8 2e       	mov	r13, r24
    bba4:	d2 18       	sub	r13, r2
    bba6:	40 c0       	rjmp	.+128    	; 0xbc28 <vfprintf+0x2da>
    bba8:	95 37       	cpi	r25, 0x75	; 117
    bbaa:	29 f4       	brne	.+10     	; 0xbbb6 <vfprintf+0x268>
    bbac:	1f 2d       	mov	r17, r15
    bbae:	1f 7e       	andi	r17, 0xEF	; 239
    bbb0:	2a e0       	ldi	r18, 0x0A	; 10
    bbb2:	30 e0       	ldi	r19, 0x00	; 0
    bbb4:	1d c0       	rjmp	.+58     	; 0xbbf0 <vfprintf+0x2a2>
    bbb6:	1f 2d       	mov	r17, r15
    bbb8:	19 7f       	andi	r17, 0xF9	; 249
    bbba:	9f 36       	cpi	r25, 0x6F	; 111
    bbbc:	61 f0       	breq	.+24     	; 0xbbd6 <vfprintf+0x288>
    bbbe:	90 37       	cpi	r25, 0x70	; 112
    bbc0:	20 f4       	brcc	.+8      	; 0xbbca <vfprintf+0x27c>
    bbc2:	98 35       	cpi	r25, 0x58	; 88
    bbc4:	09 f0       	breq	.+2      	; 0xbbc8 <vfprintf+0x27a>
    bbc6:	ac c0       	rjmp	.+344    	; 0xbd20 <vfprintf+0x3d2>
    bbc8:	0f c0       	rjmp	.+30     	; 0xbbe8 <vfprintf+0x29a>
    bbca:	90 37       	cpi	r25, 0x70	; 112
    bbcc:	39 f0       	breq	.+14     	; 0xbbdc <vfprintf+0x28e>
    bbce:	98 37       	cpi	r25, 0x78	; 120
    bbd0:	09 f0       	breq	.+2      	; 0xbbd4 <vfprintf+0x286>
    bbd2:	a6 c0       	rjmp	.+332    	; 0xbd20 <vfprintf+0x3d2>
    bbd4:	04 c0       	rjmp	.+8      	; 0xbbde <vfprintf+0x290>
    bbd6:	28 e0       	ldi	r18, 0x08	; 8
    bbd8:	30 e0       	ldi	r19, 0x00	; 0
    bbda:	0a c0       	rjmp	.+20     	; 0xbbf0 <vfprintf+0x2a2>
    bbdc:	10 61       	ori	r17, 0x10	; 16
    bbde:	14 fd       	sbrc	r17, 4
    bbe0:	14 60       	ori	r17, 0x04	; 4
    bbe2:	20 e1       	ldi	r18, 0x10	; 16
    bbe4:	30 e0       	ldi	r19, 0x00	; 0
    bbe6:	04 c0       	rjmp	.+8      	; 0xbbf0 <vfprintf+0x2a2>
    bbe8:	14 fd       	sbrc	r17, 4
    bbea:	16 60       	ori	r17, 0x06	; 6
    bbec:	20 e1       	ldi	r18, 0x10	; 16
    bbee:	32 e0       	ldi	r19, 0x02	; 2
    bbf0:	17 ff       	sbrs	r17, 7
    bbf2:	08 c0       	rjmp	.+16     	; 0xbc04 <vfprintf+0x2b6>
    bbf4:	f5 01       	movw	r30, r10
    bbf6:	60 81       	ld	r22, Z
    bbf8:	71 81       	ldd	r23, Z+1	; 0x01
    bbfa:	82 81       	ldd	r24, Z+2	; 0x02
    bbfc:	93 81       	ldd	r25, Z+3	; 0x03
    bbfe:	44 e0       	ldi	r20, 0x04	; 4
    bc00:	50 e0       	ldi	r21, 0x00	; 0
    bc02:	08 c0       	rjmp	.+16     	; 0xbc14 <vfprintf+0x2c6>
    bc04:	f5 01       	movw	r30, r10
    bc06:	80 81       	ld	r24, Z
    bc08:	91 81       	ldd	r25, Z+1	; 0x01
    bc0a:	bc 01       	movw	r22, r24
    bc0c:	80 e0       	ldi	r24, 0x00	; 0
    bc0e:	90 e0       	ldi	r25, 0x00	; 0
    bc10:	42 e0       	ldi	r20, 0x02	; 2
    bc12:	50 e0       	ldi	r21, 0x00	; 0
    bc14:	a4 0e       	add	r10, r20
    bc16:	b5 1e       	adc	r11, r21
    bc18:	a1 01       	movw	r20, r2
    bc1a:	0e 94 2f 5f 	call	0xbe5e	; 0xbe5e <__ultoa_invert>
    bc1e:	d8 2e       	mov	r13, r24
    bc20:	d2 18       	sub	r13, r2
    bc22:	8f e7       	ldi	r24, 0x7F	; 127
    bc24:	f8 2e       	mov	r15, r24
    bc26:	f1 22       	and	r15, r17
    bc28:	f6 fe       	sbrs	r15, 6
    bc2a:	0b c0       	rjmp	.+22     	; 0xbc42 <vfprintf+0x2f4>
    bc2c:	5e ef       	ldi	r21, 0xFE	; 254
    bc2e:	f5 22       	and	r15, r21
    bc30:	d9 14       	cp	r13, r9
    bc32:	38 f4       	brcc	.+14     	; 0xbc42 <vfprintf+0x2f4>
    bc34:	f4 fe       	sbrs	r15, 4
    bc36:	07 c0       	rjmp	.+14     	; 0xbc46 <vfprintf+0x2f8>
    bc38:	f2 fc       	sbrc	r15, 2
    bc3a:	05 c0       	rjmp	.+10     	; 0xbc46 <vfprintf+0x2f8>
    bc3c:	8f ee       	ldi	r24, 0xEF	; 239
    bc3e:	f8 22       	and	r15, r24
    bc40:	02 c0       	rjmp	.+4      	; 0xbc46 <vfprintf+0x2f8>
    bc42:	1d 2d       	mov	r17, r13
    bc44:	01 c0       	rjmp	.+2      	; 0xbc48 <vfprintf+0x2fa>
    bc46:	19 2d       	mov	r17, r9
    bc48:	f4 fe       	sbrs	r15, 4
    bc4a:	0d c0       	rjmp	.+26     	; 0xbc66 <vfprintf+0x318>
    bc4c:	fe 01       	movw	r30, r28
    bc4e:	ed 0d       	add	r30, r13
    bc50:	f1 1d       	adc	r31, r1
    bc52:	80 81       	ld	r24, Z
    bc54:	80 33       	cpi	r24, 0x30	; 48
    bc56:	19 f4       	brne	.+6      	; 0xbc5e <vfprintf+0x310>
    bc58:	99 ee       	ldi	r25, 0xE9	; 233
    bc5a:	f9 22       	and	r15, r25
    bc5c:	08 c0       	rjmp	.+16     	; 0xbc6e <vfprintf+0x320>
    bc5e:	1f 5f       	subi	r17, 0xFF	; 255
    bc60:	f2 fe       	sbrs	r15, 2
    bc62:	05 c0       	rjmp	.+10     	; 0xbc6e <vfprintf+0x320>
    bc64:	03 c0       	rjmp	.+6      	; 0xbc6c <vfprintf+0x31e>
    bc66:	8f 2d       	mov	r24, r15
    bc68:	86 78       	andi	r24, 0x86	; 134
    bc6a:	09 f0       	breq	.+2      	; 0xbc6e <vfprintf+0x320>
    bc6c:	1f 5f       	subi	r17, 0xFF	; 255
    bc6e:	0f 2d       	mov	r16, r15
    bc70:	f3 fc       	sbrc	r15, 3
    bc72:	14 c0       	rjmp	.+40     	; 0xbc9c <vfprintf+0x34e>
    bc74:	f0 fe       	sbrs	r15, 0
    bc76:	0f c0       	rjmp	.+30     	; 0xbc96 <vfprintf+0x348>
    bc78:	1e 15       	cp	r17, r14
    bc7a:	10 f0       	brcs	.+4      	; 0xbc80 <vfprintf+0x332>
    bc7c:	9d 2c       	mov	r9, r13
    bc7e:	0b c0       	rjmp	.+22     	; 0xbc96 <vfprintf+0x348>
    bc80:	9d 2c       	mov	r9, r13
    bc82:	9e 0c       	add	r9, r14
    bc84:	91 1a       	sub	r9, r17
    bc86:	1e 2d       	mov	r17, r14
    bc88:	06 c0       	rjmp	.+12     	; 0xbc96 <vfprintf+0x348>
    bc8a:	80 e2       	ldi	r24, 0x20	; 32
    bc8c:	90 e0       	ldi	r25, 0x00	; 0
    bc8e:	b3 01       	movw	r22, r6
    bc90:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bc94:	1f 5f       	subi	r17, 0xFF	; 255
    bc96:	1e 15       	cp	r17, r14
    bc98:	c0 f3       	brcs	.-16     	; 0xbc8a <vfprintf+0x33c>
    bc9a:	04 c0       	rjmp	.+8      	; 0xbca4 <vfprintf+0x356>
    bc9c:	1e 15       	cp	r17, r14
    bc9e:	10 f4       	brcc	.+4      	; 0xbca4 <vfprintf+0x356>
    bca0:	e1 1a       	sub	r14, r17
    bca2:	01 c0       	rjmp	.+2      	; 0xbca6 <vfprintf+0x358>
    bca4:	ee 24       	eor	r14, r14
    bca6:	04 ff       	sbrs	r16, 4
    bca8:	0f c0       	rjmp	.+30     	; 0xbcc8 <vfprintf+0x37a>
    bcaa:	80 e3       	ldi	r24, 0x30	; 48
    bcac:	90 e0       	ldi	r25, 0x00	; 0
    bcae:	b3 01       	movw	r22, r6
    bcb0:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bcb4:	02 ff       	sbrs	r16, 2
    bcb6:	1d c0       	rjmp	.+58     	; 0xbcf2 <vfprintf+0x3a4>
    bcb8:	01 fd       	sbrc	r16, 1
    bcba:	03 c0       	rjmp	.+6      	; 0xbcc2 <vfprintf+0x374>
    bcbc:	88 e7       	ldi	r24, 0x78	; 120
    bcbe:	90 e0       	ldi	r25, 0x00	; 0
    bcc0:	0e c0       	rjmp	.+28     	; 0xbcde <vfprintf+0x390>
    bcc2:	88 e5       	ldi	r24, 0x58	; 88
    bcc4:	90 e0       	ldi	r25, 0x00	; 0
    bcc6:	0b c0       	rjmp	.+22     	; 0xbcde <vfprintf+0x390>
    bcc8:	80 2f       	mov	r24, r16
    bcca:	86 78       	andi	r24, 0x86	; 134
    bccc:	91 f0       	breq	.+36     	; 0xbcf2 <vfprintf+0x3a4>
    bcce:	01 ff       	sbrs	r16, 1
    bcd0:	02 c0       	rjmp	.+4      	; 0xbcd6 <vfprintf+0x388>
    bcd2:	8b e2       	ldi	r24, 0x2B	; 43
    bcd4:	01 c0       	rjmp	.+2      	; 0xbcd8 <vfprintf+0x38a>
    bcd6:	80 e2       	ldi	r24, 0x20	; 32
    bcd8:	f7 fc       	sbrc	r15, 7
    bcda:	8d e2       	ldi	r24, 0x2D	; 45
    bcdc:	90 e0       	ldi	r25, 0x00	; 0
    bcde:	b3 01       	movw	r22, r6
    bce0:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bce4:	06 c0       	rjmp	.+12     	; 0xbcf2 <vfprintf+0x3a4>
    bce6:	80 e3       	ldi	r24, 0x30	; 48
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	b3 01       	movw	r22, r6
    bcec:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bcf0:	9a 94       	dec	r9
    bcf2:	d9 14       	cp	r13, r9
    bcf4:	c0 f3       	brcs	.-16     	; 0xbce6 <vfprintf+0x398>
    bcf6:	da 94       	dec	r13
    bcf8:	f1 01       	movw	r30, r2
    bcfa:	ed 0d       	add	r30, r13
    bcfc:	f1 1d       	adc	r31, r1
    bcfe:	80 81       	ld	r24, Z
    bd00:	90 e0       	ldi	r25, 0x00	; 0
    bd02:	b3 01       	movw	r22, r6
    bd04:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bd08:	dd 20       	and	r13, r13
    bd0a:	a9 f7       	brne	.-22     	; 0xbcf6 <vfprintf+0x3a8>
    bd0c:	06 c0       	rjmp	.+12     	; 0xbd1a <vfprintf+0x3cc>
    bd0e:	80 e2       	ldi	r24, 0x20	; 32
    bd10:	90 e0       	ldi	r25, 0x00	; 0
    bd12:	b3 01       	movw	r22, r6
    bd14:	0e 94 03 5f 	call	0xbe06	; 0xbe06 <fputc>
    bd18:	ea 94       	dec	r14
    bd1a:	ee 20       	and	r14, r14
    bd1c:	c1 f7       	brne	.-16     	; 0xbd0e <vfprintf+0x3c0>
    bd1e:	43 ce       	rjmp	.-890    	; 0xb9a6 <vfprintf+0x58>
    bd20:	f3 01       	movw	r30, r6
    bd22:	66 81       	ldd	r22, Z+6	; 0x06
    bd24:	77 81       	ldd	r23, Z+7	; 0x07
    bd26:	cb 01       	movw	r24, r22
    bd28:	2b 96       	adiw	r28, 0x0b	; 11
    bd2a:	0f b6       	in	r0, 0x3f	; 63
    bd2c:	f8 94       	cli
    bd2e:	de bf       	out	0x3e, r29	; 62
    bd30:	0f be       	out	0x3f, r0	; 63
    bd32:	cd bf       	out	0x3d, r28	; 61
    bd34:	cf 91       	pop	r28
    bd36:	df 91       	pop	r29
    bd38:	1f 91       	pop	r17
    bd3a:	0f 91       	pop	r16
    bd3c:	ff 90       	pop	r15
    bd3e:	ef 90       	pop	r14
    bd40:	df 90       	pop	r13
    bd42:	cf 90       	pop	r12
    bd44:	bf 90       	pop	r11
    bd46:	af 90       	pop	r10
    bd48:	9f 90       	pop	r9
    bd4a:	8f 90       	pop	r8
    bd4c:	7f 90       	pop	r7
    bd4e:	6f 90       	pop	r6
    bd50:	5f 90       	pop	r5
    bd52:	4f 90       	pop	r4
    bd54:	3f 90       	pop	r3
    bd56:	2f 90       	pop	r2
    bd58:	08 95       	ret

0000bd5a <__eerd_block_m1280>:
    bd5a:	dc 01       	movw	r26, r24
    bd5c:	cb 01       	movw	r24, r22

0000bd5e <__eerd_blraw_m1280>:
    bd5e:	fc 01       	movw	r30, r24
    bd60:	f9 99       	sbic	0x1f, 1	; 31
    bd62:	fe cf       	rjmp	.-4      	; 0xbd60 <__eerd_blraw_m1280+0x2>
    bd64:	06 c0       	rjmp	.+12     	; 0xbd72 <__eerd_blraw_m1280+0x14>
    bd66:	f2 bd       	out	0x22, r31	; 34
    bd68:	e1 bd       	out	0x21, r30	; 33
    bd6a:	f8 9a       	sbi	0x1f, 0	; 31
    bd6c:	31 96       	adiw	r30, 0x01	; 1
    bd6e:	00 b4       	in	r0, 0x20	; 32
    bd70:	0d 92       	st	X+, r0
    bd72:	41 50       	subi	r20, 0x01	; 1
    bd74:	50 40       	sbci	r21, 0x00	; 0
    bd76:	b8 f7       	brcc	.-18     	; 0xbd66 <__eerd_blraw_m1280+0x8>
    bd78:	08 95       	ret

0000bd7a <__eerd_byte_m1280>:
    bd7a:	f9 99       	sbic	0x1f, 1	; 31
    bd7c:	fe cf       	rjmp	.-4      	; 0xbd7a <__eerd_byte_m1280>
    bd7e:	92 bd       	out	0x22, r25	; 34
    bd80:	81 bd       	out	0x21, r24	; 33
    bd82:	f8 9a       	sbi	0x1f, 0	; 31
    bd84:	99 27       	eor	r25, r25
    bd86:	80 b5       	in	r24, 0x20	; 32
    bd88:	08 95       	ret

0000bd8a <__eewr_block_m1280>:
    bd8a:	dc 01       	movw	r26, r24
    bd8c:	cb 01       	movw	r24, r22
    bd8e:	03 c0       	rjmp	.+6      	; 0xbd96 <__eewr_block_m1280+0xc>
    bd90:	2d 91       	ld	r18, X+
    bd92:	0e 94 d0 5e 	call	0xbda0	; 0xbda0 <__eewr_r18_m1280>
    bd96:	41 50       	subi	r20, 0x01	; 1
    bd98:	50 40       	sbci	r21, 0x00	; 0
    bd9a:	d0 f7       	brcc	.-12     	; 0xbd90 <__eewr_block_m1280+0x6>
    bd9c:	08 95       	ret

0000bd9e <__eewr_byte_m1280>:
    bd9e:	26 2f       	mov	r18, r22

0000bda0 <__eewr_r18_m1280>:
    bda0:	f9 99       	sbic	0x1f, 1	; 31
    bda2:	fe cf       	rjmp	.-4      	; 0xbda0 <__eewr_r18_m1280>
    bda4:	1f ba       	out	0x1f, r1	; 31
    bda6:	92 bd       	out	0x22, r25	; 34
    bda8:	81 bd       	out	0x21, r24	; 33
    bdaa:	20 bd       	out	0x20, r18	; 32
    bdac:	0f b6       	in	r0, 0x3f	; 63
    bdae:	f8 94       	cli
    bdb0:	fa 9a       	sbi	0x1f, 2	; 31
    bdb2:	f9 9a       	sbi	0x1f, 1	; 31
    bdb4:	0f be       	out	0x3f, r0	; 63
    bdb6:	01 96       	adiw	r24, 0x01	; 1
    bdb8:	08 95       	ret

0000bdba <strnlen_P>:
    bdba:	fc 01       	movw	r30, r24
    bdbc:	05 90       	lpm	r0, Z+
    bdbe:	61 50       	subi	r22, 0x01	; 1
    bdc0:	70 40       	sbci	r23, 0x00	; 0
    bdc2:	01 10       	cpse	r0, r1
    bdc4:	d8 f7       	brcc	.-10     	; 0xbdbc <strnlen_P+0x2>
    bdc6:	80 95       	com	r24
    bdc8:	90 95       	com	r25
    bdca:	8e 0f       	add	r24, r30
    bdcc:	9f 1f       	adc	r25, r31
    bdce:	08 95       	ret

0000bdd0 <strnlen>:
    bdd0:	fc 01       	movw	r30, r24
    bdd2:	61 50       	subi	r22, 0x01	; 1
    bdd4:	70 40       	sbci	r23, 0x00	; 0
    bdd6:	01 90       	ld	r0, Z+
    bdd8:	01 10       	cpse	r0, r1
    bdda:	d8 f7       	brcc	.-10     	; 0xbdd2 <strnlen+0x2>
    bddc:	80 95       	com	r24
    bdde:	90 95       	com	r25
    bde0:	8e 0f       	add	r24, r30
    bde2:	9f 1f       	adc	r25, r31
    bde4:	08 95       	ret

0000bde6 <strrev>:
    bde6:	dc 01       	movw	r26, r24
    bde8:	fc 01       	movw	r30, r24
    bdea:	67 2f       	mov	r22, r23
    bdec:	71 91       	ld	r23, Z+
    bdee:	77 23       	and	r23, r23
    bdf0:	e1 f7       	brne	.-8      	; 0xbdea <strrev+0x4>
    bdf2:	32 97       	sbiw	r30, 0x02	; 2
    bdf4:	04 c0       	rjmp	.+8      	; 0xbdfe <strrev+0x18>
    bdf6:	7c 91       	ld	r23, X
    bdf8:	6d 93       	st	X+, r22
    bdfa:	70 83       	st	Z, r23
    bdfc:	62 91       	ld	r22, -Z
    bdfe:	ae 17       	cp	r26, r30
    be00:	bf 07       	cpc	r27, r31
    be02:	c8 f3       	brcs	.-14     	; 0xbdf6 <strrev+0x10>
    be04:	08 95       	ret

0000be06 <fputc>:
    be06:	0f 93       	push	r16
    be08:	1f 93       	push	r17
    be0a:	cf 93       	push	r28
    be0c:	df 93       	push	r29
    be0e:	8c 01       	movw	r16, r24
    be10:	eb 01       	movw	r28, r22
    be12:	8b 81       	ldd	r24, Y+3	; 0x03
    be14:	81 ff       	sbrs	r24, 1
    be16:	1b c0       	rjmp	.+54     	; 0xbe4e <fputc+0x48>
    be18:	82 ff       	sbrs	r24, 2
    be1a:	0d c0       	rjmp	.+26     	; 0xbe36 <fputc+0x30>
    be1c:	2e 81       	ldd	r18, Y+6	; 0x06
    be1e:	3f 81       	ldd	r19, Y+7	; 0x07
    be20:	8c 81       	ldd	r24, Y+4	; 0x04
    be22:	9d 81       	ldd	r25, Y+5	; 0x05
    be24:	28 17       	cp	r18, r24
    be26:	39 07       	cpc	r19, r25
    be28:	64 f4       	brge	.+24     	; 0xbe42 <fputc+0x3c>
    be2a:	e8 81       	ld	r30, Y
    be2c:	f9 81       	ldd	r31, Y+1	; 0x01
    be2e:	01 93       	st	Z+, r16
    be30:	f9 83       	std	Y+1, r31	; 0x01
    be32:	e8 83       	st	Y, r30
    be34:	06 c0       	rjmp	.+12     	; 0xbe42 <fputc+0x3c>
    be36:	e8 85       	ldd	r30, Y+8	; 0x08
    be38:	f9 85       	ldd	r31, Y+9	; 0x09
    be3a:	80 2f       	mov	r24, r16
    be3c:	09 95       	icall
    be3e:	89 2b       	or	r24, r25
    be40:	31 f4       	brne	.+12     	; 0xbe4e <fputc+0x48>
    be42:	8e 81       	ldd	r24, Y+6	; 0x06
    be44:	9f 81       	ldd	r25, Y+7	; 0x07
    be46:	01 96       	adiw	r24, 0x01	; 1
    be48:	9f 83       	std	Y+7, r25	; 0x07
    be4a:	8e 83       	std	Y+6, r24	; 0x06
    be4c:	02 c0       	rjmp	.+4      	; 0xbe52 <fputc+0x4c>
    be4e:	0f ef       	ldi	r16, 0xFF	; 255
    be50:	1f ef       	ldi	r17, 0xFF	; 255
    be52:	c8 01       	movw	r24, r16
    be54:	df 91       	pop	r29
    be56:	cf 91       	pop	r28
    be58:	1f 91       	pop	r17
    be5a:	0f 91       	pop	r16
    be5c:	08 95       	ret

0000be5e <__ultoa_invert>:
    be5e:	fa 01       	movw	r30, r20
    be60:	aa 27       	eor	r26, r26
    be62:	28 30       	cpi	r18, 0x08	; 8
    be64:	51 f1       	breq	.+84     	; 0xbeba <__ultoa_invert+0x5c>
    be66:	20 31       	cpi	r18, 0x10	; 16
    be68:	81 f1       	breq	.+96     	; 0xbeca <__ultoa_invert+0x6c>
    be6a:	e8 94       	clt
    be6c:	6f 93       	push	r22
    be6e:	6e 7f       	andi	r22, 0xFE	; 254
    be70:	6e 5f       	subi	r22, 0xFE	; 254
    be72:	7f 4f       	sbci	r23, 0xFF	; 255
    be74:	8f 4f       	sbci	r24, 0xFF	; 255
    be76:	9f 4f       	sbci	r25, 0xFF	; 255
    be78:	af 4f       	sbci	r26, 0xFF	; 255
    be7a:	b1 e0       	ldi	r27, 0x01	; 1
    be7c:	3e d0       	rcall	.+124    	; 0xbefa <__ultoa_invert+0x9c>
    be7e:	b4 e0       	ldi	r27, 0x04	; 4
    be80:	3c d0       	rcall	.+120    	; 0xbefa <__ultoa_invert+0x9c>
    be82:	67 0f       	add	r22, r23
    be84:	78 1f       	adc	r23, r24
    be86:	89 1f       	adc	r24, r25
    be88:	9a 1f       	adc	r25, r26
    be8a:	a1 1d       	adc	r26, r1
    be8c:	68 0f       	add	r22, r24
    be8e:	79 1f       	adc	r23, r25
    be90:	8a 1f       	adc	r24, r26
    be92:	91 1d       	adc	r25, r1
    be94:	a1 1d       	adc	r26, r1
    be96:	6a 0f       	add	r22, r26
    be98:	71 1d       	adc	r23, r1
    be9a:	81 1d       	adc	r24, r1
    be9c:	91 1d       	adc	r25, r1
    be9e:	a1 1d       	adc	r26, r1
    bea0:	20 d0       	rcall	.+64     	; 0xbee2 <__ultoa_invert+0x84>
    bea2:	09 f4       	brne	.+2      	; 0xbea6 <__ultoa_invert+0x48>
    bea4:	68 94       	set
    bea6:	3f 91       	pop	r19
    bea8:	2a e0       	ldi	r18, 0x0A	; 10
    beaa:	26 9f       	mul	r18, r22
    beac:	11 24       	eor	r1, r1
    beae:	30 19       	sub	r19, r0
    beb0:	30 5d       	subi	r19, 0xD0	; 208
    beb2:	31 93       	st	Z+, r19
    beb4:	de f6       	brtc	.-74     	; 0xbe6c <__ultoa_invert+0xe>
    beb6:	cf 01       	movw	r24, r30
    beb8:	08 95       	ret
    beba:	46 2f       	mov	r20, r22
    bebc:	47 70       	andi	r20, 0x07	; 7
    bebe:	40 5d       	subi	r20, 0xD0	; 208
    bec0:	41 93       	st	Z+, r20
    bec2:	b3 e0       	ldi	r27, 0x03	; 3
    bec4:	0f d0       	rcall	.+30     	; 0xbee4 <__ultoa_invert+0x86>
    bec6:	c9 f7       	brne	.-14     	; 0xbeba <__ultoa_invert+0x5c>
    bec8:	f6 cf       	rjmp	.-20     	; 0xbeb6 <__ultoa_invert+0x58>
    beca:	46 2f       	mov	r20, r22
    becc:	4f 70       	andi	r20, 0x0F	; 15
    bece:	40 5d       	subi	r20, 0xD0	; 208
    bed0:	4a 33       	cpi	r20, 0x3A	; 58
    bed2:	18 f0       	brcs	.+6      	; 0xbeda <__ultoa_invert+0x7c>
    bed4:	49 5d       	subi	r20, 0xD9	; 217
    bed6:	31 fd       	sbrc	r19, 1
    bed8:	40 52       	subi	r20, 0x20	; 32
    beda:	41 93       	st	Z+, r20
    bedc:	02 d0       	rcall	.+4      	; 0xbee2 <__ultoa_invert+0x84>
    bede:	a9 f7       	brne	.-22     	; 0xbeca <__ultoa_invert+0x6c>
    bee0:	ea cf       	rjmp	.-44     	; 0xbeb6 <__ultoa_invert+0x58>
    bee2:	b4 e0       	ldi	r27, 0x04	; 4
    bee4:	a6 95       	lsr	r26
    bee6:	97 95       	ror	r25
    bee8:	87 95       	ror	r24
    beea:	77 95       	ror	r23
    beec:	67 95       	ror	r22
    beee:	ba 95       	dec	r27
    bef0:	c9 f7       	brne	.-14     	; 0xbee4 <__ultoa_invert+0x86>
    bef2:	00 97       	sbiw	r24, 0x00	; 0
    bef4:	61 05       	cpc	r22, r1
    bef6:	71 05       	cpc	r23, r1
    bef8:	08 95       	ret
    befa:	9b 01       	movw	r18, r22
    befc:	ac 01       	movw	r20, r24
    befe:	0a 2e       	mov	r0, r26
    bf00:	06 94       	lsr	r0
    bf02:	57 95       	ror	r21
    bf04:	47 95       	ror	r20
    bf06:	37 95       	ror	r19
    bf08:	27 95       	ror	r18
    bf0a:	ba 95       	dec	r27
    bf0c:	c9 f7       	brne	.-14     	; 0xbf00 <__ultoa_invert+0xa2>
    bf0e:	62 0f       	add	r22, r18
    bf10:	73 1f       	adc	r23, r19
    bf12:	84 1f       	adc	r24, r20
    bf14:	95 1f       	adc	r25, r21
    bf16:	a0 1d       	adc	r26, r0
    bf18:	08 95       	ret

0000bf1a <_exit>:
    bf1a:	f8 94       	cli

0000bf1c <__stop_program>:
    bf1c:	ff cf       	rjmp	.-2      	; 0xbf1c <__stop_program>
